
; +-------------------------------------------------------------------------+
; |                                                                         |
; |                            FINAL FANTASY II                             |
; |                                                                         |
; +-------------------------------------------------------------------------+
; | file: ff2j.asm                                                          |
; |                                                                         |
; | description: rom disassembly                                            |
; |                                                                         |
; | created: 9/22/2021                                                      |
; |                                                                         |
; | author: everything8215@gmail.com                                        |
; +-------------------------------------------------------------------------+

; prg-rom: 16 banks (256 kb)
; chr_rom: 0 banks (0 kb)
; mapper: 1 (nintendo mmc1)
; nmi vector: $0100
; reset vector: $FE2E
; irq vector: $FEBC

; --------------------------------------------------------------------------

; [ update character equipment ]

00/9880: 10 05     BPL $9887          ; branch if called by menu ???
00/9882: 29 7F     AND #$7F
00/9884: 4C A2 98  JMP $98A2          ; update character equipment
00/9887: 20 A2 98  JSR $98A2
00/988A: A0 1C     LDY #$1C
00/988C: B1 7A     LDA ($7A),Y
00/988E: C9 30     CMP #$30
00/9890: D0 04     BNE $9896
00/9892: A9 00     LDA #$00
00/9894: 91 7A     STA ($7A),Y
00/9896: C8        INY 
00/9897: B1 7A     LDA ($7A),Y
00/9899: C9 30     CMP #$30
00/989B: D0 04     BNE $98A1
00/989D: A9 00     LDA #$00
00/989F: 91 7A     STA ($7A),Y
00/98A1: 60        RTS 

; [ update character equipment ]

00/98A2: 85 9E     STA $9E
00/98A4: 20 48 9B  JSR $9B48          ; update character pointers
00/98A7: A9 00     LDA #$00
00/98A9: A0 26     LDY #$26
00/98AB: 91 7A     STA ($7A),Y        ; clear off-hand properties
00/98AD: C8        INY 
00/98AE: C0 29     CPY #$29
00/98B0: D0 F9     BNE $98AB
00/98B2: A0 1E     LDY #$1E
00/98B4: 91 80     STA ($80),Y
00/98B6: C8        INY 
00/98B7: C0 24     CPY #$24
00/98B9: D0 F9     BNE $98B4
00/98BB: 20 C0 BE  JSR $BEC0          ; load armor properties
00/98BE: 20 E8 BE  JSR $BEE8          ; update mod. stats
00/98C1: A0 20     LDY #$20
00/98C3: B1 7A     LDA ($7A),Y        ; save mod. strength
00/98C5: 85 6E     STA $6E
00/98C7: C8        INY 
00/98C8: B1 7A     LDA ($7A),Y        ; save mod. agility
00/98CA: 85 6F     STA $6F
00/98CC: C8        INY 
00/98CD: B1 7A     LDA ($7A),Y        ; save mod. stamina
00/98CF: 85 70     STA $70
00/98D1: A0 25     LDY #$25
00/98D3: B1 7A     LDA ($7A),Y        ; save mod. magic power
00/98D5: 85 71     STA $71
00/98D7: A9 F6     LDA #$F6           ; 0C/80F6 (weapon properties)
00/98D9: 85 64     STA $64
00/98DB: A9 80     LDA #$80
00/98DD: 85 65     STA $65
00/98DF: A9 30     LDA #$30           ; empty weapon slot: $30
00/98E1: 85 5E     STA $5E
00/98E3: A9 09     LDA #$09           ; 9 bytes each
00/98E5: 85 5F     STA $5F
00/98E7: A9 FE     LDA #$FE
00/98E9: 85 4C     STA $4C
00/98EB: A0 1C     LDY #$1C
00/98ED: B1 7A     LDA ($7A),Y        ; right hand
00/98EF: 20 2C BF  JSR $BF2C          ; load equipment properties
00/98F2: A5 6D     LDA $6D
00/98F4: 85 6C     STA $6C
00/98F6: C8        INY 
00/98F7: B1 7A     LDA ($7A),Y        ; left hand
00/98F9: 20 2C BF  JSR $BF2C          ; load equipment properties
00/98FC: A0 00     LDY #$00
00/98FE: B1 7A     LDA ($7A),Y
00/9900: 10 03     BPL $9905          ; branch if right-handed
00/9902: 20 8B 9B  JSR $9B8B          ; swap hands
00/9905: A5 6C     LDA $6C
00/9907: D0 03     BNE $990C
00/9909: 20 8B 9B  JSR $9B8B          ; swap hands
00/990C: A2 00     LDX #$00
00/990E: A0 00     LDY #$00
00/9910: 20 BA BF  JSR $BFBA
00/9913: A0 2E     LDY #$2E
00/9915: A5 4A     LDA $4A
00/9917: 91 80     STA ($80),Y        ; main hand weapon type
00/9919: A2 02     LDX #$02
00/991B: A0 01     LDY #$01
00/991D: 20 BA BF  JSR $BFBA
00/9920: A0 2F     LDY #$2F
00/9922: A5 4B     LDA $4B
00/9924: 91 80     STA ($80),Y        ; off hand weapon type
00/9926: A2 00     LDX #$00
00/9928: 20 D2 BF  JSR $BFD2
00/992B: A0 16     LDY #$16
00/992D: 91 7A     STA ($7A),Y
00/992F: A0 18     LDY #$18
00/9931: 91 80     STA ($80),Y
00/9933: A5 6D     LDA $6D
00/9935: F0 0D     BEQ $9944
00/9937: A2 01     LDX #$01
00/9939: 20 D2 BF  JSR $BFD2
00/993C: A0 26     LDY #$26
00/993E: 91 7A     STA ($7A),Y
00/9940: A0 1E     LDY #$1E
00/9942: 91 80     STA ($80),Y        ; off hand hit mult.
00/9944: A5 6E     LDA $6E            ; mod. strength
00/9946: 18        CLC 
00/9947: 65 4C     ADC $4C
00/9949: 20 84 9B  JSR $9B84          ; max 99
00/994C: A0 17     LDY #$17
00/994E: 91 7A     STA ($7A),Y
00/9950: A0 19     LDY #$19
00/9952: 91 80     STA ($80),Y
00/9954: A5 6D     LDA $6D
00/9956: F0 11     BEQ $9969
00/9958: A5 6E     LDA $6E
00/995A: 4A        LSR 
00/995B: 18        CLC 
00/995C: 65 4D     ADC $4D
00/995E: 20 84 9B  JSR $9B84          ; max 99
00/9961: A0 27     LDY #$27
00/9963: 91 7A     STA ($7A),Y
00/9965: A0 1F     LDY #$1F
00/9967: 91 80     STA ($80),Y
00/9969: A5 6D     LDA $6D
00/996B: 05 6C     ORA $6C
00/996D: F0 35     BEQ $99A4
00/996F: A5 6D     LDA $6D
00/9971: F0 21     BEQ $9994
00/9973: A5 6E     LDA $6E
00/9975: 4A        LSR 
00/9976: 4A        LSR 
00/9977: 18        CLC 
00/9978: 65 4E     ADC $4E
00/997A: A0 18     LDY #$18
00/997C: 91 7A     STA ($7A),Y
00/997E: A0 1A     LDY #$1A
00/9980: 91 80     STA ($80),Y
00/9982: A5 6E     LDA $6E
00/9984: 4A        LSR 
00/9985: 4A        LSR 
00/9986: 4A        LSR 
00/9987: 18        CLC 
00/9988: 65 4F     ADC $4F
00/998A: A0 28     LDY #$28
00/998C: 91 7A     STA ($7A),Y
00/998E: A0 20     LDY #$20
00/9990: 91 80     STA ($80),Y
00/9992: D0 27     BNE $99BB
00/9994: A5 6E     LDA $6E
00/9996: 4A        LSR 
00/9997: 18        CLC 
00/9998: 65 4E     ADC $4E
00/999A: A0 18     LDY #$18
00/999C: 91 7A     STA ($7A),Y
00/999E: A0 1A     LDY #$1A
00/99A0: 91 80     STA ($80),Y
00/99A2: D0 17     BNE $99BB
00/99A4: A0 00     LDY #$00
00/99A6: B1 7E     LDA ($7E),Y
00/99A8: 0A        ASL 
00/99A9: 0A        ASL 
00/99AA: 0A        ASL 
00/99AB: 85 48     STA $48
00/99AD: A5 6E     LDA $6E
00/99AF: 4A        LSR 
00/99B0: 18        CLC 
00/99B1: 65 48     ADC $48
00/99B3: A0 18     LDY #$18
00/99B5: 91 7A     STA ($7A),Y
00/99B7: A0 1A     LDY #$1A
00/99B9: 91 80     STA ($80),Y
00/99BB: A2 00     LDX #$00
00/99BD: A0 1B     LDY #$1B
00/99BF: 20 DD BF  JSR $BFDD
00/99C2: A5 6D     LDA $6D
00/99C4: F0 07     BEQ $99CD
00/99C6: A2 01     LDX #$01
00/99C8: A0 21     LDY #$21
00/99CA: 20 DD BF  JSR $BFDD
00/99CD: A5 6C     LDA $6C
00/99CF: 48        PHA 
00/99D0: A5 6D     LDA $6D
00/99D2: 48        PHA 
00/99D3: 20 C0 BE  JSR $BEC0          ; load armor properties
00/99D6: 68        PLA 
00/99D7: 85 6D     STA $6D
00/99D9: 68        PLA 
00/99DA: 85 6C     STA $6C
00/99DC: A0 00     LDY #$00
00/99DE: 18        CLC 
00/99DF: B1 44     LDA ($44),Y
00/99E1: 71 46     ADC ($46),Y
00/99E3: 71 48     ADC ($48),Y
00/99E5: A0 29     LDY #$29
00/99E7: 91 7A     STA ($7A),Y
00/99E9: A0 02     LDY #$02
00/99EB: 91 80     STA ($80),Y
00/99ED: A0 30     LDY #$30
00/99EF: B1 7E     LDA ($7E),Y
00/99F1: AA        TAX 
00/99F2: E8        INX 
00/99F3: 8A        TXA 
00/99F4: A0 2A     LDY #$2A
00/99F6: 91 7A     STA ($7A),Y
00/99F8: A0 00     LDY #$00
00/99FA: 91 80     STA ($80),Y
00/99FC: A5 50     LDA $50
00/99FE: 85 00     STA $00
00/9A00: A5 5C     LDA $5C
00/9A02: 85 02     STA $02
00/9A04: E6 02     INC $02
00/9A06: A9 00     LDA #$00
00/9A08: 85 01     STA $01
00/9A0A: 85 03     STA $03
00/9A0C: 20 98 FC  JSR $FC98          ; multiply (16-bit)
00/9A0F: A5 04     LDA $04
00/9A11: 85 56     STA $56
00/9A13: A5 05     LDA $05
00/9A15: 85 57     STA $57
00/9A17: A5 6D     LDA $6D
00/9A19: F0 20     BEQ $9A3B
00/9A1B: A5 51     LDA $51
00/9A1D: 85 00     STA $00
00/9A1F: A5 5D     LDA $5D
00/9A21: 85 02     STA $02
00/9A23: E6 02     INC $02
00/9A25: A9 00     LDA #$00
00/9A27: 85 01     STA $01
00/9A29: 85 03     STA $03
00/9A2B: 20 98 FC  JSR $FC98          ; multiply (16-bit)
00/9A2E: 18        CLC 
00/9A2F: A5 56     LDA $56
00/9A31: 65 04     ADC $04
00/9A33: 85 56     STA $56
00/9A35: A5 57     LDA $57
00/9A37: 65 05     ADC $05
00/9A39: 85 57     STA $57
00/9A3B: 18        CLC 
00/9A3C: A5 56     LDA $56
00/9A3E: 65 6F     ADC $6F
00/9A40: 85 56     STA $56
00/9A42: A5 57     LDA $57
00/9A44: 69 00     ADC #$00
00/9A46: 85 57     STA $57
00/9A48: A0 01     LDY #$01
00/9A4A: 18        CLC 
00/9A4B: B1 44     LDA ($44),Y
00/9A4D: 71 46     ADC ($46),Y
00/9A4F: 71 48     ADC ($48),Y
00/9A51: 85 58     STA $58
00/9A53: A9 00     LDA #$00
00/9A55: 69 00     ADC #$00
00/9A57: 85 59     STA $59
00/9A59: 38        SEC 
00/9A5A: A5 56     LDA $56
00/9A5C: E5 58     SBC $58
00/9A5E: 85 56     STA $56
00/9A60: A5 57     LDA $57
00/9A62: E5 59     SBC $59
00/9A64: 85 57     STA $57
00/9A66: B0 04     BCS $9A6C
00/9A68: A9 00     LDA #$00
00/9A6A: 85 56     STA $56
00/9A6C: A0 2B     LDY #$2B
00/9A6E: A5 56     LDA $56
00/9A70: 20 84 9B  JSR $9B84          ; max 99
00/9A73: 91 7A     STA ($7A),Y
00/9A75: A0 01     LDY #$01
00/9A77: 91 80     STA ($80),Y
00/9A79: A0 32     LDY #$32
00/9A7B: B1 7E     LDA ($7E),Y
00/9A7D: AA        TAX 
00/9A7E: E8        INX 
00/9A7F: 8A        TXA 
00/9A80: A0 2C     LDY #$2C
00/9A82: 91 7A     STA ($7A),Y
00/9A84: A0 03     LDY #$03
00/9A86: 91 80     STA ($80),Y
00/9A88: A9 00     LDA #$00
00/9A8A: 85 4D     STA $4D
00/9A8C: 18        CLC 
00/9A8D: A5 70     LDA $70
00/9A8F: 65 71     ADC $71
00/9A91: 85 4C     STA $4C
00/9A93: 46 4D     LSR $4D
00/9A95: 46 4C     LSR $4C
00/9A97: 18        CLC 
00/9A98: A0 05     LDY #$05
00/9A9A: B1 44     LDA ($44),Y
00/9A9C: 71 46     ADC ($46),Y
00/9A9E: 71 48     ADC ($48),Y
00/9AA0: 85 4E     STA $4E
00/9AA2: A9 00     LDA #$00
00/9AA4: 69 00     ADC #$00
00/9AA6: 85 4F     STA $4F
00/9AA8: 18        CLC 
00/9AA9: A5 4C     LDA $4C
00/9AAB: 65 4E     ADC $4E
00/9AAD: 85 4C     STA $4C
00/9AAF: A5 4D     LDA $4D
00/9AB1: 65 4F     ADC $4F
00/9AB3: 85 4D     STA $4D
00/9AB5: A5 4D     LDA $4D
00/9AB7: F0 04     BEQ $9ABD
00/9AB9: A9 63     LDA #$63
00/9ABB: 85 4C     STA $4C
00/9ABD: A0 2D     LDY #$2D
00/9ABF: A5 4C     LDA $4C
00/9AC1: 20 84 9B  JSR $9B84          ; max 99
00/9AC4: 91 7A     STA ($7A),Y
00/9AC6: A0 04     LDY #$04
00/9AC8: 91 80     STA ($80),Y
00/9ACA: A0 03     LDY #$03
00/9ACC: B1 44     LDA ($44),Y
00/9ACE: 11 46     ORA ($46),Y
00/9AD0: 11 48     ORA ($48),Y
00/9AD2: 85 4C     STA $4C
00/9AD4: A5 6C     LDA $6C
00/9AD6: F0 0A     BEQ $9AE2
00/9AD8: C9 0A     CMP #$0A
00/9ADA: B0 06     BCS $9AE2
00/9ADC: A5 4C     LDA $4C
00/9ADE: 05 54     ORA $54
00/9AE0: 85 4C     STA $4C
00/9AE2: A5 6D     LDA $6D
00/9AE4: F0 0A     BEQ $9AF0
00/9AE6: C9 0A     CMP #$0A
00/9AE8: B0 06     BCS $9AF0
00/9AEA: A5 4C     LDA $4C
00/9AEC: 05 55     ORA $55
00/9AEE: 85 4C     STA $4C
00/9AF0: A0 2E     LDY #$2E
00/9AF2: A5 4C     LDA $4C
00/9AF4: 91 7A     STA ($7A),Y
00/9AF6: A0 05     LDY #$05
00/9AF8: 91 80     STA ($80),Y
00/9AFA: A0 02     LDY #$02
00/9AFC: 18        CLC 
00/9AFD: B1 44     LDA ($44),Y
00/9AFF: 71 46     ADC ($46),Y
00/9B01: 71 48     ADC ($48),Y
00/9B03: 85 4C     STA $4C
00/9B05: A9 00     LDA #$00
00/9B07: 69 00     ADC #$00
00/9B09: 85 4D     STA $4D
00/9B0B: 18        CLC 
00/9B0C: A5 52     LDA $52
00/9B0E: 65 53     ADC $53
00/9B10: 85 4E     STA $4E
00/9B12: A9 00     LDA #$00
00/9B14: 69 00     ADC #$00
00/9B16: 85 4F     STA $4F
00/9B18: 18        CLC 
00/9B19: A5 4C     LDA $4C
00/9B1B: 65 4E     ADC $4E
00/9B1D: 85 4C     STA $4C
00/9B1F: A5 4D     LDA $4D
00/9B21: 65 4F     ADC $4F
00/9B23: 85 4D     STA $4D
00/9B25: A5 4D     LDA $4D
00/9B27: F0 04     BEQ $9B2D
00/9B29: A9 FF     LDA #$FF
00/9B2B: 85 4C     STA $4C
00/9B2D: A0 2F     LDY #$2F
00/9B2F: A5 4C     LDA $4C
00/9B31: 91 7A     STA ($7A),Y
00/9B33: A0 24     LDY #$24
00/9B35: 91 80     STA ($80),Y
00/9B37: A0 23     LDY #$23
00/9B39: B1 7A     LDA ($7A),Y
00/9B3B: A0 12     LDY #$12
00/9B3D: 91 80     STA ($80),Y
00/9B3F: A0 24     LDY #$24
00/9B41: B1 7A     LDA ($7A),Y
00/9B43: A0 13     LDY #$13
00/9B45: 91 80     STA ($80),Y
00/9B47: 60        RTS 

; [ update character pointers ]

00/9B48: 20 7B 9B  JSR $9B7B          ; get character offset
00/9B4B: 18        CLC 
00/9B4C: 69 00     ADC #$00
00/9B4E: 85 7A     STA $7A
00/9B50: A9 00     LDA #$00
00/9B52: 69 61     ADC #$61           ; $6100 (character properties 1)
00/9B54: 85 7B     STA $7B
00/9B56: 20 7B 9B  JSR $9B7B          ; get character offset
00/9B59: 18        CLC 
00/9B5A: 69 00     ADC #$00
00/9B5C: 85 7E     STA $7E
00/9B5E: A9 00     LDA #$00
00/9B60: 69 62     ADC #$62           ; $6200 (character properties 1)
00/9B62: 85 7F     STA $7F
00/9B64: A5 9E     LDA $9E
00/9B66: 0A        ASL 
00/9B67: 0A        ASL 
00/9B68: 0A        ASL 
00/9B69: 0A        ASL 
00/9B6A: 85 80     STA $80
00/9B6C: 0A        ASL 
00/9B6D: 18        CLC 
00/9B6E: 65 80     ADC $80
00/9B70: 69 7A     ADC #$7A           ; $7D7A (battle stats, 48 bytes each)
00/9B72: 85 80     STA $80
00/9B74: A9 00     LDA #$00
00/9B76: 69 7D     ADC #$7D
00/9B78: 85 81     STA $81
00/9B7A: 60        RTS 

; [ get character offset ]

00/9B7B: A5 9E     LDA $9E
00/9B7D: 0A        ASL 
00/9B7E: 0A        ASL 
00/9B7F: 0A        ASL 
00/9B80: 0A        ASL 
00/9B81: 0A        ASL 
00/9B82: 0A        ASL 
00/9B83: 60        RTS 

; [ max 99 ]

; same as 05/AA3A

00/9B84: C9 64     CMP #$64
00/9B86: 90 02     BCC $9B8A
00/9B88: A9 63     LDA #$63
00/9B8A: 60        RTS 

; [ swap hands ]

00/9B8B: A5 44     LDA $44
00/9B8D: 48        PHA 
00/9B8E: A5 45     LDA $45
00/9B90: 48        PHA 
00/9B91: A5 46     LDA $46
00/9B93: 85 44     STA $44
00/9B95: A5 47     LDA $47
00/9B97: 85 45     STA $45
00/9B99: 68        PLA 
00/9B9A: 85 47     STA $47
00/9B9C: 68        PLA 
00/9B9D: 85 46     STA $46
00/9B9F: A5 6C     LDA $6C
00/9BA1: 48        PHA 
00/9BA2: A5 6D     LDA $6D
00/9BA4: 85 6C     STA $6C
00/9BA6: 68        PLA 
00/9BA7: 85 6D     STA $6D
00/9BA9: 60        RTS 

; stale code (now at 0C/9BAD)
00/9BAA: D0 20     BNE $9BCC
00/9BAC: 85 53     STA $53
00/9BAE: 85 54     STA $54
00/9BB0: A0 00     LDY #$00
00/9BB2: B1 66     LDA ($66),Y
00/9BB4: 8D 47 02  STA $0247
00/9BB7: 85 56     STA $56
00/9BB9: C8        INY 
00/9BBA: B1 66     LDA ($66),Y
00/9BBC: 8D 44 02  STA $0244
00/9BBF: 85 55     STA $55
00/9BC1: A9 40     LDA #$40
00/9BC3: 85 64     STA $64
00/9BC5: A9 02     LDA #$02
00/9BC7: 85 65     STA $65
00/9BC9: 20 FF 9C  JSR $9CFF
00/9BCC: 20 E4 FA  JSR $FAE4
00/9BCF: AD BA 7C  LDA $7CBA
00/9BD2: F0 03     BEQ $9BD7
00/9BD4: 20 F2 9E  JSR $9EF2
00/9BD7: 20 46 FD  JSR $FD46
00/9BDA: 20 34 FC  JSR $FC34
00/9BDD: 20 E4 FA  JSR $FAE4
00/9BE0: 20 BC 9C  JSR $9CBC
00/9BE3: AD 34 00  LDA $0034
00/9BE6: F0 EF     BEQ $9BD7
00/9BE8: 20 46 FD  JSR $FD46
00/9BEB: A5 5D     LDA $5D
00/9BED: F0 27     BEQ $9C16
00/9BEF: AD 34 00  LDA $0034
00/9BF2: C9 80     CMP #$80
00/9BF4: D0 10     BNE $9C06
00/9BF6: E6 53     INC $53
00/9BF8: A5 53     LDA $53
00/9BFA: C5 5D     CMP $5D
00/9BFC: D0 05     BNE $9C03
00/9BFE: A9 00     LDA #$00
; end of stale code

; --------------------------------------------------------------------------

00/9C00: 4C 52 9D  JMP $9D52          ; init map
00/9C03: 4C A5 9C  JMP $9CA5          ; init world map
00/9C06: 4C C3 9C  JMP $9CC3          ; load map palette
00/9C09: 4C 51 9C  JMP $9C51          ; init sram

; [ load guest character properties ]

00/9C0C: A5 61     LDA $61
00/9C0E: 38        SEC 
00/9C0F: E9 04     SBC #$04
00/9C11: 0A        ASL 
00/9C12: AA        TAX 
00/9C13: BD 45 9C  LDA $9C45,X
00/9C16: 85 80     STA $80
00/9C18: BD 46 9C  LDA $9C46,X
00/9C1B: 85 81     STA $81
00/9C1D: A0 3F     LDY #$3F
00/9C1F: B1 80     LDA ($80),Y
00/9C21: 99 C0 61  STA $61C0,Y
00/9C24: 88        DEY 
00/9C25: 10 F8     BPL $9C1F
00/9C27: A0 40     LDY #$40
00/9C29: B1 80     LDA ($80),Y
00/9C2B: 99 80 62  STA $6280,Y
00/9C2E: C8        INY 
00/9C2F: C0 76     CPY #$76
00/9C31: 90 F6     BCC $9C29
00/9C33: A5 61     LDA $61
00/9C35: C9 09     CMP #$09
00/9C37: D0 0B     BNE $9C44
00/9C39: A2 05     LDX #$05
00/9C3B: BD 76 62  LDA $6276,X
00/9C3E: 9D C2 61  STA $61C2,X
00/9C41: CA        DEX 
00/9C42: 10 F7     BPL $9C3B
00/9C44: 60        RTS 

; pointers to guest character properties
00/9C45: 9100 9180 9200 9280 9300 9380

; [ init sram ]

00/9C51: A2 1F     LDX #$1F
00/9C53: BD E0 8A  LDA $8AE0,X
00/9C56: 9D 00 60  STA $6000,X
00/9C59: BD C0 8A  LDA $8AC0,X        ; event switches
00/9C5C: 9D 40 60  STA $6040,X
00/9C5F: A9 00     LDA #$00
00/9C61: 9D 80 60  STA $6080,X        ; clear keywords
00/9C64: 9D 60 60  STA $6060,X        ; clear inventory
00/9C67: A9 FF     LDA #$FF
00/9C69: 9D 20 60  STA $6020,X        ; reset treasure switches
00/9C6C: CA        DEX 
00/9C6D: 10 E4     BPL $9C53
00/9C6F: A2 3F     LDX #$3F
00/9C71: BD 80 8F  LDA $8F80,X        ; character properties 1
00/9C74: 9D 00 61  STA $6100,X
00/9C77: BD 00 90  LDA $9000,X
00/9C7A: 9D 40 61  STA $6140,X
00/9C7D: BD 80 90  LDA $9080,X
00/9C80: 9D 80 61  STA $6180,X
00/9C83: BD 80 8F  LDA $8F80,X
00/9C86: 9D C0 61  STA $61C0,X
00/9C89: BD C0 8F  LDA $8FC0,X        ; character properties 2
00/9C8C: 9D 00 62  STA $6200,X
00/9C8F: BD 40 90  LDA $9040,X
00/9C92: 9D 40 62  STA $6240,X
00/9C95: BD C0 90  LDA $90C0,X
00/9C98: 9D 80 62  STA $6280,X
00/9C9B: BD C0 8F  LDA $8FC0,X
00/9C9E: 9D C0 62  STA $62C0,X
00/9CA1: CA        DEX 
00/9CA2: 10 CD     BPL $9C71
00/9CA4: 60        RTS 

; [ init world map ]

00/9CA5: A2 00     LDX #$00
00/9CA7: BD 00 80  LDA $8000,X
00/9CAA: 9D 00 04  STA $0400,X
00/9CAD: BD 00 81  LDA $8100,X
00/9CB0: 9D 00 05  STA $0500,X
00/9CB3: BD 00 82  LDA $8200,X
00/9CB6: 9D 00 06  STA $0600,X
00/9CB9: BD 00 83  LDA $8300,X
00/9CBC: 9D 00 07  STA $0700,X
00/9CBF: E8        INX 
00/9CC0: D0 E5     BNE $9CA7
00/9CC2: 60        RTS 

; [ load map palette ]

00/9CC3: A2 1F     LDX #$1F
00/9CC5: BD 80 83  LDA $8380,X        ; load generic map palette
00/9CC8: 9D C0 03  STA $03C0,X
00/9CCB: CA        DEX 
00/9CCC: 10 F7     BPL $9CC5
00/9CCE: A2 00     LDX #$00
00/9CD0: BD 01 61  LDA $6101,X
00/9CD3: 29 E0     AND #$E0
00/9CD5: F0 07     BEQ $9CDE          ; branch if not dead, stone, or toad
00/9CD7: 8A        TXA 
00/9CD8: 18        CLC 
00/9CD9: 69 40     ADC #$40           ; find first valid character
00/9CDB: AA        TAX 
00/9CDC: D0 F2     BNE $9CD0
00/9CDE: BD 00 61  LDA $6100,X        ; character id
00/9CE1: 29 0F     AND #$0F
00/9CE3: 0A        ASL 
00/9CE4: AA        TAX 
00/9CE5: BD A0 83  LDA $83A0,X        ; map character palette
00/9CE8: 8D D2 03  STA $03D2          ; copy one color to sprite palette 0 and 1
00/9CEB: BD A1 83  LDA $83A1,X
00/9CEE: 8D D6 03  STA $03D6
00/9CF1: A5 2D     LDA $2D
00/9CF3: 4A        LSR 
00/9CF4: B0 01     BCS $9CF7          ; branch if not on world map
00/9CF6: 60        RTS 
00/9CF7: A5 48     LDA $48            ; map id
00/9CF9: 4A        LSR 
00/9CFA: 4A        LSR 
00/9CFB: 4A        LSR 
00/9CFC: 4A        LSR 
00/9CFD: 09 A0     ORA #$A0           ; 00/A000 (map properties)
00/9CFF: 85 81     STA $81
00/9D01: A5 48     LDA $48
00/9D03: 0A        ASL 
00/9D04: 0A        ASL 
00/9D05: 0A        ASL 
00/9D06: 0A        ASL 
00/9D07: 85 80     STA $80
00/9D09: A0 01     LDY #$01           ; map properties, byte 1
00/9D0B: A2 01     LDX #$01           ; bg palette 0
00/9D0D: 20 3C 9D  JSR $9D3C          ; load palette colors
00/9D10: A0 02     LDY #$02           ; map properties, byte 2
00/9D12: A2 05     LDX #$05           ; bg palette 1
00/9D14: 20 3C 9D  JSR $9D3C          ; load palette colors
00/9D17: A0 03     LDY #$03           ; map properties, byte 3
00/9D19: A2 09     LDX #$09           ; bg palette 2
00/9D1B: 20 3C 9D  JSR $9D3C          ; load palette colors
00/9D1E: A0 04     LDY #$04           ; map properties, byte 4
00/9D20: A2 19     LDX #$19           ; sprite palette 2
00/9D22: 20 3C 9D  JSR $9D3C          ; load palette colors
00/9D25: A0 05     LDY #$05           ; map properties, byte 5
00/9D27: A2 1D     LDX #$1D           ; sprite palette 3
00/9D29: 20 3C 9D  JSR $9D3C          ; load palette colors
00/9D2C: A9 00     LDA #$00
00/9D2E: 8D CD 03  STA $03CD          ; bg palette 3 is menu window
00/9D31: A9 02     LDA #$02
00/9D33: 8D CE 03  STA $03CE
00/9D36: A9 30     LDA #$30
00/9D38: 8D CF 03  STA $03CF
00/9D3B: 60        RTS 

; [ load palette colors ]

00/9D3C: B1 80     LDA ($80),Y
00/9D3E: A8        TAY 
00/9D3F: B9 00 8E  LDA $8E00,Y
00/9D42: 9D C0 03  STA $03C0,X
00/9D45: B9 80 8E  LDA $8E80,Y
00/9D48: 9D C1 03  STA $03C1,X
00/9D4B: B9 00 8F  LDA $8F00,Y
00/9D4E: 9D C2 03  STA $03C2,X
00/9D51: 60        RTS 

; [ init map ]

00/9D52: A5 48     LDA $48            ; map id
00/9D54: 4A        LSR 
00/9D55: 4A        LSR 
00/9D56: 4A        LSR 
00/9D57: 4A        LSR 
00/9D58: 09 A0     ORA #$A0           ; 00/A000 (map properties)
00/9D5A: 85 81     STA $81
00/9D5C: A5 48     LDA $48
00/9D5E: 0A        ASL 
00/9D5F: 0A        ASL 
00/9D60: 0A        ASL 
00/9D61: 0A        ASL 
00/9D62: 85 80     STA $80
00/9D64: A0 0F     LDY #$0F
00/9D66: B1 80     LDA ($80),Y        ; copy map properties to buffer
00/9D68: 99 80 07  STA $0780,Y
00/9D6B: 88        DEY 
00/9D6C: 10 F8     BPL $9D66
00/9D6E: 20 3B 9E  JSR $9E3B          ; load map properties
00/9D71: A9 80     LDA #$80
00/9D73: 85 61     STA $61
00/9D75: A9 A0     LDA #$A0
00/9D77: 85 62     STA $62
00/9D79: A9 B0     LDA #$B0
00/9D7B: 85 63     STA $63
00/9D7D: A9 C0     LDA #$C0
00/9D7F: 85 64     STA $64
00/9D81: A9 D0     LDA #$D0
00/9D83: 85 65     STA $65
00/9D85: A9 E0     LDA #$E0
00/9D87: 85 66     STA $66
00/9D89: A9 F0     LDA #$F0
00/9D8B: 85 67     STA $67
00/9D8D: A9 00     LDA #$00           ; $7000
00/9D8F: 85 88     STA $88
00/9D91: 85 80     STA $80
00/9D93: A9 70     LDA #$70
00/9D95: 85 81     STA $81
00/9D97: A4 88     LDY $88
00/9D99: BE 00 74  LDX $7400,Y        ; decompressed bg tilemap
00/9D9C: A0 00     LDY #$00
00/9D9E: BD 00 78  LDA $7800,X        ; top left tile
00/9DA1: 91 80     STA ($80),Y
00/9DA3: C8        INY 
00/9DA4: BD 80 78  LDA $7880,X        ; top right tile
00/9DA7: 91 80     STA ($80),Y
00/9DA9: A0 20     LDY #$20
00/9DAB: BD 00 79  LDA $7900,X        ; bottom left tile
00/9DAE: 91 80     STA ($80),Y
00/9DB0: C8        INY 
00/9DB1: BD 80 79  LDA $7980,X        ; bottom right tile
00/9DB4: 91 80     STA ($80),Y
00/9DB6: A5 80     LDA $80
00/9DB8: 18        CLC 
00/9DB9: 69 02     ADC #$02           ; next 32x32 tile
00/9DBB: 85 80     STA $80
00/9DBD: 29 1F     AND #$1F
00/9DBF: D0 0B     BNE $9DCC
00/9DC1: A5 80     LDA $80
00/9DC3: 18        CLC 
00/9DC4: 69 20     ADC #$20           ; next row
00/9DC6: 85 80     STA $80
00/9DC8: 90 02     BCC $9DCC
00/9DCA: E6 81     INC $81
00/9DCC: E6 88     INC $88
00/9DCE: D0 C7     BNE $9D97
00/9DD0: A9 00     LDA #$00           ; $7000
00/9DD2: 85 80     STA $80
00/9DD4: 85 88     STA $88
00/9DD6: A8        TAY 
00/9DD7: A9 70     LDA #$70
00/9DD9: 85 81     STA $81
00/9DDB: B1 80     LDA ($80),Y
00/9DDD: C9 39     CMP #$39
00/9DDF: 90 05     BCC $9DE6          ; branch if not a trigger
00/9DE1: 20 24 9F  JSR $9F24          ; init trigger
00/9DE4: 91 80     STA ($80),Y
00/9DE6: C8        INY                ; next tile
00/9DE7: D0 F2     BNE $9DDB
00/9DE9: E6 81     INC $81
00/9DEB: A5 81     LDA $81
00/9DED: C9 74     CMP #$74           ; loop through $73FF
00/9DEF: 90 EA     BCC $9DDB
00/9DF1: AD 80 07  LDA $0780          ; npc properties id
00/9DF4: 29 7F     AND #$7F
00/9DF6: C9 40     CMP #$40
00/9DF8: 90 1B     BCC $9E15
00/9DFA: 29 3F     AND #$3F
00/9DFC: 85 80     STA $80
00/9DFE: 0A        ASL 
00/9DFF: 65 80     ADC $80
00/9E01: 85 80     STA $80
00/9E03: A9 BE     LDA #$BE           ; 00/BE00 (single npc properties)
00/9E05: 85 81     STA $81
00/9E07: A0 02     LDY #$02           ; only load 3 bytes (1 npc)
00/9E09: A9 00     LDA #$00
00/9E0B: A2 24     LDX #$24           ; clear npc data
00/9E0D: 9D 80 07  STA $0780,X
00/9E10: CA        DEX 
00/9E11: 10 FA     BPL $9E0D
00/9E13: 30 1D     BMI $9E32
00/9E15: 0A        ASL 
00/9E16: 0A        ASL 
00/9E17: 85 80     STA $80
00/9E19: A2 00     LDX #$00
00/9E1B: 86 81     STX $81
00/9E1D: 0A        ASL 
00/9E1E: 26 81     ROL $81
00/9E20: 0A        ASL 
00/9E21: 26 81     ROL $81
00/9E23: 0A        ASL 
00/9E24: 26 81     ROL $81
00/9E26: 65 80     ADC $80
00/9E28: 85 80     STA $80
00/9E2A: A5 81     LDA $81
00/9E2C: 69 B5     ADC #$B5           ; 00/B500 (multi npc properties)
00/9E2E: 85 81     STA $81
00/9E30: A0 23     LDY #$23           ; load 12 npcs
00/9E32: B1 80     LDA ($80),Y
00/9E34: 99 80 07  STA $0780,Y
00/9E37: 88        DEY 
00/9E38: 10 F8     BPL $9E32
00/9E3A: 60        RTS 

; [ load map properties ]

00/9E3B: AD 80 07  LDA $0780
00/9E3E: 29 80     AND #$80
00/9E40: 85 49     STA $49
00/9E42: A2 00     LDX #$00
00/9E44: BD 00 8B  LDA $8B00,X        ; tile properties
00/9E47: 9D 00 04  STA $0400,X
00/9E4A: E8        INX 
00/9E4B: D0 F7     BNE $9E44
00/9E4D: A6 48     LDX $48
00/9E4F: BD 00 B3  LDA $B300,X        ; tileset id
00/9E52: 4A        LSR 
00/9E53: A2 3F     LDX #$3F
00/9E55: B0 3B     BCS $9E92          ; branch if interior
; exterior
00/9E57: BD 00 84  LDA $8400,X        ; 16x16 tileset
00/9E5A: 9D 00 05  STA $0500,X
00/9E5D: BD 40 84  LDA $8440,X
00/9E60: 9D 80 05  STA $0580,X
00/9E63: BD 80 84  LDA $8480,X
00/9E66: 9D 00 06  STA $0600,X
00/9E69: BD C0 84  LDA $84C0,X
00/9E6C: 9D 80 06  STA $0680,X
00/9E6F: BD 00 87  LDA $8700,X        ; 32x32 tileset
00/9E72: 9D 00 78  STA $7800,X
00/9E75: BD 40 87  LDA $8740,X
00/9E78: 9D 80 78  STA $7880,X
00/9E7B: BD 80 87  LDA $8780,X
00/9E7E: 9D 00 79  STA $7900,X
00/9E81: BD C0 87  LDA $87C0,X
00/9E84: 9D 80 79  STA $7980,X
00/9E87: BD 00 8A  LDA $8A00,X        ; attribute table
00/9E8A: 9D 00 07  STA $0700,X
00/9E8D: CA        DEX 
00/9E8E: 10 C7     BPL $9E57
00/9E90: 30 39     BMI $9ECB
; interior
00/9E92: BD 00 85  LDA $8500,X
00/9E95: 9D 00 05  STA $0500,X
00/9E98: BD 40 85  LDA $8540,X
00/9E9B: 9D 80 05  STA $0580,X
00/9E9E: BD 80 85  LDA $8580,X
00/9EA1: 9D 00 06  STA $0600,X
00/9EA4: BD C0 85  LDA $85C0,X
00/9EA7: 9D 80 06  STA $0680,X
00/9EAA: BD 00 88  LDA $8800,X
00/9EAD: 9D 00 78  STA $7800,X
00/9EB0: BD 40 88  LDA $8840,X
00/9EB3: 9D 80 78  STA $7880,X
00/9EB6: BD 80 88  LDA $8880,X
00/9EB9: 9D 00 79  STA $7900,X
00/9EBC: BD C0 88  LDA $88C0,X
00/9EBF: 9D 80 79  STA $7980,X
00/9EC2: BD 40 8A  LDA $8A40,X
00/9EC5: 9D 00 07  STA $0700,X
00/9EC8: CA        DEX 
00/9EC9: 10 C7     BPL $9E92
; common tiles
00/9ECB: A2 3F     LDX #$3F
00/9ECD: BD 00 86  LDA $8600,X
00/9ED0: 9D 40 05  STA $0540,X
00/9ED3: BD 40 86  LDA $8640,X
00/9ED6: 9D C0 05  STA $05C0,X
00/9ED9: BD 80 86  LDA $8680,X
00/9EDC: 9D 40 06  STA $0640,X
00/9EDF: BD C0 86  LDA $86C0,X
00/9EE2: 9D C0 06  STA $06C0,X
00/9EE5: BD 00 89  LDA $8900,X
00/9EE8: 9D 40 78  STA $7840,X
00/9EEB: BD 40 89  LDA $8940,X
00/9EEE: 9D C0 78  STA $78C0,X
00/9EF1: BD 80 89  LDA $8980,X
00/9EF4: 9D 40 79  STA $7940,X
00/9EF7: BD C0 89  LDA $89C0,X
00/9EFA: 9D C0 79  STA $79C0,X
00/9EFD: BD 80 8A  LDA $8A80,X
00/9F00: 9D 40 07  STA $0740,X
00/9F03: CA        DEX 
00/9F04: 10 C7     BPL $9ECD
00/9F06: AD 86 07  LDA $0786
00/9F09: 8D 4D 04  STA $044D          ; tile $26 trigger id
00/9F0C: 8D 6F 04  STA $046F          ; tile $37 trigger id
00/9F0F: A6 48     LDX $48
00/9F11: BD 00 B0  LDA $B000,X        ; 00/B000 (map fill tile)
00/9F14: 4A        LSR 
00/9F15: 4A        LSR 
00/9F16: 4A        LSR 
00/9F17: 4A        LSR 
00/9F18: 4A        LSR 
00/9F19: AA        TAX 
00/9F1A: BD C2 83  LDA $83C2,X        ; fill tile attributes
00/9F1D: 8D 38 07  STA $0738
00/9F20: 8D 16 07  STA $0716
00/9F23: 60        RTS 

; [ init trigger ]

00/9F24: 38        SEC 
00/9F25: E9 39     SBC #$39
00/9F27: 0A        ASL 
00/9F28: AA        TAX 
00/9F29: BD 36 9F  LDA $9F36,X
00/9F2C: 85 84     STA $84
00/9F2E: BD 37 9F  LDA $9F37,X
00/9F31: 85 85     STA $85
00/9F33: 6C 84 00  JMP ($0084)

; trigger init jump table
00/9F36: 9F44 9F73 9F7F 9F8B 9F97 9FA3 9FAF

; $39: treasure chest ($40-$4F)
00/9F44: 20 BE 9F  JSR $9FBE          ; get next trigger id
00/9F47: 48        PHA 
00/9F48: 29 07     AND #$07
00/9F4A: AA        TAX 
00/9F4B: BD 6B 9F  LDA $9F6B,X        ; bit mask
00/9F4E: 85 84     STA $84
00/9F50: 68        PLA 
00/9F51: 48        PHA 
00/9F52: 4A        LSR 
00/9F53: 4A        LSR 
00/9F54: 4A        LSR 
00/9F55: AA        TAX 
00/9F56: BD 20 60  LDA $6020,X        ; check treasure switch
00/9F59: 25 84     AND $84
00/9F5B: D0 04     BNE $9F61
00/9F5D: 68        PLA 
00/9F5E: A9 7F     LDA #$7F
00/9F60: 60        RTS 
00/9F61: 68        PLA 
00/9F62: A6 61     LDX $61
00/9F64: E6 61     INC $61
00/9F66: E6 61     INC $61
00/9F68: 4C B8 9F  JMP $9FB8

; bit masks
00/9F6B: 01 02 04 08 10 20 40 80

; $3A: (tile $50-$57)
00/9F73: 20 BE 9F  JSR $9FBE          ; get next trigger id
00/9F76: A6 62     LDX $62
00/9F78: E6 62     INC $62
00/9F7A: E6 62     INC $62
00/9F7C: 4C B8 9F  JMP $9FB8
; $3B: (tile $58-$5F)
00/9F7F: 20 BE 9F  JSR $9FBE          ; get next trigger id
00/9F82: A6 63     LDX $63
00/9F84: E6 63     INC $63
00/9F86: E6 63     INC $63
00/9F88: 4C B8 9F  JMP $9FB8
; $3C: (tile $60-$6F)
00/9F8B: 20 BE 9F  JSR $9FBE          ; get next trigger id
00/9F8E: A6 64     LDX $64
00/9F90: E6 64     INC $64
00/9F92: E6 64     INC $64
00/9F94: 4C B8 9F  JMP $9FB8
; $3D: (tile $68-$6F)
00/9F97: 20 BE 9F  JSR $9FBE          ; get next trigger id
00/9F9A: A6 65     LDX $65
00/9F9C: E6 65     INC $65
00/9F9E: E6 65     INC $65
00/9FA0: 4C B8 9F  JMP $9FB8
; $3E: (tile $70-$77)
00/9FA3: 20 BE 9F  JSR $9FBE          ; get next trigger id
00/9FA6: A6 66     LDX $66
00/9FA8: E6 66     INC $66
00/9FAA: E6 66     INC $66
00/9FAC: 4C B8 9F  JMP $9FB8
; $3F: (tile $78-$7F)
00/9FAF: 20 BE 9F  JSR $9FBE          ; get next trigger id
00/9FB2: A6 67     LDX $67
00/9FB4: E6 67     INC $67
00/9FB6: E6 67     INC $67
00/9FB8: 9D 01 04  STA $0401,X        ; set trigger id
00/9FBB: 8A        TXA 
00/9FBC: 4A        LSR 
00/9FBD: 60        RTS 

; [ get next trigger id ]

00/9FBE: A6 88     LDX $88
00/9FC0: E6 88     INC $88
00/9FC2: BD 87 07  LDA $0787,X        ; up to 8 triggers/treasures per map
00/9FC5: 60        RTS 

; stale code
00/9FC6: -- 50     DEC $50
00/9FC7: A5 53     LDA $53
00/9FC9: 85 5E     STA $5E
00/9FCB: A5 54     LDA $54
00/9FCD: 85 5F     STA $5F
00/9FCF: 4C 93 9F  JMP $9F93
00/9FD2: C6 51     DEC $51
00/9FD4: C6 50     DEC $50
00/9FD6: A5 5E     LDA $5E
00/9FD8: C5 53     CMP $53
00/9FDA: D0 15     BNE $9FF1
00/9FDC: A5 5F     LDA $5F
00/9FDE: C5 54     CMP $54
00/9FE0: D0 0F     BNE $9FF1
00/9FE2: 20 3E A1  JSR $A13E
00/9FE5: A5 61     LDA $61
00/9FE7: F0 06     BEQ $9FEF
00/9FE9: 20 B4 A2  JSR $A2B4
00/9FEC: 4C 93 9F  JMP $9F93
00/9FEF: F0 22     BEQ $A013
00/9FF1: 20 58 A0  JSR $A058
00/9FF4: A5 61     LDA $61
00/9FF6: F0 06     BEQ $9FFE
00/9FF8: 20 B4 A2  JSR $A2B4
00/9FFB: 4C 93 9F  JMP $9F93
00/9FFE: -- C6 9E  JMP $9EC6

; --------------------------------------------------------------------------

; [ load armor properties ]

00/BEC0: A9 00     LDA #$00           ; 0C/8000 (armor properties)
00/BEC2: 85 64     STA $64
00/BEC4: A9 80     LDA #$80
00/BEC6: 85 65     STA $65
00/BEC8: A9 70     LDA #$70           ; empty armor slot: $70
00/BECA: 85 5E     STA $5E
00/BECC: A9 06     LDA #$06           ; 6 bytes each
00/BECE: 85 5F     STA $5F
00/BED0: A9 FE     LDA #$FE
00/BED2: 85 4C     STA $4C
00/BED4: A0 19     LDY #$19
00/BED6: B1 7A     LDA ($7A),Y        ; helmet
00/BED8: 20 2C BF  JSR $BF2C          ; load equipment properties
00/BEDB: C8        INY 
00/BEDC: B1 7A     LDA ($7A),Y        ; armor
00/BEDE: 20 2C BF  JSR $BF2C          ; load equipment properties
00/BEE1: C8        INY 
00/BEE2: B1 7A     LDA ($7A),Y        ; gloves
00/BEE4: 20 2C BF  JSR $BF2C          ; load equipment properties
00/BEE7: 60        RTS 

; [ update mod. stats ]

00/BEE8: A0 10     LDY #$10
00/BEEA: B1 7A     LDA ($7A),Y        ; base stat
00/BEEC: 48        PHA 
00/BEED: 98        TYA 
00/BEEE: 18        CLC 
00/BEEF: 69 10     ADC #$10
00/BEF1: A8        TAY 
00/BEF2: 68        PLA 
00/BEF3: 91 7A     STA ($7A),Y        ; set mod. stat
00/BEF5: C8        INY 
00/BEF6: 98        TYA 
00/BEF7: 38        SEC 
00/BEF8: E9 10     SBC #$10           ; next stat
00/BEFA: A8        TAY 
00/BEFB: C0 15     CPY #$15
00/BEFD: D0 EB     BNE $BEEA
00/BEFF: A2 00     LDX #$00
00/BF01: B5 44     LDA $44,X          ; pointer to equipment properties buffer
00/BF03: 85 5E     STA $5E
00/BF05: B5 45     LDA $45,X
00/BF07: 85 5F     STA $5F
00/BF09: 20 13 BF  JSR $BF13          ; apply armor stat boost
00/BF0C: E8        INX 
00/BF0D: E8        INX 
00/BF0E: E0 06     CPX #$06
00/BF10: D0 EF     BNE $BF01
00/BF12: 60        RTS 

; [ apply armor stat boost ]

00/BF13: A0 04     LDY #$04
00/BF15: B1 5E     LDA ($5E),Y        ; stat to boost
00/BF17: 30 12     BMI $BF2B          ; branch if no boost
00/BF19: 18        CLC 
00/BF1A: 69 10     ADC #$10
00/BF1C: A8        TAY 
00/BF1D: B1 7A     LDA ($7A),Y        ; boost stat by 10 (doesn't stack)
00/BF1F: 18        CLC 
00/BF20: 69 0A     ADC #$0A
00/BF22: 48        PHA 
00/BF23: 98        TYA 
00/BF24: 18        CLC 
00/BF25: 69 10     ADC #$10
00/BF27: A8        TAY 
00/BF28: 68        PLA 
00/BF29: 91 7A     STA ($7A),Y
00/BF2B: 60        RTS 

; [ load equipment properties ]

; +$44: pointers to data buffer slots at $7610
;  $4C: data buffer slot id (increment by 2 each item)
; +$64: equipment properties offset (bank 0C)
;  $5E: empty equipment slot id ($30 or $70)
;  $5F: size of equipment data

00/BF2C: D0 0E     BNE $BF3C
00/BF2E: 18        CLC 
00/BF2F: 65 5E     ADC $5E
00/BF31: C9 70     CMP #$70
00/BF33: D0 05     BNE $BF3A
00/BF35: 38        SEC 
00/BF36: E9 01     SBC #$01
00/BF38: D0 02     BNE $BF3C
00/BF3A: 91 7A     STA ($7A),Y
00/BF3C: 85 6D     STA $6D
00/BF3E: A5 5E     LDA $5E
00/BF40: C9 30     CMP #$30
00/BF42: F0 07     BEQ $BF4B
00/BF44: 18        CLC 
00/BF45: A5 6D     LDA $6D
00/BF47: 69 01     ADC #$01
00/BF49: 85 6D     STA $6D
00/BF4B: A5 6D     LDA $6D
00/BF4D: 38        SEC 
00/BF4E: E5 5E     SBC $5E
00/BF50: 85 6D     STA $6D
00/BF52: 85 00     STA $00
00/BF54: A5 5F     LDA $5F
00/BF56: 85 02     STA $02
00/BF58: A9 00     LDA #$00
00/BF5A: 85 01     STA $01
00/BF5C: 85 03     STA $03
00/BF5E: 20 98 FC  JSR $FC98          ; multiply (16-bit)
00/BF61: 98        TYA 
00/BF62: 48        PHA 
00/BF63: 18        CLC 
00/BF64: A5 04     LDA $04
00/BF66: 6D 64 00  ADC $0064
00/BF69: 85 00     STA $00
00/BF6B: A5 05     LDA $05
00/BF6D: 6D 65 00  ADC $0065
00/BF70: 85 01     STA $01
00/BF72: A5 5E     LDA $5E
00/BF74: C9 70     CMP #$70
00/BF76: D0 04     BNE $BF7C
00/BF78: A0 06     LDY #$06
00/BF7A: D0 02     BNE $BF7E
00/BF7C: A0 0A     LDY #$0A
00/BF7E: 20 E6 FB  JSR $FBE6
00/BF81: A6 4C     LDX $4C
00/BF83: E8        INX 
00/BF84: E8        INX 
00/BF85: 8A        TXA 
00/BF86: 0A        ASL 
00/BF87: 85 04     STA $04
00/BF89: 0A        ASL 
00/BF8A: 0A        ASL 
00/BF8B: 18        CLC 
00/BF8C: 65 04     ADC $04
00/BF8E: 85 04     STA $04
00/BF90: A9 00     LDA #$00           ; $7610
00/BF92: 85 05     STA $05
00/BF94: 18        CLC 
00/BF95: A5 04     LDA $04
00/BF97: 69 10     ADC #$10
00/BF99: 85 04     STA $04
00/BF9B: A5 05     LDA $05
00/BF9D: 69 76     ADC #$76
00/BF9F: 85 05     STA $05
00/BFA1: A0 00     LDY #$00
00/BFA3: B9 00 76  LDA $7600,Y        ; copy 16 bytes to buffer
00/BFA6: 91 04     STA ($04),Y
00/BFA8: C8        INY 
00/BFA9: C0 10     CPY #$10
00/BFAB: D0 F6     BNE $BFA3
00/BFAD: A5 04     LDA $04
00/BFAF: 95 44     STA $44,X
00/BFB1: A5 05     LDA $05
00/BFB3: 95 45     STA $45,X
00/BFB5: 86 4C     STX $4C
00/BFB7: 68        PLA 
00/BFB8: A8        TAY 
00/BFB9: 60        RTS 

; [  ]

00/BFBA: B5 44     LDA $44,X
00/BFBC: 85 48     STA $48
00/BFBE: B5 45     LDA $45,X
00/BFC0: 85 49     STA $49
00/BFC2: 98        TYA 
00/BFC3: AA        TAX 
00/BFC4: A0 00     LDY #$00
00/BFC6: B1 48     LDA ($48),Y
00/BFC8: 95 4A     STA $4A,X
00/BFCA: E8        INX 
00/BFCB: E8        INX 
00/BFCC: C8        INY 
00/BFCD: C0 09     CPY #$09
00/BFCF: D0 F5     BNE $BFC6
00/BFD1: 60        RTS 

; [  ]

00/BFD2: B5 4A     LDA $4A,X
00/BFD4: 0A        ASL 
00/BFD5: A8        TAY 
00/BFD6: B1 7E     LDA ($7E),Y
00/BFD8: 69 01     ADC #$01
00/BFDA: 95 5C     STA $5C,X
00/BFDC: 60        RTS 

; [  ]

00/BFDD: 8A        TXA 
00/BFDE: 18        CLC 
00/BFDF: 69 06     ADC #$06
00/BFE1: 85 62     STA $62
00/BFE3: B5 54     LDA $54,X
00/BFE5: 91 80     STA ($80),Y
00/BFE7: C8        INY 
00/BFE8: E8        INX 
00/BFE9: E8        INX 
00/BFEA: E4 62     CPX $62
00/BFEC: D0 F5     BNE $BFE3
00/BFEE: 60        RTS 

; stale data (same as 0C/BFF5)
00/BFEF:                                              D8
00/BFF0: 5A 94 86 94 41 9D 75 9F 86 94 41 9D 75 9F 9F 9F

; --------------------------------------------------------------------------

; [ decompress world tilemap (minimap) ]

01/BFB0: A5 41     LDA $41            ; map row
01/BFB2: 0A        ASL 
01/BFB3: AA        TAX 
01/BFB4: 90 0D     BCC $BFC3
01/BFB6: BD 00 81  LDA $8100,X
01/BFB9: 85 80     STA $80
01/BFBB: BD 01 81  LDA $8101,X
01/BFBE: 85 81     STA $81
01/BFC0: 4C CD BF  JMP $BFCD
01/BFC3: BD 00 80  LDA $8000,X
01/BFC6: 85 80     STA $80
01/BFC8: BD 01 80  LDA $8001,X
01/BFCB: 85 81     STA $81
01/BFCD: A0 00     LDY #$00
01/BFCF: A2 00     LDX #$00
; start of loop
01/BFD1: B1 80     LDA ($80),Y
01/BFD3: 10 1D     BPL $BFF2
01/BFD5: C9 FF     CMP #$FF
01/BFD7: F0 26     BEQ $BFFF          ; terminator
01/BFD9: 29 7F     AND #$7F
01/BFDB: 85 82     STA $82            ; tile index
01/BFDD: E6 80     INC $80
01/BFDF: D0 02     BNE $BFE3
01/BFE1: E6 81     INC $81
01/BFE3: B1 80     LDA ($80),Y        ; run length
01/BFE5: A8        TAY 
01/BFE6: 88        DEY 
01/BFE7: A5 82     LDA $82
01/BFE9: 9D 00 06  STA $0600,X
01/BFEC: E8        INX 
01/BFED: 88        DEY 
01/BFEE: D0 F9     BNE $BFE9
01/BFF0: A0 00     LDY #$00
01/BFF2: 9D 00 06  STA $0600,X        ; single tile
01/BFF5: E8        INX 
01/BFF6: E6 80     INC $80
01/BFF8: D0 D7     BNE $BFD1
01/BFFA: E6 81     INC $81
01/BFFC: 4C D1 BF  JMP $BFD1
01/BFFF: 60        RTS 

; --------------------------------------------------------------------------

03/A000: 4C 06 A0  JMP $A006          ; execute event command
03/A003: 4C 35 A0  JMP $A035          ; execute object command

; [ execute event command ]

03/A006: A5 6C     LDA $6C
03/A008: 38        SEC 
03/A009: E9 01     SBC #$01
03/A00B: 0A        ASL 
03/A00C: AA        TAX 
03/A00D: BD 27 A0  LDA $A027,X
03/A010: 85 80     STA $80
03/A012: BD 28 A0  LDA $A028,X
03/A015: 85 81     STA $81
03/A017: A9 00     LDA #$00
03/A019: 85 24     STA $24
03/A01B: 85 25     STA $25
03/A01D: 85 23     STA $23
03/A01F: 85 22     STA $22
03/A021: 85 20     STA $20
03/A023: 6C 80 00  JMP ($0080)

; unused object command
03/A026: 60        RTS 

; event jump table (starts at type 1)
03/A027: A06C A4F5 A46B A0E3 A71B A62F A059

; [ execute object command ]

03/A035: 8A        TXA 
03/A036: 0A        ASL 
03/A037: AA        TAX 
03/A038: BD 45 A0  LDA $A045,X
03/A03B: 85 80     STA $80
03/A03D: BD 46 A0  LDA $A046,X
03/A040: 85 81     STA $81
03/A042: 6C 80 00  JMP ($0080)

; object command jump table
03/A045: A27D A111 A7B3 A026 A6D8 A026 AF4A B26F
03/A055: AF79 A5B8

; [ event type 7:  ]

03/A059: A9 00     LDA #$00           ; no event
03/A05B: 85 6C     STA $6C
03/A05D: AD BF 62  LDA $62BF
03/A060: 85 45     STA $45
03/A062: A9 80     LDA #$80
03/A064: 85 44     STA $44
03/A066: A2 00     LDX #$00
03/A068: 20 03 A0  JSR $A003
03/A06B: 60        RTS 

; [ event type 1: event script ]

03/A06C: A5 70     LDA $70
03/A06E: C9 C0     CMP #$C0
03/A070: B0 03     BCS $A075
03/A072: 4C 48 AD  JMP $AD48
03/A075: C9 D0     CMP #$D0
03/A077: B0 03     BCS $A07C
03/A079: 4C 7F A0  JMP $A07F
03/A07C: 4C F7 B4  JMP $B4F7
; $C0-$CF: player commands
03/A07F: A5 17     LDA $17
03/A081: F0 05     BEQ $A088
03/A083: C6 17     DEC $17
03/A085: 4C 95 A0  JMP $A095
03/A088: A5 72     LDA $72
03/A08A: 18        CLC 
03/A08B: 69 01     ADC #$01
03/A08D: 85 72     STA $72
03/A08F: A5 73     LDA $73
03/A091: 69 00     ADC #$00
03/A093: 85 73     STA $73
03/A095: A5 70     LDA $70
03/A097: 29 0F     AND #$0F
03/A099: C9 04     CMP #$04
03/A09B: B0 07     BCS $A0A4
; $C0-$C3: press direction button
03/A09D: AA        TAX 
03/A09E: BD DF A0  LDA $A0DF,X        ; press button
03/A0A1: 85 20     STA $20
03/A0A3: 60        RTS 
; $C4-$C7: change facing direction
03/A0A4: C9 08     CMP #$08
03/A0A6: B0 09     BCS $A0B1
03/A0A8: 29 03     AND #$03
03/A0AA: AA        TAX 
03/A0AB: BD DF A0  LDA $A0DF,X
03/A0AE: 85 33     STA $33
03/A0B0: 60        RTS 
; $C8: press A button
03/A0B1: C9 08     CMP #$08
03/A0B3: D0 03     BNE $A0B8
03/A0B5: E6 24     INC $24
03/A0B7: 60        RTS 
; $C9: press B button
03/A0B8: C9 09     CMP #$09
03/A0BA: D0 03     BNE $A0BF
03/A0BC: E6 25     INC $25
03/A0BE: 60        RTS 
; $CA: press start button
03/A0BF: C9 0A     CMP #$0A
03/A0C1: D0 03     BNE $A0C6
03/A0C3: E6 23     INC $23
03/A0C5: 60        RTS 
; $CB: press select button
03/A0C6: C9 0B     CMP #$0B
03/A0C8: D0 03     BNE $A0CD
03/A0CA: E6 22     INC $22
03/A0CC: 60        RTS 
; $CC: no effect
03/A0CD: C9 0C     CMP #$0C
03/A0CF: D0 00     BNE $A0D1
; $CD: no effect
03/A0D1: C9 0D     CMP #$0D
03/A0D3: D0 00     BNE $A0D5
; $CE: no effect
03/A0D5: C9 0E     CMP #$0E
03/A0D7: D0 01     BNE $A0DA
03/A0D9: 60        RTS 
; $CF: stop moving
03/A0DA: A9 00     LDA #$00           ; clear buttons pressed
03/A0DC: 85 20     STA $20
03/A0DE: 60        RTS 

; directions (right, left, down, up)
03/A0DF: 01 02 04 08

; [ event type 4: update ferry movement ]

; move left and then down to get to ferry destination

03/A0E3: A2 01     LDX #$01           ; right
03/A0E5: A5 27     LDA $27            ; world map left position
03/A0E7: 18        CLC 
03/A0E8: 69 07     ADC #$07
03/A0EA: CD FC 62  CMP $62FC          ; ferry destination x position
03/A0ED: D0 15     BNE $A104          ; branch if not at destination x position
03/A0EF: A2 08     LDX #$08           ; up
03/A0F1: A5 28     LDA $28            ; world map top position
03/A0F3: 18        CLC 
03/A0F4: 69 07     ADC #$07
03/A0F6: CD FD 62  CMP $62FD          ; ferry destination y position
03/A0F9: D0 10     BNE $A10B          ; branch if not at destination y position
03/A0FB: A9 00     LDA #$00           ; no event
03/A0FD: 85 6C     STA $6C
03/A0FF: A9 01     LDA #$01           ; A button pressed
03/A101: 85 24     STA $24
03/A103: 60        RTS 
03/A104: 90 02     BCC $A108
03/A106: A2 02     LDX #$02           ; left
03/A108: 86 20     STX $20            ; buttons pressed
03/A10A: 60        RTS 
03/A10B: B0 FB     BCS $A108
03/A10D: A2 04     LDX #$04           ; down
03/A10F: D0 F7     BNE $A108

; [ object command 1: update chocobo position ]

; return carry set if chocobo ran offscreen

03/A111: AD 09 60  LDA $6009          ; chocobo x position
03/A114: 18        CLC 
03/A115: 69 02     ADC #$02
03/A117: 8D 09 60  STA $6009
03/A11A: C9 F8     CMP #$F8
03/A11C: 90 01     BCC $A11F          ; branch if not offscreen
03/A11E: 60        RTS 
03/A11F: 85 40     STA $40
03/A121: 29 08     AND #$08
03/A123: 85 80     STA $80
03/A125: A9 70     LDA #$70
03/A127: 85 82     STA $82
03/A129: A5 F0     LDA $F0
03/A12B: 10 04     BPL $A131          ; change direction every 128 frames
03/A12D: A9 01     LDA #$01           ; move up
03/A12F: D0 02     BNE $A133
03/A131: A9 FF     LDA #$FF           ; move down
03/A133: 18        CLC 
03/A134: 6D 0A 60  ADC $600A
03/A137: 8D 0A 60  STA $600A
03/A13A: 85 41     STA $41
03/A13C: 18        CLC 
03/A13D: 60        RTS 

; [  ]

03/A13E: AE 07 60  LDX $6007
03/A141: D0 27     BNE $A16A
03/A143: A5 F1     LDA $F1
03/A145: 29 0F     AND #$0F
03/A147: 05 F0     ORA $F0
03/A149: F0 02     BEQ $A14D
03/A14B: 18        CLC 
03/A14C: 60        RTS 
03/A14D: A6 F1     LDX $F1
03/A14F: BD 00 F9  LDA $F900,X        ; rng table
03/A152: 29 3F     AND #$3F
03/A154: 8D 06 60  STA $6006
03/A157: A9 00     LDA #$00
03/A159: 8D 05 60  STA $6005
03/A15C: A5 F1     LDA $F1
03/A15E: 4A        LSR 
03/A15F: 4A        LSR 
03/A160: 4A        LSR 
03/A161: 4A        LSR 
03/A162: 18        CLC 
03/A163: 69 01     ADC #$01
03/A165: 8D 07 60  STA $6007
03/A168: 18        CLC 
03/A169: 60        RTS 
03/A16A: A5 F0     LDA $F0
03/A16C: 29 0F     AND #$0F
03/A16E: D0 03     BNE $A173
03/A170: EE 07 60  INC $6007
03/A173: AD 05 60  LDA $6005
03/A176: 18        CLC 
03/A177: 69 01     ADC #$01
03/A179: 8D 05 60  STA $6005
03/A17C: C9 F8     CMP #$F8
03/A17E: 90 0C     BCC $A18C
03/A180: A9 00     LDA #$00
03/A182: 8D 0C 40  STA $400C
03/A185: A9 00     LDA #$00
03/A187: 8D 07 60  STA $6007
03/A18A: 18        CLC 
03/A18B: 60        RTS 
03/A18C: AE 07 60  LDX $6007
03/A18F: BD 00 F9  LDA $F900,X        ; rng table
03/A192: 30 10     BMI $A1A4
03/A194: AD 06 60  LDA $6006
03/A197: 18        CLC 
03/A198: 69 01     ADC #$01
03/A19A: C9 40     CMP #$40
03/A19C: 90 14     BCC $A1B2
03/A19E: EE 07 60  INC $6007
03/A1A1: 4C B5 A1  JMP $A1B5
03/A1A4: AD 06 60  LDA $6006
03/A1A7: 38        SEC 
03/A1A8: E9 01     SBC #$01
03/A1AA: 10 06     BPL $A1B2
03/A1AC: EE 07 60  INC $6007
03/A1AF: 4C B5 A1  JMP $A1B5
03/A1B2: 8D 06 60  STA $6006
03/A1B5: AD 05 60  LDA $6005
03/A1B8: 85 40     STA $40
03/A1BA: AD 06 60  LDA $6006
03/A1BD: 18        CLC 
03/A1BE: 69 20     ADC #$20
03/A1C0: 85 41     STA $41
03/A1C2: A5 F0     LDA $F0
03/A1C4: 29 08     AND #$08
03/A1C6: 85 80     STA $80
03/A1C8: A9 28     LDA #$28
03/A1CA: 85 82     STA $82
03/A1CC: 38        SEC 
03/A1CD: 60        RTS 

; [  ]

03/A1CE: A5 F0     LDA $F0
03/A1D0: 29 01     AND #$01
03/A1D2: D0 0D     BNE $A1E1
03/A1D4: AD 06 60  LDA $6006          ; airship y position
03/A1D7: C9 4F     CMP #$4F
03/A1D9: F0 12     BEQ $A1ED
03/A1DB: 38        SEC 
03/A1DC: E9 01     SBC #$01
03/A1DE: 8D 06 60  STA $6006
03/A1E1: A9 3F     LDA #$3F
03/A1E3: 8D 0C 40  STA $400C
03/A1E6: A9 0E     LDA #$0E
03/A1E8: 8D 0E 40  STA $400E
03/A1EB: 18        CLC 
03/A1EC: 60        RTS 
03/A1ED: A2 0F     LDX #$0F
03/A1EF: A9 F8     LDA #$F8
03/A1F1: 9D 00 02  STA $0200,X
03/A1F4: CA        DEX 
03/A1F5: 10 FA     BPL $A1F1
03/A1F7: AD 05 60  LDA $6005
03/A1FA: 38        SEC 
03/A1FB: E9 01     SBC #$01
03/A1FD: C9 71     CMP #$71
03/A1FF: 8D 05 60  STA $6005
03/A202: B0 27     BCS $A22B
03/A204: A9 08     LDA #$08
03/A206: 85 42     STA $42
03/A208: 85 46     STA $46
03/A20A: A9 02     LDA #$02
03/A20C: 8D 04 60  STA $6004
03/A20F: A9 04     LDA #$04
03/A211: 85 6C     STA $6C
03/A213: AD 38 62  LDA $6238          ; set ferry destination position to altair
03/A216: 8D FC 62  STA $62FC
03/A219: AD 39 62  LDA $6239
03/A21C: 8D FD 62  STA $62FD
03/A21F: A9 00     LDA #$00
03/A221: 8D 0C 40  STA $400C
03/A224: A9 00     LDA #$00
03/A226: 8D 14 60  STA $6014
03/A229: 38        SEC 
03/A22A: 60        RTS 
03/A22B: A2 00     LDX #$00
03/A22D: A0 00     LDY #$00
03/A22F: BD 30 02  LDA $0230,X
03/A232: 18        CLC 
03/A233: 79 5D A2  ADC $A25D,Y
03/A236: 9D 30 02  STA $0230,X
03/A239: C8        INY 
03/A23A: BD 33 02  LDA $0233,X
03/A23D: 18        CLC 
03/A23E: 79 5D A2  ADC $A25D,Y
03/A241: 9D 33 02  STA $0233,X
03/A244: C8        INY 
03/A245: E8        INX 
03/A246: E8        INX 
03/A247: E8        INX 
03/A248: E8        INX 
03/A249: E0 40     CPX #$40
03/A24B: 90 E2     BCC $A22F
03/A24D: A9 3F     LDA #$3F
03/A24F: 8D 0C 40  STA $400C
03/A252: A5 F0     LDA $F0
03/A254: 29 03     AND #$03
03/A256: 09 0C     ORA #$0C
03/A258: 8D 0E 40  STA $400E
03/A25B: 18        CLC 
03/A25C: 60        RTS 

; ??? xy offsets
03/A25D: FE FE FE FF FE 01 FE 02
03/A265: FE FF FF FF FF 01 FE 01
03/A26D: FF FF FF 00 01 00 FF 01
03/A275: 01 FF 00 FF 01 01 01 02

; [ object command 0: leviathan waves animation ]

03/A27D: 20 83 A2  JSR $A283
03/A280: 20 83 A2  JSR $A283
; fallthrough

; [ leviathan waves animation ]

03/A283: 20 00 A3  JSR $A300
03/A286: A9 00     LDA #$00
03/A288: 85 61     STA $61
03/A28A: 85 62     STA $62
03/A28C: 85 63     STA $63
03/A28E: 85 64     STA $64
03/A290: 85 65     STA $65
; start of frame loop
03/A292: 20 00 FE  JSR $FE00          ; wait for vblank
03/A295: A9 02     LDA #$02
03/A297: 8D 14 40  STA $4014          ; copy oam data to ppu
03/A29A: E6 F0     INC $F0
03/A29C: A2 1E     LDX #$1E
03/A29E: A5 65     LDA $65
03/A2A0: C9 58     CMP #$58
03/A2A2: 90 08     BCC $A2AC
03/A2A4: A5 F0     LDA $F0
03/A2A6: 29 03     AND #$03
03/A2A8: D0 02     BNE $A2AC
03/A2AA: A2 1F     LDX #$1F
03/A2AC: 8E 01 20  STX $2001
03/A2AF: 20 42 A3  JSR $A342
03/A2B2: 20 BB A3  JSR $A3BB
03/A2B5: A5 65     LDA $65
03/A2B7: C9 48     CMP #$48
03/A2B9: 90 03     BCC $A2BE
03/A2BB: 20 D7 A2  JSR $A2D7
03/A2BE: A5 65     LDA $65
03/A2C0: 4A        LSR 
03/A2C1: 4A        LSR 
03/A2C2: 4A        LSR 
03/A2C3: 8D 0E 40  STA $400E
03/A2C6: A5 65     LDA $65
03/A2C8: 18        CLC 
03/A2C9: 69 01     ADC #$01
03/A2CB: 85 65     STA $65
03/A2CD: C9 80     CMP #$80
03/A2CF: 90 C1     BCC $A292
03/A2D1: A9 00     LDA #$00
03/A2D3: 8D 15 40  STA $4015
03/A2D6: 60        RTS 

; [  ]

03/A2D7: A5 F0     LDA $F0
03/A2D9: 29 02     AND #$02
03/A2DB: 09 70     ORA #$70
03/A2DD: 8D 03 02  STA $0203
03/A2E0: 8D 07 02  STA $0207
03/A2E3: 09 08     ORA #$08
03/A2E5: 8D 0B 02  STA $020B
03/A2E8: 8D 0F 02  STA $020F
03/A2EB: A5 F0     LDA $F0
03/A2ED: 29 01     AND #$01
03/A2EF: 49 6F     EOR #$6F
03/A2F1: 8D 00 02  STA $0200
03/A2F4: 8D 08 02  STA $0208
03/A2F7: 49 18     EOR #$18
03/A2F9: 8D 04 02  STA $0204
03/A2FC: 8D 0C 02  STA $020C
03/A2FF: 60        RTS 

; [  ]

03/A300: A2 00     LDX #$00
03/A302: 8A        TXA 
03/A303: 0A        ASL 
03/A304: 9D 10 02  STA $0210,X
03/A307: 9D 88 02  STA $0288,X
03/A30A: A9 BA     LDA #$BA
03/A30C: 9D 89 02  STA $0289,X
03/A30F: 9D 11 02  STA $0211,X
03/A312: A9 02     LDA #$02
03/A314: 9D 12 02  STA $0212,X
03/A317: 9D 8A 02  STA $028A,X
03/A31A: 8A        TXA 
03/A31B: 18        CLC 
03/A31C: 69 04     ADC #$04
03/A31E: AA        TAX 
03/A31F: C9 78     CMP #$78
03/A321: 90 DF     BCC $A302
03/A323: A2 00     LDX #$00
03/A325: A9 00     LDA #$00
03/A327: 9D 00 70  STA $7000,X
03/A32A: E8        INX 
03/A32B: D0 FA     BNE $A327
03/A32D: A9 08     LDA #$08
03/A32F: 8D 15 40  STA $4015
03/A332: A9 3F     LDA #$3F
03/A334: 8D 0C 40  STA $400C
03/A337: A9 01     LDA #$01
03/A339: 8D 0E 40  STA $400E
03/A33C: A9 00     LDA #$00
03/A33E: 8D 0F 40  STA $400F
03/A341: 60        RTS 

; [  ]

03/A342: A5 F0     LDA $F0
03/A344: 29 01     AND #$01
03/A346: D0 13     BNE $A35B
03/A348: A2 00     LDX #$00
03/A34A: BD 00 70  LDA $7000,X
03/A34D: DD DB A3  CMP $A3DB,X
03/A350: B0 06     BCS $A358
03/A352: 18        CLC 
03/A353: 69 01     ADC #$01
03/A355: 9D 00 70  STA $7000,X
03/A358: E8        INX 
03/A359: 10 EF     BPL $A34A
03/A35B: A5 61     LDA $61
03/A35D: 18        CLC 
03/A35E: 69 80     ADC #$80
03/A360: 85 61     STA $61
03/A362: A9 01     LDA #$01
03/A364: 69 00     ADC #$00
03/A366: 85 81     STA $81
03/A368: A5 62     LDA $62
03/A36A: 18        CLC 
03/A36B: 69 60     ADC #$60
03/A36D: 85 62     STA $62
03/A36F: A9 01     LDA #$01
03/A371: 69 00     ADC #$00
03/A373: 85 82     STA $82
03/A375: A5 63     LDA $63
03/A377: 18        CLC 
03/A378: 69 40     ADC #$40
03/A37A: 85 63     STA $63
03/A37C: A9 01     LDA #$01
03/A37E: 69 00     ADC #$00
03/A380: 85 83     STA $83
03/A382: A5 64     LDA $64
03/A384: 18        CLC 
03/A385: 69 20     ADC #$20
03/A387: 85 64     STA $64
03/A389: A9 01     LDA #$01
03/A38B: 69 00     ADC #$00
03/A38D: 85 84     STA $84
03/A38F: A2 00     LDX #$00
03/A391: BD 80 70  LDA $7080,X
03/A394: 18        CLC 
03/A395: 65 81     ADC $81
03/A397: 9D 80 70  STA $7080,X
03/A39A: BD 9E 70  LDA $709E,X
03/A39D: 18        CLC 
03/A39E: 65 82     ADC $82
03/A3A0: 9D 9E 70  STA $709E,X
03/A3A3: BD BC 70  LDA $70BC,X
03/A3A6: 18        CLC 
03/A3A7: 65 83     ADC $83
03/A3A9: 9D BC 70  STA $70BC,X
03/A3AC: BD DA 70  LDA $70DA,X
03/A3AF: 18        CLC 
03/A3B0: 65 84     ADC $84
03/A3B2: 9D DA 70  STA $70DA,X
03/A3B5: E8        INX 
03/A3B6: E0 1E     CPX #$1E
03/A3B8: 90 D7     BCC $A391
03/A3BA: 60        RTS 

; [  ]

03/A3BB: A2 00     LDX #$00
03/A3BD: A0 10     LDY #$10
03/A3BF: A5 F0     LDA $F0
03/A3C1: 4A        LSR 
03/A3C2: 90 02     BCC $A3C6
03/A3C4: A2 3C     LDX #$3C
03/A3C6: BD 80 70  LDA $7080,X
03/A3C9: 18        CLC 
03/A3CA: 7D 00 70  ADC $7000,X
03/A3CD: 49 FF     EOR #$FF
03/A3CF: 99 03 02  STA $0203,Y
03/A3D2: E8        INX 
03/A3D3: 98        TYA 
03/A3D4: 18        CLC 
03/A3D5: 69 04     ADC #$04
03/A3D7: A8        TAY 
03/A3D8: D0 EC     BNE $A3C6
03/A3DA: 60        RTS 

03/A3DB: 08 0A 0D 10 14 14 10 0D 0E 10 13 17 1A 1E 22
03/A3EA: 26 24 25 23 20 1C 18 14 10 0C 0C 10 14 12 10
03/A3F9: 08 0A 0D 10 14 14 10 0D 0E 10 12 14 16 18 1A
03/A408: 1C 1C 1A 18 19 17 15 14 10 0C 0C 10 14 12 10
03/A417: 08 0A 0C 0E 0F 10 0E 0C 0D 0E 10 12 14 15 17
03/A426: 18 19 19 17 16 14 13 12 10 0C 0C 0D 0E 10 0D
03/A435: 06 08 0A 0B 0C 0D 0C 0A 09 0A 0C 0D 0F 10 12
03/A444: 14 13 14 12 10 0E 0D 0C 0B 0A 09 0A 08 0A 0B

; [  ]

03/A453: A5 F0     LDA $F0
03/A455: 29 08     AND #$08
03/A457: 18        CLC 
03/A458: 69 08     ADC #$08
03/A45A: 69 8E     ADC #$8E           ; 03/AA8E
03/A45C: 85 80     STA $80
03/A45E: A9 00     LDA #$00
03/A460: 69 AA     ADC #$AA
03/A462: 85 81     STA $81
03/A464: A9 AC     LDA #$AC
03/A466: 85 82     STA $82
03/A468: 4C 02 A9  JMP $A902

; [ event type 3: crystal rod ]

03/A46B: A9 08     LDA #$08
03/A46D: 8D 15 40  STA $4015
03/A470: A9 00     LDA #$00
03/A472: 8D 0C 40  STA $400C
03/A475: A9 00     LDA #$00
03/A477: 85 66     STA $66
03/A479: 20 10 A7  JSR $A710          ; reset oam data
03/A47C: 20 E5 A8  JSR $A8E5
03/A47F: 20 CB A4  JSR $A4CB
03/A482: 20 00 FE  JSR $FE00          ; wait for vblank
03/A485: A9 02     LDA #$02
03/A487: 8D 14 40  STA $4014
03/A48A: 20 A6 A4  JSR $A4A6
03/A48D: E6 66     INC $66
03/A48F: D0 E8     BNE $A479
03/A491: A9 00     LDA #$00
03/A493: 85 6C     STA $6C
03/A495: A9 08     LDA #$08
03/A497: 85 20     STA $20
03/A499: A2 D0     LDX #$D0
03/A49B: A9 80     LDA #$80
03/A49D: 9D 00 04  STA $0400,X
03/A4A0: A9 1E     LDA #$1E
03/A4A2: 8D 01 20  STA $2001
03/A4A5: 60        RTS 

; [  ]

03/A4A6: A2 1E     LDX #$1E
03/A4A8: A5 66     LDA $66
03/A4AA: 29 40     AND #$40
03/A4AC: D0 09     BNE $A4B7
03/A4AE: A5 66     LDA $66
03/A4B0: 4A        LSR 
03/A4B1: 4A        LSR 
03/A4B2: 29 01     AND #$01
03/A4B4: 09 1E     ORA #$1E
03/A4B6: AA        TAX 
03/A4B7: 8E 01 20  STX $2001
03/A4BA: A5 66     LDA $66
03/A4BC: 4A        LSR 
03/A4BD: 4A        LSR 
03/A4BE: 4A        LSR 
03/A4BF: 4A        LSR 
03/A4C0: 09 09     ORA #$09
03/A4C2: 8D 0E 40  STA $400E
03/A4C5: A9 00     LDA #$00
03/A4C7: 8D 0F 40  STA $400F
03/A4CA: 60        RTS 
03/A4CB: A6 26     LDX $26
03/A4CD: A9 A6     LDA #$A6
03/A4CF: 85 80     STA $80
03/A4D1: A9 AC     LDA #$AC
03/A4D3: 85 81     STA $81
03/A4D5: A5 66     LDA $66
03/A4D7: 29 08     AND #$08
03/A4D9: D0 08     BNE $A4E3
03/A4DB: A9 E7     LDA #$E7
03/A4DD: 85 80     STA $80
03/A4DF: A9 AC     LDA #$AC
03/A4E1: 85 81     STA $81
03/A4E3: A0 00     LDY #$00
03/A4E5: B1 80     LDA ($80),Y
03/A4E7: C9 FF     CMP #$FF
03/A4E9: F0 07     BEQ $A4F2
03/A4EB: 9D 00 02  STA $0200,X
03/A4EE: E8        INX 
03/A4EF: C8        INY 
03/A4F0: D0 F3     BNE $A4E5
03/A4F2: 86 26     STX $26
03/A4F4: 60        RTS 

; [ event type 2: wyvern ]

03/A4F5: A9 09     LDA #$09
03/A4F7: 8D 15 40  STA $4015
03/A4FA: A9 00     LDA #$00
03/A4FC: 8D 0C 40  STA $400C
03/A4FF: 8D 00 40  STA $4000
03/A502: 8D 01 40  STA $4001
03/A505: A9 70     LDA #$70
03/A507: 85 64     STA $64
03/A509: A9 6C     LDA #$6C
03/A50B: 85 65     STA $65
03/A50D: A9 00     LDA #$00
03/A50F: 85 66     STA $66
03/A511: A9 00     LDA #$00
03/A513: 85 26     STA $26
03/A515: 20 10 A7  JSR $A710          ; reset oam data
03/A518: 20 6A A5  JSR $A56A
03/A51B: 20 00 FE  JSR $FE00          ; wait for vblank
03/A51E: A9 02     LDA #$02
03/A520: 8D 14 40  STA $4014
03/A523: E6 F0     INC $F0
03/A525: A5 F0     LDA $F0
03/A527: 4A        LSR 
03/A528: 90 E7     BCC $A511
03/A52A: A6 66     LDX $66
03/A52C: E6 66     INC $66
03/A52E: BD 00 BF  LDA $BF00,X
03/A531: 29 0F     AND #$0F
03/A533: D0 0E     BNE $A543
03/A535: A9 00     LDA #$00
03/A537: 85 6C     STA $6C
03/A539: A9 80     LDA #$80
03/A53B: 85 44     STA $44
03/A53D: AD BD 62  LDA $62BD
03/A540: 85 45     STA $45
03/A542: 60        RTS 
03/A543: 20 49 A5  JSR $A549
03/A546: 4C 11 A5  JMP $A511

; [  ]

03/A549: 85 80     STA $80
03/A54B: 29 03     AND #$03
03/A54D: F0 0B     BEQ $A55A
03/A54F: C9 02     CMP #$02
03/A551: B0 05     BCS $A558
03/A553: E6 64     INC $64
03/A555: 4C 5A A5  JMP $A55A
03/A558: C6 64     DEC $64
03/A55A: A5 80     LDA $80
03/A55C: 29 0C     AND #$0C
03/A55E: F0 09     BEQ $A569
03/A560: C9 08     CMP #$08
03/A562: B0 03     BCS $A567
03/A564: E6 65     INC $65
03/A566: 60        RTS 
03/A567: C6 65     DEC $65
03/A569: 60        RTS 

; [  ]

03/A56A: A5 F0     LDA $F0
03/A56C: 0A        ASL 
03/A56D: 0A        ASL 
03/A56E: 29 3F     AND #$3F
03/A570: 8D 02 40  STA $4002
03/A573: A9 00     LDA #$00
03/A575: 8D 03 40  STA $4003
03/A578: A5 F0     LDA $F0
03/A57A: 29 03     AND #$03
03/A57C: 8D 0E 40  STA $400E
03/A57F: A9 00     LDA #$00
03/A581: 8D 0F 40  STA $400F
03/A584: A5 64     LDA $64
03/A586: 85 40     STA $40
03/A588: A5 65     LDA $65
03/A58A: 85 41     STA $41
03/A58C: A9 A2     LDA #$A2
03/A58E: 85 82     STA $82
03/A590: A5 F0     LDA $F0
03/A592: 29 08     AND #$08
03/A594: 18        CLC 
03/A595: 69 6E     ADC #$6E           ; 03/AA6E
03/A597: 85 80     STA $80
03/A599: A9 AA     LDA #$AA
03/A59B: 69 00     ADC #$00
03/A59D: 85 81     STA $81
03/A59F: 20 02 A9  JSR $A902
03/A5A2: A5 F0     LDA $F0
03/A5A4: 4A        LSR 
03/A5A5: 90 10     BCC $A5B7
03/A5A7: A5 41     LDA $41
03/A5A9: 18        CLC 
03/A5AA: 69 20     ADC #$20
03/A5AC: C9 70     CMP #$70
03/A5AE: 90 02     BCC $A5B2
03/A5B0: A9 6F     LDA #$6F
03/A5B2: 85 41     STA $41
03/A5B4: 4C B0 A8  JMP $A8B0
03/A5B7: 60        RTS 

; [ object command 9: dreadnought launch animation ]

03/A5B8: A9 08     LDA #$08
03/A5BA: 8D 15 40  STA $4015
03/A5BD: A9 3F     LDA #$3F
03/A5BF: 8D 0C 40  STA $400C
03/A5C2: A9 0E     LDA #$0E
03/A5C4: 8D 0E 40  STA $400E
03/A5C7: A9 00     LDA #$00
03/A5C9: 8D 0F 40  STA $400F
03/A5CC: A9 50     LDA #$50
03/A5CE: 8D 15 60  STA $6015
03/A5D1: A9 70     LDA #$70
03/A5D3: 8D 16 60  STA $6016
03/A5D6: A9 00     LDA #$00
03/A5D8: 85 26     STA $26
03/A5DA: 20 10 A7  JSR $A710          ; reset oam data
03/A5DD: 20 CF A8  JSR $A8CF
03/A5E0: 20 0B A6  JSR $A60B
03/A5E3: B0 13     BCS $A5F8
03/A5E5: 20 E8 A7  JSR $A7E8
03/A5E8: 20 00 FE  JSR $FE00          ; wait for vblank
03/A5EB: A9 02     LDA #$02
03/A5ED: 8D 14 40  STA $4014
03/A5F0: E6 F0     INC $F0
03/A5F2: 20 B3 A6  JSR $A6B3
03/A5F5: 4C D6 A5  JMP $A5D6
03/A5F8: A9 00     LDA #$00
03/A5FA: 85 6C     STA $6C
03/A5FC: 8D 14 60  STA $6014
03/A5FF: 8D 0C 40  STA $400C
03/A602: A9 0F     LDA #$0F
03/A604: 8D 15 40  STA $4015
03/A607: 20 10 A7  JSR $A710          ; reset oam data
03/A60A: 60        RTS 
03/A60B: AD 16 60  LDA $6016
03/A60E: C9 48     CMP #$48
03/A610: F0 09     BEQ $A61B
03/A612: 38        SEC 
03/A613: E9 01     SBC #$01
03/A615: 8D 16 60  STA $6016
03/A618: 4C 2D A6  JMP $A62D
03/A61B: AD 15 60  LDA $6015
03/A61E: 38        SEC 
03/A61F: E9 01     SBC #$01
03/A621: 8D 15 60  STA $6015
03/A624: B0 07     BCS $A62D
03/A626: A9 00     LDA #$00
03/A628: 8D 0C 40  STA $400C
03/A62B: 38        SEC 
03/A62C: 60        RTS 
03/A62D: 18        CLC 
03/A62E: 60        RTS 

; [ event type 6:  ]

03/A62F: A9 08     LDA #$08
03/A631: 8D 15 40  STA $4015
03/A634: A9 3F     LDA #$3F
03/A636: 8D 0C 40  STA $400C
03/A639: A9 0E     LDA #$0E
03/A63B: 8D 0E 40  STA $400E
03/A63E: A9 00     LDA #$00
03/A640: 8D 0F 40  STA $400F
03/A643: A9 FF     LDA #$FF
03/A645: 8D 15 60  STA $6015
03/A648: A9 00     LDA #$00
03/A64A: 8D 16 60  STA $6016
03/A64D: A9 20     LDA #$20
03/A64F: 8D 06 60  STA $6006
03/A652: A9 F0     LDA #$F0
03/A654: 8D 05 60  STA $6005
03/A657: A9 00     LDA #$00
03/A659: 85 26     STA $26
03/A65B: 20 10 A7  JSR $A710          ; reset oam data
03/A65E: 20 CF A8  JSR $A8CF
03/A661: 20 BD A6  JSR $A6BD
03/A664: 20 E8 A7  JSR $A7E8
03/A667: AD 15 60  LDA $6015
03/A66A: 49 FF     EOR #$FF
03/A66C: AA        TAX 
03/A66D: BD A6 AB  LDA $ABA6,X
03/A670: 8D 05 60  STA $6005
03/A673: BD A6 AA  LDA $AAA6,X
03/A676: 8D 06 60  STA $6006
03/A679: 20 9A A7  JSR $A79A
03/A67C: 20 00 FE  JSR $FE00          ; wait for vblank
03/A67F: A9 02     LDA #$02
03/A681: 8D 14 40  STA $4014
03/A684: E6 F0     INC $F0
03/A686: 20 B3 A6  JSR $A6B3
03/A689: AD 15 60  LDA $6015
03/A68C: D0 C9     BNE $A657
03/A68E: A9 00     LDA #$00
03/A690: 8D 04 60  STA $6004
03/A693: 85 6C     STA $6C
03/A695: A9 00     LDA #$00
03/A697: 8D 0C 40  STA $400C
03/A69A: A9 0F     LDA #$0F
03/A69C: 8D 15 40  STA $4015
03/A69F: A9 01     LDA #$01
03/A6A1: 8D 14 60  STA $6014
03/A6A4: AD 3A 62  LDA $623A          ; move dreadnought to dock at (232,239)
03/A6A7: 8D 15 60  STA $6015
03/A6AA: AD 3B 62  LDA $623B
03/A6AD: 8D 16 60  STA $6016
03/A6B0: 4C 10 A7  JMP $A710          ; reset oam data

; [  ]

03/A6B3: A5 F0     LDA $F0
03/A6B5: 29 0F     AND #$0F
03/A6B7: 09 03     ORA #$03
03/A6B9: 8D 0E 40  STA $400E
03/A6BC: 60        RTS 
03/A6BD: CE 15 60  DEC $6015
03/A6C0: AD 16 60  LDA $6016
03/A6C3: 18        CLC 
03/A6C4: 69 10     ADC #$10
03/A6C6: CD 06 60  CMP $6006
03/A6C9: F0 0C     BEQ $A6D7
03/A6CB: B0 04     BCS $A6D1
03/A6CD: EE 16 60  INC $6016
03/A6D0: 60        RTS 
03/A6D1: CE 16 60  DEC $6016
03/A6D4: CE 16 60  DEC $6016
03/A6D7: 60        RTS 

; [ object command 4: update airship flying off ]

; return carry set if airship flew offscreen

03/A6D8: AD 06 60  LDA $6006          ; airship y position
03/A6DB: C9 4F     CMP #$4F
03/A6DD: F0 09     BEQ $A6E8          ; branch if airship already lifted off
03/A6DF: 38        SEC 
03/A6E0: E9 01     SBC #$01           ; move up 1
03/A6E2: 8D 06 60  STA $6006
03/A6E5: 4C 0B A7  JMP $A70B
03/A6E8: AD 05 60  LDA $6005          ; airship x position
03/A6EB: 38        SEC 
03/A6EC: E9 01     SBC #$01           ; move left 1
03/A6EE: 8D 05 60  STA $6005
03/A6F1: B0 18     BCS $A70B          ; branch if airship flew offscreen
03/A6F3: A9 01     LDA #$01
03/A6F5: 8D 04 60  STA $6004
03/A6F8: AD 3C 62  LDA $623C          ; move airship to poft at (148,58)
03/A6FB: 8D 05 60  STA $6005
03/A6FE: AD 3D 62  LDA $623D
03/A701: 8D 06 60  STA $6006
03/A704: A9 00     LDA #$00           ; stop sound effect
03/A706: 8D 0C 40  STA $400C
03/A709: 38        SEC 
03/A70A: 60        RTS 
03/A70B: 20 9A A7  JSR $A79A
03/A70E: 18        CLC 
03/A70F: 60        RTS 

; [ reset oam data ]

03/A710: A2 00     LDX #$00
03/A712: A9 F8     LDA #$F8
03/A714: 9D 00 02  STA $0200,X
03/A717: E8        INX 
03/A718: D0 FA     BNE $A714
03/A71A: 60        RTS 

; [ event type 5: dreadnought explosion animation ]

03/A71B: A9 08     LDA #$08
03/A71D: 8D 15 40  STA $4015
03/A720: A9 3F     LDA #$3F
03/A722: 8D 0C 40  STA $400C
03/A725: A9 0E     LDA #$0E
03/A727: 8D 0E 40  STA $400E
03/A72A: A9 00     LDA #$00
03/A72C: 8D 0F 40  STA $400F
03/A72F: A9 80     LDA #$80
03/A731: 8D 15 60  STA $6015
03/A734: A9 5F     LDA #$5F
03/A736: 8D 16 60  STA $6016
03/A739: A9 6F     LDA #$6F
03/A73B: 8D 06 60  STA $6006
03/A73E: A9 A0     LDA #$A0
03/A740: 8D 05 60  STA $6005
03/A743: A9 00     LDA #$00
03/A745: 85 F0     STA $F0
03/A747: 85 26     STA $26
03/A749: 20 7A A7  JSR $A77A
03/A74C: 20 9A A7  JSR $A79A
03/A74F: 20 E8 A7  JSR $A7E8
03/A752: 20 00 FE  JSR $FE00          ; wait for vblank
03/A755: A9 02     LDA #$02
03/A757: 8D 14 40  STA $4014
03/A75A: E6 F0     INC $F0
03/A75C: A9 00     LDA #$00
03/A75E: 85 26     STA $26
03/A760: A2 00     LDX #$00
03/A762: A9 F0     LDA #$F0
03/A764: 9D 00 02  STA $0200,X
03/A767: E8        INX 
03/A768: E0 30     CPX #$30
03/A76A: 90 F8     BCC $A764
03/A76C: 20 7A A7  JSR $A77A
03/A76F: 20 9A A7  JSR $A79A
03/A772: 20 CE A1  JSR $A1CE
03/A775: 90 DB     BCC $A752
03/A777: 4C 10 A7  JMP $A710          ; reset oam data

; [  ]

03/A77A: A5 F0     LDA $F0
03/A77C: 29 08     AND #$08
03/A77E: 18        CLC 
03/A77F: 69 08     ADC #$08
03/A781: 69 8E     ADC #$8E           ; 03/8EAA
03/A783: 85 80     STA $80
03/A785: A9 00     LDA #$00
03/A787: 69 AA     ADC #$AA
03/A789: 85 81     STA $81
03/A78B: A9 AC     LDA #$AC
03/A78D: 85 82     STA $82
03/A78F: A9 68     LDA #$68
03/A791: 85 41     STA $41
03/A793: A9 88     LDA #$88
03/A795: 85 40     STA $40
03/A797: 4C 02 A9  JMP $A902

; [  ]

03/A79A: A5 F0     LDA $F0
03/A79C: 29 08     AND #$08
03/A79E: 09 10     ORA #$10
03/A7A0: 85 80     STA $80
03/A7A2: A9 28     LDA #$28
03/A7A4: 85 82     STA $82
03/A7A6: AD 05 60  LDA $6005
03/A7A9: 85 40     STA $40
03/A7AB: AD 06 60  LDA $6006
03/A7AE: 85 41     STA $41
03/A7B0: 4C B8 A7  JMP $A7B8

; [ object command 2:  ]

03/A7B3: 20 3E A1  JSR $A13E
03/A7B6: 90 2F     BCC $A7E7
03/A7B8: 20 BF A8  JSR $A8BF
03/A7BB: A5 F0     LDA $F0
03/A7BD: 4A        LSR 
03/A7BE: 90 27     BCC $A7E7
03/A7C0: A5 41     LDA $41
03/A7C2: 18        CLC 
03/A7C3: 69 20     ADC #$20
03/A7C5: C9 70     CMP #$70
03/A7C7: 90 02     BCC $A7CB
03/A7C9: A9 6F     LDA #$6F
03/A7CB: 85 41     STA $41
03/A7CD: 20 B0 A8  JSR $A8B0
03/A7D0: A5 6C     LDA $6C
03/A7D2: C9 05     CMP #$05
03/A7D4: B0 11     BCS $A7E7
03/A7D6: A9 38     LDA #$38
03/A7D8: 8D 0C 40  STA $400C
03/A7DB: A5 F0     LDA $F0
03/A7DD: 29 0F     AND #$0F
03/A7DF: 8D 0E 40  STA $400E
03/A7E2: A9 00     LDA #$00
03/A7E4: 8D 0F 40  STA $400F
03/A7E7: 60        RTS 

; [  ]

03/A7E8: AD 15 60  LDA $6015
03/A7EB: 85 40     STA $40
03/A7ED: AD 16 60  LDA $6016
03/A7F0: 85 41     STA $41
03/A7F2: A9 00     LDA #$00
03/A7F4: 85 61     STA $61
03/A7F6: A5 F0     LDA $F0
03/A7F8: 29 04     AND #$04
03/A7FA: D0 06     BNE $A802
03/A7FC: 20 0E A8  JSR $A80E
03/A7FF: 4C 05 A8  JMP $A805
03/A802: 20 19 A8  JSR $A819
03/A805: A5 F0     LDA $F0
03/A807: 4A        LSR 
03/A808: 90 03     BCC $A80D
03/A80A: 4C 24 A8  JMP $A824
03/A80D: 60        RTS 

; [  ]

03/A80E: A9 A9     LDA #$A9
03/A810: 85 55     STA $55
03/A812: A9 6B     LDA #$6B
03/A814: 85 54     STA $54
03/A816: 4C 4C A8  JMP $A84C

; [  ]

03/A819: A9 A9     LDA #$A9
03/A81B: 85 55     STA $55
03/A81D: A9 AC     LDA #$AC
03/A81F: 85 54     STA $54
03/A821: 4C 4C A8  JMP $A84C

; [  ]

03/A824: A9 A9     LDA #$A9
03/A826: 85 55     STA $55
03/A828: A9 ED     LDA #$ED
03/A82A: 85 54     STA $54
03/A82C: 4C 4C A8  JMP $A84C

; [  ]

03/A82F: 86 26     STX $26
03/A831: A5 40     LDA $40
03/A833: 38        SEC 
03/A834: E9 18     SBC #$18
03/A836: 85 40     STA $40
03/A838: A5 61     LDA $61
03/A83A: E9 00     SBC #$00
03/A83C: 85 61     STA $61
03/A83E: A5 41     LDA $41
03/A840: 18        CLC 
03/A841: 69 20     ADC #$20
03/A843: C9 78     CMP #$78
03/A845: 90 02     BCC $A849
03/A847: A9 77     LDA #$77
03/A849: 85 41     STA $41
03/A84B: 60        RTS 

; [  ]

03/A84C: A6 26     LDX $26
03/A84E: A0 00     LDY #$00
03/A850: B1 54     LDA ($54),Y
03/A852: F0 19     BEQ $A86D
03/A854: C9 FF     CMP #$FF
03/A856: F0 D7     BEQ $A82F
03/A858: 18        CLC 
03/A859: 65 41     ADC $41
03/A85B: 85 41     STA $41
03/A85D: A5 40     LDA $40
03/A85F: 38        SEC 
03/A860: E9 18     SBC #$18
03/A862: 85 40     STA $40
03/A864: A5 61     LDA $61
03/A866: E9 00     SBC #$00
03/A868: 85 61     STA $61
03/A86A: 4C 7C A8  JMP $A87C
03/A86D: A0 03     LDY #$03
03/A86F: B1 54     LDA ($54),Y
03/A871: 18        CLC 
03/A872: 65 40     ADC $40
03/A874: 85 40     STA $40
03/A876: A5 61     LDA $61
03/A878: 69 00     ADC #$00
03/A87A: 85 61     STA $61
03/A87C: A5 61     LDA $61
03/A87E: D0 22     BNE $A8A2
03/A880: A5 41     LDA $41
03/A882: C9 F0     CMP #$F0
03/A884: B0 1C     BCS $A8A2
03/A886: A5 41     LDA $41
03/A888: 9D 00 02  STA $0200,X
03/A88B: A5 40     LDA $40
03/A88D: 9D 03 02  STA $0203,X
03/A890: A0 01     LDY #$01
03/A892: B1 54     LDA ($54),Y
03/A894: 9D 01 02  STA $0201,X
03/A897: C8        INY 
03/A898: B1 54     LDA ($54),Y
03/A89A: 9D 02 02  STA $0202,X
03/A89D: 8A        TXA 
03/A89E: 18        CLC 
03/A89F: 69 04     ADC #$04
03/A8A1: AA        TAX 
03/A8A2: A5 54     LDA $54
03/A8A4: 18        CLC 
03/A8A5: 69 04     ADC #$04
03/A8A7: 85 54     STA $54
03/A8A9: 90 A3     BCC $A84E
03/A8AB: E6 55     INC $55
03/A8AD: 4C 4E A8  JMP $A84E

; [  ]

03/A8B0: A9 B4     LDA #$B4           ; 03/AA8E
03/A8B2: 85 82     STA $82
03/A8B4: A9 AA     LDA #$AA
03/A8B6: 85 81     STA $81
03/A8B8: A9 8E     LDA #$8E
03/A8BA: 85 80     STA $80
03/A8BC: 4C 02 A9  JMP $A902

; [  ]

03/A8BF: A5 80     LDA $80
03/A8C1: 18        CLC 
03/A8C2: 69 4E     ADC #$4E           ; 03/AA4E
03/A8C4: 85 80     STA $80
03/A8C6: A9 AA     LDA #$AA
03/A8C8: 69 00     ADC #$00
03/A8CA: 85 81     STA $81
03/A8CC: 4C 02 A9  JMP $A902

; [  ]

03/A8CF: A2 00     LDX #$00
03/A8D1: AD 15 60  LDA $6015
03/A8D4: C9 90     CMP #$90
03/A8D6: B0 08     BCS $A8E0
03/A8D8: A2 20     LDX #$20
03/A8DA: C9 60     CMP #$60
03/A8DC: B0 02     BCS $A8E0
03/A8DE: A2 10     LDX #$10
03/A8E0: 86 80     STX $80
03/A8E2: 4C E9 A8  JMP $A8E9

; [  ]

03/A8E5: A9 20     LDA #$20
03/A8E7: 85 80     STA $80
03/A8E9: A9 6C     LDA #$6C
03/A8EB: 85 41     STA $41
03/A8ED: A9 70     LDA #$70
03/A8EF: 85 40     STA $40
03/A8F1: A9 00     LDA #$00
03/A8F3: 85 82     STA $82
03/A8F5: A9 0E     LDA #$0E           ; 03/AA0E
03/A8F7: 18        CLC 
03/A8F8: 65 80     ADC $80
03/A8FA: 85 80     STA $80
03/A8FC: A9 AA     LDA #$AA
03/A8FE: 69 00     ADC #$00
03/A900: 85 81     STA $81
; fallthrough

; [ draw object sprite ]

;  $26: sprite data offset (incremented after drawing)
;  $40: x position
;  $41: y position
; +$80: pointer to tile ids and palette/flags
;  $82: tile offset

03/A902: A0 00     LDY #$00
03/A904: A6 26     LDX $26
03/A906: A5 41     LDA $41
03/A908: 9D 00 02  STA $0200,X
03/A90B: 9D 08 02  STA $0208,X
03/A90E: 18        CLC 
03/A90F: 69 08     ADC #$08
03/A911: 9D 04 02  STA $0204,X
03/A914: 9D 0C 02  STA $020C,X
03/A917: A5 40     LDA $40
03/A919: 9D 03 02  STA $0203,X
03/A91C: 9D 07 02  STA $0207,X
03/A91F: 18        CLC 
03/A920: 69 08     ADC #$08
03/A922: 9D 0B 02  STA $020B,X
03/A925: 9D 0F 02  STA $020F,X
03/A928: B1 80     LDA ($80),Y
03/A92A: C8        INY 
03/A92B: 18        CLC 
03/A92C: 65 82     ADC $82
03/A92E: 9D 01 02  STA $0201,X
03/A931: B1 80     LDA ($80),Y
03/A933: C8        INY 
03/A934: 9D 02 02  STA $0202,X
03/A937: B1 80     LDA ($80),Y
03/A939: C8        INY 
03/A93A: 18        CLC 
03/A93B: 65 82     ADC $82
03/A93D: 9D 05 02  STA $0205,X
03/A940: B1 80     LDA ($80),Y
03/A942: C8        INY 
03/A943: 9D 06 02  STA $0206,X
03/A946: B1 80     LDA ($80),Y
03/A948: C8        INY 
03/A949: 18        CLC 
03/A94A: 65 82     ADC $82
03/A94C: 9D 09 02  STA $0209,X
03/A94F: B1 80     LDA ($80),Y
03/A951: C8        INY 
03/A952: 9D 0A 02  STA $020A,X
03/A955: B1 80     LDA ($80),Y
03/A957: C8        INY 
03/A958: 18        CLC 
03/A959: 65 82     ADC $82
03/A95B: 9D 0D 02  STA $020D,X
03/A95E: B1 80     LDA ($80),Y
03/A960: 9D 0E 02  STA $020E,X
03/A963: A5 26     LDA $26
03/A965: 18        CLC 
03/A966: 69 10     ADC #$10
03/A968: 85 26     STA $26
03/A96A: 60        RTS 

; --------------------------------------------------------------------------

; [ event command $E4: npc dance ]

03/AD28: A9 03     LDA #$03
03/AD2A: 85 57     STA $57
03/AD2C: A9 00     LDA #$00
03/AD2E: 85 74     STA $74
03/AD30: 85 75     STA $75
03/AD32: 20 CA AD  JSR $ADCA
03/AD35: 08        PHP 
03/AD36: 20 79 AF  JSR $AF79
03/AD39: 20 00 FE  JSR $FE00          ; wait for vblank
03/AD3C: A9 02     LDA #$02
03/AD3E: 8D 14 40  STA $4014
03/AD41: 20 09 C0  JSR $C009
03/AD44: 28        PLP 
03/AD45: 90 EB     BCC $AD32
03/AD47: 60        RTS 

; [ event command $00-$BF: npc commands ]

03/AD48: A5 70     LDA $70
03/AD4A: 29 F0     AND #$F0
03/AD4C: AA        TAX 
03/AD4D: BD 0C 75  LDA $750C,X
03/AD50: D0 41     BNE $AD93          ; return if npc is moving
03/AD52: A5 17     LDA $17
03/AD54: F0 05     BEQ $AD5B
03/AD56: C6 17     DEC $17
03/AD58: 4C 68 AD  JMP $AD68
03/AD5B: A5 72     LDA $72            ; increment event script pointer
03/AD5D: 18        CLC 
03/AD5E: 69 01     ADC #$01
03/AD60: 85 72     STA $72
03/AD62: A5 73     LDA $73
03/AD64: 69 00     ADC #$00
03/AD66: 85 73     STA $73
03/AD68: A5 70     LDA $70
03/AD6A: 29 0F     AND #$0F
03/AD6C: C9 04     CMP #$04
; $00-$03: move npc
03/AD6E: B0 0F     BCS $AD7F
03/AD70: BD 02 75  LDA $7502,X        ; npc position
03/AD73: 85 84     STA $84
03/AD75: BD 03 75  LDA $7503,X
03/AD78: 85 85     STA $85
03/AD7A: A5 70     LDA $70
03/AD7C: 4C D2 AF  JMP $AFD2          ; move npc
; $04-$07: set npc facing direction
03/AD7F: C9 08     CMP #$08
03/AD81: B0 11     BCS $AD94
03/AD83: 29 03     AND #$03
03/AD85: 0A        ASL 
03/AD86: A8        TAY 
03/AD87: B9 C2 AD  LDA $ADC2,Y
03/AD8A: 9D 0E 75  STA $750E,X
03/AD8D: B9 C3 AD  LDA $ADC3,Y
03/AD90: 9D 0F 75  STA $750F,X
03/AD93: 60        RTS 
; $0C: start animation
03/AD94: C9 0C     CMP #$0C
03/AD96: 90 1E     BCC $ADB6
03/AD98: D0 09     BNE $ADA3
03/AD9A: BD 01 75  LDA $7501,X
03/AD9D: 09 40     ORA #$40
03/AD9F: 9D 01 75  STA $7501,X
03/ADA2: 60        RTS 
; $0D: stop animation
03/ADA3: C9 0D     CMP #$0D
03/ADA5: D0 09     BNE $ADB0
03/ADA7: BD 01 75  LDA $7501,X
03/ADAA: 29 A0     AND #$A0
03/ADAC: 9D 01 75  STA $7501,X
03/ADAF: 60        RTS 
; $0E-$0F: hide npc
03/ADB0: A9 00     LDA #$00
03/ADB2: 9D 00 75  STA $7500,X
03/ADB5: 60        RTS 
; $08-$0B: show npc and set facing direction
03/ADB6: BD 0A 75  LDA $750A,X
03/ADB9: 9D 00 75  STA $7500,X
03/ADBC: A5 70     LDA $70
03/ADBE: 4C 83 AD  JMP $AD83
03/ADC1: 60        RTS 

03/ADC2: B22F B23F B24F B25F

; [ update npc dance ]

03/ADCA: E6 F0     INC $F0
03/ADCC: A5 F0     LDA $F0
03/ADCE: 29 03     AND #$03
03/ADD0: C9 03     CMP #$03
03/ADD2: A9 00     LDA #$00
03/ADD4: 65 74     ADC $74
03/ADD6: 85 74     STA $74
03/ADD8: C9 54     CMP #$54
03/ADDA: 90 13     BCC $ADEF
03/ADDC: A9 00     LDA #$00
03/ADDE: 85 74     STA $74
03/ADE0: A5 75     LDA $75
03/ADE2: 18        CLC 
03/ADE3: 69 01     ADC #$01
03/ADE5: 85 75     STA $75
03/ADE7: C9 05     CMP #$05
03/ADE9: A9 00     LDA #$00
03/ADEB: 90 02     BCC $ADEF
03/ADED: 38        SEC 
03/ADEE: 60        RTS 
03/ADEF: A8        TAY 
03/ADF0: A2 00     LDX #$00
03/ADF2: B9 1E AE  LDA $AE1E,Y
03/ADF5: 9D 06 75  STA $7506,X
03/ADF8: B9 72 AE  LDA $AE72,Y
03/ADFB: 9D 07 75  STA $7507,X
03/ADFE: B9 C6 AE  LDA $AEC6,Y
03/AE01: 0A        ASL 
03/AE02: 84 80     STY $80
03/AE04: A8        TAY 
03/AE05: B9 C2 AD  LDA $ADC2,Y
03/AE08: 9D 0E 75  STA $750E,X
03/AE0B: B9 C3 AD  LDA $ADC3,Y
03/AE0E: 9D 0F 75  STA $750F,X
03/AE11: A4 80     LDY $80
03/AE13: 8A        TXA 
03/AE14: 18        CLC 
03/AE15: 69 10     ADC #$10
03/AE17: AA        TAX 
03/AE18: C9 A0     CMP #$A0
03/AE1A: 90 D6     BCC $ADF2
03/AE1C: 18        CLC 
03/AE1D: 60        RTS 

03/AE1E: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0E
03/AE2E: 0F 0F 0F 0F 0F 0F 0F 0F 0E 0E 0D 0C 0B 0A 09 08
03/AE3E: 07 06 05 04 03 02 01 01 00 00 00 00 00 00 00 00
03/AE4E: 01 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
03/AE5E: 0F 0F 0F 0E 0D 0C 0B 0A 09 08 07 06 05 04 03 02
03/AE6E: 01 00 00 00

03/AE72: 00 00 00 00 00 00 00 00 00 00 00 00 01 01 02 03
03/AE82: 04 05 06 07 08 09 0A 0B 0C 0D 0E 0E 0F 0F 0F 0F
03/AE92: 0F 0F 0F 0F 0E 0E 0D 0C 0B 0A 09 08 07 06 05 04
03/AEA2: 03 02 01 01 00 00 00 00 00 00 00 00 00 00 00 00
03/AEB2: 00 01 02 03 04 05 06 07 07 07 07 07 07 06 05 04
03/AEC2: 03 02 01 00

03/AEC6: 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02
03/AED6: 02 02 02 02 03 03 03 03 03 03 03 03 03 03 03 03
03/AEE6: 03 03 03 03 03 03 03 03 03 03 03 03 02 02 02 02
03/AEF6: 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02
03/AF06: 02 01 03 00 02 01 03 00 02 01 03 00 02 01 03 00
03/AF16: 02 01 03 02

; [ draw npc sprite ]

03/AF1A: 20 02 A9  JSR $A902
03/AF1D: A5 26     LDA $26
03/AF1F: 38        SEC 
03/AF20: E9 10     SBC #$10
03/AF22: A8        TAY 
03/AF23: A6 8F     LDX $8F
03/AF25: BD 01 74  LDA $7401,X
03/AF28: 29 04     AND #$04
03/AF2A: F0 0B     BEQ $AF37
03/AF2C: B9 02 02  LDA $0202,Y
03/AF2F: 49 20     EOR #$20
03/AF31: 99 02 02  STA $0202,Y
03/AF34: 99 0A 02  STA $020A,Y
03/AF37: BD 01 74  LDA $7401,X
03/AF3A: 29 02     AND #$02
03/AF3C: F0 0B     BEQ $AF49
03/AF3E: B9 06 02  LDA $0206,Y
03/AF41: 49 20     EOR #$20
03/AF43: 99 06 02  STA $0206,Y
03/AF46: 99 0E 02  STA $020E,Y
03/AF49: 60        RTS 

; [ object command 6: update npcs ]

03/AF4A: A5 F0     LDA $F0
03/AF4C: 4A        LSR 
03/AF4D: B0 16     BCS $AF65
; even frames (normal order)
03/AF4F: A2 00     LDX #$00
03/AF51: BD 00 75  LDA $7500,X
03/AF54: F0 03     BEQ $AF59
03/AF56: 20 0D B1  JSR $B10D          ; update npc sprites
03/AF59: 8A        TXA 
03/AF5A: 18        CLC 
03/AF5B: 69 10     ADC #$10
03/AF5D: AA        TAX 
03/AF5E: C9 C0     CMP #$C0
03/AF60: 90 EF     BCC $AF51
03/AF62: 4C 91 AF  JMP $AF91          ; update random npc movement
; odd frames (reverse order)
03/AF65: A2 B0     LDX #$B0
03/AF67: BD 00 75  LDA $7500,X
03/AF6A: F0 03     BEQ $AF6F
03/AF6C: 20 0D B1  JSR $B10D          ; update npc sprites
03/AF6F: 8A        TXA 
03/AF70: 38        SEC 
03/AF71: E9 10     SBC #$10
03/AF73: AA        TAX 
03/AF74: B0 F1     BCS $AF67
03/AF76: 4C 91 AF  JMP $AF91          ; update random npc movement

; [ object command 8: update all npc sprites (no movement) ]

03/AF79: A9 40     LDA #$40
03/AF7B: 85 26     STA $26            ; start at sprite 16
03/AF7D: A2 00     LDX #$00
03/AF7F: BD 00 75  LDA $7500,X
03/AF82: F0 03     BEQ $AF87          ; branch if not visible
03/AF84: 20 5E B1  JSR $B15E          ; update npc sprites (no movement)
03/AF87: 8A        TXA 
03/AF88: 18        CLC 
03/AF89: 69 10     ADC #$10
03/AF8B: AA        TAX 
03/AF8C: C9 C0     CMP #$C0
03/AF8E: 90 EF     BCC $AF7F
03/AF90: 60        RTS 

; [ update random npc movement ]

03/AF91: A5 6C     LDA $6C
03/AF93: D0 1F     BNE $AFB4
03/AF95: A5 4A     LDA $4A
03/AF97: 18        CLC 
03/AF98: 69 10     ADC #$10
03/AF9A: 29 F0     AND #$F0
03/AF9C: C9 C0     CMP #$C0
03/AF9E: 90 02     BCC $AFA2
03/AFA0: A9 00     LDA #$00
03/AFA2: 85 4A     STA $4A
03/AFA4: AA        TAX 
03/AFA5: BD 00 75  LDA $7500,X
03/AFA8: F0 0A     BEQ $AFB4
03/AFAA: BD 01 75  LDA $7501,X
03/AFAD: 29 80     AND #$80
03/AFAF: 1D 0C 75  ORA $750C,X
03/AFB2: F0 01     BEQ $AFB5
03/AFB4: 60        RTS 
03/AFB5: BD 0B 75  LDA $750B,X
03/AFB8: F0 07     BEQ $AFC1
03/AFBA: 38        SEC 
03/AFBB: E9 01     SBC #$01
03/AFBD: 9D 0B 75  STA $750B,X
03/AFC0: 60        RTS 
03/AFC1: BD 02 75  LDA $7502,X
03/AFC4: 85 84     STA $84
03/AFC6: BD 03 75  LDA $7503,X
03/AFC9: 85 85     STA $85
03/AFCB: E6 F4     INC $F4
03/AFCD: A4 F4     LDY $F4
03/AFCF: B9 00 F9  LDA $F900,Y        ; rng table
; fallthrough

; [ move npc ]

03/AFD2: 29 03     AND #$03
03/AFD4: C9 02     CMP #$02
03/AFD6: 90 59     BCC $B031
03/AFD8: D0 28     BNE $B002
03/AFDA: A5 85     LDA $85
03/AFDC: 18        CLC 
03/AFDD: 69 01     ADC #$01
03/AFDF: 29 3F     AND #$3F
03/AFE1: 85 85     STA $85
03/AFE3: 20 C0 B0  JSR $B0C0
03/AFE6: B0 19     BCS $B001
03/AFE8: A5 85     LDA $85
03/AFEA: 9D 03 75  STA $7503,X
03/AFED: A9 01     LDA #$01
03/AFEF: 9D 09 75  STA $7509,X
03/AFF2: A9 08     LDA #$08
03/AFF4: 9D 0C 75  STA $750C,X
03/AFF7: A9 4F     LDA #$4F
03/AFF9: 9D 0E 75  STA $750E,X
03/AFFC: A9 B2     LDA #$B2
03/AFFE: 4C 88 B0  JMP $B088
03/B001: 60        RTS 
03/B002: A5 85     LDA $85
03/B004: 38        SEC 
03/B005: E9 01     SBC #$01
03/B007: 29 3F     AND #$3F
03/B009: 85 85     STA $85
03/B00B: 20 C0 B0  JSR $B0C0
03/B00E: B0 F1     BCS $B001
03/B010: A5 85     LDA $85
03/B012: 9D 03 75  STA $7503,X
03/B015: 9D 05 75  STA $7505,X
03/B018: A9 FF     LDA #$FF
03/B01A: 9D 09 75  STA $7509,X
03/B01D: A9 0F     LDA #$0F
03/B01F: 9D 07 75  STA $7507,X
03/B022: A9 04     LDA #$04
03/B024: 9D 0C 75  STA $750C,X
03/B027: A9 5F     LDA #$5F
03/B029: 9D 0E 75  STA $750E,X
03/B02C: A9 B2     LDA #$B2
03/B02E: 4C 88 B0  JMP $B088
03/B031: C9 00     CMP #$00
03/B033: F0 2F     BEQ $B064
03/B035: A5 84     LDA $84
03/B037: 38        SEC 
03/B038: E9 01     SBC #$01
03/B03A: 29 3F     AND #$3F
03/B03C: 85 84     STA $84
03/B03E: 20 C0 B0  JSR $B0C0
03/B041: B0 BE     BCS $B001
03/B043: A5 84     LDA $84
03/B045: 9D 04 75  STA $7504,X
03/B048: 9D 02 75  STA $7502,X
03/B04B: A9 FF     LDA #$FF
03/B04D: 9D 08 75  STA $7508,X
03/B050: A9 0F     LDA #$0F
03/B052: 9D 06 75  STA $7506,X
03/B055: A9 02     LDA #$02
03/B057: 9D 0C 75  STA $750C,X
03/B05A: A9 3F     LDA #$3F
03/B05C: 9D 0E 75  STA $750E,X
03/B05F: A9 B2     LDA #$B2
03/B061: 4C 88 B0  JMP $B088
03/B064: A5 84     LDA $84
03/B066: 18        CLC 
03/B067: 69 01     ADC #$01
03/B069: 29 3F     AND #$3F
03/B06B: 85 84     STA $84
03/B06D: 20 C0 B0  JSR $B0C0
03/B070: B0 8F     BCS $B001
03/B072: A5 84     LDA $84
03/B074: 9D 02 75  STA $7502,X
03/B077: A9 01     LDA #$01
03/B079: 9D 08 75  STA $7508,X
03/B07C: A9 01     LDA #$01
03/B07E: 9D 0C 75  STA $750C,X
03/B081: A9 2F     LDA #$2F
03/B083: 9D 0E 75  STA $750E,X
03/B086: A9 B2     LDA #$B2
03/B088: 9D 0F 75  STA $750F,X
03/B08B: BD 03 74  LDA $7403,X
03/B08E: 9D 0B 75  STA $750B,X
03/B091: 60        RTS 

; [ check npc passability ]

03/B092: A0 70     LDY #$70
03/B094: A5 84     LDA $84
03/B096: 05 85     ORA $85
03/B098: 29 20     AND #$20
03/B09A: D0 1C     BNE $B0B8
03/B09C: A5 85     LDA $85
03/B09E: 4A        LSR 
03/B09F: 4A        LSR 
03/B0A0: 4A        LSR 
03/B0A1: 09 70     ORA #$70
03/B0A3: 85 81     STA $81
03/B0A5: A5 85     LDA $85
03/B0A7: 0A        ASL 
03/B0A8: 0A        ASL 
03/B0A9: 0A        ASL 
03/B0AA: 0A        ASL 
03/B0AB: 0A        ASL 
03/B0AC: 05 84     ORA $84
03/B0AE: 85 80     STA $80
03/B0B0: A0 00     LDY #$00
03/B0B2: B1 80     LDA ($80),Y
03/B0B4: 0A        ASL 
03/B0B5: A8        TAY 
03/B0B6: 84 67     STY $67
03/B0B8: B9 00 04  LDA $0400,Y
03/B0BB: 29 F9     AND #$F9
03/B0BD: 60        RTS 
03/B0BE: 38        SEC 
03/B0BF: 60        RTS 

; [  ]

03/B0C0: A5 6C     LDA $6C
03/B0C2: F0 06     BEQ $B0CA
03/B0C4: 20 92 B0  JSR $B092
03/B0C7: 4C 01 B1  JMP $B101
03/B0CA: A5 84     LDA $84
03/B0CC: C5 68     CMP $68
03/B0CE: D0 06     BNE $B0D6
03/B0D0: A5 85     LDA $85
03/B0D2: C5 69     CMP $69
03/B0D4: F0 E8     BEQ $B0BE
03/B0D6: 20 92 B0  JSR $B092
03/B0D9: D0 E3     BNE $B0BE
03/B0DB: A0 00     LDY #$00
03/B0DD: 84 80     STY $80
03/B0DF: E4 80     CPX $80
03/B0E1: F0 15     BEQ $B0F8
03/B0E3: B9 00 75  LDA $7500,Y
03/B0E6: F0 10     BEQ $B0F8
03/B0E8: A5 84     LDA $84
03/B0EA: D9 02 75  CMP $7502,Y
03/B0ED: D0 09     BNE $B0F8
03/B0EF: A5 85     LDA $85
03/B0F1: D9 03 75  CMP $7503,Y
03/B0F4: D0 02     BNE $B0F8
03/B0F6: 38        SEC 
03/B0F7: 60        RTS 
03/B0F8: 98        TYA 
03/B0F9: 18        CLC 
03/B0FA: 69 10     ADC #$10
03/B0FC: A8        TAY 
03/B0FD: C9 C0     CMP #$C0
03/B0FF: 90 DC     BCC $B0DD
03/B101: A4 67     LDY $67
03/B103: B9 00 04  LDA $0400,Y
03/B106: 29 06     AND #$06
03/B108: 9D 00 74  STA $7400,X
03/B10B: 18        CLC 
03/B10C: 60        RTS 

; [ update npc sprites ]

; updates movement and draws one npc (4 sprites)
; return carry set if sprite is offscreen

03/B10D: BD 0D 75  LDA $750D,X
03/B110: D0 07     BNE $B119
03/B112: A5 F0     LDA $F0
03/B114: 3D 02 74  AND $7402,X
03/B117: D0 45     BNE $B15E
03/B119: BD 08 75  LDA $7508,X
03/B11C: F0 1F     BEQ $B13D
03/B11E: 18        CLC 
03/B11F: 7D 06 75  ADC $7506,X
03/B122: 29 0F     AND #$0F
03/B124: 9D 06 75  STA $7506,X
03/B127: D0 35     BNE $B15E
03/B129: A9 00     LDA #$00
03/B12B: 9D 08 75  STA $7508,X
03/B12E: 9D 0C 75  STA $750C,X
03/B131: 9D 0D 75  STA $750D,X
03/B134: BD 02 75  LDA $7502,X
03/B137: 9D 04 75  STA $7504,X
03/B13A: 4C 5E B1  JMP $B15E
03/B13D: BD 09 75  LDA $7509,X
03/B140: F0 1C     BEQ $B15E
03/B142: 18        CLC 
03/B143: 7D 07 75  ADC $7507,X
03/B146: 29 0F     AND #$0F
03/B148: 9D 07 75  STA $7507,X
03/B14B: D0 11     BNE $B15E
03/B14D: A9 00     LDA #$00
03/B14F: 9D 09 75  STA $7509,X
03/B152: 9D 0C 75  STA $750C,X
03/B155: 9D 0D 75  STA $750D,X
03/B158: BD 03 75  LDA $7503,X
03/B15B: 9D 05 75  STA $7505,X
; fallthrough

; [ update npc sprites (no movement) ]

03/B15E: BD 06 75  LDA $7506,X
03/B161: 1D 07 75  ORA $7507,X
03/B164: C9 08     CMP #$08
03/B166: D0 06     BNE $B16E
03/B168: BD 00 74  LDA $7400,X
03/B16B: 9D 01 74  STA $7401,X
03/B16E: BD 07 75  LDA $7507,X
03/B171: 18        CLC 
03/B172: E5 36     SBC $36
03/B174: 29 0F     AND #$0F
03/B176: 85 80     STA $80
03/B178: BD 05 75  LDA $7505,X
03/B17B: E5 2A     SBC $2A
03/B17D: 29 3F     AND #$3F
03/B17F: C9 10     CMP #$10
03/B181: B0 2D     BCS $B1B0
03/B183: 0A        ASL 
03/B184: 0A        ASL 
03/B185: 0A        ASL 
03/B186: 0A        ASL 
03/B187: 05 80     ORA $80
03/B189: C9 E8     CMP #$E8
03/B18B: B0 23     BCS $B1B0
03/B18D: E9 02     SBC #$02
03/B18F: 85 41     STA $41
03/B191: BD 06 75  LDA $7506,X
03/B194: 38        SEC 
03/B195: E5 35     SBC $35
03/B197: 29 0F     AND #$0F
03/B199: 85 80     STA $80
03/B19B: BD 04 75  LDA $7504,X
03/B19E: E5 29     SBC $29
03/B1A0: 29 3F     AND #$3F
03/B1A2: C9 10     CMP #$10
03/B1A4: B0 0A     BCS $B1B0
03/B1A6: 0A        ASL 
03/B1A7: 0A        ASL 
03/B1A8: 0A        ASL 
03/B1A9: 0A        ASL 
03/B1AA: 05 80     ORA $80
03/B1AC: C9 F8     CMP #$F8
03/B1AE: 90 02     BCC $B1B2
03/B1B0: 38        SEC 
03/B1B1: 60        RTS 
03/B1B2: 85 40     STA $40
03/B1B4: 86 8F     STX $8F
03/B1B6: BD 0D 75  LDA $750D,X
03/B1B9: 30 41     BMI $B1FC
03/B1BB: BD 01 75  LDA $7501,X
03/B1BE: 29 E0     AND #$E0
03/B1C0: F0 1B     BEQ $B1DD
03/B1C2: C9 C0     CMP #$C0
03/B1C4: F0 08     BEQ $B1CE
03/B1C6: 29 40     AND #$40
03/B1C8: D0 0C     BNE $B1D6
03/B1CA: A9 00     LDA #$00
03/B1CC: F0 18     BEQ $B1E6
03/B1CE: A5 F0     LDA $F0
03/B1D0: 4A        LSR 
03/B1D1: 29 08     AND #$08
03/B1D3: 4C E6 B1  JMP $B1E6
03/B1D6: A5 F0     LDA $F0
03/B1D8: 29 10     AND #$10
03/B1DA: 4C E6 B1  JMP $B1E6
03/B1DD: BD 06 75  LDA $7506,X
03/B1E0: 1D 07 75  ORA $7507,X
03/B1E3: 0A        ASL 
03/B1E4: 29 08     AND #$08
03/B1E6: 18        CLC 
03/B1E7: 7D 0E 75  ADC $750E,X
03/B1EA: 85 80     STA $80
03/B1EC: BD 0F 75  LDA $750F,X
03/B1EF: 69 00     ADC #$00
03/B1F1: 85 81     STA $81
03/B1F3: 8A        TXA 
03/B1F4: 18        CLC 
03/B1F5: 69 10     ADC #$10
03/B1F7: 85 82     STA $82
03/B1F9: 4C 1A AF  JMP $AF1A
03/B1FC: 29 7F     AND #$7F
03/B1FE: 9D 0D 75  STA $750D,X
03/B201: 8A        TXA 
03/B202: 18        CLC 
03/B203: 69 10     ADC #$10
03/B205: 85 82     STA $82
03/B207: A5 33     LDA $33
03/B209: 4A        LSR 
03/B20A: B0 18     BCS $B224
03/B20C: 4A        LSR 
03/B20D: B0 0F     BCS $B21E
03/B20F: 4A        LSR 
03/B210: B0 06     BCS $B218
03/B212: A9 4F     LDA #$4F
03/B214: A2 B2     LDX #$B2
03/B216: D0 10     BNE $B228
03/B218: A9 5F     LDA #$5F
03/B21A: A2 B2     LDX #$B2
03/B21C: D0 0A     BNE $B228
03/B21E: A9 2F     LDA #$2F
03/B220: A2 B2     LDX #$B2
03/B222: D0 04     BNE $B228
03/B224: A9 3F     LDA #$3F
03/B226: A2 B2     LDX #$B2
03/B228: 85 80     STA $80
03/B22A: 86 81     STX $81
03/B22C: 4C 1A AF  JMP $AF1A

03/B22F: 09 42 0B 43 08 42 0A 43 0D 42 0F 43 0C 42 0E 43
03/B23F: 08 02 0A 03 09 02 0B 03 0C 02 0E 03 0D 02 0F 03
03/B24F: 00 02 02 03 01 02 03 03 00 02 03 43 01 02 02 43
03/B25F: 04 02 06 03 05 02 07 03 04 02 07 43 05 02 06 43

; [ object command 7: load npcs ]

03/B26F: A9 00     LDA #$00           ; $7500 (npc properties)
03/B271: 85 8E     STA $8E
03/B273: A9 75     LDA #$75
03/B275: 85 8F     STA $8F
03/B277: A9 0C     LDA #$0C           ; 12 npcs
03/B279: 85 8B     STA $8B
03/B27B: A9 80     LDA #$80           ; $0780 (npc data buffer, 3 bytes each)
03/B27D: 85 8C     STA $8C
03/B27F: A9 07     LDA #$07
03/B281: 85 8D     STA $8D
03/B283: A0 00     LDY #$00
03/B285: B1 8C     LDA ($8C),Y
03/B287: 20 96 B2  JSR $B296          ; load npc
03/B28A: A5 8C     LDA $8C
03/B28C: 18        CLC 
03/B28D: 69 03     ADC #$03
03/B28F: 85 8C     STA $8C
03/B291: C6 8B     DEC $8B
03/B293: D0 EE     BNE $B283
03/B295: 60        RTS 

; [ load npc ]

; npc properties format (3 bytes each)
;   0: npc id
;   1: ???xxxxx
;        x: x position
;   2: ---yyyyy
;        y: y position

03/B296: A0 0A     LDY #$0A
03/B298: 91 8E     STA ($8E),Y        ; $750A: npc id
03/B29A: A8        TAY 
03/B29B: 20 28 B3  JSR $B328          ; check npc switch
03/B29E: F0 01     BEQ $B2A1          ; npc is hidden if bit is 0
03/B2A0: 98        TYA 
03/B2A1: A0 00     LDY #$00
03/B2A3: 91 8E     STA ($8E),Y        ; $7500 (npc id)
03/B2A5: C8        INY 
03/B2A6: B1 8C     LDA ($8C),Y
03/B2A8: 85 86     STA $86
03/B2AA: 29 E0     AND #$E0
03/B2AC: 91 8E     STA ($8E),Y        ; $7501 (movement flags)
03/B2AE: C8        INY 
03/B2AF: B1 8C     LDA ($8C),Y
03/B2B1: 85 87     STA $87
03/B2B3: A5 86     LDA $86
03/B2B5: 29 1F     AND #$1F
03/B2B7: 91 8E     STA ($8E),Y        ; $7502 (destination x position)
03/B2B9: A0 04     LDY #$04
03/B2BB: 91 8E     STA ($8E),Y        ; $7504 (current x position)
03/B2BD: A5 87     LDA $87
03/B2BF: 29 1F     AND #$1F
03/B2C1: A0 03     LDY #$03
03/B2C3: 91 8E     STA ($8E),Y        ; $7503 (destination y position)
03/B2C5: A0 05     LDY #$05
03/B2C7: 91 8E     STA ($8E),Y        ; $7505 (current y position)
03/B2C9: A0 06     LDY #$06
03/B2CB: A9 00     LDA #$00
03/B2CD: 91 8E     STA ($8E),Y        ; $7506 (x subtile position)
03/B2CF: C8        INY 
03/B2D0: 91 8E     STA ($8E),Y        ; $7507 (y subtile position)
03/B2D2: C8        INY 
03/B2D3: 91 8E     STA ($8E),Y        ; $7508 (x movement speed)
03/B2D5: C8        INY 
03/B2D6: 91 8E     STA ($8E),Y        ; $7509 (y movement speed)
03/B2D8: A0 0B     LDY #$0B
03/B2DA: 91 8E     STA ($8E),Y        ; $750B (counter for random movement)
03/B2DC: C8        INY 
03/B2DD: 91 8E     STA ($8E),Y        ; $750C (movement direction)
03/B2DF: C8        INY 
03/B2E0: 91 8E     STA ($8E),Y        ; $750D (interaction flags)
03/B2E2: A0 0E     LDY #$0E
03/B2E4: A9 4F     LDA #$4F           ; 03/B24F
03/B2E6: 91 8E     STA ($8E),Y        ; $750E (pointer to animation data)
03/B2E8: C8        INY 
03/B2E9: A9 B2     LDA #$B2
03/B2EB: 91 8E     STA ($8E),Y        ; $750F
03/B2ED: A0 02     LDY #$02
03/B2EF: B1 8E     LDA ($8E),Y        ; $7502
03/B2F1: 85 84     STA $84
03/B2F3: C8        INY 
03/B2F4: B1 8E     LDA ($8E),Y        ; $7503
03/B2F6: 85 85     STA $85
03/B2F8: 20 92 B0  JSR $B092          ; check npc passability
03/B2FB: B9 00 04  LDA $0400,Y
03/B2FE: 29 06     AND #$06
03/B300: A4 8E     LDY $8E
03/B302: 99 01 74  STA $7401,Y
03/B305: 99 00 74  STA $7400,Y
03/B308: A0 0A     LDY #$0A
03/B30A: B1 8E     LDA ($8E),Y        ; npc id
03/B30C: A8        TAY 
03/B30D: B9 00 BE  LDA $BE00,Y
03/B310: 48        PHA 
03/B311: A4 8E     LDY $8E
03/B313: 29 0F     AND #$0F
03/B315: 99 02 74  STA $7402,Y        ; animation speed
03/B318: 68        PLA 
03/B319: 4A        LSR 
03/B31A: 4A        LSR 
03/B31B: 4A        LSR 
03/B31C: 4A        LSR 
03/B31D: 99 03 74  STA $7403,Y        ; movement speed
03/B320: A5 8E     LDA $8E
03/B322: 18        CLC 
03/B323: 69 10     ADC #$10
03/B325: 85 8E     STA $8E
03/B327: 60        RTS 

; [ check npc switch ]

03/B328: 85 80     STA $80
03/B32A: 29 07     AND #$07
03/B32C: AA        TAX 
03/B32D: BD 3E B3  LDA $B33E,X        ; bit mask
03/B330: 85 81     STA $81
03/B332: A5 80     LDA $80
03/B334: 4A        LSR 
03/B335: 4A        LSR 
03/B336: 4A        LSR 
03/B337: AA        TAX 
03/B338: BD 40 60  LDA $6040,X        ; check event switch
03/B33B: 25 81     AND $81
03/B33D: 60        RTS 

; bit masks
03/B33E: 01 02 04 08 10 20 40 80

; --------------------------------------------------------------------------

; [  ]

03/B346: A2 3B     LDX #$3B
03/B348: A0 51     LDY #$51
03/B34A: 20 6D B3  JSR $B36D
03/B34D: A2 3C     LDX #$3C
03/B34F: A0 52     LDY #$52
03/B351: 20 6D B3  JSR $B36D
03/B354: A2 3D     LDX #$3D
03/B356: A0 53     LDY #$53
03/B358: 20 6D B3  JSR $B36D
03/B35B: A2 3E     LDX #$3E
03/B35D: A0 54     LDY #$54
03/B35F: 20 6D B3  JSR $B36D
03/B362: A2 77     LDX #$77
03/B364: A0 65     LDY #$65
03/B366: 20 6D B3  JSR $B36D
03/B369: A2 78     LDX #$78
03/B36B: A0 66     LDY #$66
03/B36D: B9 00 05  LDA $0500,Y
03/B370: 9D 00 05  STA $0500,X
03/B373: B9 80 05  LDA $0580,Y
03/B376: 9D 80 05  STA $0580,X
03/B379: B9 00 06  LDA $0600,Y
03/B37C: 9D 00 06  STA $0600,X
03/B37F: B9 80 06  LDA $0680,Y
03/B382: 9D 80 06  STA $0680,X
03/B385: 8A        TXA 
03/B386: 0A        ASL 
03/B387: AA        TAX 
03/B388: 98        TYA 
03/B389: 0A        ASL 
03/B38A: A8        TAY 
03/B38B: B9 00 04  LDA $0400,Y
03/B38E: 9D 00 04  STA $0400,X
03/B391: B9 01 04  LDA $0401,Y
03/B394: 9D 01 04  STA $0401,X
03/B397: 60        RTS 

; [ event command $E5: pandaemonium castle animation ]

03/B398: A9 00     LDA #$00
03/B39A: 85 03     STA $03
03/B39C: A9 08     LDA #$08
03/B39E: 8D 15 40  STA $4015
03/B3A1: A9 00     LDA #$00
03/B3A3: 8D 0C 40  STA $400C
03/B3A6: A9 00     LDA #$00
03/B3A8: 20 E2 B3  JSR $B3E2
03/B3AB: 20 CA B4  JSR $B4CA
03/B3AE: E6 03     INC $03
03/B3B0: A5 03     LDA $03
03/B3B2: C9 81     CMP #$81
03/B3B4: 90 F0     BCC $B3A6
03/B3B6: A2 F0     LDX #$F0
03/B3B8: A9 F8     LDA #$F8
03/B3BA: 9D 00 02  STA $0200,X
03/B3BD: E8        INX 
03/B3BE: D0 FA     BNE $B3BA
03/B3C0: 20 46 B3  JSR $B346
03/B3C3: A9 00     LDA #$00
03/B3C5: 85 03     STA $03
03/B3C7: A9 06     LDA #$06
03/B3C9: 20 E2 B3  JSR $B3E2
03/B3CC: E6 03     INC $03
03/B3CE: A5 03     LDA $03
03/B3D0: C9 41     CMP #$41
03/B3D2: 90 F3     BCC $B3C7
03/B3D4: AD 13 60  LDA $6013
03/B3D7: 09 04     ORA #$04
03/B3D9: 8D 13 60  STA $6013
03/B3DC: A9 0F     LDA #$0F
03/B3DE: 8D 15 40  STA $4015
03/B3E1: 60        RTS 

; [  ]

03/B3E2: AA        TAX 
03/B3E3: 20 00 FE  JSR $FE00          ; wait for vblank
03/B3E6: A9 02     LDA #$02
03/B3E8: 8D 14 40  STA $4014
03/B3EB: A5 03     LDA $03
03/B3ED: 29 03     AND #$03
03/B3EF: D0 04     BNE $B3F5
03/B3F1: 8A        TXA 
03/B3F2: 49 06     EOR #$06
03/B3F4: AA        TAX 
03/B3F5: 8A        TXA 
03/B3F6: 20 11 B4  JSR $B411
03/B3F9: A9 00     LDA #$00
03/B3FB: 85 80     STA $80
03/B3FD: 20 BD B6  JSR $B6BD
03/B400: E6 F0     INC $F0
03/B402: A5 F0     LDA $F0
03/B404: 29 01     AND #$01
03/B406: 09 0E     ORA #$0E
03/B408: 8D 0E 40  STA $400E
03/B40B: A9 00     LDA #$00
03/B40D: 8D 0F 40  STA $400F
03/B410: 60        RTS 

; [  ]

03/B411: 85 63     STA $63
03/B413: A9 06     LDA #$06
03/B415: 85 64     STA $64
03/B417: A6 63     LDX $63
03/B419: E6 63     INC $63
03/B41B: BD 40 B4  LDA $B440,X
03/B41E: 85 38     STA $38
03/B420: BD 52 B4  LDA $B452,X
03/B423: 85 39     STA $39
03/B425: BD 34 B4  LDA $B434,X
03/B428: A8        TAY 
03/B429: 20 96 B4  JSR $B496
03/B42C: 20 64 B4  JSR $B464
03/B42F: C6 64     DEC $64
03/B431: D0 E4     BNE $B417
03/B433: 60        RTS 

03/B434: 3B 3C 3D 3E 77 78 34 34 34 34 34 34
03/B440: 05 06 05 06 05 06 05 06 05 06 05 06 05 06 05 06 05 06
03/B452: 08 08 09 09 0A 0A 08 08 09 09 0A 0A 08 08 09 09 0A 0A

; [  ]

03/B464: 2C 02 20  BIT $2002
03/B467: A5 62     LDA $62
03/B469: 8D 06 20  STA $2006
03/B46C: A5 61     LDA $61
03/B46E: 8D 06 20  STA $2006
03/B471: B9 00 05  LDA $0500,Y
03/B474: 8D 07 20  STA $2007
03/B477: B9 80 05  LDA $0580,Y
03/B47A: 8D 07 20  STA $2007
03/B47D: A5 62     LDA $62
03/B47F: 8D 06 20  STA $2006
03/B482: A5 61     LDA $61
03/B484: 09 20     ORA #$20
03/B486: 8D 06 20  STA $2006
03/B489: B9 00 06  LDA $0600,Y
03/B48C: 8D 07 20  STA $2007
03/B48F: B9 80 06  LDA $0680,Y
03/B492: 8D 07 20  STA $2007
03/B495: 60        RTS 

; [  ]

03/B496: A5 2F     LDA $2F
03/B498: 18        CLC 
03/B499: 65 39     ADC $39
03/B49B: C9 0F     CMP #$0F
03/B49D: 90 02     BCC $B4A1
03/B49F: E9 0F     SBC #$0F
03/B4A1: AA        TAX 
03/B4A2: BD E8 B4  LDA $B4E8,X
03/B4A5: 85 62     STA $62
03/B4A7: BD D9 B4  LDA $B4D9,X
03/B4AA: 85 61     STA $61
03/B4AC: A5 27     LDA $27
03/B4AE: 18        CLC 
03/B4AF: 65 38     ADC $38
03/B4B1: 29 1F     AND #$1F
03/B4B3: 0A        ASL 
03/B4B4: C9 20     CMP #$20
03/B4B6: B0 05     BCS $B4BD
03/B4B8: 05 61     ORA $61
03/B4BA: 85 61     STA $61
03/B4BC: 60        RTS 
03/B4BD: 29 1F     AND #$1F
03/B4BF: 05 61     ORA $61
03/B4C1: 85 61     STA $61
03/B4C3: A5 62     LDA $62
03/B4C5: 09 04     ORA #$04
03/B4C7: 85 62     STA $62
03/B4C9: 60        RTS 
03/B4CA: A9 F0     LDA #$F0
03/B4CC: 85 26     STA $26
03/B4CE: A9 58     LDA #$58
03/B4D0: 85 40     STA $40
03/B4D2: A9 90     LDA #$90
03/B4D4: 85 41     STA $41
03/B4D6: 4C 53 A4  JMP $A453

03/B4D9: 00 40 80 C0 00 40 80 C0 00 40 80 C0 00 40 80
03/B4E8: 20 20 20 20 21 21 21 21 22 22 22 22 23 23 23

; --------------------------------------------------------------------------

; [ event commands $D0-$FF ]

; $D0-$DF: 
03/B4F7: C9 E0     CMP #$E0
03/B4F9: B0 1F     BCS $B51A
03/B4FB: A5 72     LDA $72            ; increment event script pointer
03/B4FD: 18        CLC 
03/B4FE: 69 01     ADC #$01
03/B500: 85 72     STA $72
03/B502: A5 73     LDA $73
03/B504: 69 00     ADC #$00
03/B506: 85 73     STA $73
03/B508: A5 70     LDA $70
03/B50A: 29 0F     AND #$0F           ; low nybble of event opcode
03/B50C: A8        TAY 
03/B50D: B9 95 B7  LDA $B795,Y        ; bit mask
03/B510: BE 95 B8  LDX $B895,Y        ; byte offset (either 0 or 1)
03/B513: 5D 12 60  EOR $6012,X        ; toggle ??? bit
03/B516: 9D 12 60  STA $6012,X
03/B519: 60        RTS 
; $F0-$FF: 
03/B51A: C9 F0     CMP #$F0
03/B51C: 90 27     BCC $B545
03/B51E: A2 02     LDX #$02           ; $F0-$FC have a 1-byte parameter
03/B520: C9 FD     CMP #$FD
03/B522: 90 02     BCC $B526
03/B524: A2 01     LDX #$01
03/B526: 8A        TXA 
03/B527: 18        CLC 
03/B528: 65 72     ADC $72            ; increment event script pointer
03/B52A: 85 72     STA $72
03/B52C: A5 73     LDA $73
03/B52E: 69 00     ADC #$00
03/B530: 85 73     STA $73
03/B532: A5 70     LDA $70
03/B534: 29 0F     AND #$0F
03/B536: 0A        ASL 
03/B537: AA        TAX 
03/B538: BD D0 B5  LDA $B5D0,X
03/B53B: 85 80     STA $80
03/B53D: BD D1 B5  LDA $B5D1,X
03/B540: 85 81     STA $81
03/B542: 6C 80 00  JMP ($0080)
; $E0-$EF: 
03/B545: A5 72     LDA $72            ; increment event script pointer
03/B547: 18        CLC 
03/B548: 69 01     ADC #$01
03/B54A: 85 72     STA $72
03/B54C: A5 73     LDA $73
03/B54E: 69 00     ADC #$00
03/B550: 85 73     STA $73
03/B552: A5 70     LDA $70
03/B554: 29 0F     AND #$0F
03/B556: 0A        ASL 
03/B557: AA        TAX 
03/B558: BD 65 B5  LDA $B565,X
03/B55B: 85 80     STA $80
03/B55D: BD 66 B5  LDA $B566,X
03/B560: 85 81     STA $81
03/B562: 6C 80 00  JMP ($0080)

; jump table for event command $E0-$EF
03/B565: B585 B588 B591 B59A B59E B5A1 B5A4 B5A7
03/B575: B5AA B5AE B5B3 B5B3 B5B3 B5B6 B5C0 B5C7

; $E0: shake screen
03/B585: 4C 91 B6  JMP $B691
; $E1: dreadnought launch animation
03/B588: A9 00     LDA #$00
03/B58A: 85 6C     STA $6C
03/B58C: A2 09     LDX #$09
03/B58E: 4C 03 A0  JMP $A003
; $E2: dreadnought explosion animation
03/B591: A9 40     LDA #$40           ; exit (to previous map)
03/B593: 85 44     STA $44
03/B595: A9 05     LDA #$05           ; event type 5 (dreadnought explosion animation)
03/B597: 85 6C     STA $6C
03/B599: 60        RTS 
; $E3: filter map bg palette (red)
03/B59A: 18        CLC 
03/B59B: 4C 03 C0  JMP $C003          ; filter map bg palette
; $E4: npc dance
03/B59E: 4C 28 AD  JMP $AD28
; $E5: pandaemonium castle animation
03/B5A1: 4C 98 B3  JMP $B398
; $E6: flash screen
03/B5A4: 4C 69 B6  JMP $B669
; $E7: end credits
03/B5A7: 4C 06 C0  JMP $C006
; $E8: filter map bg palette (blue)
03/B5AA: 38        SEC 
03/B5AB: 4C 03 C0  JMP $C003          ; filter map bg palette
; $E9: leviathan waves animation
03/B5AE: A2 00     LDX #$00
03/B5B0: 4C 03 A0  JMP $A003
; $EA-$EC
03/B5B3: 4C 17 B7  JMP $B717          ; restore saved guest character properties
; $ED: add leila to party
03/B5B6: 20 F5 B6  JSR $B6F5          ; save guest character properties
03/B5B9: A9 07     LDA #$07
03/B5BB: 85 61     STA $61
03/B5BD: 4C EF B6  JMP $B6EF          ; load guest character properties
; $EE: add leon to party
03/B5C0: A9 09     LDA #$09
03/B5C2: 85 61     STA $61
03/B5C4: 4C EF B6  JMP $B6EF          ; load guest character properties
; $EF: remove guest character
03/B5C7: A9 80     LDA #$80
03/B5C9: 8D F5 62  STA $62F5
03/B5CC: 4C F2 B6  JMP $B6F2          ; validate character rows
; unused
03/B5CF: 60        RTS 

; jump table for event command $F0-$FF
03/B5D0: B5F0 B5F5 B5FE B607 B610 B619 B61E B623
03/B5E0: B628 B650 B650 B650 B650 B651 B656 B664

; $F0: event dialogue
03/B5F0: A5 71     LDA $71
03/B5F2: 85 76     STA $76
03/B5F4: 60        RTS 
; $F1: exit (to world map)
03/B5F5: A5 71     LDA $71
03/B5F7: 85 45     STA $45
03/B5F9: A9 C0     LDA #$C0
03/B5FB: 85 44     STA $44
03/B5FD: 60        RTS 
; $F2: entrance
03/B5FE: A5 71     LDA $71
03/B600: 85 45     STA $45
03/B602: A9 80     LDA #$80
03/B604: 85 44     STA $44
03/B606: 60        RTS 
; $F3: battle
03/B607: A5 71     LDA $71
03/B609: 85 6A     STA $6A
03/B60B: A9 20     LDA #$20
03/B60D: 85 44     STA $44
03/B60F: 60        RTS 
; $F4: entrance
03/B610: A5 71     LDA $71
03/B612: 85 45     STA $45
03/B614: A9 80     LDA #$80
03/B616: 85 44     STA $44
03/B618: 60        RTS 
; $F5: play song
03/B619: A5 71     LDA $71
03/B61B: 85 E0     STA $E0            ; play song
03/B61D: 60        RTS 
; $F6: set event switch
03/B61E: A4 71     LDY $71
03/B620: 4C 59 B7  JMP $B759
; $F7: toggle event switch
03/B623: A4 71     LDY $71
03/B625: 4C 7D B7  JMP $B77D
; $F8: wait
03/B628: A5 75     LDA $75
03/B62A: 30 08     BMI $B634          ; branch if already waiting
03/B62C: A9 80     LDA #$80
03/B62E: 85 75     STA $75
03/B630: A5 71     LDA $71
03/B632: 85 74     STA $74            ; set wait counter
03/B634: A5 74     LDA $74
03/B636: 38        SEC 
03/B637: E9 01     SBC #$01
03/B639: 85 74     STA $74
03/B63B: B0 05     BCS $B642
03/B63D: A9 00     LDA #$00
03/B63F: 85 75     STA $75
03/B641: 60        RTS 
03/B642: A5 72     LDA $72
03/B644: 38        SEC 
03/B645: E9 02     SBC #$02
03/B647: 85 72     STA $72
03/B649: A5 73     LDA $73
03/B64B: E9 00     SBC #$00
03/B64D: 85 73     STA $73
03/B64F: 60        RTS 
; $F9-FC: no effect
03/B650: 60        RTS 
; $FD: exit (to previous map)
03/B651: A9 40     LDA #$40
03/B653: 85 44     STA $44
03/B655: 60        RTS 
; $FE: repeat forever ??? (unused)
03/B656: A5 72     LDA $72            ; decrement event script pointer
03/B658: 38        SEC 
03/B659: E9 01     SBC #$01
03/B65B: 85 72     STA $72
03/B65D: A5 73     LDA $73
03/B65F: E9 00     SBC #$00
03/B661: 85 73     STA $73
03/B663: 60        RTS 
; $FF: end of script
03/B664: A9 00     LDA #$00
03/B666: 85 6C     STA $6C
03/B668: 60        RTS 

; [ event command $E6: flash screen ]

03/B669: A9 00     LDA #$00
03/B66B: 48        PHA 
03/B66C: 20 78 B6  JSR $B678          ; update flash screen
03/B66F: 68        PLA 
03/B670: 18        CLC 
03/B671: 69 01     ADC #$01
03/B673: C9 11     CMP #$11
03/B675: 90 F4     BCC $B66B
03/B677: 60        RTS 

; [ update flash screen ]

03/B678: 4A        LSR 
03/B679: 29 01     AND #$01
03/B67B: 85 80     STA $80
03/B67D: 20 00 FE  JSR $FE00          ; wait for vblank
03/B680: A5 80     LDA $80
03/B682: 09 1E     ORA #$1E
03/B684: 8D 01 20  STA $2001
03/B687: A9 00     LDA #$00
03/B689: 85 80     STA $80
03/B68B: 20 BD B6  JSR $B6BD
03/B68E: 4C E8 B6  JMP $B6E8

; [ event command $E0: shake screen ]

03/B691: A9 00     LDA #$00
03/B693: 48        PHA 
03/B694: 20 A0 B6  JSR $B6A0          ; update shake screen
03/B697: 68        PLA 
03/B698: 18        CLC 
03/B699: 69 01     ADC #$01
03/B69B: C9 11     CMP #$11
03/B69D: 90 F4     BCC $B693
03/B69F: 60        RTS 

; [ update shake screen ]

03/B6A0: 29 02     AND #$02
03/B6A2: 85 80     STA $80
03/B6A4: 20 00 FE  JSR $FE00          ; wait for vblank
03/B6A7: 20 BD B6  JSR $B6BD
03/B6AA: 20 E8 B6  JSR $B6E8
03/B6AD: A9 08     LDA #$08
03/B6AF: 8D 0C 40  STA $400C
03/B6B2: A9 0E     LDA #$0E
03/B6B4: 8D 0E 40  STA $400E
03/B6B7: A9 00     LDA #$00
03/B6B9: 8D 0F 40  STA $400F
03/B6BC: 60        RTS 

; [  ]

03/B6BD: 2C 02 20  BIT $2002
03/B6C0: A5 FD     LDA $FD
03/B6C2: 85 FF     STA $FF
03/B6C4: 8D 00 20  STA $2000
03/B6C7: A6 27     LDX $27
03/B6C9: A5 2D     LDA $2D
03/B6CB: 4A        LSR 
03/B6CC: 90 02     BCC $B6D0
03/B6CE: A6 29     LDX $29
03/B6D0: 8A        TXA 
03/B6D1: 0A        ASL 
03/B6D2: 0A        ASL 
03/B6D3: 0A        ASL 
03/B6D4: 0A        ASL 
03/B6D5: 05 35     ORA $35
03/B6D7: 45 80     EOR $80
03/B6D9: 8D 05 20  STA $2005
03/B6DC: A5 2F     LDA $2F
03/B6DE: 0A        ASL 
03/B6DF: 0A        ASL 
03/B6E0: 0A        ASL 
03/B6E1: 0A        ASL 
03/B6E2: 05 36     ORA $36
03/B6E4: 8D 05 20  STA $2005
03/B6E7: 60        RTS 

; [  ]

03/B6E8: A9 03     LDA #$03
03/B6EA: 85 57     STA $57
03/B6EC: 4C 09 C0  JMP $C009          ; update sound

03/B6EF: 4C 12 C0  JMP $C012          ; load guest character properties

03/B6F2: 4C 15 C0  JMP $C015          ; validate character rows

; [ save guest character properties ]

03/B6F5: A2 3F     LDX #$3F
03/B6F7: BD C0 61  LDA $61C0,X
03/B6FA: 9D 90 60  STA $6090,X
03/B6FD: CA        DEX 
03/B6FE: 10 F7     BPL $B6F7
03/B700: A2 2F     LDX #$2F
03/B702: BD C0 62  LDA $62C0,X
03/B705: 9D D0 60  STA $60D0,X
03/B708: CA        DEX 
03/B709: 10 F7     BPL $B702
03/B70B: A2 05     LDX #$05
03/B70D: BD F0 62  LDA $62F0,X
03/B710: 9D F6 62  STA $62F6,X
03/B713: CA        DEX 
03/B714: 10 F7     BPL $B70D
03/B716: 60        RTS 

; [ event command $EA-$EC: restore saved guest character properties ]

03/B717: A2 3F     LDX #$3F
03/B719: BD C0 61  LDA $61C0,X
03/B71C: 48        PHA 
03/B71D: BD 90 60  LDA $6090,X
03/B720: 9D C0 61  STA $61C0,X
03/B723: 68        PLA 
03/B724: 9D 90 60  STA $6090,X
03/B727: CA        DEX 
03/B728: 10 EF     BPL $B719
03/B72A: A2 2F     LDX #$2F
03/B72C: BD C0 62  LDA $62C0,X
03/B72F: 48        PHA 
03/B730: BD D0 60  LDA $60D0,X
03/B733: 9D C0 62  STA $62C0,X
03/B736: 68        PLA 
03/B737: 9D D0 60  STA $60D0,X
03/B73A: CA        DEX 
03/B73B: 10 EF     BPL $B72C
03/B73D: A2 05     LDX #$05
03/B73F: BD F0 62  LDA $62F0,X
03/B742: 48        PHA 
03/B743: BD F6 62  LDA $62F6,X
03/B746: 9D F0 62  STA $62F0,X
03/B749: 68        PLA 
03/B74A: 9D F6 62  STA $62F6,X
03/B74D: CA        DEX 
03/B74E: 10 EF     BPL $B73F
03/B750: A9 00     LDA #$00
03/B752: 8D F5 62  STA $62F5
03/B755: 8D C1 61  STA $61C1
03/B758: 60        RTS 

; [ set event switch ]

03/B759: 84 80     STY $80
03/B75B: B9 95 B7  LDA $B795,Y
03/B75E: 85 81     STA $81
03/B760: B9 95 B8  LDA $B895,Y
03/B763: A8        TAY 
03/B764: B9 40 60  LDA $6040,Y
03/B767: 05 81     ORA $81
03/B769: 99 40 60  STA $6040,Y
03/B76C: A4 80     LDY $80
03/B76E: 60        RTS 

; [ battle ]

; unused

03/B76F: 85 6A     STA $6A
03/B771: A9 20     LDA #$20
03/B773: 85 44     STA $44
03/B775: 60        RTS 

; [ entrance ]

; unused

03/B776: 85 45     STA $45
03/B778: A9 80     LDA #$80
03/B77A: 85 44     STA $44
03/B77C: 60        RTS 

; [ toggle event switch ]

03/B77D: 84 80     STY $80
03/B77F: B9 95 B7  LDA $B795,Y        ; bit mask
03/B782: 85 81     STA $81
03/B784: B9 95 B8  LDA $B895,Y        ; byte offset
03/B787: A8        TAY 
03/B788: A5 81     LDA $81
03/B78A: 49 FF     EOR #$FF
03/B78C: 39 40 60  AND $6040,Y
03/B78F: 99 40 60  STA $6040,Y
03/B792: A4 80     LDY $80
03/B794: 60        RTS 

; bit masks
03/B795: 01 02 04 08 10 20 40 80
03/B79D: 01 02 04 08 10 20 40 80
03/B7A5: 01 02 04 08 10 20 40 80
03/B7AD: 01 02 04 08 10 20 40 80
03/B7B5: 01 02 04 08 10 20 40 80
03/B7BD: 01 02 04 08 10 20 40 80
03/B7C5: 01 02 04 08 10 20 40 80
03/B7CD: 01 02 04 08 10 20 40 80
03/B7D5: 01 02 04 08 10 20 40 80
03/B7DD: 01 02 04 08 10 20 40 80
03/B7E5: 01 02 04 08 10 20 40 80
03/B7ED: 01 02 04 08 10 20 40 80
03/B7F5: 01 02 04 08 10 20 40 80
03/B7FD: 01 02 04 08 10 20 40 80
03/B805: 01 02 04 08 10 20 40 80
03/B80D: 01 02 04 08 10 20 40 80
03/B815: 01 02 04 08 10 20 40 80
03/B81D: 01 02 04 08 10 20 40 80
03/B825: 01 02 04 08 10 20 40 80
03/B82D: 01 02 04 08 10 20 40 80
03/B835: 01 02 04 08 10 20 40 80
03/B83D: 01 02 04 08 10 20 40 80
03/B845: 01 02 04 08 10 20 40 80
03/B84D: 01 02 04 08 10 20 40 80
03/B855: 01 02 04 08 10 20 40 80
03/B85D: 01 02 04 08 10 20 40 80
03/B865: 01 02 04 08 10 20 40 80
03/B86D: 01 02 04 08 10 20 40 80
03/B875: 01 02 04 08 10 20 40 80
03/B87D: 01 02 04 08 10 20 40 80
03/B885: 01 02 04 08 10 20 40 80
03/B88D: 01 02 04 08 10 20 40 80

; byte offsets
03/B895: 00 00 00 00 00 00 00 00
03/B89D: 01 01 01 01 01 01 01 01
03/B8A5: 02 02 02 02 02 02 02 02
03/B8AD: 03 03 03 03 03 03 03 03
03/B8B5: 04 04 04 04 04 04 04 04
03/B8BD: 05 05 05 05 05 05 05 05
03/B8C5: 06 06 06 06 06 06 06 06
03/B8CD: 07 07 07 07 07 07 07 07
03/B8D5: 08 08 08 08 08 08 08 08
03/B8DD: 09 09 09 09 09 09 09 09
03/B8E5: 0A 0A 0A 0A 0A 0A 0A 0A
03/B8ED: 0B 0B 0B 0B 0B 0B 0B 0B
03/B8F5: 0C 0C 0C 0C 0C 0C 0C 0C
03/B8FD: 0D 0D 0D 0D 0D 0D 0D 0D
03/B905: 0E 0E 0E 0E 0E 0E 0E 0E
03/B90D: 0F 0F 0F 0F 0F 0F 0F 0F
03/B915: 10 10 10 10 10 10 10 10
03/B91D: 11 11 11 11 11 11 11 11
03/B925: 12 12 12 12 12 12 12 12
03/B92D: 13 13 13 13 13 13 13 13
03/B935: 14 14 14 14 14 14 14 14
03/B93D: 15 15 15 15 15 15 15 15
03/B945: 16 16 16 16 16 16 16 16
03/B94D: 17 17 17 17 17 17 17 17
03/B955: 18 18 18 18 18 18 18 18
03/B95D: 19 19 19 19 19 19 19 19
03/B965: 1A 1A 1A 1A 1A 1A 1A 1A
03/B96D: 1B 1B 1B 1B 1B 1B 1B 1B
03/B975: 1C 1C 1C 1C 1C 1C 1C 1C
03/B97D: 1D 1D 1D 1D 1D 1D 1D 1D
03/B985: 1E 1E 1E 1E 1E 1E 1E 1E
03/B98D: 1F 1F 1F 1F 1F 1F 1F 1F
03/B995: 1F 1F 1F 1F 1F 1F 1F 1F

03/B99D: FF FF FF

; --------------------------------------------------------------------------

05/9F00: 4C 09 9F  JMP $9F09          ; battle victory
05/9F03: 4C 57 AA  JMP $AA57          ; open message window
05/9F06: 4C 4F AB  JMP $AB4F          ; close message window

; [ battle victory ]

05/9F09: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
05/9F0C: AD 48 7B  LDA $7B48
05/9F0F: C9 7E     CMP #$7E
05/9F11: D0 03     BNE $9F16          ; branch if not final battle
05/9F13: 4C 1B A0  JMP $A01B
05/9F16: 20 7C A4  JSR $A47C          ; battle victory updates
05/9F19: A2 08     LDX #$08
05/9F1B: BD 62 7B  LDA $7B62,X        ; item obtained
05/9F1E: D0 08     BNE $9F28          ; branch if item is valid
05/9F20: E8        INX 
05/9F21: E0 10     CPX #$10
05/9F23: D0 F6     BNE $9F1B
05/9F25: 4C 1B A0  JMP $A01B          ; exit battle if no items
05/9F28: 20 2A FA  JSR $FA2A          ; wait for vblank
05/9F2B: A9 F0     LDA #$F0
05/9F2D: 8D 03 02  STA $0203
05/9F30: A9 02     LDA #$02
05/9F32: 8D 14 40  STA $4014          ; copy oam data to ppu
05/9F35: A9 C0     LDA #$C0
05/9F37: 85 54     STA $54
05/9F39: A9 27     LDA #$27
05/9F3B: 85 55     STA $55
05/9F3D: 20 AF AB  JSR $ABAF
05/9F40: A2 00     LDX #$00
05/9F42: A9 00     LDA #$00
05/9F44: 8D 07 20  STA $2007
05/9F47: E8        INX 
05/9F48: E0 40     CPX #$40
05/9F4A: D0 F8     BNE $9F44
05/9F4C: 20 5E A4  JSR $A45E          ; wait for battlefield to render
05/9F4F: A9 24     LDA #$24
05/9F51: 85 55     STA $55
05/9F53: 85 47     STA $47
05/9F55: A9 00     LDA #$00
05/9F57: 85 54     STA $54
05/9F59: A9 40     LDA #$40
05/9F5B: 85 46     STA $46
05/9F5D: 20 2A A0  JSR $A02A
05/9F60: A5 3A     LDA $3A
05/9F62: 8D 00 20  STA $2000
05/9F65: A9 27     LDA #$27
05/9F67: 85 55     STA $55
05/9F69: A9 80     LDA #$80
05/9F6B: 85 54     STA $54
05/9F6D: A9 24     LDA #$24
05/9F6F: 85 47     STA $47
05/9F71: A9 5F     LDA #$5F
05/9F73: 85 46     STA $46
05/9F75: 20 2A A0  JSR $A02A
05/9F78: 20 5E A4  JSR $A45E          ; wait for battlefield to render
05/9F7B: 20 D0 FA  JSR $FAD0          ; copy cursor graphics to ppu
05/9F7E: A9 00     LDA #$00
05/9F80: 85 5C     STA $5C
05/9F82: 20 AA A0  JSR $A0AA
05/9F85: A9 76     LDA #$76
05/9F87: 85 A9     STA $A9
05/9F89: A9 00     LDA #$00
05/9F8B: 85 A8     STA $A8
05/9F8D: 20 84 A0  JSR $A084
05/9F90: A2 00     LDX #$00
05/9F92: 86 6F     STX $6F
05/9F94: 86 6E     STX $6E
05/9F96: A9 09     LDA #$09
05/9F98: 85 45     STA $45
05/9F9A: A9 E9     LDA #$E9           ; $01E9: "Remove"
05/9F9C: 85 64     STA $64
05/9F9E: A9 0A     LDA #$0A
05/9FA0: 85 44     STA $44
05/9FA2: 20 3D A1  JSR $A13D          ; load text
05/9FA5: A9 EA     LDA #$EA           ; $01EA: "Exit"
05/9FA7: 85 64     STA $64
05/9FA9: A9 1C     LDA #$1C
05/9FAB: 85 44     STA $44
05/9FAD: 20 3D A1  JSR $A13D          ; load text
05/9FB0: A2 03     LDX #$03
05/9FB2: BD 70 A4  LDA $A470,X        ; remove/exit window position
05/9FB5: 95 62     STA $62,X
05/9FB7: CA        DEX 
05/9FB8: 10 F8     BPL $9FB2
05/9FBA: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
05/9FBD: 20 1F FB  JSR $FB1F          ; open window
05/9FC0: A9 00     LDA #$00
05/9FC2: 85 5C     STA $5C
05/9FC4: 20 FA A0  JSR $A0FA
05/9FC7: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/9FCA: 20 DC FA  JSR $FADC          ; fade out palettes
05/9FCD: A5 3A     LDA $3A
05/9FCF: 09 01     ORA #$01
05/9FD1: 29 EF     AND #$EF
05/9FD3: 85 3A     STA $3A
05/9FD5: 85 3B     STA $3B
05/9FD7: 8D 00 20  STA $2000
05/9FDA: A9 00     LDA #$00
05/9FDC: 8D 05 20  STA $2005
05/9FDF: 8D 05 20  STA $2005
05/9FE2: A9 00     LDA #$00
05/9FE4: 85 00     STA $00
05/9FE6: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
05/9FE9: 20 6A A4  JSR $A46A          ; wait for vblank
05/9FEC: A6 00     LDX $00
05/9FEE: BD 26 A0  LDA $A026,X
05/9FF1: 9D A8 79  STA $79A8,X        ; set bg palette 0 and sprite palette 3
05/9FF4: 9D C4 79  STA $79C4,X
05/9FF7: 20 5E A0  JSR $A05E          ; copy color palettes to ppu
05/9FFA: A9 00     LDA #$00
05/9FFC: 85 01     STA $01
05/9FFE: 20 5E A4  JSR $A45E          ; wait for battlefield to render
05/A001: E6 01     INC $01
05/A003: A5 01     LDA $01
05/A005: C9 03     CMP #$03
05/A007: D0 F5     BNE $9FFE
05/A009: E6 00     INC $00
05/A00B: A5 00     LDA $00
05/A00D: C9 04     CMP #$04
05/A00F: D0 D8     BNE $9FE9
05/A011: A9 00     LDA #$00
05/A013: 85 73     STA $73
05/A015: 20 93 A1  JSR $A193          ; loot menu
05/A018: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
05/A01B: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/A01E: 20 DC FA  JSR $FADC          ; fade out palettes
05/A021: 68        PLA 
05/A022: 68        PLA 
05/A023: 4C 0F FA  JMP $FA0F          ; return from battle

; loot menu palette
05/A026: 0F 00 02 30

; [  ]

05/A02A: 20 6A A4  JSR $A46A          ; wait for vblank
05/A02D: 20 AF AB  JSR $ABAF
05/A030: A9 6C     LDA #$6C
05/A032: A2 00     LDX #$00
05/A034: 8D 07 20  STA $2007
05/A037: E8        INX 
05/A038: E0 40     CPX #$40
05/A03A: D0 F8     BNE $A034
05/A03C: 20 6A A4  JSR $A46A          ; wait for vblank
05/A03F: A5 3A     LDA $3A
05/A041: 09 04     ORA #$04
05/A043: 8D 00 20  STA $2000
05/A046: A5 47     LDA $47
05/A048: 85 55     STA $55
05/A04A: A5 46     LDA $46
05/A04C: 85 54     STA $54
05/A04E: 20 AF AB  JSR $ABAF
05/A051: A2 00     LDX #$00
05/A053: A9 6C     LDA #$6C
05/A055: 8D 07 20  STA $2007
05/A058: E8        INX 
05/A059: E0 1A     CPX #$1A
05/A05B: D0 F8     BNE $A055
05/A05D: 60        RTS 

; [ copy color palettes to ppu ]

05/A05E: AD 02 20  LDA $2002
05/A061: 20 79 A0  JSR $A079          ; set ppu address to color palettes
05/A064: BD A8 79  LDA $79A8,X
05/A067: 8D 07 20  STA $2007
05/A06A: E8        INX 
05/A06B: E0 20     CPX #$20
05/A06D: D0 F5     BNE $A064
05/A06F: 20 79 A0  JSR $A079          ; set ppu address to color palettes
05/A072: 8E 06 20  STX $2006
05/A075: 8E 06 20  STX $2006
05/A078: 60        RTS 

; [ set ppu address to color palettes ]

05/A079: A9 3F     LDA #$3F
05/A07B: 8D 06 20  STA $2006
05/A07E: A2 00     LDX #$00
05/A080: 8E 06 20  STX $2006
05/A083: 60        RTS 

; [  ]

05/A084: A5 A9     LDA $A9
05/A086: 85 45     STA $45
05/A088: A5 A8     LDA $A8
05/A08A: 85 44     STA $44
05/A08C: A2 11     LDX #$11
05/A08E: A9 FF     LDA #$FF
05/A090: A0 00     LDY #$00
05/A092: 91 44     STA ($44),Y
05/A094: C8        INY 
05/A095: C0 20     CPY #$20
05/A097: D0 F9     BNE $A092
05/A099: 18        CLC 
05/A09A: A5 44     LDA $44
05/A09C: 69 20     ADC #$20
05/A09E: 85 44     STA $44
05/A0A0: A5 45     LDA $45
05/A0A2: 69 00     ADC #$00
05/A0A4: 85 45     STA $45
05/A0A6: CA        DEX 
05/A0A7: D0 E5     BNE $A08E
05/A0A9: 60        RTS 

; [ draw loot window ]

05/A0AA: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/A0AD: A9 78     LDA #$78
05/A0AF: 85 A9     STA $A9
05/A0B1: A9 58     LDA #$58
05/A0B3: 85 A8     STA $A8
05/A0B5: 20 84 A0  JSR $A084
05/A0B8: A2 00     LDX #$00
05/A0BA: 86 6F     STX $6F
05/A0BC: 86 6E     STX $6E
05/A0BE: A9 09     LDA #$09
05/A0C0: 85 45     STA $45
05/A0C2: A9 E8     LDA #$E8           ; $01E8: "Treasure:"
05/A0C4: 85 64     STA $64
05/A0C6: A9 09     LDA #$09
05/A0C8: 85 44     STA $44
05/A0CA: 20 3D A1  JSR $A13D          ; load text
05/A0CD: A9 1C     LDA #$1C
05/A0CF: 85 44     STA $44
05/A0D1: A6 6E     LDX $6E
05/A0D3: BD 6A 7B  LDA $7B6A,X        ; item id
05/A0D6: 85 64     STA $64
05/A0D8: 20 3D A1  JSR $A13D          ; load text
05/A0DB: 18        CLC 
05/A0DC: A5 44     LDA $44
05/A0DE: 69 12     ADC #$12
05/A0E0: 85 44     STA $44
05/A0E2: E6 6E     INC $6E
05/A0E4: A5 6E     LDA $6E
05/A0E6: C9 08     CMP #$08
05/A0E8: D0 E7     BNE $A0D1
05/A0EA: A2 03     LDX #$03
05/A0EC: BD 78 A4  LDA $A478,X        ; loot window position
05/A0EF: 95 62     STA $62,X
05/A0F1: CA        DEX 
05/A0F2: 10 F8     BPL $A0EC
05/A0F4: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
05/A0F7: 4C 1F FB  JMP $FB1F          ; open window

; [ draw inventory window ]

05/A0FA: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/A0FD: A9 76     LDA #$76
05/A0FF: 85 A9     STA $A9
05/A101: A9 00     LDA #$00
05/A103: 85 A8     STA $A8
05/A105: 20 84 A0  JSR $A084
05/A108: A2 00     LDX #$00
05/A10A: 86 6E     STX $6E
05/A10C: 86 6F     STX $6F
05/A10E: A9 11     LDA #$11
05/A110: 85 45     STA $45
05/A112: 85 44     STA $44
05/A114: A2 08     LDX #$08
05/A116: 86 70     STX $70
05/A118: 20 51 A1  JSR $A151
05/A11B: 20 64 A4  JSR $A464          ; wait for menu to render
05/A11E: 18        CLC 
05/A11F: A5 70     LDA $70
05/A121: 69 08     ADC #$08
05/A123: 85 70     STA $70
05/A125: C9 21     CMP #$21
05/A127: 90 EF     BCC $A118
05/A129: A6 5C     LDX $5C
05/A12B: 86 A7     STX $A7
05/A12D: A2 03     LDX #$03
05/A12F: BD 74 A4  LDA $A474,X        ; inventory window position
05/A132: 95 62     STA $62,X
05/A134: CA        DEX 
05/A135: 10 F8     BPL $A12F
05/A137: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
05/A13A: 4C 1F FB  JMP $FB1F          ; open window

; [ load text (loot menu) ]

05/A13D: A9 82     LDA #$82           ; pointer table: 0A/8200 (item names)
05/A13F: 85 63     STA $63
05/A141: A9 00     LDA #$00
05/A143: 85 62     STA $62
05/A145: A2 00     LDX #$00           ; buffer offset: 0
05/A147: 86 AA     STX $AA
05/A149: A2 0A     LDX #$0A
05/A14B: 20 8C FD  JSR $FD8C          ; load text
05/A14E: 4C 1B FB  JMP $FB1B          ; copy text to buffer

; [  ]

05/A151: A6 6E     LDX $6E
05/A153: BD 60 60  LDA $6060,X        ; item id
05/A156: 85 64     STA $64
05/A158: 20 3D A1  JSR $A13D          ; load text
05/A15B: 18        CLC 
05/A15C: A5 44     LDA $44
05/A15E: 69 09     ADC #$09
05/A160: 85 44     STA $44
05/A162: A5 6F     LDA $6F
05/A164: 69 00     ADC #$00
05/A166: 85 6F     STA $6F
05/A168: E6 6E     INC $6E
05/A16A: A6 6E     LDX $6E
05/A16C: BD 60 60  LDA $6060,X
05/A16F: 85 64     STA $64
05/A171: 20 3D A1  JSR $A13D          ; load text
05/A174: 18        CLC 
05/A175: A5 44     LDA $44
05/A177: 69 19     ADC #$19
05/A179: 85 44     STA $44
05/A17B: A5 6F     LDA $6F
05/A17D: 69 00     ADC #$00
05/A17F: 85 6F     STA $6F
05/A181: E6 6E     INC $6E
05/A183: A5 6E     LDA $6E
05/A185: C5 70     CMP $70
05/A187: 90 C8     BCC $A151
05/A189: 60        RTS 

; [ wait for vblank (oam update) ]

05/A18A: 20 D2 AB  JSR $ABD2          ; wait for vblank
05/A18D: A9 02     LDA #$02
05/A18F: 8D 14 40  STA $4014          ; copy oam data to ppu
05/A192: 60        RTS 

; [ loot menu ]

05/A193: A9 00     LDA #$00
05/A195: 85 72     STA $72
05/A197: 85 74     STA $74
05/A199: 85 75     STA $75
05/A19B: 85 50     STA $50
05/A19D: 85 51     STA $51
05/A19F: A9 F0     LDA #$F0
05/A1A1: A2 00     LDX #$00
05/A1A3: 9D 50 02  STA $0250,X
05/A1A6: E8        INX 
05/A1A7: E8        INX 
05/A1A8: E8        INX 
05/A1A9: 9D 53 02  STA $0253,X
05/A1AC: E8        INX 
05/A1AD: E0 10     CPX #$10
05/A1AF: D0 F2     BNE $A1A3
05/A1B1: A9 02     LDA #$02           ; $0240 (sprite 16)
05/A1B3: 85 65     STA $65
05/A1B5: A9 40     LDA #$40
05/A1B7: 85 64     STA $64
05/A1B9: A9 A4     LDA #$A4           ; 05/A416
05/A1BB: 85 49     STA $49
05/A1BD: A9 16     LDA #$16
05/A1BF: 85 48     STA $48
05/A1C1: AD 16 A4  LDA $A416
05/A1C4: 8D 47 02  STA $0247
05/A1C7: AD 17 A4  LDA $A417
05/A1CA: 8D 44 02  STA $0244
05/A1CD: 20 2F FB  JSR $FB2F          ; set positions for 16x16 sprite
; start of frame loop
05/A1D0: 20 8A A1  JSR $A18A          ; wait for vblank (oam update)
05/A1D3: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/A1D6: 20 34 FC  JSR $FC34          ; update joypad input
05/A1D9: AD 34 00  LDA $0034
05/A1DC: F0 F2     BEQ $A1D0          ; wait for keypress
05/A1DE: C9 80     CMP #$80
05/A1E0: D0 29     BNE $A20B
; right button
05/A1E2: A5 50     LDA $50
05/A1E4: F0 08     BEQ $A1EE
05/A1E6: A5 72     LDA $72
05/A1E8: F0 1E     BEQ $A208
05/A1EA: C9 02     CMP #$02
05/A1EC: F0 1A     BEQ $A208
05/A1EE: E6 72     INC $72
05/A1F0: A5 72     LDA $72
05/A1F2: C9 03     CMP #$03
05/A1F4: 90 04     BCC $A1FA
05/A1F6: A9 00     LDA #$00
05/A1F8: 85 72     STA $72
05/A1FA: A5 72     LDA $72
05/A1FC: D0 0A     BNE $A208
05/A1FE: A5 74     LDA $74
05/A200: C9 0A     CMP #$0A
05/A202: 90 04     BCC $A208
05/A204: A9 09     LDA #$09
05/A206: 85 74     STA $74
05/A208: 4C A6 A3  JMP $A3A6
; left button
05/A20B: C9 40     CMP #$40
05/A20D: D0 25     BNE $A234
05/A20F: A5 50     LDA $50
05/A211: F0 08     BEQ $A21B
05/A213: A5 72     LDA $72
05/A215: F0 1A     BEQ $A231
05/A217: C9 01     CMP #$01
05/A219: F0 16     BEQ $A231
05/A21B: C6 72     DEC $72
05/A21D: 10 04     BPL $A223
05/A21F: A9 02     LDA #$02
05/A221: 85 72     STA $72
05/A223: A5 72     LDA $72
05/A225: D0 0A     BNE $A231
05/A227: A5 74     LDA $74
05/A229: C9 0A     CMP #$0A
05/A22B: 90 04     BCC $A231
05/A22D: A9 09     LDA #$09
05/A22F: 85 74     STA $74
05/A231: 4C A6 A3  JMP $A3A6
; down button
05/A234: C9 20     CMP #$20
05/A236: D0 30     BNE $A268
05/A238: E6 74     INC $74
05/A23A: A5 72     LDA $72
05/A23C: D0 0C     BNE $A24A
05/A23E: A5 74     LDA $74
05/A240: C9 0A     CMP #$0A
05/A242: 90 21     BCC $A265
05/A244: A9 09     LDA #$09
05/A246: 85 74     STA $74
05/A248: D0 1B     BNE $A265
05/A24A: A5 74     LDA $74
05/A24C: C9 0C     CMP #$0C
05/A24E: 90 15     BCC $A265
05/A250: E6 73     INC $73
05/A252: A5 73     LDA $73
05/A254: C9 05     CMP #$05
05/A256: 90 04     BCC $A25C
05/A258: A9 04     LDA #$04
05/A25A: 85 73     STA $73
05/A25C: A9 01     LDA #$01
05/A25E: 20 E9 A3  JSR $A3E9
05/A261: A9 0B     LDA #$0B
05/A263: 85 74     STA $74
05/A265: 4C A6 A3  JMP $A3A6
; up button
05/A268: C9 10     CMP #$10
05/A26A: D0 1A     BNE $A286
05/A26C: C6 74     DEC $74
05/A26E: 10 13     BPL $A283
05/A270: A5 72     LDA $72
05/A272: F0 0B     BEQ $A27F
05/A274: A5 73     LDA $73
05/A276: F0 02     BEQ $A27A
05/A278: C6 73     DEC $73
05/A27A: A9 00     LDA #$00
05/A27C: 20 E9 A3  JSR $A3E9
05/A27F: A9 00     LDA #$00
05/A281: 85 74     STA $74
05/A283: 4C A6 A3  JMP $A3A6
; A button
05/A286: C9 01     CMP #$01
05/A288: F0 03     BEQ $A28D
05/A28A: 4C 7B A3  JMP $A37B
05/A28D: A5 50     LDA $50
05/A28F: D0 46     BNE $A2D7
05/A291: A5 72     LDA $72
05/A293: D0 10     BNE $A2A5
05/A295: A5 75     LDA $75
05/A297: C9 08     CMP #$08
05/A299: D0 05     BNE $A2A0
05/A29B: D0 03     BNE $A2A0
05/A29D: 4C 78 A3  JMP $A378
05/A2A0: C9 09     CMP #$09
05/A2A2: D0 01     BNE $A2A5
05/A2A4: 60        RTS 
05/A2A5: A5 72     LDA $72
05/A2A7: 85 54     STA $54
05/A2A9: A5 75     LDA $75
05/A2AB: 85 55     STA $55
05/A2AD: E6 50     INC $50
05/A2AF: A5 72     LDA $72
05/A2B1: D0 08     BNE $A2BB
05/A2B3: A5 73     LDA $73
05/A2B5: 85 75     STA $75
05/A2B7: E6 72     INC $72
05/A2B9: D0 06     BNE $A2C1
05/A2BB: A9 00     LDA #$00
05/A2BD: 85 72     STA $72
05/A2BF: 85 74     STA $74
05/A2C1: A9 00     LDA #$00
05/A2C3: 85 74     STA $74
05/A2C5: A2 00     LDX #$00
05/A2C7: BD 40 02  LDA $0240,X        ; copy cursor 1 to cursor 2
05/A2CA: 9D 50 02  STA $0250,X
05/A2CD: E8        INX 
05/A2CE: E0 10     CPX #$10
05/A2D0: D0 F5     BNE $A2C7
05/A2D2: D0 03     BNE $A2D7
05/A2D4: 4C 78 A3  JMP $A378
05/A2D7: A5 72     LDA $72
05/A2D9: D0 2A     BNE $A305
05/A2DB: A5 75     LDA $75
05/A2DD: C9 08     CMP #$08
05/A2DF: D0 24     BNE $A305
05/A2E1: C6 54     DEC $54
05/A2E3: A5 55     LDA $55
05/A2E5: 0A        ASL 
05/A2E6: 18        CLC 
05/A2E7: 65 54     ADC $54
05/A2E9: AA        TAX 
05/A2EA: BD 60 60  LDA $6060,X
05/A2ED: F0 07     BEQ $A2F6
05/A2EF: C9 0F     CMP #$0F
05/A2F1: B0 03     BCS $A2F6
05/A2F3: 4C 93 A1  JMP $A193
05/A2F6: A9 00     LDA #$00
05/A2F8: 9D 60 60  STA $6060,X
05/A2FB: A5 A7     LDA $A7
05/A2FD: 85 5C     STA $5C
05/A2FF: 20 FA A0  JSR $A0FA
05/A302: 4C 93 A1  JMP $A193
05/A305: A5 75     LDA $75
05/A307: C9 09     CMP #$09
05/A309: D0 07     BNE $A312
05/A30B: A5 72     LDA $72
05/A30D: D0 03     BNE $A312
05/A30F: 4C 93 A1  JMP $A193
05/A312: A5 72     LDA $72
05/A314: D0 26     BNE $A33C
05/A316: C6 54     DEC $54
05/A318: A5 55     LDA $55
05/A31A: 0A        ASL 
05/A31B: 18        CLC 
05/A31C: 65 54     ADC $54
05/A31E: AA        TAX 
05/A31F: BD 60 60  LDA $6060,X
05/A322: F0 07     BEQ $A32B
05/A324: C9 0F     CMP #$0F
05/A326: B0 03     BCS $A32B
05/A328: 4C 93 A1  JMP $A193
05/A32B: 48        PHA 
05/A32C: A5 74     LDA $74
05/A32E: A8        TAY 
05/A32F: B9 6A 7B  LDA $7B6A,Y
05/A332: 9D 60 60  STA $6060,X
05/A335: 68        PLA 
05/A336: 99 6A 7B  STA $7B6A,Y
05/A339: 4C 5F A3  JMP $A35F
05/A33C: C6 72     DEC $72
05/A33E: A5 75     LDA $75
05/A340: 0A        ASL 
05/A341: 18        CLC 
05/A342: 65 72     ADC $72
05/A344: AA        TAX 
05/A345: BD 60 60  LDA $6060,X
05/A348: F0 07     BEQ $A351
05/A34A: C9 0F     CMP #$0F
05/A34C: B0 03     BCS $A351
05/A34E: 4C 93 A1  JMP $A193
05/A351: 48        PHA 
05/A352: A5 55     LDA $55
05/A354: A8        TAY 
05/A355: B9 6A 7B  LDA $7B6A,Y
05/A358: 9D 60 60  STA $6060,X
05/A35B: 68        PLA 
05/A35C: 99 6A 7B  STA $7B6A,Y
05/A35F: A5 A7     LDA $A7
05/A361: 48        PHA 
05/A362: A9 00     LDA #$00
05/A364: 85 A7     STA $A7
05/A366: A9 00     LDA #$00
05/A368: 85 5C     STA $5C
05/A36A: 20 AA A0  JSR $A0AA
05/A36D: 68        PLA 
05/A36E: 85 A7     STA $A7
05/A370: 85 5C     STA $5C
05/A372: 20 FA A0  JSR $A0FA
05/A375: 4C 93 A1  JMP $A193
05/A378: 4C A6 A3  JMP $A3A6
; B button
05/A37B: C9 02     CMP #$02
05/A37D: D0 24     BNE $A3A3
05/A37F: A5 50     LDA $50
05/A381: D0 0B     BNE $A38E
05/A383: A9 00     LDA #$00
05/A385: 85 72     STA $72
05/A387: A9 09     LDA #$09
05/A389: 85 74     STA $74
05/A38B: 4C A6 A3  JMP $A3A6
05/A38E: A9 F0     LDA #$F0
05/A390: A2 00     LDX #$00
05/A392: 9D 50 02  STA $0250,X
05/A395: E8        INX 
05/A396: E8        INX 
05/A397: E8        INX 
05/A398: 9D 53 02  STA $0253,X
05/A39B: E8        INX 
05/A39C: E0 10     CPX #$10
05/A39E: D0 F2     BNE $A392
05/A3A0: 4C 93 A1  JMP $A193
05/A3A3: 4C D0 A1  JMP $A1D0
05/A3A6: A6 72     LDX $72
05/A3A8: F0 0A     BEQ $A3B4
05/A3AA: 18        CLC 
05/A3AB: A5 74     LDA $74
05/A3AD: 65 73     ADC $73
05/A3AF: 85 75     STA $75
05/A3B1: 4C B8 A3  JMP $A3B8
05/A3B4: A5 74     LDA $74
05/A3B6: 85 75     STA $75
05/A3B8: A5 72     LDA $72
05/A3BA: 0A        ASL 
05/A3BB: 0A        ASL 
05/A3BC: 0A        ASL 
05/A3BD: 85 58     STA $58
05/A3BF: 0A        ASL 
05/A3C0: 18        CLC 
05/A3C1: 65 58     ADC $58
05/A3C3: 85 58     STA $58
05/A3C5: A5 74     LDA $74
05/A3C7: 0A        ASL 
05/A3C8: 85 59     STA $59
05/A3CA: 18        CLC 
05/A3CB: A5 58     LDA $58
05/A3CD: 65 59     ADC $59
05/A3CF: A8        TAY 
05/A3D0: B1 48     LDA ($48),Y
05/A3D2: 8D 47 02  STA $0247
05/A3D5: C8        INY 
05/A3D6: B1 48     LDA ($48),Y
05/A3D8: 8D 44 02  STA $0244
05/A3DB: A9 40     LDA #$40
05/A3DD: 85 64     STA $64
05/A3DF: A9 02     LDA #$02
05/A3E1: 85 65     STA $65
05/A3E3: 20 2F FB  JSR $FB2F          ; set positions for 16x16 sprite
05/A3E6: 4C D0 A1  JMP $A1D0

; [  ]

05/A3E9: D0 0E     BNE $A3F9
05/A3EB: 38        SEC 
05/A3EC: A5 A7     LDA $A7
05/A3EE: E9 22     SBC #$22
05/A3F0: B0 02     BCS $A3F4
05/A3F2: A9 00     LDA #$00
05/A3F4: 85 A7     STA $A7
05/A3F6: 4C 06 A4  JMP $A406
05/A3F9: 18        CLC 
05/A3FA: A5 A7     LDA $A7
05/A3FC: 69 22     ADC #$22
05/A3FE: C9 89     CMP #$89
05/A400: 90 02     BCC $A404
05/A402: A9 88     LDA #$88
05/A404: 85 A7     STA $A7
05/A406: A2 03     LDX #$03
05/A408: BD 74 A4  LDA $A474,X        ; inventory window position
05/A40B: 95 62     STA $62,X
05/A40D: CA        DEX 
05/A40E: 10 F8     BPL $A408
05/A410: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
05/A413: 4C 1F FB  JMP $FB1F          ; open window

; loot menu cursor positions
05/A416: 10 30 10 40 10 50 10 60 10 70 10 80
05/A422: 10 90 10 A0 10 C0 10 D0 10 D0 10 D0
05/A42E: 60 20 60 30 60 40 60 50 60 60 60 70
05/A43A: 60 80 60 90 60 A0 60 B0 60 C0 60 D0
05/A446: A8 20 A8 30 A8 40 A8 50 A8 60 A8 70
05/A452: A8 80 A8 90 A8 A0 A8 B0 A8 C0 A8 D0

; [ wait for battlefield to render ]

05/A45E: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/A461: 4C 5B FD  JMP $FD5B          ; wait for first menu scanline

; [ wait for menu to render ]

05/A464: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
05/A467: 4C 46 FD  JMP $FD46          ; wait for first battlefield scanline

; [ wait for vblank ]

05/A46A: 20 5E A4  JSR $A45E          ; wait for battlefield to render
05/A46D: 4C 2A FA  JMP $FA2A          ; wait for vblank

; loot menu window positions
05/A470: 21 16 2B 1D  ; remove/exit
05/A474: 2C 02 3E 1D  ; inventory
05/A478: 21 02 2B 17  ; loot

; [ battle victory updates ]

05/A47C: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/A47F: A2 00     LDX #$00
05/A481: 86 9E     STX $9E
05/A483: 86 00     STX $00
05/A485: 86 01     STX $01
05/A487: 86 02     STX $02
05/A489: 86 03     STX $03
05/A48B: A2 08     LDX #$08
05/A48D: BD 62 7B  LDA $7B62,X
05/A490: C9 FF     CMP #$FF
05/A492: F0 13     BEQ $A4A7
05/A494: 29 7F     AND #$7F
05/A496: A8        TAY 
05/A497: B9 00 B7  LDA $B700,Y        ; monster level
05/A49A: 18        CLC 
05/A49B: 65 00     ADC $00
05/A49D: 85 00     STA $00
05/A49F: A5 01     LDA $01
05/A4A1: 69 00     ADC #$00
05/A4A3: 85 01     STA $01
05/A4A5: E6 02     INC $02
05/A4A7: E8        INX 
05/A4A8: E0 10     CPX #$10
05/A4AA: D0 E1     BNE $A48D
05/A4AC: 20 C3 FC  JSR $FCC3          ; divide
05/A4AF: A5 04     LDA $04
05/A4B1: 85 22     STA $22
05/A4B3: A2 08     LDX #$08
05/A4B5: 86 0C     STX $0C
05/A4B7: BD 62 7B  LDA $7B62,X        ; monster id
05/A4BA: 20 D3 A9  JSR $A9D3          ; get monster item
05/A4BD: E6 0C     INC $0C
05/A4BF: A6 0C     LDX $0C
05/A4C1: E0 10     CPX #$10
05/A4C3: D0 F2     BNE $A4B7
05/A4C5: 20 64 A4  JSR $A464          ; wait for menu to render
05/A4C8: 18        CLC 
05/A4C9: AD C0 7C  LDA $7CC0
05/A4CC: 85 62     STA $62
05/A4CE: 6D 1C 60  ADC $601C
05/A4D1: 8D 1C 60  STA $601C
05/A4D4: AD C1 7C  LDA $7CC1
05/A4D7: 85 63     STA $63
05/A4D9: 6D 1D 60  ADC $601D
05/A4DC: 8D 1D 60  STA $601D
05/A4DF: A9 00     LDA #$00
05/A4E1: 6D 1E 60  ADC $601E
05/A4E4: 8D 1E 60  STA $601E
05/A4E7: 20 27 FB  JSR $FB27          ; convert hex to decimal
05/A4EA: A2 00     LDX #$00
05/A4EC: A5 64     LDA $64
05/A4EE: 9D 47 7D  STA $7D47,X        ; copy gil amount to text buffer
05/A4F1: E8        INX 
05/A4F2: A5 65     LDA $65
05/A4F4: 9D 47 7D  STA $7D47,X
05/A4F7: E8        INX 
05/A4F8: A5 66     LDA $66
05/A4FA: 9D 47 7D  STA $7D47,X
05/A4FD: E8        INX 
05/A4FE: A5 67     LDA $67
05/A500: 9D 47 7D  STA $7D47,X
05/A503: E8        INX 
05/A504: A5 68     LDA $68
05/A506: 9D 47 7D  STA $7D47,X
05/A509: E8        INX 
05/A50A: 86 AA     STX $AA
05/A50C: A9 B2     LDA #$B2           ; 05/B295 (battle text)
05/A50E: 85 63     STA $63
05/A510: A9 95     LDA #$95
05/A512: 85 62     STA $62
05/A514: A2 05     LDX #$05
05/A516: A9 6B     LDA #$6B           ; $6B: " gil found."
05/A518: 85 64     STA $64
05/A51A: 20 8C FD  JSR $FD8C          ; load text
05/A51D: 20 84 A0  JSR $A084
05/A520: A9 10     LDA #$10
05/A522: 85 44     STA $44
05/A524: 85 45     STA $45
05/A526: A9 00     LDA #$00
05/A528: 85 6F     STA $6F
05/A52A: 20 1B FB  JSR $FB1B          ; copy text to buffer
05/A52D: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
05/A530: 20 41 AA  JSR $AA41          ; open bottom message window
05/A533: A4 AB     LDY $AB            ; message speed
05/A535: 20 C4 A9  JSR $A9C4          ; wait for message
05/A538: 20 48 AA  JSR $AA48          ; close bottom message window
; start of character loop
05/A53B: 20 92 A9  JSR $A992          ; set up interrupt jump code
05/A53E: A2 00     LDX #$00
05/A540: 86 52     STX $52
05/A542: 86 53     STX $53
05/A544: 86 AD     STX $AD
05/A546: A6 9E     LDX $9E
05/A548: 86 E1     STX $E1
05/A54A: 20 23 FB  JSR $FB23          ; update character/monster pointers
05/A54D: A0 08     LDY #$08
05/A54F: B1 80     LDA ($80),Y        ; status 1
05/A551: 29 FE     AND #$FE
05/A553: F0 07     BEQ $A55C          ; branch if character has no status 1 effects
05/A555: A2 FF     LDX #$FF
05/A557: 86 E1     STX $E1
05/A559: 4C 06 A7  JMP $A706
05/A55C: A6 9E     LDX $9E
05/A55E: BD F3 7C  LDA $7CF3,X
05/A561: F0 2B     BEQ $A58E
05/A563: 18        CLC 
05/A564: 6D 35 AC  ADC $AC35
05/A567: 65 22     ADC $22
05/A569: 85 52     STA $52
05/A56B: A0 2F     LDY #$2F
05/A56D: B1 80     LDA ($80),Y
05/A56F: 85 45     STA $45
05/A571: 88        DEY 
05/A572: B1 80     LDA ($80),Y
05/A574: 85 44     STA $44
05/A576: 05 45     ORA $45
05/A578: D0 06     BNE $A580
05/A57A: 20 5C A9  JSR $A95C
05/A57D: 4C 8E A5  JMP $A58E
05/A580: A5 44     LDA $44
05/A582: F0 03     BEQ $A587
05/A584: 20 5C A9  JSR $A95C
05/A587: A5 45     LDA $45
05/A589: F0 03     BEQ $A58E
05/A58B: 20 5C A9  JSR $A95C
05/A58E: A5 9E     LDA $9E
05/A590: 0A        ASL 
05/A591: 0A        ASL 
05/A592: 0A        ASL 
05/A593: 0A        ASL 
05/A594: 85 44     STA $44
05/A596: 18        CLC 
05/A597: A5 22     LDA $22
05/A599: 6D 36 AC  ADC $AC36
05/A59C: 85 52     STA $52
05/A59E: A2 00     LDX #$00
05/A5A0: 86 00     STX $00
05/A5A2: A6 44     LDX $44
05/A5A4: BD F7 7C  LDA $7CF7,X
05/A5A7: F0 48     BEQ $A5F1
05/A5A9: 18        CLC 
05/A5AA: 65 52     ADC $52
05/A5AC: 85 53     STA $53
05/A5AE: A5 00     LDA $00
05/A5B0: 0A        ASL 
05/A5B1: 18        CLC 
05/A5B2: 69 10     ADC #$10
05/A5B4: A8        TAY 
05/A5B5: B1 7E     LDA ($7E),Y
05/A5B7: 18        CLC 
05/A5B8: 69 0A     ADC #$0A
05/A5BA: 85 54     STA $54
05/A5BC: 38        SEC 
05/A5BD: A5 53     LDA $53
05/A5BF: E5 54     SBC $54
05/A5C1: C8        INY 
05/A5C2: 90 2D     BCC $A5F1
05/A5C4: 18        CLC 
05/A5C5: 71 7E     ADC ($7E),Y
05/A5C7: C9 64     CMP #$64
05/A5C9: 90 24     BCC $A5EF
05/A5CB: 88        DEY 
05/A5CC: B1 7E     LDA ($7E),Y
05/A5CE: AA        TAX 
05/A5CF: E8        INX 
05/A5D0: 20 6D A8  JSR $A86D
05/A5D3: 8A        TXA 
05/A5D4: 91 7E     STA ($7E),Y
05/A5D6: C8        INY 
05/A5D7: 98        TYA 
05/A5D8: 48        PHA 
05/A5D9: A6 AD     LDX $AD
05/A5DB: 18        CLC 
05/A5DC: A5 00     LDA $00
05/A5DE: 69 30     ADC #$30
05/A5E0: A8        TAY 
05/A5E1: B1 7A     LDA ($7A),Y
05/A5E3: 38        SEC 
05/A5E4: E9 C0     SBC #$C0
05/A5E6: 9D BA 7F  STA $7FBA,X
05/A5E9: E6 AD     INC $AD
05/A5EB: 68        PLA 
05/A5EC: A8        TAY 
05/A5ED: A9 00     LDA #$00
05/A5EF: 91 7E     STA ($7E),Y
05/A5F1: E6 44     INC $44
05/A5F3: E6 00     INC $00
05/A5F5: A5 00     LDA $00
05/A5F7: C9 10     CMP #$10
05/A5F9: D0 A7     BNE $A5A2
05/A5FB: A9 7D     LDA #$7D
05/A5FD: 85 45     STA $45
05/A5FF: A9 37     LDA #$37
05/A601: 85 44     STA $44
05/A603: AD 37 AC  LDA $AC37
05/A606: 85 46     STA $46
05/A608: A0 30     LDY #$30
05/A60A: 84 47     STY $47
05/A60C: 20 42 A8  JSR $A842
05/A60F: A9 7D     LDA #$7D
05/A611: 85 45     STA $45
05/A613: A9 3B     LDA #$3B
05/A615: 85 44     STA $44
05/A617: AD 38 AC  LDA $AC38
05/A61A: 85 46     STA $46
05/A61C: A0 32     LDY #$32
05/A61E: 84 47     STY $47
05/A620: 20 42 A8  JSR $A842
05/A623: A9 00     LDA #$00
05/A625: 85 52     STA $52
05/A627: 85 53     STA $53
05/A629: A0 0A     LDY #$0A
05/A62B: 84 44     STY $44
05/A62D: AD 39 AC  LDA $AC39
05/A630: 85 4A     STA $4A
05/A632: A0 22     LDY #$22
05/A634: 84 48     STY $48
05/A636: A5 9E     LDA $9E
05/A638: 0A        ASL 
05/A639: AA        TAX 
05/A63A: BD 6A 7D  LDA $7D6A,X
05/A63D: 85 02     STA $02
05/A63F: BD 6B 7D  LDA $7D6B,X
05/A642: 85 03     STA $03
05/A644: 05 02     ORA $02
05/A646: F0 07     BEQ $A64F
05/A648: 20 E9 A7  JSR $A7E9
05/A64B: A5 4C     LDA $4C
05/A64D: 85 52     STA $52
05/A64F: A0 0E     LDY #$0E
05/A651: 84 44     STY $44
05/A653: AD 3A AC  LDA $AC3A
05/A656: 85 4A     STA $4A
05/A658: A0 25     LDY #$25
05/A65A: 84 48     STY $48
05/A65C: A5 9E     LDA $9E
05/A65E: 0A        ASL 
05/A65F: AA        TAX 
05/A660: BD 72 7D  LDA $7D72,X
05/A663: 85 02     STA $02
05/A665: BD 73 7D  LDA $7D73,X
05/A668: 85 03     STA $03
05/A66A: 05 02     ORA $02
05/A66C: F0 07     BEQ $A675
05/A66E: 20 E9 A7  JSR $A7E9
05/A671: A5 4C     LDA $4C
05/A673: 85 53     STA $53
05/A675: AD 3B AC  LDA $AC3B
05/A678: 85 46     STA $46
05/A67A: A9 7C     LDA #$7C
05/A67C: 85 45     STA $45
05/A67E: A9 F3     LDA #$F3
05/A680: 85 44     STA $44
05/A682: AD 41 AC  LDA $AC41
05/A685: 85 49     STA $49
05/A687: A0 10     LDY #$10
05/A689: 84 47     STY $47
05/A68B: A0 13     LDY #$13
05/A68D: 84 4A     STY $4A
05/A68F: 20 74 A8  JSR $A874
05/A692: AD 3C AC  LDA $AC3C
05/A695: 85 46     STA $46
05/A697: A9 7D     LDA #$7D
05/A699: 85 45     STA $45
05/A69B: A9 3F     LDA #$3F
05/A69D: 85 44     STA $44
05/A69F: AD 42 AC  LDA $AC42
05/A6A2: 85 49     STA $49
05/A6A4: A0 13     LDY #$13
05/A6A6: 84 47     STY $47
05/A6A8: A0 12     LDY #$12
05/A6AA: 84 4A     STY $4A
05/A6AC: 20 74 A8  JSR $A874
05/A6AF: AD 3D AC  LDA $AC3D
05/A6B2: 85 46     STA $46
05/A6B4: A9 7D     LDA #$7D
05/A6B6: 85 45     STA $45
05/A6B8: A9 43     LDA #$43
05/A6BA: 85 44     STA $44
05/A6BC: AD 43 AC  LDA $AC43
05/A6BF: 85 49     STA $49
05/A6C1: A0 14     LDY #$14
05/A6C3: 84 47     STY $47
05/A6C5: A0 10     LDY #$10
05/A6C7: 84 4A     STY $4A
05/A6C9: 20 74 A8  JSR $A874
05/A6CC: AD 3E AC  LDA $AC3E
05/A6CF: 85 44     STA $44
05/A6D1: A0 2B     LDY #$2B
05/A6D3: B1 7A     LDA ($7A),Y
05/A6D5: 4A        LSR 
05/A6D6: 4A        LSR 
05/A6D7: F0 09     BEQ $A6E2
05/A6D9: 85 45     STA $45
05/A6DB: A0 11     LDY #$11
05/A6DD: 84 46     STY $46
05/A6DF: 20 04 A9  JSR $A904
05/A6E2: AD 3F AC  LDA $AC3F
05/A6E5: 85 44     STA $44
05/A6E7: A5 52     LDA $52
05/A6E9: 85 45     STA $45
05/A6EB: F0 07     BEQ $A6F4
05/A6ED: A0 12     LDY #$12
05/A6EF: 84 46     STY $46
05/A6F1: 20 04 A9  JSR $A904
05/A6F4: AD 40 AC  LDA $AC40
05/A6F7: 85 44     STA $44
05/A6F9: A5 53     LDA $53
05/A6FB: F0 09     BEQ $A706
05/A6FD: 85 45     STA $45
05/A6FF: A0 15     LDY #$15
05/A701: 84 46     STY $46
05/A703: 20 04 A9  JSR $A904
05/A706: A9 01     LDA #$01
05/A708: 85 AC     STA $AC
05/A70A: A5 AC     LDA $AC
05/A70C: D0 FC     BNE $A70A
05/A70E: 20 2A FA  JSR $FA2A          ; wait for vblank
05/A711: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/A714: A5 E1     LDA $E1
05/A716: C9 FF     CMP #$FF
05/A718: D0 03     BNE $A71D
05/A71A: 4C DA A7  JMP $A7DA
05/A71D: A5 AD     LDA $AD
05/A71F: D0 03     BNE $A724
05/A721: 4C DA A7  JMP $A7DA
05/A724: 20 84 A0  JSR $A084
05/A727: A0 02     LDY #$02
05/A729: A2 00     LDX #$00
05/A72B: B1 7A     LDA ($7A),Y
05/A72D: 9D 47 7D  STA $7D47,X
05/A730: C8        INY 
05/A731: E8        INX 
05/A732: E0 06     CPX #$06
05/A734: D0 F5     BNE $A72B
05/A736: A9 00     LDA #$00
05/A738: 9D 47 7D  STA $7D47,X
05/A73B: A9 08     LDA #$08
05/A73D: 85 44     STA $44
05/A73F: 85 45     STA $45
05/A741: A9 00     LDA #$00
05/A743: 85 6F     STA $6F
05/A745: 20 1B FB  JSR $FB1B          ; copy text to buffer
05/A748: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
05/A74B: A9 00     LDA #$00           ; top left window
05/A74D: 85 64     STA $64
05/A74F: 20 57 AA  JSR $AA57          ; open message window
; start of message loop
05/A752: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/A755: 20 84 A0  JSR $A084
05/A758: A9 B2     LDA #$B2           ; 05/B295 (battle text)
05/A75A: 85 63     STA $63
05/A75C: A9 95     LDA #$95
05/A75E: 85 62     STA $62
05/A760: C6 AD     DEC $AD
05/A762: A6 AD     LDX $AD
05/A764: BD BA 7F  LDA $7FBA,X
05/A767: C9 5B     CMP #$5B
05/A769: B0 0A     BCS $A775
05/A76B: 48        PHA 
05/A76C: A9 B0     LDA #$B0           ; 05/B0BB (attack names)
05/A76E: 85 63     STA $63
05/A770: A9 BB     LDA #$BB
05/A772: 85 62     STA $62
05/A774: 68        PLA 
05/A775: 48        PHA 
05/A776: 29 7F     AND #$7F
05/A778: 85 64     STA $64
05/A77A: A2 00     LDX #$00
05/A77C: 86 AA     STX $AA
05/A77E: A2 05     LDX #$05
05/A780: 20 8C FD  JSR $FD8C          ; load text
05/A783: AE BF 7C  LDX $7CBF
05/A786: 86 AA     STX $AA
05/A788: 68        PLA 
05/A789: C9 5B     CMP #$5B
05/A78B: 90 10     BCC $A79D
05/A78D: C9 6C     CMP #$6C
05/A78F: 90 08     BCC $A799
05/A791: C9 74     CMP #$74
05/A793: 90 08     BCC $A79D
05/A795: A9 67     LDA #$67           ; $67: " down"
05/A797: D0 06     BNE $A79F
05/A799: A9 66     LDA #$66           ; $66: " up!"
05/A79B: D0 02     BNE $A79F
05/A79D: A9 3C     LDA #$3C           ; $3C: " Lv.up!"
05/A79F: 85 64     STA $64
05/A7A1: A9 B2     LDA #$B2           ; 05/B295 (battle text)
05/A7A3: 85 63     STA $63
05/A7A5: A9 95     LDA #$95
05/A7A7: 85 62     STA $62
05/A7A9: A2 05     LDX #$05
05/A7AB: 20 8C FD  JSR $FD8C          ; load text
05/A7AE: A9 10     LDA #$10
05/A7B0: 85 45     STA $45
05/A7B2: 85 44     STA $44
05/A7B4: A9 00     LDA #$00
05/A7B6: 85 6F     STA $6F
05/A7B8: 20 1B FB  JSR $FB1B          ; copy text to buffer
05/A7BB: 20 41 AA  JSR $AA41          ; open bottom message window
05/A7BE: A4 AB     LDY $AB            ; message speed
05/A7C0: 20 C4 A9  JSR $A9C4          ; wait for message
05/A7C3: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/A7C6: 20 48 AA  JSR $AA48          ; close bottom message window
05/A7C9: A5 AD     LDA $AD
05/A7CB: F0 03     BEQ $A7D0
05/A7CD: 4C 52 A7  JMP $A752
05/A7D0: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/A7D3: A9 00     LDA #$00           ; top left window
05/A7D5: 85 64     STA $64
05/A7D7: 20 4F AB  JSR $AB4F          ; close message window
05/A7DA: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
05/A7DD: E6 9E     INC $9E
05/A7DF: A5 9E     LDA $9E
05/A7E1: C9 04     CMP #$04
05/A7E3: F0 03     BEQ $A7E8
05/A7E5: 4C 3B A5  JMP $A53B
05/A7E8: 60        RTS 

; [  ]

05/A7E9: A4 44     LDY $44
05/A7EB: B1 7A     LDA ($7A),Y
05/A7ED: 85 00     STA $00
05/A7EF: C8        INY 
05/A7F0: B1 7A     LDA ($7A),Y
05/A7F2: 85 01     STA $01
05/A7F4: 20 C3 FC  JSR $FCC3          ; divide
05/A7F7: A5 04     LDA $04
05/A7F9: 85 4C     STA $4C
05/A7FB: A5 05     LDA $05
05/A7FD: 85 4D     STA $4D
05/A7FF: A2 00     LDX #$00
05/A801: A5 4A     LDA $4A
05/A803: 20 11 FD  JSR $FD11          ; random (X..A)
05/A806: 85 00     STA $00
05/A808: A5 4C     LDA $4C
05/A80A: 85 02     STA $02
05/A80C: A5 4D     LDA $4D
05/A80E: 85 03     STA $03
05/A810: A9 00     LDA #$00
05/A812: 85 01     STA $01
05/A814: 20 B6 A9  JSR $A9B6          ; compare (16-bit)
05/A817: 90 28     BCC $A841
05/A819: A4 48     LDY $48
05/A81B: B1 7A     LDA ($7A),Y
05/A81D: A4 44     LDY $44
05/A81F: 18        CLC 
05/A820: 71 7A     ADC ($7A),Y
05/A822: 91 7A     STA ($7A),Y
05/A824: A9 00     LDA #$00
05/A826: C8        INY 
05/A827: 71 7A     ADC ($7A),Y
05/A829: 91 7A     STA ($7A),Y
05/A82B: A6 AD     LDX $AD            ; add to message queue
05/A82D: A5 44     LDA $44
05/A82F: C9 0A     CMP #$0A
05/A831: D0 07     BNE $A83A
05/A833: A9 5D     LDA #$5D           ; $5D: "HP"
05/A835: 9D BA 7F  STA $7FBA,X
05/A838: D0 05     BNE $A83F
05/A83A: A9 5E     LDA #$5E           ; $5E: "MP"
05/A83C: 9D BA 7F  STA $7FBA,X
05/A83F: E6 AD     INC $AD
05/A841: 60        RTS 

; [  ]

05/A842: A4 9E     LDY $9E
05/A844: B1 44     LDA ($44),Y
05/A846: F0 24     BEQ $A86C
05/A848: 18        CLC 
05/A849: 65 22     ADC $22
05/A84B: 65 46     ADC $46
05/A84D: A4 47     LDY $47
05/A84F: F1 7E     SBC ($7E),Y
05/A851: E9 0A     SBC #$0A
05/A853: 90 17     BCC $A86C
05/A855: C8        INY 
05/A856: 71 7E     ADC ($7E),Y
05/A858: C9 64     CMP #$64
05/A85A: 90 0E     BCC $A86A
05/A85C: 88        DEY 
05/A85D: B1 7E     LDA ($7E),Y
05/A85F: AA        TAX 
05/A860: E8        INX 
05/A861: 20 6D A8  JSR $A86D
05/A864: 8A        TXA 
05/A865: 91 7E     STA ($7E),Y
05/A867: C8        INY 
05/A868: A9 00     LDA #$00
05/A86A: 91 7E     STA ($7E),Y
05/A86C: 60        RTS 

; [  ]

05/A86D: E0 10     CPX #$10
05/A86F: 90 02     BCC $A873
05/A871: A2 0F     LDX #$0F
05/A873: 60        RTS 
05/A874: 18        CLC 
05/A875: A5 47     LDA $47
05/A877: 69 10     ADC #$10
05/A879: 85 48     STA $48
05/A87B: 18        CLC 
05/A87C: A5 4A     LDA $4A
05/A87E: 69 10     ADC #$10
05/A880: 85 4B     STA $4B
05/A882: A2 00     LDX #$00
05/A884: A5 46     LDA $46
05/A886: 20 11 FD  JSR $FD11          ; random (X..A)
05/A889: 85 46     STA $46
05/A88B: A4 9E     LDY $9E
05/A88D: 38        SEC 
05/A88E: B1 44     LDA ($44),Y
05/A890: F0 71     BEQ $A903
05/A892: E5 46     SBC $46
05/A894: 90 6D     BCC $A903
05/A896: A4 47     LDY $47
05/A898: B1 7A     LDA ($7A),Y
05/A89A: AA        TAX 
05/A89B: E8        INX 
05/A89C: 8A        TXA 
05/A89D: 20 3A AA  JSR $AA3A          ; max 99
05/A8A0: 91 7A     STA ($7A),Y
05/A8A2: A4 48     LDY $48
05/A8A4: B1 7A     LDA ($7A),Y
05/A8A6: AA        TAX 
05/A8A7: E8        INX 
05/A8A8: 8A        TXA 
05/A8A9: 20 3A AA  JSR $AA3A          ; max 99
05/A8AC: 91 7A     STA ($7A),Y
05/A8AE: A6 AD     LDX $AD
05/A8B0: A5 47     LDA $47
05/A8B2: 38        SEC 
05/A8B3: E9 13     SBC #$13
05/A8B5: F0 06     BEQ $A8BD
05/A8B7: B0 08     BCS $A8C1
05/A8B9: A9 5F     LDA #$5F           ; $5F: "Strength"
05/A8BB: D0 06     BNE $A8C3
05/A8BD: A9 60     LDA #$60           ; $60: "Intellect"
05/A8BF: D0 02     BNE $A8C3
05/A8C1: A9 61     LDA #$61           ; $61: "Spirit"
05/A8C3: 9D BA 7F  STA $7FBA,X
05/A8C6: E6 AD     INC $AD
05/A8C8: A2 00     LDX #$00
05/A8CA: A5 49     LDA $49
05/A8CC: 20 11 FD  JSR $FD11          ; random (X..A)
05/A8CF: D0 32     BNE $A903
05/A8D1: A4 4A     LDY $4A
05/A8D3: B1 7A     LDA ($7A),Y
05/A8D5: C9 01     CMP #$01
05/A8D7: F0 2A     BEQ $A903
05/A8D9: AA        TAX 
05/A8DA: CA        DEX 
05/A8DB: 8A        TXA 
05/A8DC: 91 7A     STA ($7A),Y
05/A8DE: A4 4B     LDY $4B
05/A8E0: B1 7A     LDA ($7A),Y
05/A8E2: AA        TAX 
05/A8E3: CA        DEX 
05/A8E4: 8A        TXA 
05/A8E5: 91 7A     STA ($7A),Y
05/A8E7: A6 AD     LDX $AD
05/A8E9: A5 4A     LDA $4A
05/A8EB: 38        SEC 
05/A8EC: E9 12     SBC #$12
05/A8EE: F0 06     BEQ $A8F6
05/A8F0: B0 08     BCS $A8FA
05/A8F2: A9 5F     LDA #$5F           ; $5F: "Strength"
05/A8F4: D0 06     BNE $A8FC
05/A8F6: A9 63     LDA #$63           ; $63: "Stamina"
05/A8F8: D0 02     BNE $A8FC
05/A8FA: A9 60     LDA #$60           ; $60: "Intellect"
05/A8FC: 09 80     ORA #$80
05/A8FE: 9D BA 7F  STA $7FBA,X
05/A901: E6 AD     INC $AD
05/A903: 60        RTS 

; [  ]

05/A904: 18        CLC 
05/A905: A5 46     LDA $46
05/A907: 69 10     ADC #$10
05/A909: 85 47     STA $47
05/A90B: A2 00     LDX #$00
05/A90D: A5 44     LDA $44
05/A90F: 20 11 FD  JSR $FD11          ; random (X..A)
05/A912: 85 48     STA $48
05/A914: 38        SEC 
05/A915: A5 45     LDA $45
05/A917: F0 3C     BEQ $A955
05/A919: E5 48     SBC $48
05/A91B: B0 38     BCS $A955
05/A91D: A4 46     LDY $46
05/A91F: C0 11     CPY #$11
05/A921: F0 38     BEQ $A95B
05/A923: B1 7A     LDA ($7A),Y
05/A925: AA        TAX 
05/A926: E8        INX 
05/A927: 8A        TXA 
05/A928: 20 3A AA  JSR $AA3A          ; max 99
05/A92B: 91 7A     STA ($7A),Y
05/A92D: A4 47     LDY $47
05/A92F: B1 7A     LDA ($7A),Y
05/A931: AA        TAX 
05/A932: E8        INX 
05/A933: 8A        TXA 
05/A934: 20 3A AA  JSR $AA3A          ; max 99
05/A937: 91 7A     STA ($7A),Y
05/A939: A6 AD     LDX $AD
05/A93B: A5 46     LDA $46
05/A93D: 38        SEC 
05/A93E: E9 12     SBC #$12
05/A940: F0 06     BEQ $A948
05/A942: B0 08     BCS $A94C
05/A944: A9 62     LDA #$62           ; $62: "Agility"
05/A946: D0 06     BNE $A94E
05/A948: A9 63     LDA #$63           ; $63: "Stamina"
05/A94A: D0 02     BNE $A94E
05/A94C: A9 64     LDA #$64           ; $64: "M.Power"
05/A94E: 9D BA 7F  STA $7FBA,X
05/A951: E6 AD     INC $AD
05/A953: D0 06     BNE $A95B
05/A955: A4 46     LDY $46
05/A957: C0 11     CPY #$11
05/A959: F0 C8     BEQ $A923
05/A95B: 60        RTS 

; [  ]

05/A95C: 85 0A     STA $0A
05/A95E: 0A        ASL 
05/A95F: A8        TAY 
05/A960: B1 7E     LDA ($7E),Y
05/A962: 85 53     STA $53
05/A964: 38        SEC 
05/A965: A5 52     LDA $52
05/A967: E5 53     SBC $53
05/A969: E9 0A     SBC #$0A
05/A96B: 90 24     BCC $A991
05/A96D: 18        CLC 
05/A96E: C8        INY 
05/A96F: 71 7E     ADC ($7E),Y
05/A971: C9 64     CMP #$64
05/A973: 90 1A     BCC $A98F
05/A975: 88        DEY 
05/A976: B1 7E     LDA ($7E),Y
05/A978: AA        TAX 
05/A979: E8        INX 
05/A97A: 20 6D A8  JSR $A86D
05/A97D: 8A        TXA 
05/A97E: 91 7E     STA ($7E),Y
05/A980: C8        INY 
05/A981: A6 AD     LDX $AD
05/A983: 18        CLC 
05/A984: A5 0A     LDA $0A
05/A986: 69 6C     ADC #$6C           ; $6C: weapon icon
05/A988: 9D BA 7F  STA $7FBA,X
05/A98B: E6 AD     INC $AD
05/A98D: A9 00     LDA #$00
05/A98F: 91 7E     STA ($7E),Y
05/A991: 60        RTS 

; [ set up nmi jump code (battle victory) ]

05/A992: A9 A9     LDA #$A9           ; JMP $A9A2
05/A994: 8D 02 01  STA $0102
05/A997: A9 A2     LDA #$A2
05/A999: 8D 01 01  STA $0101
05/A99C: A9 4C     LDA #$4C
05/A99E: 8D 00 01  STA $0100
05/A9A1: 60        RTS 

; [ battle victory nmi ]

05/A9A2: 08        PHP 
05/A9A3: 48        PHA 
05/A9A4: 8A        TXA 
05/A9A5: 48        PHA 
05/A9A6: 98        TYA 
05/A9A7: 48        PHA 
05/A9A8: 20 5E A4  JSR $A45E          ; wait for battlefield to render
05/A9AB: A9 00     LDA #$00
05/A9AD: 85 AC     STA $AC
05/A9AF: 68        PLA 
05/A9B0: A8        TAY 
05/A9B1: 68        PLA 
05/A9B2: AA        TAX 
05/A9B3: 68        PLA 
05/A9B4: 28        PLP 
05/A9B5: 40        RTI 

; [ compare (16-bit) ]

05/A9B6: 38        SEC 
05/A9B7: A5 00     LDA $00
05/A9B9: E5 02     SBC $02
05/A9BB: 85 04     STA $04
05/A9BD: A5 01     LDA $01
05/A9BF: E5 03     SBC $03
05/A9C1: 05 04     ORA $04
05/A9C3: 60        RTS 

; [ wait for message ]

05/A9C4: 98        TYA 
05/A9C5: F0 0B     BEQ $A9D2
05/A9C7: 8D B9 7C  STA $7CB9
05/A9CA: 20 5E A4  JSR $A45E          ; wait for battlefield to render
05/A9CD: CE B9 7C  DEC $7CB9
05/A9D0: D0 F8     BNE $A9CA
05/A9D2: 60        RTS 

; [ get monster item ]

; A: monster id

05/A9D3: 30 5F     BMI $AA34          ; branch if no monster
05/A9D5: AA        TAX 
05/A9D6: BD 80 B7  LDA $B780,X        ; item set
05/A9D9: 85 00     STA $00
05/A9DB: A9 08     LDA #$08
05/A9DD: 85 02     STA $02
05/A9DF: A9 00     LDA #$00
05/A9E1: 85 01     STA $01
05/A9E3: 85 03     STA $03
05/A9E5: 20 98 FC  JSR $FC98          ; multiply (16-bit)
05/A9E8: 18        CLC 
05/A9E9: A5 04     LDA $04
05/A9EB: 69 00     ADC #$00           ; 05/B800 (monster items)
05/A9ED: 85 4E     STA $4E
05/A9EF: A5 05     LDA $05
05/A9F1: 69 B8     ADC #$B8
05/A9F3: 85 4F     STA $4F
05/A9F5: A2 00     LDX #$00
05/A9F7: A9 63     LDA #$63
05/A9F9: 20 11 FD  JSR $FD11          ; random (X..A)
05/A9FC: 85 00     STA $00
05/A9FE: A0 07     LDY #$07
05/AA00: B9 4F AA  LDA $AA4F,Y        ; drop probability
05/AA03: C5 00     CMP $00
05/AA05: B0 03     BCS $AA0A
05/AA07: 88        DEY 
05/AA08: 10 F6     BPL $AA00
05/AA0A: B1 4E     LDA ($4E),Y        ; item id
05/AA0C: A6 0C     LDX $0C
05/AA0E: C9 F0     CMP #$F0
05/AA10: 90 24     BCC $AA36          ; branch if an item
05/AA12: 29 0F     AND #$0F
05/AA14: 0A        ASL 
05/AA15: 18        CLC 
05/AA16: 69 E0     ADC #$E0           ; 05/B9E0 (monster gil)
05/AA18: 85 00     STA $00
05/AA1A: A9 00     LDA #$00
05/AA1C: 69 B9     ADC #$B9
05/AA1E: 85 01     STA $01
05/AA20: 18        CLC 
05/AA21: A0 00     LDY #$00
05/AA23: B1 00     LDA ($00),Y        ; add to obtained gil
05/AA25: 6D C0 7C  ADC $7CC0
05/AA28: 8D C0 7C  STA $7CC0
05/AA2B: C8        INY 
05/AA2C: B1 00     LDA ($00),Y
05/AA2E: 6D C1 7C  ADC $7CC1
05/AA31: 8D C1 7C  STA $7CC1
05/AA34: A9 00     LDA #$00           ; no item if monster dropped gil
05/AA36: 9D 62 7B  STA $7B62,X        ; set obtained item
05/AA39: 60        RTS 

; [ max 99 ]

05/AA3A: C9 64     CMP #$64
05/AA3C: 90 02     BCC $AA40
05/AA3E: A9 63     LDA #$63
05/AA40: 60        RTS 

; [ open bottom message window ]

05/AA41: A9 04     LDA #$04           ; bottom window
05/AA43: 85 64     STA $64
05/AA45: 4C 57 AA  JMP $AA57          ; open message window

; [ close bottom message window ]

05/AA48: A9 04     LDA #$04           ; bottom window
05/AA4A: 85 64     STA $64
05/AA4C: 4C 4F AB  JMP $AB4F          ; close message window

; monster drop probabilities
05/AA4F: 64 50 3C 28 1E 14 0A 05

; [ open message window ]

05/AA57: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/AA5A: A9 AB     LDA #$AB           ; 05/ABF8
05/AA5C: 85 63     STA $63
05/AA5E: A9 F8     LDA #$F8
05/AA60: 85 62     STA $62
05/AA62: 20 D8 AB  JSR $ABD8          ; get window position data pointer
05/AA65: A0 00     LDY #$00
05/AA67: B1 78     LDA ($78),Y
05/AA69: 99 52 00  STA $0052,Y
05/AA6C: 48        PHA 
05/AA6D: C8        INY 
05/AA6E: C0 04     CPY #$04
05/AA70: D0 F5     BNE $AA67
05/AA72: A0 00     LDY #$00
05/AA74: 84 5C     STY $5C
05/AA76: 20 D2 AB  JSR $ABD2          ; wait for vblank
05/AA79: 20 AF AB  JSR $ABAF
05/AA7C: AD 07 20  LDA $2007
05/AA7F: A6 52     LDX $52
05/AA81: A4 5C     LDY $5C
05/AA83: AD 07 20  LDA $2007
05/AA86: 91 7C     STA ($7C),Y
05/AA88: C8        INY 
05/AA89: CA        DEX 
05/AA8A: D0 F7     BNE $AA83
05/AA8C: 84 5C     STY $5C
05/AA8E: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/AA91: 18        CLC 
05/AA92: A5 54     LDA $54
05/AA94: 69 20     ADC #$20
05/AA96: 85 54     STA $54
05/AA98: A5 55     LDA $55
05/AA9A: 69 00     ADC #$00
05/AA9C: 85 55     STA $55
05/AA9E: C6 53     DEC $53
05/AAA0: D0 D4     BNE $AA76
05/AAA2: A4 5C     LDY $5C
05/AAA4: 18        CLC 
05/AAA5: 98        TYA 
05/AAA6: 65 7C     ADC $7C
05/AAA8: 85 7C     STA $7C
05/AAAA: A9 00     LDA #$00
05/AAAC: 65 7D     ADC $7D
05/AAAE: 85 7D     STA $7D
05/AAB0: A0 03     LDY #$03
05/AAB2: 68        PLA 
05/AAB3: 99 52 00  STA $0052,Y
05/AAB6: 88        DEY 
05/AAB7: 10 F9     BPL $AAB2
05/AAB9: A9 03     LDA #$03
05/AABB: 85 44     STA $44
05/AABD: C6 52     DEC $52
05/AABF: C6 52     DEC $52
05/AAC1: C6 53     DEC $53
05/AAC3: C6 53     DEC $53
05/AAC5: 20 D2 AB  JSR $ABD2          ; wait for vblank
05/AAC8: A5 44     LDA $44
05/AACA: C9 03     CMP #$03
05/AACC: D0 11     BNE $AADF
05/AACE: A9 F7     LDA #$F7
05/AAD0: 85 64     STA $64
05/AAD2: A9 F8     LDA #$F8
05/AAD4: 85 65     STA $65
05/AAD6: A9 F9     LDA #$F9
05/AAD8: 85 67     STA $67
05/AADA: 20 08 AB  JSR $AB08
05/AADD: D0 23     BNE $AB02
05/AADF: C9 02     CMP #$02
05/AAE1: D0 09     BNE $AAEC
05/AAE3: A9 00     LDA #$00
05/AAE5: 85 48     STA $48
05/AAE7: 20 25 AB  JSR $AB25
05/AAEA: D0 16     BNE $AB02
05/AAEC: C9 01     CMP #$01
05/AAEE: D0 0F     BNE $AAFF
05/AAF0: A9 FC     LDA #$FC
05/AAF2: 85 64     STA $64
05/AAF4: A9 FD     LDA #$FD
05/AAF6: 85 65     STA $65
05/AAF8: A9 FE     LDA #$FE
05/AAFA: 85 67     STA $67
05/AAFC: 20 08 AB  JSR $AB08
05/AAFF: 4C 5E A4  JMP $A45E          ; wait for battlefield to render
05/AB02: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/AB05: 4C C5 AA  JMP $AAC5

; [  ]

05/AB08: 20 AF AB  JSR $ABAF
05/AB0B: A5 64     LDA $64
05/AB0D: 8D 07 20  STA $2007
05/AB10: A4 52     LDY $52
05/AB12: A5 65     LDA $65
05/AB14: 8D 07 20  STA $2007
05/AB17: 88        DEY 
05/AB18: D0 FA     BNE $AB14
05/AB1A: A5 67     LDA $67
05/AB1C: 8D 07 20  STA $2007
05/AB1F: 20 C4 AB  JSR $ABC4
05/AB22: C6 44     DEC $44
05/AB24: 60        RTS 

; [  ]

05/AB25: 20 AF AB  JSR $ABAF
05/AB28: A9 FA     LDA #$FA
05/AB2A: 8D 07 20  STA $2007
05/AB2D: A6 48     LDX $48
05/AB2F: A4 52     LDY $52
05/AB31: BD 00 76  LDA $7600,X
05/AB34: 8D 07 20  STA $2007
05/AB37: E8        INX 
05/AB38: 88        DEY 
05/AB39: D0 F6     BNE $AB31
05/AB3B: A9 FB     LDA #$FB
05/AB3D: 8D 07 20  STA $2007
05/AB40: 20 C4 AB  JSR $ABC4
05/AB43: C6 53     DEC $53
05/AB45: F0 05     BEQ $AB4C
05/AB47: 86 48     STX $48
05/AB49: 4C 25 AB  JMP $AB25
05/AB4C: C6 44     DEC $44
05/AB4E: 60        RTS 

; [ close message window ]

05/AB4F: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/AB52: A9 AB     LDA #$AB           ; 05/ABF8 (message window position pointers)
05/AB54: 85 63     STA $63
05/AB56: A9 F8     LDA #$F8
05/AB58: 85 62     STA $62
05/AB5A: 20 D8 AB  JSR $ABD8          ; get window position data pointer
05/AB5D: A0 00     LDY #$00
05/AB5F: B1 78     LDA ($78),Y
05/AB61: 85 52     STA $52
05/AB63: C8        INY 
05/AB64: B1 78     LDA ($78),Y
05/AB66: 85 53     STA $53
05/AB68: C8        INY 
05/AB69: C8        INY 
05/AB6A: C8        INY 
05/AB6B: B1 78     LDA ($78),Y
05/AB6D: 85 54     STA $54
05/AB6F: C8        INY 
05/AB70: B1 78     LDA ($78),Y
05/AB72: 85 55     STA $55
05/AB74: 20 D2 AB  JSR $ABD2          ; wait for vblank
05/AB77: 20 AF AB  JSR $ABAF
05/AB7A: 38        SEC 
05/AB7B: AD 7C 00  LDA $007C
05/AB7E: E5 52     SBC $52
05/AB80: 8D 7C 00  STA $007C
05/AB83: AD 7D 00  LDA $007D
05/AB86: E9 00     SBC #$00
05/AB88: 8D 7D 00  STA $007D
05/AB8B: A6 52     LDX $52
05/AB8D: A0 00     LDY #$00
05/AB8F: B1 7C     LDA ($7C),Y
05/AB91: 8D 07 20  STA $2007
05/AB94: C8        INY 
05/AB95: CA        DEX 
05/AB96: D0 F7     BNE $AB8F
05/AB98: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
05/AB9B: 38        SEC 
05/AB9C: A5 54     LDA $54
05/AB9E: E9 20     SBC #$20
05/ABA0: 85 54     STA $54
05/ABA2: A5 55     LDA $55
05/ABA4: E9 00     SBC #$00
05/ABA6: 85 55     STA $55
05/ABA8: C6 53     DEC $53
05/ABAA: D0 C8     BNE $AB74
05/ABAC: 4C 5B FD  JMP $FD5B          ; wait for first menu scanline

; [  ]

05/ABAF: A5 55     LDA $55
05/ABB1: 8D 06 20  STA $2006
05/ABB4: A5 54     LDA $54
05/ABB6: 8D 06 20  STA $2006
05/ABB9: A9 00     LDA #$00
05/ABBB: 8D 05 20  STA $2005
05/ABBE: A5 37     LDA $37
05/ABC0: 8D 05 20  STA $2005
05/ABC3: 60        RTS 

; [  ]

05/ABC4: 18        CLC 
05/ABC5: A5 54     LDA $54
05/ABC7: 69 20     ADC #$20
05/ABC9: 85 54     STA $54
05/ABCB: A5 55     LDA $55
05/ABCD: 69 00     ADC #$00
05/ABCF: 85 55     STA $55
05/ABD1: 60        RTS 

; [ wait for vblank ]

05/ABD2: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
05/ABD5: 4C 2A FA  JMP $FA2A          ; wait for vblank

; [ get window position data pointer ]

; $64: window type (see below)

05/ABD8: A9 00     LDA #$00
05/ABDA: 85 65     STA $65
05/ABDC: A5 64     LDA $64            ; get pointer offset
05/ABDE: 0A        ASL 
05/ABDF: 26 65     ROL $65
05/ABE1: 18        CLC 
05/ABE2: 65 62     ADC $62
05/ABE4: 85 62     STA $62
05/ABE6: A5 65     LDA $65
05/ABE8: 65 63     ADC $63
05/ABEA: 85 63     STA $63
05/ABEC: A0 00     LDY #$00
05/ABEE: B1 62     LDA ($62),Y        ; window width
05/ABF0: 85 78     STA $78
05/ABF2: C8        INY 
05/ABF3: B1 62     LDA ($62),Y        ; window height
05/ABF5: 85 79     STA $79
05/ABF7: 60        RTS 

; pointers to message window position data
05/ABF8: AC02 AC08 AC0E AC14 AC1A

; message window position data

;  $00: width
;  $01: height
; +$02: ??? ppu address
; +$04: ??? ppu address

05/AC02: 0A 04 60 22 C0 22  ; top left window
05/AC08: 0A 04 C0 22 20 23  ; middle left window
05/AC0E: 09 04 69 22 C9 22  ; top right window
05/AC14: 09 04 C9 22 29 23  ; middle right window
05/AC1A: 12 04 20 23 80 23  ; bottom window

; stale data ???
05/AC20:       69 22 C9 22
05/AC24: 09 04 C9 22 29 23
05/AC2A: 12 04 20 23 80 23
05/AC30:       20 23 80 23

05/AC34: 23 0A 0C 07 0E 08 08 2D 19 0F FF 09 09 05 05 05

; --------------------------------------------------------------------------

05/BA00: 4C 34 BA  JMP $BA34          ; update sound effect

; [ play sound effect ]

05/BA03: 48        PHA 
05/BA04: AD 60 6F  LDA $6F60
05/BA07: F0 26     BEQ $BA2F
05/BA09: A2 00     LDX #$00
05/BA0B: A0 04     LDY #$04
05/BA0D: BD 62 6F  LDA $6F62,X
05/BA10: C9 FF     CMP #$FF
05/BA12: F0 10     BEQ $BA24
05/BA14: A9 30     LDA #$30
05/BA16: 99 00 40  STA $4000,Y
05/BA19: A9 00     LDA #$00
05/BA1B: 99 01 40  STA $4001,Y
05/BA1E: 99 02 40  STA $4002,Y
05/BA21: 99 03 40  STA $4003,Y
05/BA24: 98        TYA 
05/BA25: 18        CLC 
05/BA26: 69 08     ADC #$08
05/BA28: A8        TAY 
05/BA29: E8        INX 
05/BA2A: E8        INX 
05/BA2B: E0 04     CPX #$04
05/BA2D: 90 DE     BCC $BA0D
05/BA2F: 68        PLA 
05/BA30: 8D 60 6F  STA $6F60
05/BA33: 60        RTS 

; [ update sound effect ]

05/BA34: AD 60 6F  LDA $6F60
05/BA37: 0A        ASL 
05/BA38: B0 06     BCS $BA40
05/BA3A: 0A        ASL 
05/BA3B: 90 06     BCC $BA43
05/BA3D: 20 44 BA  JSR $BA44
05/BA40: 20 6F BA  JSR $BA6F
05/BA43: 60        RTS 

; [  ]

05/BA44: AD 60 6F  LDA $6F60
05/BA47: 29 3F     AND #$3F
05/BA49: 0A        ASL 
05/BA4A: AA        TAX 
05/BA4B: BD 5F BB  LDA $BB5F,X
05/BA4E: 85 CA     STA $CA
05/BA50: BD 60 BB  LDA $BB60,X
05/BA53: 85 CB     STA $CB
05/BA55: A0 00     LDY #$00
05/BA57: B1 CA     LDA ($CA),Y
05/BA59: 99 61 6F  STA $6F61,Y
05/BA5C: C8        INY 
05/BA5D: C0 04     CPY #$04
05/BA5F: 90 F6     BCC $BA57
05/BA61: A9 00     LDA #$00
05/BA63: 8D 65 6F  STA $6F65
05/BA66: 8D 66 6F  STA $6F66
05/BA69: A9 80     LDA #$80
05/BA6B: 8D 60 6F  STA $6F60
05/BA6E: 60        RTS 

; [  ]

05/BA6F: A9 00     LDA #$00
05/BA71: 85 CC     STA $CC
05/BA73: A5 CC     LDA $CC
05/BA75: 0A        ASL 
05/BA76: AA        TAX 
05/BA77: BD 61 6F  LDA $6F61,X
05/BA7A: 85 CA     STA $CA
05/BA7C: BD 62 6F  LDA $6F62,X
05/BA7F: 85 CB     STA $CB
05/BA81: C9 FF     CMP #$FF
05/BA83: F0 3E     BEQ $BAC3
05/BA85: A6 CC     LDX $CC
05/BA87: BD 65 6F  LDA $6F65,X
05/BA8A: D0 32     BNE $BABE
05/BA8C: 20 CC BA  JSR $BACC
05/BA8F: C9 FF     CMP #$FF
05/BA91: D0 06     BNE $BA99
05/BA93: 20 D7 BA  JSR $BAD7
05/BA96: 4C C3 BA  JMP $BAC3
05/BA99: C9 FE     CMP #$FE
05/BA9B: D0 06     BNE $BAA3
05/BA9D: 20 10 BB  JSR $BB10
05/BAA0: 4C 8C BA  JMP $BA8C
05/BAA3: C9 00     CMP #$00
05/BAA5: D0 06     BNE $BAAD
05/BAA7: 20 2A BB  JSR $BB2A
05/BAAA: 4C 8C BA  JMP $BA8C
05/BAAD: 20 33 BB  JSR $BB33
05/BAB0: A5 CC     LDA $CC
05/BAB2: 0A        ASL 
05/BAB3: AA        TAX 
05/BAB4: A5 CA     LDA $CA
05/BAB6: 9D 61 6F  STA $6F61,X
05/BAB9: A5 CB     LDA $CB
05/BABB: 9D 62 6F  STA $6F62,X
05/BABE: A6 CC     LDX $CC
05/BAC0: DE 65 6F  DEC $6F65,X
05/BAC3: E6 CC     INC $CC
05/BAC5: A5 CC     LDA $CC
05/BAC7: C9 02     CMP #$02
05/BAC9: 90 A8     BCC $BA73
05/BACB: 60        RTS 

; [  ]

05/BACC: A0 00     LDY #$00
05/BACE: B1 CA     LDA ($CA),Y
05/BAD0: E6 CA     INC $CA
05/BAD2: D0 02     BNE $BAD6
05/BAD4: E6 CB     INC $CB
05/BAD6: 60        RTS 

; [  ]

05/BAD7: A5 CC     LDA $CC
05/BAD9: 0A        ASL 
05/BADA: AA        TAX 
05/BADB: A9 FF     LDA #$FF
05/BADD: 9D 61 6F  STA $6F61,X
05/BAE0: 9D 62 6F  STA $6F62,X
05/BAE3: A2 00     LDX #$00
05/BAE5: DD 61 6F  CMP $6F61,X
05/BAE8: D0 0A     BNE $BAF4
05/BAEA: E8        INX 
05/BAEB: E0 04     CPX #$04
05/BAED: 90 F6     BCC $BAE5
05/BAEF: A9 00     LDA #$00
05/BAF1: 8D 60 6F  STA $6F60
05/BAF4: A5 CC     LDA $CC
05/BAF6: D0 05     BNE $BAFD
05/BAF8: A2 04     LDX #$04
05/BAFA: 4C FF BA  JMP $BAFF
05/BAFD: A2 0C     LDX #$0C
05/BAFF: A9 30     LDA #$30
05/BB01: 9D 00 40  STA $4000,X
05/BB04: A9 00     LDA #$00
05/BB06: 9D 01 40  STA $4001,X
05/BB09: 9D 02 40  STA $4002,X
05/BB0C: 9D 03 40  STA $4003,X
05/BB0F: 60        RTS 

; [  ]

05/BB10: 20 CC BA  JSR $BACC
05/BB13: 85 CD     STA $CD
05/BB15: 20 CC BA  JSR $BACC
05/BB18: 85 CE     STA $CE
05/BB1A: A6 CC     LDX $CC
05/BB1C: DE 67 6F  DEC $6F67,X
05/BB1F: F0 08     BEQ $BB29
05/BB21: A5 CD     LDA $CD
05/BB23: 85 CA     STA $CA
05/BB25: A5 CE     LDA $CE
05/BB27: 85 CB     STA $CB
05/BB29: 60        RTS 

; [  ]

05/BB2A: 20 CC BA  JSR $BACC
05/BB2D: A6 CC     LDX $CC
05/BB2F: 9D 67 6F  STA $6F67,X
05/BB32: 60        RTS 

; [  ]

05/BB33: A6 CC     LDX $CC
05/BB35: D0 02     BNE $BB39
05/BB37: 85 E5     STA $E5
05/BB39: 9D 65 6F  STA $6F65,X
05/BB3C: AD 15 40  LDA $4015
05/BB3F: 09 0F     ORA #$0F
05/BB41: 8D 15 40  STA $4015
05/BB44: A5 CC     LDA $CC
05/BB46: D0 05     BNE $BB4D
05/BB48: A2 04     LDX #$04
05/BB4A: 4C 4F BB  JMP $BB4F
05/BB4D: A2 0C     LDX #$0C
05/BB4F: A9 04     LDA #$04
05/BB51: 85 CD     STA $CD
05/BB53: 20 CC BA  JSR $BACC
05/BB56: 9D 00 40  STA $4000,X
05/BB59: E8        INX 
05/BB5A: C6 CD     DEC $CD
05/BB5C: D0 F5     BNE $BB53
05/BB5E: 60        RTS 

; --------------------------------------------------------------------------

; [ minimap ]

09/BA00: A9 88     LDA #$88
09/BA02: 85 FF     STA $FF
09/BA04: A9 09     LDA #$09
09/BA06: 85 57     STA $57
09/BA08: A9 00     LDA #$00
09/BA0A: 8D 01 20  STA $2001
09/BA0D: 8D 15 40  STA $4015
09/BA10: A9 41     LDA #$41           ; play song $01
09/BA12: 85 E0     STA $E0
09/BA14: 20 C9 BC  JSR $BCC9
09/BA17: A5 27     LDA $27
09/BA19: 85 29     STA $29
09/BA1B: A5 28     LDA $28
09/BA1D: 85 2A     STA $2A
09/BA1F: 20 77 BD  JSR $BD77
09/BA22: A9 00     LDA #$00
09/BA24: 85 39     STA $39
09/BA26: A5 2A     LDA $2A
09/BA28: 38        SEC 
09/BA29: E9 39     SBC #$39
09/BA2B: 85 3B     STA $3B
09/BA2D: 20 86 BA  JSR $BA86
09/BA30: A5 29     LDA $29
09/BA32: 18        CLC 
09/BA33: 69 06     ADC #$06
09/BA35: 85 38     STA $38
09/BA37: 18        CLC 
09/BA38: 69 01     ADC #$01
09/BA3A: 85 3A     STA $3A
09/BA3C: 20 A0 BB  JSR $BBA0
09/BA3F: E6 39     INC $39
09/BA41: A5 39     LDA $39
09/BA43: 29 07     AND #$07
09/BA45: D0 E9     BNE $BA30
09/BA47: 20 FF BA  JSR $BAFF
09/BA4A: A5 39     LDA $39
09/BA4C: 10 DF     BPL $BA2D
09/BA4E: 20 90 BA  JSR $BA90
09/BA51: A5 20     LDA $20
09/BA53: 29 0F     AND #$0F
09/BA55: D0 0C     BNE $BA63
09/BA57: A5 25     LDA $25
09/BA59: D0 07     BNE $BA62
09/BA5B: A5 24     LDA $24
09/BA5D: F0 EF     BEQ $BA4E
09/BA5F: 4C 17 BA  JMP $BA17
09/BA62: 60        RTS 
09/BA63: C9 04     CMP #$04
09/BA65: B0 0F     BCS $BA76
09/BA67: 4A        LSR 
09/BA68: A9 02     LDA #$02
09/BA6A: B0 02     BCS $BA6E
09/BA6C: A9 FE     LDA #$FE
09/BA6E: 18        CLC 
09/BA6F: 65 29     ADC $29
09/BA71: 85 29     STA $29
09/BA73: 4C 1F BA  JMP $BA1F
09/BA76: C9 08     CMP #$08
09/BA78: A9 FE     LDA #$FE
09/BA7A: B0 02     BCS $BA7E
09/BA7C: A9 02     LDA #$02
09/BA7E: 18        CLC 
09/BA7F: 65 2A     ADC $2A
09/BA81: 85 2A     STA $2A
09/BA83: 4C 1F BA  JMP $BA1F

; [  ]

09/BA86: A9 00     LDA #$00
09/BA88: AA        TAX 
09/BA89: 9D 00 05  STA $0500,X
09/BA8C: E8        INX 
09/BA8D: D0 FA     BNE $BA89
09/BA8F: 60        RTS 
09/BA90: 20 00 FE  JSR $FE00          ; wait for vblank
09/BA93: A9 02     LDA #$02
09/BA95: 8D 14 40  STA $4014
09/BA98: 20 0F C0  JSR $C00F
09/BA9B: A9 1E     LDA #$1E
09/BA9D: 8D 01 20  STA $2001
09/BAA0: A5 FF     LDA $FF
09/BAA2: 8D 00 20  STA $2000
09/BAA5: A9 00     LDA #$00
09/BAA7: 8D 05 20  STA $2005
09/BAAA: 8D 05 20  STA $2005
09/BAAD: A9 00     LDA #$00
09/BAAF: 85 24     STA $24
09/BAB1: 85 25     STA $25
09/BAB3: 20 0C C0  JSR $C00C          ; update joypad input
09/BAB6: E6 F0     INC $F0
09/BAB8: A5 27     LDA $27
09/BABA: C5 29     CMP $29
09/BABC: D0 13     BNE $BAD1
09/BABE: A5 28     LDA $28
09/BAC0: C5 2A     CMP $2A
09/BAC2: D0 0D     BNE $BAD1
09/BAC4: A5 F0     LDA $F0
09/BAC6: 29 08     AND #$08
09/BAC8: D0 02     BNE $BACC
09/BACA: A9 30     LDA #$30
09/BACC: 49 07     EOR #$07
09/BACE: 8D D1 03  STA $03D1
09/BAD1: A5 F0     LDA $F0
09/BAD3: 29 30     AND #$30
09/BAD5: C9 30     CMP #$30
09/BAD7: D0 02     BNE $BADB
09/BAD9: A9 0F     LDA #$0F
09/BADB: 8D D2 03  STA $03D2
09/BADE: 60        RTS 

09/BADF: 08 0C 0E 0E 10 10 10 10 10 10 10 10 0E 0E 0C 08

09/BAEF: 40 20 10 10 00 00 00 00 00 00 00 00 10 10 20 40

; [  ]

09/BAFF: A5 39     LDA $39
09/BB01: 4A        LSR 
09/BB02: 4A        LSR 
09/BB03: 4A        LSR 
09/BB04: 38        SEC 
09/BB05: E9 01     SBC #$01
09/BB07: A8        TAY 
09/BB08: 85 66     STA $66
09/BB0A: BE EF BA  LDX $BAEF,Y
09/BB0D: B9 DF BA  LDA $BADF,Y
09/BB10: A8        TAY 
09/BB11: 20 00 FE  JSR $FE00          ; wait for vblank
09/BB14: A5 66     LDA $66
09/BB16: 8D 06 20  STA $2006
09/BB19: 8E 06 20  STX $2006
09/BB1C: BD 00 05  LDA $0500,X
09/BB1F: 8D 07 20  STA $2007
09/BB22: BD 01 05  LDA $0501,X
09/BB25: 8D 07 20  STA $2007
09/BB28: BD 02 05  LDA $0502,X
09/BB2B: 8D 07 20  STA $2007
09/BB2E: BD 03 05  LDA $0503,X
09/BB31: 8D 07 20  STA $2007
09/BB34: BD 04 05  LDA $0504,X
09/BB37: 8D 07 20  STA $2007
09/BB3A: BD 05 05  LDA $0505,X
09/BB3D: 8D 07 20  STA $2007
09/BB40: BD 06 05  LDA $0506,X
09/BB43: 8D 07 20  STA $2007
09/BB46: BD 07 05  LDA $0507,X
09/BB49: 8D 07 20  STA $2007
09/BB4C: BD 08 05  LDA $0508,X
09/BB4F: 8D 07 20  STA $2007
09/BB52: BD 09 05  LDA $0509,X
09/BB55: 8D 07 20  STA $2007
09/BB58: BD 0A 05  LDA $050A,X
09/BB5B: 8D 07 20  STA $2007
09/BB5E: BD 0B 05  LDA $050B,X
09/BB61: 8D 07 20  STA $2007
09/BB64: BD 0C 05  LDA $050C,X
09/BB67: 8D 07 20  STA $2007
09/BB6A: BD 0D 05  LDA $050D,X
09/BB6D: 8D 07 20  STA $2007
09/BB70: BD 0E 05  LDA $050E,X
09/BB73: 8D 07 20  STA $2007
09/BB76: BD 0F 05  LDA $050F,X
09/BB79: 8D 07 20  STA $2007
09/BB7C: 8A        TXA 
09/BB7D: 18        CLC 
09/BB7E: 69 10     ADC #$10
09/BB80: AA        TAX 
09/BB81: 88        DEY 
09/BB82: F0 04     BEQ $BB88
09/BB84: 29 70     AND #$70
09/BB86: D0 94     BNE $BB1C
09/BB88: A5 FF     LDA $FF
09/BB8A: 8D 00 20  STA $2000
09/BB8D: A9 00     LDA #$00
09/BB8F: 8D 05 20  STA $2005
09/BB92: 8D 05 20  STA $2005
09/BB95: 20 9F BB  JSR $BB9F
09/BB98: 98        TYA 
09/BB99: F0 03     BEQ $BB9E
09/BB9B: 4C 11 BB  JMP $BB11
09/BB9E: 60        RTS 

; [  ]

; no effect

09/BB9F: 60        RTS 

; [  ]

09/BBA0: A5 39     LDA $39
09/BBA2: C9 40     CMP #$40
09/BBA4: 90 02     BCC $BBA8
09/BBA6: 49 7F     EOR #$7F
09/BBA8: AA        TAX 
09/BBA9: A5 39     LDA $39
09/BBAB: 18        CLC 
09/BBAC: 65 3B     ADC $3B
09/BBAE: 85 41     STA $41
09/BBB0: BD 91 BD  LDA $BD91,X
09/BBB3: 0A        ASL 
09/BBB4: 0A        ASL 
09/BBB5: 85 3C     STA $3C
09/BBB7: 85 3D     STA $3D
09/BBB9: 20 C0 FF  JSR $FFC0          ; decompress world tilemap
09/BBBC: A0 40     LDY #$40
09/BBBE: 84 40     STY $40
09/BBC0: A5 39     LDA $39
09/BBC2: 29 07     AND #$07
09/BBC4: 85 66     STA $66
09/BBC6: A9 08     LDA #$08
09/BBC8: 85 65     STA $65
09/BBCA: A5 3C     LDA $3C
09/BBCC: 18        CLC 
09/BBCD: 65 3D     ADC $3D
09/BBCF: 85 3C     STA $3C
09/BBD1: 90 2A     BCC $BBFD
09/BBD3: A6 3A     LDX $3A
09/BBD5: BD 00 06  LDA $0600,X
09/BBD8: AA        TAX 
09/BBD9: BD 80 BF  LDA $BF80,X
09/BBDC: A6 66     LDX $66
09/BBDE: 4A        LSR 
09/BBDF: 3E 80 05  ROL $0580,X
09/BBE2: 4A        LSR 
09/BBE3: 3E 88 05  ROL $0588,X
09/BBE6: 4A        LSR 
09/BBE7: 90 03     BCC $BBEC
09/BBE9: 20 73 BC  JSR $BC73
09/BBEC: E6 40     INC $40
09/BBEE: C6 65     DEC $65
09/BBF0: D0 0B     BNE $BBFD
09/BBF2: A9 08     LDA #$08
09/BBF4: 85 65     STA $65
09/BBF6: A5 66     LDA $66
09/BBF8: 18        CLC 
09/BBF9: 69 10     ADC #$10
09/BBFB: 85 66     STA $66
09/BBFD: E6 3A     INC $3A
09/BBFF: C8        INY 
09/BC00: 10 C8     BPL $BBCA
09/BC02: A5 65     LDA $65
09/BC04: 29 07     AND #$07
09/BC06: A8        TAY 
09/BC07: F0 0B     BEQ $BC14
09/BC09: A6 66     LDX $66
09/BC0B: 1E 80 05  ASL $0580,X
09/BC0E: 1E 88 05  ASL $0588,X
09/BC11: 88        DEY 
09/BC12: D0 F7     BNE $BC0B
09/BC14: A0 3F     LDY #$3F
09/BC16: 84 40     STY $40
09/BC18: A5 39     LDA $39
09/BC1A: 29 07     AND #$07
09/BC1C: 09 70     ORA #$70
09/BC1E: 85 66     STA $66
09/BC20: A9 08     LDA #$08
09/BC22: 85 65     STA $65
09/BC24: A5 3D     LDA $3D
09/BC26: 85 3C     STA $3C
09/BC28: A5 3C     LDA $3C
09/BC2A: 18        CLC 
09/BC2B: 65 3D     ADC $3D
09/BC2D: 85 3C     STA $3C
09/BC2F: 90 2A     BCC $BC5B
09/BC31: A6 38     LDX $38
09/BC33: BD 00 06  LDA $0600,X
09/BC36: AA        TAX 
09/BC37: BD 80 BF  LDA $BF80,X
09/BC3A: A6 66     LDX $66
09/BC3C: 4A        LSR 
09/BC3D: 7E 00 05  ROR $0500,X
09/BC40: 4A        LSR 
09/BC41: 7E 08 05  ROR $0508,X
09/BC44: 4A        LSR 
09/BC45: 90 03     BCC $BC4A
09/BC47: 20 73 BC  JSR $BC73
09/BC4A: C6 40     DEC $40
09/BC4C: C6 65     DEC $65
09/BC4E: D0 0B     BNE $BC5B
09/BC50: A9 08     LDA #$08
09/BC52: 85 65     STA $65
09/BC54: A5 66     LDA $66
09/BC56: 38        SEC 
09/BC57: E9 10     SBC #$10
09/BC59: 85 66     STA $66
09/BC5B: C6 38     DEC $38
09/BC5D: 88        DEY 
09/BC5E: 10 C8     BPL $BC28
09/BC60: A5 65     LDA $65
09/BC62: 29 07     AND #$07
09/BC64: A8        TAY 
09/BC65: F0 0B     BEQ $BC72
09/BC67: A6 66     LDX $66
09/BC69: 5E 00 05  LSR $0500,X
09/BC6C: 5E 08 05  LSR $0508,X
09/BC6F: 88        DEY 
09/BC70: D0 F7     BNE $BC69
09/BC72: 60        RTS 

; [  ]

09/BC73: A5 26     LDA $26
09/BC75: 18        CLC 
09/BC76: 69 04     ADC #$04
09/BC78: 85 26     STA $26
09/BC7A: AA        TAX 
09/BC7B: A5 39     LDA $39
09/BC7D: 18        CLC 
09/BC7E: 69 4C     ADC #$4C
09/BC80: 9D 00 02  STA $0200,X
09/BC83: A9 84     LDA #$84
09/BC85: 9D 01 02  STA $0201,X
09/BC88: A9 00     LDA #$00
09/BC8A: 9D 02 02  STA $0202,X
09/BC8D: A5 40     LDA $40
09/BC8F: 18        CLC 
09/BC90: 69 3D     ADC #$3D
09/BC92: 9D 03 02  STA $0203,X
09/BC95: 60        RTS 

; [ copy data to ppu ]

;    A: high byte of ppu address
;    X: size in 256-byte blocks
; +$80: source address

09/BC96: 2C 02 20  BIT $2002          ; latch ppu
09/BC99: 8D 06 20  STA $2006
09/BC9C: A9 00     LDA #$00
09/BC9E: 8D 06 20  STA $2006
09/BCA1: A0 00     LDY #$00
09/BCA3: B1 80     LDA ($80),Y
09/BCA5: 8D 07 20  STA $2007
09/BCA8: C8        INY 
09/BCA9: D0 F8     BNE $BCA3
09/BCAB: E6 81     INC $81
09/BCAD: CA        DEX 
09/BCAE: D0 F3     BNE $BCA3
09/BCB0: 60        RTS 

; [  ]

09/BCB1: 2C 02 20  BIT $2002          ; latch ppu
09/BCB4: A9 00     LDA #$00
09/BCB6: 8D 06 20  STA $2006
09/BCB9: 8D 06 20  STA $2006
09/BCBC: A2 10     LDX #$10
09/BCBE: A8        TAY 
09/BCBF: 8D 07 20  STA $2007
09/BCC2: C8        INY 
09/BCC3: D0 FA     BNE $BCBF
09/BCC5: CA        DEX 
09/BCC6: D0 F7     BNE $BCBF
09/BCC8: 60        RTS 

; [  ]

09/BCC9: 20 B1 BC  JSR $BCB1
09/BCCC: A9 00     LDA #$00
09/BCCE: 85 80     STA $80
09/BCD0: A9 BF     LDA #$BF           ; 09/BF00 (minimap sprite graphics)
09/BCD2: 85 81     STA $81
09/BCD4: A9 18     LDA #$18           ; ppu $1800
09/BCD6: A2 01     LDX #$01           ; size: $0100 bytes (it's really $50 bytes)
09/BCD8: 20 96 BC  JSR $BC96          ; copy data to ppu
09/BCDB: A9 B4     LDA #$B4           ; 09/B400 (minimap name table)
09/BCDD: 85 81     STA $81
09/BCDF: A2 04     LDX #$04           ; size: $0400 bytes
09/BCE1: A9 20     LDA #$20           ; ppu $2000
09/BCE3: 20 96 BC  JSR $BC96          ; copy data to ppu
09/BCE6: A2 00     LDX #$00
09/BCE8: A9 00     LDA #$00
09/BCEA: 85 82     STA $82
09/BCEC: BD 58 BD  LDA $BD58,X
09/BCEF: 4A        LSR 
09/BCF0: 66 82     ROR $82
09/BCF2: 4A        LSR 
09/BCF3: 66 82     ROR $82
09/BCF5: 4A        LSR 
09/BCF6: 66 82     ROR $82
09/BCF8: 4A        LSR 
09/BCF9: 66 82     ROR $82
09/BCFB: 8D 06 20  STA $2006
09/BCFE: A5 82     LDA $82
09/BD00: 8D 06 20  STA $2006
09/BD03: A0 00     LDY #$00
09/BD05: B1 80     LDA ($80),Y
09/BD07: 8D 07 20  STA $2007
09/BD0A: C8        INY 
09/BD0B: C0 10     CPY #$10
09/BD0D: 90 F6     BCC $BD05
09/BD0F: A5 80     LDA $80
09/BD11: 18        CLC 
09/BD12: 69 10     ADC #$10
09/BD14: 85 80     STA $80
09/BD16: A5 81     LDA $81
09/BD18: 69 00     ADC #$00
09/BD1A: 85 81     STA $81
09/BD1C: E8        INX 
09/BD1D: E0 1F     CPX #$1F
09/BD1F: 90 C7     BCC $BCE8
09/BD21: A2 0F     LDX #$0F
09/BD23: BD 50 BF  LDA $BF50,X
09/BD26: 9D C0 03  STA $03C0,X
09/BD29: CA        DEX 
09/BD2A: 10 F7     BPL $BD23
09/BD2C: AD C0 03  LDA $03C0
09/BD2F: 8D D0 03  STA $03D0
09/BD32: A9 0F     LDA #$0F
09/BD34: 8D D1 03  STA $03D1
09/BD37: 8D D2 03  STA $03D2
09/BD3A: 20 00 FE  JSR $FE00          ; wait for vblank
09/BD3D: A9 02     LDA #$02
09/BD3F: 8D 14 40  STA $4014
09/BD42: 20 0F C0  JSR $C00F
09/BD45: A5 FF     LDA $FF
09/BD47: 8D 00 20  STA $2000
09/BD4A: A9 0A     LDA #$0A
09/BD4C: 8D 01 20  STA $2001
09/BD4F: A9 00     LDA #$00
09/BD51: 8D 05 20  STA $2005
09/BD54: 8D 05 20  STA $2005
09/BD57: 60        RTS 

09/BD58: 01 02 03 0C 0D 0E 0F 10 11 1E 1F 20 2F 30 3F C0
09/BD68: CF D0 DF E0 E1 EE EF F0 F1 F2 F3 FC FD FE FF

09/BD77: A2 00     LDX #$00
09/BD79: A9 0C     LDA #$0C
09/BD7B: 85 26     STA $26
09/BD7D: A9 F8     LDA #$F8
09/BD7F: 9D 00 02  STA $0200,X
09/BD82: E8        INX 
09/BD83: D0 FA     BNE $BD7F
09/BD85: A2 0F     LDX #$0F
09/BD87: BD 60 BF  LDA $BF60,X
09/BD8A: 9D 00 02  STA $0200,X
09/BD8D: CA        DEX 
09/BD8E: 10 F7     BPL $BD87
09/BD90: 60        RTS 

; sine table ???
09/BD91: 0B 10 13 16 18 1B 1D 1E 20 22 23 25 26 27 29 2A
09/BDA1: 2B 2C 2D 2E 2F 30 30 31 32 33 33 34 35 36 37 37
09/BDB1: 38 38 39 39 3A 3A 3A 3B 3B 3C 3C 3C 3C 3D 3D 3D
09/BDC1: 3D 3E 3E 3E 3E 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F

; --------------------------------------------------------------------------

0B/9600: 4C 63 9D  JMP $9D63          ; fill ppu (set address)
0B/9603: 4C 68 9D  JMP $9D68          ; fill ppu
0B/9606: 4C 7C 9D  JMP $9D7C          ; copy color palettes to ppu
0B/9609: 4C 58 9D  JMP $9D58          ; fill ppu sequential (set address)
0B/960C: 4C 5B 9D  JMP $9D5B          ; fill ppu sequential
0B/960F: 4C A2 9D  JMP $9DA2          ; copy 8 tiles to ppu
0B/9612: 4C BA A5  JMP $A5BA
0B/9615: 4C A2 A6  JMP $A6A2          ; choose targets
0B/9618: 4C 30 9A  JMP $9A30
0B/961B: 4C 70 A9  JMP $A970
0B/961E: 4C 71 B0  JMP $B071          ; show attack animation
0B/9621: 4C EE 9C  JMP $9CEE          ; copy cursor graphics to ppu
0B/9624: 4C DE AB  JMP $ABDE          ; load character graphics
0B/9627: 4C BF AD  JMP $ADBF          ; characters run off-screen
0B/962A: 4C 79 9E  JMP $9E79          ; fade out palettes
0B/962D: 4C 32 AF  JMP $AF32          ; load status graphics
0B/9630: 4C CB AF  JMP $AFCB          ; update status animation
0B/9633: 4C 6E AE  JMP $AE6E          ; characters run away
0B/9636: 4C F2 AE  JMP $AEF2          ; battle defeat

; [ init battle ]

0B/9639: 20 C3 96  JSR $96C3          ; init ppu
0B/963C: 20 D5 97  JSR $97D5          ; init rng
0B/963F: 20 C3 FB  JSR $FBC3
0B/9642: 20 3D 98  JSR $983D          ; load battle properties
0B/9645: 20 17 FB  JSR $FB17          ; init battle stats
0B/9648: AD 4C 7B  LDA $7B4C
0B/964B: 29 03     AND #$03
0B/964D: A2 0E     LDX #$0E           ; $0E00 bytes per monster set
0B/964F: 20 79 FC  JSR $FC79          ; multiply
0B/9652: A5 02     LDA $02
0B/9654: 69 80     ADC #$80           ; 07/8000 (monster graphics)
0B/9656: 85 03     STA $03
0B/9658: A9 00     LDA #$00
0B/965A: 85 02     STA $02
0B/965C: 85 00     STA $00
0B/965E: A9 12     LDA #$12
0B/9660: 85 01     STA $01
0B/9662: 20 62 FB  JSR $FB62          ; load monster graphics
0B/9665: 20 84 FB  JSR $FB84          ; load text graphics
0B/9668: 20 6C 97  JSR $976C          ; init attribute table
0B/966B: 20 E4 A1  JSR $A1E4          ; copy left attribute table to ppu
0B/966E: 20 F9 A1  JSR $A1F9          ; copy right attribute table to ppu
0B/9671: 20 9F 9E  JSR $9E9F          ; init tilemap for battle bg
0B/9674: 20 FA 9E  JSR $9EFA          ; init tilemap for monsters
0B/9677: A2 00     LDX #$00
0B/9679: AD 72 7B  LDA $7B72
0B/967C: C9 09     CMP #$09
0B/967E: 90 06     BCC $9686          ; branch if not a boss
0B/9680: 2C 48 7B  BIT $7B48
0B/9683: 30 01     BMI $9686          ; branch if "B" battle
0B/9685: E8        INX 
0B/9686: BD 06 93  LDA $9306,X        ; battle song
0B/9689: 85 E0     STA $E0
0B/968B: 20 4E 9E  JSR $9E4E          ; wait for vblank (oam update)
0B/968E: A9 1E     LDA #$1E           ; enable sprites and bg
0B/9690: 85 3C     STA $3C
0B/9692: 8D 01 20  STA $2001
0B/9695: 20 4E A0  JSR $A04E          ; monster entry
0B/9698: AE 49 7B  LDX $7B49          ; battle bg
0B/969B: A0 09     LDY #$09           ; bg palette 2
0B/969D: 20 03 FC  JSR $FC03          ; load battle palette
0B/96A0: 20 54 9E  JSR $9E54          ; wait for vblank (oam & color update)
0B/96A3: 20 AE 9F  JSR $9FAE          ; fade in battle bg
0B/96A6: 20 BD A3  JSR $A3BD          ; init character sprite data
0B/96A9: 20 43 9B  JSR $9B43          ; init character graphics
0B/96AC: 20 8D A0  JSR $A08D          ; character entry
0B/96AF: A9 00     LDA #$00
0B/96B1: 8D B5 79  STA $79B5
0B/96B4: A9 30     LDA #$30
0B/96B6: 8D B7 79  STA $79B7
0B/96B9: 20 33 9E  JSR $9E33          ; wait for vblank (menu, oam & color update)
0B/96BC: A9 08     LDA #$08
0B/96BE: 85 36     STA $36
0B/96C0: 4C 06 FB  JMP $FB06          ; battle main

; [ init ppu ]

0B/96C3: 20 3E 97  JSR $973E          ; reset palettes
0B/96C6: 20 2A FA  JSR $FA2A          ; wait for vblank
0B/96C9: 20 7C 9D  JSR $9D7C          ; copy color palettes to ppu
0B/96CC: A9 90     LDA #$90
0B/96CE: 8D 00 20  STA $2000
0B/96D1: 85 3A     STA $3A
0B/96D3: 85 3B     STA $3B
0B/96D5: A9 00     LDA #$00
0B/96D7: 8D 01 20  STA $2001
0B/96DA: 85 3C     STA $3C
0B/96DC: 85 38     STA $38
0B/96DE: 85 39     STA $39
0B/96E0: 85 37     STA $37
0B/96E2: A2 FF     LDX #$FF
0B/96E4: 86 36     STX $36
0B/96E6: A8        TAY 
0B/96E7: 20 2B 97  JSR $972B
0B/96EA: A0 27     LDY #$27           ; clear ppu $0000-$27FF
0B/96EC: 20 68 9D  JSR $9D68          ; fill ppu
0B/96EF: 88        DEY 
0B/96F0: D0 FA     BNE $96EC
0B/96F2: A0 04     LDY #$04
0B/96F4: 20 2B 97  JSR $972B
0B/96F7: A2 60     LDX #$60
0B/96F9: 20 68 9D  JSR $9D68          ; fill ppu
0B/96FC: A0 26     LDY #$26
0B/96FE: 84 01     STY $01
0B/9700: 20 63 9D  JSR $9D63          ; fill ppu (set address)
0B/9703: A2 60     LDX #$60
0B/9705: 20 68 9D  JSR $9D68          ; fill ppu
0B/9708: A0 08     LDY #$08
0B/970A: 20 2B 97  JSR $972B
0B/970D: A2 26     LDX #$26
0B/970F: 86 01     STX $01
0B/9711: A2 20     LDX #$20           ; size: 32
0B/9713: 20 63 9D  JSR $9D63          ; fill ppu (set address)
0B/9716: BD D1 97  LDA $97D1,X        ; set up sprite 0 for raster timing
0B/9719: 9D 00 02  STA $0200,X
0B/971C: E8        INX 
0B/971D: E0 04     CPX #$04
0B/971F: D0 F5     BNE $9716
0B/9721: A2 FC     LDX #$FC
0B/9723: 20 E9 9D  JSR $9DE9
0B/9726: 20 4F 97  JSR $974F
0B/9729: A0 0C     LDY #$0C           ; ppu $2240-$225D <- $05
; fallthrough

; [ fill ppu block ]

0B/972B: B9 B5 97  LDA $97B5,Y        ; ppu address
0B/972E: 85 00     STA $00
0B/9730: B9 B6 97  LDA $97B6,Y
0B/9733: 85 01     STA $01
0B/9735: B9 B7 97  LDA $97B7,Y        ; fill value
0B/9738: BE B8 97  LDX $97B8,Y        ; size
0B/973B: 4C 63 9D  JMP $9D63          ; fill ppu (set address)

; [ reset palettes ]

0B/973E: A2 00     LDX #$00
0B/9740: A0 20     LDY #$20
0B/9742: A9 0F     LDA #$0F           ; black
0B/9744: 9D A8 79  STA $79A8,X
0B/9747: E8        INX 
0B/9748: 88        DEY 
0B/9749: D0 F9     BNE $9744
0B/974B: 60        RTS 

; [  ]

0B/974C: 20 3F 9E  JSR $9E3F          ; render menu and wait for vblank
0B/974F: A0 10     LDY #$10
0B/9751: 20 2B 97  JSR $972B
0B/9754: A0 14     LDY #$14
0B/9756: 20 2B 97  JSR $972B
0B/9759: 4C 46 FD  JMP $FD46          ; wait for first battlefield scanline

; [  ]

0B/975C: 20 3F 9E  JSR $9E3F          ; render menu and wait for vblank
0B/975F: A0 10     LDY #$10
0B/9761: 20 2B 97  JSR $972B
0B/9764: A0 18     LDY #$18
0B/9766: 20 2B 97  JSR $972B
0B/9769: 4C 46 FD  JMP $FD46          ; wait for first battlefield scanline

; [ init attribute table ]

0B/976C: A2 00     LDX #$00
0B/976E: A9 FF     LDA #$FF
0B/9770: 9D C8 79  STA $79C8,X
0B/9773: E8        INX 
0B/9774: E0 80     CPX #$80
0B/9776: D0 F8     BNE $9770
0B/9778: A9 00     LDA #$00
0B/977A: 85 00     STA $00
0B/977C: 85 01     STA $01
0B/977E: A2 10     LDX #$10
0B/9780: A9 03     LDA #$03
0B/9782: A0 02     LDY #$02
0B/9784: 20 0F A1  JSR $A10F
0B/9787: A9 08     LDA #$08
0B/9789: 85 00     STA $00
0B/978B: A9 03     LDA #$03
0B/978D: 85 01     STA $01
0B/978F: A2 0E     LDX #$0E
0B/9791: A9 06     LDA #$06
0B/9793: A0 02     LDY #$02
0B/9795: 20 0F A1  JSR $A10F
0B/9798: A9 00     LDA #$00
0B/979A: 85 0C     STA $0C
0B/979C: A5 0C     LDA $0C
0B/979E: 20 05 A2  JSR $A205
0B/97A1: E6 0C     INC $0C
0B/97A3: A5 0C     LDA $0C
0B/97A5: C9 08     CMP #$08
0B/97A7: D0 F3     BNE $979C
0B/97A9: A2 40     LDX #$40
0B/97AB: BD C7 79  LDA $79C7,X
0B/97AE: 9D 07 7A  STA $7A07,X
0B/97B1: CA        DEX 
0B/97B2: D0 F7     BNE $97AB
0B/97B4: 60        RTS 

; ppu init fill data (8 * 4 bytes)
;   +$00: ppu address
;    $02: fill value
;    $03: size (zero = 256 bytes)

0B/97B5: 00 00 00 00  ; ppu $0000-$00FF <- $00 (clear all ppu ram)
0B/97B9: 60 22 FF 00  ; ppu $2260-$235F <- $FF
0B/97BD: 40 22 05 20  ; ppu $2240-$225F <- $05
0B/97C1: DF 06 FF 01  ; ppu $06DF       <- $FF
0B/97C5: 50 10 00 10  ; ppu $1050-$105F <- $00
0B/97C9: 5F 10 FF 01  ; ppu $105F       <- $FF
0B/97CD: 58 10 FF 08  ; ppu $1058-$105F <- $FF

; raster timing sprite data (sprite 0)
0B/97D1: 8F 6D 23 F8

; [ init rng ]

0B/97D5: A2 00     LDX #$00
0B/97D7: 75 00     ADC $00,X
0B/97D9: E8        INX 
0B/97DA: D0 FB     BNE $97D7
0B/97DC: 8D 42 00  STA $0042
0B/97DF: 29 02     AND #$02
0B/97E1: 18        CLC 
0B/97E2: 69 03     ADC #$03
0B/97E4: 85 0A     STA $0A
0B/97E6: A9 01     LDA #$01
0B/97E8: 85 08     STA $08
0B/97EA: A9 00     LDA #$00
0B/97EC: 85 09     STA $09
0B/97EE: A8        TAY 
0B/97EF: A5 0A     LDA $0A
0B/97F1: 85 00     STA $00
0B/97F3: A9 00     LDA #$00
0B/97F5: 85 01     STA $01
0B/97F7: A5 08     LDA $08
0B/97F9: 85 02     STA $02
0B/97FB: A5 09     LDA $09
0B/97FD: 85 03     STA $03
0B/97FF: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0B/9802: A5 04     LDA $04
0B/9804: 85 00     STA $00
0B/9806: A5 05     LDA $05
0B/9808: 85 01     STA $01
0B/980A: A9 00     LDA #$00
0B/980C: 85 02     STA $02
0B/980E: A9 04     LDA #$04
0B/9810: 85 03     STA $03
0B/9812: 20 C3 FC  JSR $FCC3          ; divide
0B/9815: 38        SEC 
0B/9816: A5 07     LDA $07
0B/9818: E9 02     SBC #$02
0B/981A: 05 06     ORA $06
0B/981C: F0 0E     BEQ $982C
0B/981E: 90 0C     BCC $982C
0B/9820: A9 00     LDA #$00
0B/9822: E5 06     SBC $06
0B/9824: 85 06     STA $06
0B/9826: A9 04     LDA #$04
0B/9828: E5 07     SBC $07
0B/982A: 85 07     STA $07
0B/982C: A5 07     LDA $07
0B/982E: 85 09     STA $09
0B/9830: 4A        LSR 
0B/9831: A5 06     LDA $06
0B/9833: 85 08     STA $08
0B/9835: 6A        ROR 
0B/9836: 99 48 7A  STA $7A48,Y        ; rng table
0B/9839: C8        INY 
0B/983A: D0 B3     BNE $97EF
0B/983C: 60        RTS 

; [ load battle properties ]

; battle properties format (0B/8620)
;   $00 pppp?ggg
;         p: monster palettes
;         g: monster graphics set -> $7B4C
;   $01
;   $02
;   $03 monster palette 1
;   $04 monster palette 2
;   $05 monster id
;   $06 monster count (A)
;   $07 monster count (B)

0B/983D: A2 00     LDX #$00           ; roll for monsters
0B/983F: A9 63     LDA #$63
0B/9841: 20 11 FD  JSR $FD11          ; random (X..A)
0B/9844: 85 0A     STA $0A
0B/9846: A2 00     LDX #$00           ; roll for characters
0B/9848: A9 63     LDA #$63
0B/984A: 20 11 FD  JSR $FD11          ; random (X..A)
0B/984D: 85 0B     STA $0B
0B/984F: A2 00     LDX #$00
0B/9851: 86 00     STX $00
0B/9853: AD 48 7B  LDA $7B48          ; battle id
0B/9856: 29 7F     AND #$7F
0B/9858: 48        PHA 
0B/9859: A8        TAY 
0B/985A: B9 20 8A  LDA $8A20,Y        ; surprise rate
0B/985D: C5 0A     CMP $0A
0B/985F: F0 04     BEQ $9865
0B/9861: 90 02     BCC $9865
0B/9863: E6 00     INC $00            ; monsters get a point
0B/9865: A0 21     LDY #$21
0B/9867: B9 00 61  LDA $6100,Y        ; agility
0B/986A: C5 0B     CMP $0B
0B/986C: F0 03     BEQ $9871
0B/986E: 90 01     BCC $9871
0B/9870: E8        INX                ; characters get a point
0B/9871: 8A        TXA 
0B/9872: 45 00     EOR $00
0B/9874: F0 04     BEQ $987A          ; branch if scores are equal
0B/9876: 8A        TXA 
0B/9877: 0A        ASL 
0B/9878: 05 00     ORA $00
0B/987A: 8D 4A 7B  STA $7B4A          ; set battle type
0B/987D: 68        PLA 
0B/987E: A2 08     LDX #$08
0B/9880: 20 79 FC  JSR $FC79          ; multiply
0B/9883: A5 02     LDA $02
0B/9885: 69 20     ADC #$20           ; 0B/8620 (battle properties)
0B/9887: 85 0A     STA $0A
0B/9889: A5 03     LDA $03
0B/988B: 69 86     ADC #$86
0B/988D: 85 0B     STA $0B
0B/988F: AD 48 7B  LDA $7B48
0B/9892: 2A        ROL 
0B/9893: A9 00     LDA #$00
0B/9895: 69 06     ADC #$06
0B/9897: A8        TAY 
0B/9898: B1 0A     LDA ($0A),Y
0B/989A: A2 04     LDX #$04
0B/989C: 20 79 FC  JSR $FC79          ; multiply
0B/989F: A5 02     LDA $02
0B/98A1: 69 A0     ADC #$A0           ; 0B/8BA0 (monster counts)
0B/98A3: 85 0C     STA $0C
0B/98A5: A5 03     LDA $03
0B/98A7: 69 8B     ADC #$8B
0B/98A9: 85 0D     STA $0D
0B/98AB: A0 05     LDY #$05
0B/98AD: B1 0A     LDA ($0A),Y
0B/98AF: A2 04     LDX #$04
0B/98B1: 20 79 FC  JSR $FC79          ; multiply
0B/98B4: A5 02     LDA $02
0B/98B6: 69 A0     ADC #$A0           ; 0B/8AA0 (monster sets)
0B/98B8: 85 0E     STA $0E
0B/98BA: A5 03     LDA $03
0B/98BC: 69 8A     ADC #$8A
0B/98BE: 85 0F     STA $0F
0B/98C0: A0 00     LDY #$00
0B/98C2: B1 0C     LDA ($0C),Y
0B/98C4: 20 07 FD  JSR $FD07          ; get low/high nybble
0B/98C7: 20 11 FD  JSR $FD11          ; random (X..A)
0B/98CA: 99 52 7B  STA $7B52,Y        ; set monster count
0B/98CD: B1 0E     LDA ($0E),Y
0B/98CF: 99 4E 7B  STA $7B4E,Y        ; set monster id
0B/98D2: C8        INY 
0B/98D3: C0 04     CPY #$04
0B/98D5: D0 EB     BNE $98C2
0B/98D7: A0 00     LDY #$00
0B/98D9: B1 0A     LDA ($0A),Y
0B/98DB: 29 07     AND #$07
0B/98DD: 8D 4C 7B  STA $7B4C          ; set monster graphics set
0B/98E0: B1 0A     LDA ($0A),Y
0B/98E2: A2 00     LDX #$00
0B/98E4: 94 0C     STY $0C,X
0B/98E6: 0A        ASL 
0B/98E7: 36 0C     ROL $0C,X
0B/98E9: E8        INX 
0B/98EA: E0 04     CPX #$04
0B/98EC: D0 F6     BNE $98E4
0B/98EE: 0A        ASL 
0B/98EF: 98        TYA 
0B/98F0: 2A        ROL 
0B/98F1: 8D 4B 7B  STA $7B4B
0B/98F4: C8        INY 
0B/98F5: B1 0A     LDA ($0A),Y
0B/98F7: 20 07 FD  JSR $FD07          ; get low/high nybble
0B/98FA: 99 0F 00  STA $000F,Y
0B/98FD: 96 10     STX $10,Y
0B/98FF: C8        INY 
0B/9900: B1 0A     LDA ($0A),Y
0B/9902: 20 07 FD  JSR $FD07          ; get low/high nybble
0B/9905: 99 10 00  STA $0010,Y
0B/9908: 96 11     STX $11,Y
0B/990A: C8        INY 
0B/990B: B1 0A     LDA ($0A),Y
0B/990D: 8D 56 7B  STA $7B56          ; monster palette 1
0B/9910: C8        INY 
0B/9911: B1 0A     LDA ($0A),Y
0B/9913: 8D 57 7B  STA $7B57          ; monster palette 2
0B/9916: A2 3F     LDX #$3F
0B/9918: A9 FF     LDA #$FF
0B/991A: 9D 62 7B  STA $7B62,X
0B/991D: CA        DEX 
0B/991E: 10 FA     BPL $991A
0B/9920: A2 03     LDX #$03
0B/9922: BD 52 7B  LDA $7B52,X
0B/9925: D0 07     BNE $992E          ; branch if monster count is nonzero
0B/9927: 95 10     STA $10,X
0B/9929: A9 FF     LDA #$FF
0B/992B: 9D 4E 7B  STA $7B4E,X        ; set monster id to $FF
0B/992E: CA        DEX 
0B/992F: 10 F1     BPL $9922
0B/9931: A9 0F     LDA #$0F           ; $000F
0B/9933: 85 04     STA $04
0B/9935: A9 00     LDA #$00
0B/9937: 85 05     STA $05
0B/9939: A9 FF     LDA #$FF           ; $75FF
0B/993B: 85 06     STA $06
0B/993D: A9 75     LDA #$75
0B/993F: 85 07     STA $07
0B/9941: A9 01     LDA #$01
0B/9943: 85 02     STA $02
0B/9945: A9 04     LDA #$04
0B/9947: 20 0C FB  JSR $FB0C          ; sort values
0B/994A: A0 00     LDY #$00
0B/994C: BE 00 76  LDX $7600,Y
0B/994F: BD 4E 7B  LDA $7B4E,X
0B/9952: 99 04 76  STA $7604,Y
0B/9955: BD 52 7B  LDA $7B52,X
0B/9958: 99 08 76  STA $7608,Y
0B/995B: B5 0C     LDA $0C,X
0B/995D: 99 0C 76  STA $760C,Y
0B/9960: C8        INY 
0B/9961: C0 04     CPY #$04
0B/9963: D0 E7     BNE $994C
0B/9965: A2 00     LDX #$00
0B/9967: AD 48 7B  LDA $7B48
0B/996A: 29 80     AND #$80
0B/996C: D0 18     BNE $9986
; "A" battle
0B/996E: BD 04 76  LDA $7604,X        ; put monsters in order
0B/9971: 9D 4E 7B  STA $7B4E,X
0B/9974: BD 08 76  LDA $7608,X
0B/9977: 9D 52 7B  STA $7B52,X
0B/997A: BD 0C 76  LDA $760C,X
0B/997D: 95 0C     STA $0C,X
0B/997F: E8        INX 
0B/9980: E0 04     CPX #$04
0B/9982: D0 EA     BNE $996E
0B/9984: F0 2A     BEQ $99B0
; "B" battle
0B/9986: B5 10     LDA $10,X
0B/9988: 9D 10 76  STA $7610,X
0B/998B: E8        INX 
0B/998C: E0 04     CPX #$04
0B/998E: D0 F6     BNE $9986
0B/9990: A2 00     LDX #$00
0B/9992: A0 03     LDY #$03
0B/9994: B9 04 76  LDA $7604,Y
0B/9997: 9D 4E 7B  STA $7B4E,X
0B/999A: B9 08 76  LDA $7608,Y
0B/999D: 9D 52 7B  STA $7B52,X
0B/99A0: B9 0C 76  LDA $760C,Y
0B/99A3: 95 0C     STA $0C,X
0B/99A5: B9 10 76  LDA $7610,Y
0B/99A8: 95 10     STA $10,X
0B/99AA: 88        DEY 
0B/99AB: E8        INX 
0B/99AC: E0 04     CPX #$04
0B/99AE: D0 E4     BNE $9994
0B/99B0: A2 00     LDX #$00
0B/99B2: B5 10     LDA $10,X
0B/99B4: C9 09     CMP #$09
0B/99B6: B0 07     BCS $99BF
0B/99B8: E8        INX 
0B/99B9: E0 04     CPX #$04
0B/99BB: D0 F5     BNE $99B2
0B/99BD: F0 23     BEQ $99E2
0B/99BF: 85 10     STA $10
0B/99C1: BD 4E 7B  LDA $7B4E,X
0B/99C4: 8D 4E 7B  STA $7B4E
0B/99C7: A9 01     LDA #$01
0B/99C9: 8D 52 7B  STA $7B52
0B/99CC: A2 01     LDX #$01
0B/99CE: A9 00     LDA #$00
0B/99D0: 95 10     STA $10,X
0B/99D2: 9D 52 7B  STA $7B52,X
0B/99D5: A9 FF     LDA #$FF
0B/99D7: 9D 4E 7B  STA $7B4E,X
0B/99DA: E8        INX 
0B/99DB: E0 04     CPX #$04
0B/99DD: D0 EF     BNE $99CE
0B/99DF: 4C 5B 9A  JMP $9A5B
0B/99E2: A2 03     LDX #$03
0B/99E4: B4 10     LDY $10,X
0B/99E6: B9 BE 8D  LDA $8DBE,Y
0B/99E9: 95 18     STA $18,X
0B/99EB: B9 CE 8D  LDA $8DCE,Y
0B/99EE: 95 1C     STA $1C,X
0B/99F0: C0 02     CPY #$02
0B/99F2: B0 04     BCS $99F8
0B/99F4: F6 1C     INC $1C,X
0B/99F6: F6 1C     INC $1C,X
0B/99F8: CA        DEX 
0B/99F9: 10 E9     BPL $99E4
0B/99FB: A2 03     LDX #$03
0B/99FD: BD 52 7B  LDA $7B52,X
0B/9A00: 95 14     STA $14,X
0B/9A02: CA        DEX 
0B/9A03: 10 F8     BPL $99FD
0B/9A05: 20 AD 9A  JSR $9AAD
0B/9A08: A2 07     LDX #$07
0B/9A0A: BD 72 7B  LDA $7B72,X
0B/9A0D: C9 02     CMP #$02
0B/9A0F: B0 0C     BCS $9A1D
0B/9A11: FE 92 7B  INC $7B92,X
0B/9A14: FE 92 7B  INC $7B92,X
0B/9A17: DE 82 7B  DEC $7B82,X
0B/9A1A: DE 82 7B  DEC $7B82,X
0B/9A1D: C9 FF     CMP #$FF
0B/9A1F: F0 09     BEQ $9A2A
0B/9A21: BD 9A 7B  LDA $7B9A,X
0B/9A24: 18        CLC 
0B/9A25: 69 02     ADC #$02
0B/9A27: 9D 9A 7B  STA $7B9A,X
0B/9A2A: CA        DEX 
0B/9A2B: 10 DD     BPL $9A0A
0B/9A2D: 20 97 9A  JSR $9A97
0B/9A30: A9 00     LDA #$00
0B/9A32: 85 00     STA $00
0B/9A34: AA        TAX 
0B/9A35: 9D 5A 7B  STA $7B5A,X
0B/9A38: E8        INX 
0B/9A39: E0 08     CPX #$08
0B/9A3B: D0 F8     BNE $9A35
0B/9A3D: CA        DEX 
0B/9A3E: BC 62 7B  LDY $7B62,X
0B/9A41: C8        INY 
0B/9A42: D0 04     BNE $9A48
0B/9A44: CA        DEX 
0B/9A45: 10 F7     BPL $9A3E
0B/9A47: 60        RTS 
0B/9A48: 8A        TXA 
0B/9A49: 4A        LSR 
0B/9A4A: 38        SEC 
0B/9A4B: E9 02     SBC #$02
0B/9A4D: 90 0B     BCC $9A5A
0B/9A4F: 0A        ASL 
0B/9A50: AA        TAX 
0B/9A51: E8        INX 
0B/9A52: A9 01     LDA #$01
0B/9A54: 9D 5A 7B  STA $7B5A,X
0B/9A57: CA        DEX 
0B/9A58: 10 FA     BPL $9A54
0B/9A5A: 60        RTS 
0B/9A5B: A9 00     LDA #$00
0B/9A5D: 8D 5A 7B  STA $7B5A
0B/9A60: AD 4E 7B  LDA $7B4E
0B/9A63: 8D 62 7B  STA $7B62
0B/9A66: A5 10     LDA $10
0B/9A68: 8D 72 7B  STA $7B72
0B/9A6B: C9 0F     CMP #$0F
0B/9A6D: F0 14     BEQ $9A83
0B/9A6F: A9 0C     LDA #$0C
0B/9A71: 8D 82 7B  STA $7B82
0B/9A74: 8D 8A 7B  STA $7B8A
0B/9A77: A9 06     LDA #$06
0B/9A79: 8D 92 7B  STA $7B92
0B/9A7C: A9 04     LDA #$04
0B/9A7E: 8D 9A 7B  STA $7B9A
0B/9A81: D0 14     BNE $9A97
0B/9A83: A9 0C     LDA #$0C
0B/9A85: 8D 82 7B  STA $7B82
0B/9A88: A9 12     LDA #$12
0B/9A8A: 8D 8A 7B  STA $7B8A
0B/9A8D: A9 06     LDA #$06
0B/9A8F: 8D 92 7B  STA $7B92
0B/9A92: A9 02     LDA #$02
0B/9A94: 8D 9A 7B  STA $7B9A
0B/9A97: A9 00     LDA #$00
0B/9A99: 8D 4D 7B  STA $7B4D          ; clear number of monsters remaining
0B/9A9C: A2 07     LDX #$07
0B/9A9E: BD 62 7B  LDA $7B62,X
0B/9AA1: 9D 6A 7B  STA $7B6A,X
0B/9AA4: 30 03     BMI $9AA9
0B/9AA6: EE 4D 7B  INC $7B4D          ; increment number of monsters remaining
0B/9AA9: CA        DEX 
0B/9AAA: 10 F2     BPL $9A9E
0B/9AAC: 60        RTS 

; [  ]

0B/9AAD: A9 00     LDA #$00
0B/9AAF: AA        TAX 
0B/9AB0: A8        TAY 
0B/9AB1: 85 02     STA $02
0B/9AB3: A9 06     LDA #$06
0B/9AB5: 85 03     STA $03
0B/9AB7: B5 14     LDA $14,X
0B/9AB9: D0 06     BNE $9AC1
0B/9ABB: E8        INX 
0B/9ABC: E0 04     CPX #$04
0B/9ABE: D0 F7     BNE $9AB7
0B/9AC0: 60        RTS 
0B/9AC1: C0 08     CPY #$08
0B/9AC3: B0 FB     BCS $9AC0
0B/9AC5: A5 02     LDA $02
0B/9AC7: 18        CLC 
0B/9AC8: 75 18     ADC $18,X
0B/9ACA: C9 13     CMP #$13
0B/9ACC: B0 F2     BCS $9AC0
0B/9ACE: B5 10     LDA $10,X
0B/9AD0: 99 72 7B  STA $7B72,Y
0B/9AD3: BD 4E 7B  LDA $7B4E,X
0B/9AD6: 99 62 7B  STA $7B62,Y
0B/9AD9: B5 0C     LDA $0C,X
0B/9ADB: 99 7A 7B  STA $7B7A,Y
0B/9ADE: A5 02     LDA $02
0B/9AE0: 99 9A 7B  STA $7B9A,Y
0B/9AE3: A5 03     LDA $03
0B/9AE5: 99 92 7B  STA $7B92,Y
0B/9AE8: B5 18     LDA $18,X
0B/9AEA: 99 8A 7B  STA $7B8A,Y
0B/9AED: 85 00     STA $00
0B/9AEF: B5 1C     LDA $1C,X
0B/9AF1: 99 82 7B  STA $7B82,Y
0B/9AF4: 85 01     STA $01
0B/9AF6: A5 03     LDA $03
0B/9AF8: 18        CLC 
0B/9AF9: 65 01     ADC $01
0B/9AFB: 85 03     STA $03
0B/9AFD: C9 12     CMP #$12
0B/9AFF: 90 0B     BCC $9B0C
0B/9B01: A9 06     LDA #$06
0B/9B03: 85 03     STA $03
0B/9B05: A5 02     LDA $02
0B/9B07: 18        CLC 
0B/9B08: 65 00     ADC $00
0B/9B0A: 85 02     STA $02
0B/9B0C: C8        INY 
0B/9B0D: B5 10     LDA $10,X
0B/9B0F: C9 08     CMP #$08
0B/9B11: D0 01     BNE $9B14
0B/9B13: C8        INY 
0B/9B14: D6 14     DEC $14,X
0B/9B16: D0 9F     BNE $9AB7
0B/9B18: B5 14     LDA $14,X
0B/9B1A: D0 06     BNE $9B22
0B/9B1C: E8        INX 
0B/9B1D: E0 04     CPX #$04
0B/9B1F: D0 F7     BNE $9B18
0B/9B21: 60        RTS 
0B/9B22: A5 03     LDA $03
0B/9B24: C9 06     CMP #$06
0B/9B26: F0 8F     BEQ $9AB7
0B/9B28: B5 1C     LDA $1C,X
0B/9B2A: C9 07     CMP #$07
0B/9B2C: B0 06     BCS $9B34
0B/9B2E: A5 00     LDA $00
0B/9B30: D5 18     CMP $18,X
0B/9B32: F0 83     BEQ $9AB7
0B/9B34: A5 02     LDA $02
0B/9B36: 18        CLC 
0B/9B37: 65 00     ADC $00
0B/9B39: 85 02     STA $02
0B/9B3B: C8        INY 
0B/9B3C: A9 06     LDA #$06
0B/9B3E: 85 03     STA $03
0B/9B40: 4C B7 9A  JMP $9AB7

; [ init character graphics ]

0B/9B43: A2 00     LDX #$00
0B/9B45: 8A        TXA 
0B/9B46: 20 A2 AD  JSR $ADA2          ; asl6
0B/9B49: A8        TAY 
0B/9B4A: B9 00 61  LDA $6100,Y        ; character id
0B/9B4D: 29 0F     AND #$0F
0B/9B4F: 9D BA 7B  STA $7BBA,X
0B/9B52: E8        INX 
0B/9B53: E0 04     CPX #$04
0B/9B55: D0 EE     BNE $9B45
0B/9B57: 2C F5 62  BIT $62F5
0B/9B5A: 10 01     BPL $9B5D
0B/9B5C: CA        DEX 
0B/9B5D: 8E DE 7B  STX $7BDE
0B/9B60: A0 03     LDY #$03
0B/9B62: A9 F0     LDA #$F0
0B/9B64: 99 CA 7B  STA $7BCA,Y        ; set character x positions offscreen
0B/9B67: 98        TYA 
0B/9B68: A2 1B     LDX #$1B           ; y = slot * 27 + 44
0B/9B6A: 20 79 FC  JSR $FC79          ; multiply
0B/9B6D: A5 02     LDA $02
0B/9B6F: 69 2C     ADC #$2C
0B/9B71: 99 CE 7B  STA $7BCE,Y        ; set character y positions
0B/9B74: A9 00     LDA #$00
0B/9B76: 99 D6 7B  STA $7BD6,Y
0B/9B79: 99 DA 7B  STA $7BDA,Y
0B/9B7C: 88        DEY 
0B/9B7D: 10 E3     BPL $9B62
0B/9B7F: 20 8B 9C  JSR $9C8B          ; init character sprite pointers
0B/9B82: A2 03     LDX #$03
0B/9B84: 86 27     STX $27
0B/9B86: 20 DE AB  JSR $ABDE          ; load character graphics
0B/9B89: A6 27     LDX $27
0B/9B8B: CA        DEX 
0B/9B8C: 10 F6     BPL $9B84
0B/9B8E: 60        RTS 

; [ init character palette id ]

0B/9B8F: AD 5A 92  LDA $925A          ; palette for each character
0B/9B92: 85 00     STA $00
0B/9B94: AD 5B 92  LDA $925B
0B/9B97: 85 01     STA $01
0B/9B99: BE BA 7B  LDX $7BBA,Y
0B/9B9C: 20 D1 9C  JSR $9CD1          ; check bit in +$00
0B/9B9F: 08        PHP 
0B/9BA0: A2 00     LDX #$00           ; use sprite palette 0 or 1
0B/9BA2: 28        PLP 
0B/9BA3: F0 01     BEQ $9BA6
0B/9BA5: E8        INX 
0B/9BA6: B9 AE 7B  LDA $7BAE,Y        ; character pose
0B/9BA9: C9 03     CMP #$03
0B/9BAB: D0 02     BNE $9BAF          ; branch if not toad ???
0B/9BAD: A2 03     LDX #$03           ; use sprite palette 3
0B/9BAF: 8A        TXA 
0B/9BB0: 99 B6 7B  STA $7BB6,Y        ; set character palette id
0B/9BB3: 60        RTS 

; [  ]

0B/9BB4: 86 06     STX $06
0B/9BB6: A9 30     LDA #$30
0B/9BB8: 20 79 FC  JSR $FC79          ; multiply
0B/9BBB: A5 02     LDA $02
0B/9BBD: 69 7A     ADC #$7A           ; $7D7A (character battle stats)
0B/9BBF: 85 00     STA $00
0B/9BC1: A5 03     LDA $03
0B/9BC3: 69 7D     ADC #$7D
0B/9BC5: 85 01     STA $01
0B/9BC7: A0 08     LDY #$08
0B/9BC9: B1 00     LDA ($00),Y        ; status 1
0B/9BCB: 29 FE     AND #$FE
0B/9BCD: 85 02     STA $02
0B/9BCF: C8        INY 
0B/9BD0: B1 00     LDA ($00),Y        ; status 2
0B/9BD2: 29 FE     AND #$FE
0B/9BD4: 85 03     STA $03
0B/9BD6: A0 2C     LDY #$2C
0B/9BD8: B1 00     LDA ($00),Y        ; previous status 1
0B/9BDA: 29 FE     AND #$FE
0B/9BDC: 85 04     STA $04
0B/9BDE: C8        INY 
0B/9BDF: B1 00     LDA ($00),Y        ; previous status 2
0B/9BE1: 29 FE     AND #$FE
0B/9BE3: 85 05     STA $05
0B/9BE5: A5 02     LDA $02
0B/9BE7: 45 04     EOR $04
0B/9BE9: 25 02     AND $02
0B/9BEB: 29 DE     AND #$DE           ; ignore toad
0B/9BED: 85 00     STA $00
0B/9BEF: A5 03     LDA $03
0B/9BF1: 45 05     EOR $05
0B/9BF3: 25 03     AND $03
0B/9BF5: 29 DE     AND #$DE           ; ignore mini
0B/9BF7: 85 01     STA $01
0B/9BF9: A6 06     LDX $06
0B/9BFB: E0 03     CPX #$03
0B/9BFD: D0 05     BNE $9C04
0B/9BFF: AD F5 62  LDA $62F5
0B/9C02: 30 18     BMI $9C1C
0B/9C04: A5 02     LDA $02
0B/9C06: 10 04     BPL $9C0C
0B/9C08: A9 00     LDA #$00
0B/9C0A: F0 10     BEQ $9C1C
0B/9C0C: 29 20     AND #$20
0B/9C0E: F0 04     BEQ $9C14
0B/9C10: A9 02     LDA #$02
0B/9C12: D0 08     BNE $9C1C
0B/9C14: A5 03     LDA $03
0B/9C16: 29 20     AND #$20
0B/9C18: F0 02     BEQ $9C1C
0B/9C1A: A9 01     LDA #$01
0B/9C1C: 9D A2 7B  STA $7BA2,X
0B/9C1F: A5 02     LDA $02
0B/9C21: 29 DE     AND #$DE
0B/9C23: 85 02     STA $02
0B/9C25: A5 03     LDA $03
0B/9C27: 29 DE     AND #$DE
0B/9C29: 85 03     STA $03
0B/9C2B: A0 0E     LDY #$0E
0B/9C2D: 24 02     BIT $02
0B/9C2F: 30 2B     BMI $9C5C
0B/9C31: 88        DEY 
0B/9C32: 70 28     BVS $9C5C
0B/9C34: A0 0E     LDY #$0E
0B/9C36: BE B8 92  LDX $92B8,Y
0B/9C39: 20 D1 9C  JSR $9CD1          ; check bit in +$00
0B/9C3C: D0 1E     BNE $9C5C
0B/9C3E: 88        DEY 
0B/9C3F: D0 F5     BNE $9C36
0B/9C41: A5 02     LDA $02
0B/9C43: 29 1E     AND #$1E
0B/9C45: 85 00     STA $00
0B/9C47: A5 03     LDA $03
0B/9C49: 29 DE     AND #$DE
0B/9C4B: 85 01     STA $01
0B/9C4D: A0 0E     LDY #$0E
0B/9C4F: BE B8 92  LDX $92B8,Y
0B/9C52: 20 D1 9C  JSR $9CD1          ; check bit in +$00
0B/9C55: D0 05     BNE $9C5C
0B/9C57: 88        DEY 
0B/9C58: D0 F5     BNE $9C4F
0B/9C5A: A0 00     LDY #$00
0B/9C5C: A6 06     LDX $06
0B/9C5E: 98        TYA 
0B/9C5F: 9D AA 7B  STA $7BAA,X
0B/9C62: C0 00     CPY #$00
0B/9C64: D0 0F     BNE $9C75
0B/9C66: BD A2 7B  LDA $7BA2,X
0B/9C69: 29 7F     AND #$7F
0B/9C6B: F0 08     BEQ $9C75
0B/9C6D: A0 0C     LDY #$0C
0B/9C6F: C9 02     CMP #$02
0B/9C71: F0 02     BEQ $9C75
0B/9C73: A0 0B     LDY #$0B
0B/9C75: B9 C7 92  LDA $92C7,Y
0B/9C78: 9D A6 7B  STA $7BA6,X
0B/9C7B: BC AA 7B  LDY $7BAA,X
0B/9C7E: B9 D6 92  LDA $92D6,Y
0B/9C81: 9D AE 7B  STA $7BAE,X
0B/9C84: B9 E5 92  LDA $92E5,Y
0B/9C87: 9D B2 7B  STA $7BB2,X
0B/9C8A: 60        RTS 

; 0B/92B8: 00 09 01 0A 02 03 0C 04 0F 0B 0E 0D 05 06 07  ; status priority
; 0B/92C7: F6 F6 F7 F0 F8 F9 F2 FA F5 F1 F4 F3 FB FC FD  ; text id
; 0B/92D6: 00 02 02 02 02 02 02 02 00 02 02 00 00 03 04  ; status pose
; 0B/92E5: FF FF 00 01 01 02 05 03 06 04 FF FF FF FF FF  ; status graphics

; [ init character sprite pointers ]

0B/9C8B: A2 03     LDX #$03
0B/9C8D: 8A        TXA 
0B/9C8E: 20 A2 AD  JSR $ADA2          ; asl6
0B/9C91: A8        TAY 
0B/9C92: B9 35 62  LDA $6235,Y
0B/9C95: 29 01     AND #$01
0B/9C97: 9D BE 7B  STA $7BBE,X        ; set character row
0B/9C9A: CA        DEX 
0B/9C9B: 10 F0     BPL $9C8D
0B/9C9D: A9 02     LDA #$02           ; init pointers to character sprite data
0B/9C9F: 85 2D     STA $2D
0B/9CA1: 85 2F     STA $2F
0B/9CA3: 85 31     STA $31
0B/9CA5: 85 33     STA $33
0B/9CA7: A9 A0     LDA #$A0           ; $02A0
0B/9CA9: 85 2C     STA $2C
0B/9CAB: A9 B8     LDA #$B8           ; $02B8
0B/9CAD: 85 2E     STA $2E
0B/9CAF: A9 D0     LDA #$D0           ; $02D0
0B/9CB1: 85 30     STA $30
0B/9CB3: A9 E8     LDA #$E8           ; $02E8
0B/9CB5: 85 32     STA $32
0B/9CB7: 60        RTS 

; [  ]

0B/9CB8: 4A        LSR 
0B/9CB9: 4A        LSR 
0B/9CBA: 48        PHA 
0B/9CBB: A9 00     LDA #$00
0B/9CBD: 2A        ROL 
0B/9CBE: 85 01     STA $01
0B/9CC0: 8A        TXA 
0B/9CC1: 4A        LSR 
0B/9CC2: 4A        LSR 
0B/9CC3: 26 01     ROL $01
0B/9CC5: 85 00     STA $00
0B/9CC7: 68        PLA 
0B/9CC8: 0A        ASL 
0B/9CC9: 0A        ASL 
0B/9CCA: 0A        ASL 
0B/9CCB: 18        CLC 
0B/9CCC: 65 00     ADC $00
0B/9CCE: 85 00     STA $00
0B/9CD0: 60        RTS 

; [ check bit in +$00 ]

0B/9CD1: BD DE 9C  LDA $9CDE,X
0B/9CD4: E0 08     CPX #$08
0B/9CD6: 90 03     BCC $9CDB
0B/9CD8: 24 01     BIT $01
0B/9CDA: 60        RTS 
0B/9CDB: 24 00     BIT $00
0B/9CDD: 60        RTS 

; bit masks
0B/9CDE: 01 02 04 08 10 20 40 80
0B/9CE6: 01 02 04 08 10 20 40 80

; [ copy cursor graphics to ppu ]

0B/9CEE: 20 06 9D  JSR $9D06          ; reset cursor sprites
0B/9CF1: A9 80     LDA #$80
0B/9CF3: 85 00     STA $00            ; ppu $0400
0B/9CF5: A9 04     LDA #$04
0B/9CF7: 85 01     STA $01
0B/9CF9: A9 C0     LDA #$C0           ; 09/89C0
0B/9CFB: 85 02     STA $02
0B/9CFD: A9 89     LDA #$89
0B/9CFF: 85 03     STA $03
0B/9D01: A2 40     LDX #$40           ; size: $40 bytes
0B/9D03: 4C AE FB  JMP $FBAE

; [ reset cursor sprites ]

0B/9D06: A9 02     LDA #$02
0B/9D08: 85 25     STA $25
0B/9D0A: 85 27     STA $27
0B/9D0C: 85 29     STA $29
0B/9D0E: 85 2B     STA $2B
0B/9D10: A9 40     LDA #$40           ; use sprites 16-31 (4 * 4 sprites)
0B/9D12: 85 24     STA $24
0B/9D14: A9 50     LDA #$50
0B/9D16: 85 26     STA $26
0B/9D18: A9 60     LDA #$60
0B/9D1A: 85 28     STA $28
0B/9D1C: A9 70     LDA #$70
0B/9D1E: 85 2A     STA $2A
0B/9D20: A0 3F     LDY #$3F
0B/9D22: A9 F0     LDA #$F0           ; hide all cursors
0B/9D24: 91 24     STA ($24),Y
0B/9D26: 88        DEY 
0B/9D27: 10 FB     BPL $9D24
0B/9D29: A9 03     LDA #$03           ; use palette 3
0B/9D2B: 8D 42 02  STA $0242
0B/9D2E: 8D 46 02  STA $0246
0B/9D31: 8D 4A 02  STA $024A
0B/9D34: 8D 4E 02  STA $024E
0B/9D37: A2 48     LDX #$48           ; set tile index
0B/9D39: 8E 41 02  STX $0241
0B/9D3C: E8        INX 
0B/9D3D: 8E 45 02  STX $0245
0B/9D40: E8        INX 
0B/9D41: 8E 49 02  STX $0249
0B/9D44: E8        INX 
0B/9D45: 8E 4D 02  STX $024D
0B/9D48: A0 00     LDY #$00
0B/9D4A: B1 24     LDA ($24),Y        ; copy cursors 1 to cursors 2-4
0B/9D4C: 91 26     STA ($26),Y
0B/9D4E: 91 28     STA ($28),Y
0B/9D50: 91 2A     STA ($2A),Y
0B/9D52: C8        INY 
0B/9D53: C0 10     CPY #$10
0B/9D55: D0 F3     BNE $9D4A
0B/9D57: 60        RTS 

; [ fill ppu sequential (set address) ]

; +$00: ppu address

0B/9D58: 20 7E FD  JSR $FD7E          ; set ppu address
; fallthrough

; [ fill ppu sequential ]

; Y: first value
; X: size

0B/9D5B: 8C 07 20  STY $2007
0B/9D5E: C8        INY 
0B/9D5F: CA        DEX 
0B/9D60: D0 F9     BNE $9D5B
0B/9D62: 60        RTS 

; [ fill ppu (set address) ]

; +$00: ppu address

0B/9D63: 48        PHA 
0B/9D64: 20 7E FD  JSR $FD7E          ; set ppu address
0B/9D67: 68        PLA 
; fallthrough

; [ fill ppu ]

; A: fill value
; X: size

0B/9D68: 8D 07 20  STA $2007
0B/9D6B: CA        DEX 
0B/9D6C: D0 FA     BNE $9D68
0B/9D6E: 60        RTS 

; [  ]

0B/9D6F: A9 0F     LDA #$0F
0B/9D71: A2 1C     LDX #$1C
0B/9D73: 9D A8 79  STA $79A8,X
0B/9D76: 20 03 9E  JSR $9E03
0B/9D79: 10 F8     BPL $9D73
0B/9D7B: 60        RTS 

; [ copy color palettes to ppu ]

0B/9D7C: AD 02 20  LDA $2002          ; latch ppu
0B/9D7F: 20 97 9D  JSR $9D97          ; set ppu address for color palette
0B/9D82: BD A8 79  LDA $79A8,X        ; copy color palette to ppu
0B/9D85: 8D 07 20  STA $2007
0B/9D88: E8        INX 
0B/9D89: E0 20     CPX #$20
0B/9D8B: D0 F5     BNE $9D82
0B/9D8D: 20 97 9D  JSR $9D97          ; set ppu address for color palette
0B/9D90: 8E 06 20  STX $2006          ; set ppu address to zero
0B/9D93: 8E 06 20  STX $2006
0B/9D96: 60        RTS 

; [ set ppu address for color palette ]

0B/9D97: A9 3F     LDA #$3F
0B/9D99: 8D 06 20  STA $2006
0B/9D9C: A2 00     LDX #$00
0B/9D9E: 8E 06 20  STX $2006
0B/9DA1: 60        RTS 

; [ copy 8 tiles to ppu ]

; +$00: ppu address
; +$02: source address

0B/9DA2: A0 00     LDY #$00
0B/9DA4: 20 2A FA  JSR $FA2A          ; wait for vblank
0B/9DA7: A5 01     LDA $01
0B/9DA9: 8D 06 20  STA $2006
0B/9DAC: A5 00     LDA $00
0B/9DAE: 8D 06 20  STA $2006
0B/9DB1: B1 02     LDA ($02),Y
0B/9DB3: 8D 07 20  STA $2007
0B/9DB6: C8        INY 
0B/9DB7: 10 F8     BPL $9DB1
0B/9DB9: 60        RTS 

; [ copy buffer to ppu ]

0B/9DBA: 20 C6 9D  JSR $9DC6          ; init ppu data buffer address
0B/9DBD: 20 2A FA  JSR $FA2A          ; wait for vblank
0B/9DC0: 20 60 9E  JSR $9E60          ; copy oam data to ppu
0B/9DC3: 4C 6F FD  JMP $FD6F          ; copy data to ppu

; [ init ppu data buffer address ]

0B/9DC6: A9 00     LDA #$00           ; set source address to $7600
0B/9DC8: 85 02     STA $02
0B/9DCA: A9 76     LDA #$76
0B/9DCC: 85 03     STA $03
0B/9DCE: 60        RTS 

; [ clear ppu data buffer ]

0B/9DCF: A0 00     LDY #$00
0B/9DD1: A9 00     LDA #$00
0B/9DD3: 99 00 76  STA $7600,Y
0B/9DD6: C8        INY 
0B/9DD7: D0 FA     BNE $9DD3
0B/9DD9: 60        RTS 

; [ hide character sprite ]

; X: character id

0B/9DDA: BC F5 9D  LDY $9DF5,X
0B/9DDD: A2 18     LDX #$18
0B/9DDF: D0 0A     BNE $9DEB

; [ hide ??? sprites ]

0B/9DE1: A0 70     LDY #$70
0B/9DE3: A2 30     LDX #$30
0B/9DE5: D0 04     BNE $9DEB

; [ hide ??? sprites ]

0B/9DE7: A2 9C     LDX #$9C
0B/9DE9: A0 04     LDY #$04
0B/9DEB: A9 F0     LDA #$F0
0B/9DED: 99 00 02  STA $0200,Y
0B/9DF0: C8        INY 
0B/9DF1: CA        DEX 
0B/9DF2: D0 F9     BNE $9DED
0B/9DF4: 60        RTS 

0B/9DF5: A0 B8 D0 E8

; [ set oam value ]

; A: value
; Y: offset (increment after)

0B/9DF9: 99 00 02  STA $0200,Y
0B/9DFC: C8        INY 
0B/9DFD: C8        INY 
0B/9DFE: C8        INY 
0B/9DFF: C8        INY 
0B/9E00: 60        RTS 

; [ get target monster id ??? ]

0B/9E01: A6 27     LDX $27            ; target
0B/9E03: CA        DEX 
0B/9E04: CA        DEX 
0B/9E05: CA        DEX 
0B/9E06: CA        DEX 
0B/9E07: 60        RTS 

; [ copy sprite to oam data ]

0B/9E08: A5 01     LDA $01
0B/9E0A: 99 00 02  STA $0200,Y
0B/9E0D: A5 02     LDA $02
0B/9E0F: 99 01 02  STA $0201,Y
0B/9E12: A5 03     LDA $03
0B/9E14: 99 02 02  STA $0202,Y
0B/9E17: A5 00     LDA $00
0B/9E19: 99 03 02  STA $0203,Y
0B/9E1C: 4C FC 9D  JMP $9DFC          ; next sprite

; [ wait ]

; A: number of frames to wait

0B/9E1F: 48        PHA 
0B/9E20: 20 33 9E  JSR $9E33          ; wait for vblank (menu, oam & color update)
0B/9E23: 68        PLA 
0B/9E24: 38        SEC 
0B/9E25: E9 01     SBC #$01
0B/9E27: D0 F6     BNE $9E1F
0B/9E29: 60        RTS 

; [ wait for vblank (menu & oam update) ]

0B/9E2A: 20 3F 9E  JSR $9E3F          ; render menu and wait for vblank
0B/9E2D: 20 60 9E  JSR $9E60          ; copy oam data to ppu
0B/9E30: 4C 46 FD  JMP $FD46          ; wait for first battlefield scanline

; [ wait for vblank (menu, oam & color update) ]

0B/9E33: 20 3F 9E  JSR $9E3F          ; render menu and wait for vblank
0B/9E36: 20 60 9E  JSR $9E60          ; copy oam data to ppu
0B/9E39: 20 7C 9D  JSR $9D7C          ; copy color palettes to ppu
0B/9E3C: 4C 46 FD  JMP $FD46          ; wait for first battlefield scanline

; [ wait for vblank (menu update) ]

0B/9E3F: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0B/9E42: 4C 2A FA  JMP $FA2A          ; wait for vblank

; [ wait for vblank (oam & color update, no menu render) ]

; unused

0B/9E45: 20 2A FA  JSR $FA2A          ; wait for vblank
0B/9E48: 20 36 9E  JSR $9E36          ; 
0B/9E4B: 4C 48 FA  JMP $FA48          ; update sound

; [ wait for vblank (oam update) ]

0B/9E4E: 20 2A FA  JSR $FA2A          ; wait for vblank
0B/9E51: 4C 60 9E  JMP $9E60          ; copy oam data to ppu

; [ wait for vblank (oam & color update) ]

0B/9E54: 20 48 FA  JSR $FA48          ; update sound
0B/9E57: 20 4E 9E  JSR $9E4E          ; wait for vblank (oam update)
0B/9E5A: 20 7C 9D  JSR $9D7C          ; copy color palettes to ppu
0B/9E5D: 4C 4B FD  JMP $FD4B          ; update ppu registers for battlefield region

; [ copy oam data to ppu ]

0B/9E60: A9 00     LDA #$00
0B/9E62: 8D 03 20  STA $2003
0B/9E65: A9 02     LDA #$02
0B/9E67: 8D 14 40  STA $4014
0B/9E6A: 60        RTS 

; [ play magic sound effect ]

0B/9E6B: AD B0 7C  LDA $7CB0
0B/9E6E: 18        CLC 
0B/9E6F: 69 10     ADC #$10
0B/9E71: AA        TAX 
; fallthrough

; [ play battle sound effect ]

0B/9E72: BD 0B 93  LDA $930B,X
0B/9E75: AA        TAX 
0B/9E76: 4C 59 FA  JMP $FA59          ; play sound effect

; [ fade out palettes ]

0B/9E79: A9 1F     LDA #$1F           ; fade out all colors
0B/9E7B: 85 00     STA $00
; fallthrough

; [ fade out palettes ]

; $00: offset of last color

0B/9E7D: A9 04     LDA #$04
0B/9E7F: 85 01     STA $01
; start of loop
0B/9E81: A6 00     LDX $00
0B/9E83: BD A8 79  LDA $79A8,X        ; color palettes
0B/9E86: C9 10     CMP #$10
0B/9E88: B0 02     BCS $9E8C
0B/9E8A: A9 1F     LDA #$1F           ; black
0B/9E8C: 38        SEC 
0B/9E8D: E9 10     SBC #$10           ; decrement color brightness
0B/9E8F: 9D A8 79  STA $79A8,X
0B/9E92: CA        DEX 
0B/9E93: 10 EE     BPL $9E83
0B/9E95: A9 06     LDA #$06
0B/9E97: 20 1F 9E  JSR $9E1F          ; wait 6 frames
0B/9E9A: C6 01     DEC $01
0B/9E9C: D0 E3     BNE $9E81
0B/9E9E: 60        RTS 

; [ init tilemap for battle bg ]

0B/9E9F: A9 20     LDA #$20           ; $2020
0B/9EA1: 85 01     STA $01
0B/9EA3: A9 20     LDA #$20
0B/9EA5: 85 00     STA $00
0B/9EA7: 20 7E FD  JSR $FD7E          ; set ppu address
0B/9EAA: A9 10     LDA #$10
0B/9EAC: 85 02     STA $02
0B/9EAE: A9 04     LDA #$04
0B/9EB0: 85 05     STA $05
0B/9EB2: AD 49 7B  LDA $7B49          ; battle bg
0B/9EB5: C9 07     CMP #$07
0B/9EB7: F0 2B     BEQ $9EE4
0B/9EB9: A9 04     LDA #$04
0B/9EBB: 85 04     STA $04
0B/9EBD: A4 02     LDY $02
0B/9EBF: A2 04     LDX #$04
0B/9EC1: 20 5B 9D  JSR $9D5B          ; fill ppu sequential
0B/9EC4: A4 02     LDY $02
0B/9EC6: C8        INY 
0B/9EC7: C8        INY 
0B/9EC8: A2 02     LDX #$02
0B/9ECA: 20 5B 9D  JSR $9D5B          ; fill ppu sequential
0B/9ECD: A4 02     LDY $02
0B/9ECF: A2 02     LDX #$02
0B/9ED1: 20 5B 9D  JSR $9D5B          ; fill ppu sequential
0B/9ED4: C6 04     DEC $04
0B/9ED6: D0 E5     BNE $9EBD
0B/9ED8: A5 02     LDA $02
0B/9EDA: 18        CLC 
0B/9EDB: 69 04     ADC #$04
0B/9EDD: 85 02     STA $02
0B/9EDF: C6 05     DEC $05
0B/9EE1: D0 D6     BNE $9EB9
0B/9EE3: 60        RTS 
0B/9EE4: A9 08     LDA #$08
0B/9EE6: 85 04     STA $04
0B/9EE8: A4 02     LDY $02
0B/9EEA: A2 04     LDX #$04
0B/9EEC: 20 5B 9D  JSR $9D5B          ; fill ppu sequential
0B/9EEF: C6 04     DEC $04
0B/9EF1: D0 F5     BNE $9EE8
0B/9EF3: 84 02     STY $02
0B/9EF5: C6 05     DEC $05
0B/9EF7: D0 EB     BNE $9EE4
0B/9EF9: 60        RTS 

; [ init tilemap for monsters ]

0B/9EFA: AD 72 7B  LDA $7B72
0B/9EFD: C9 09     CMP #$09
0B/9EFF: B0 56     BCS $9F57
0B/9F01: A0 07     LDY #$07
0B/9F03: 84 04     STY $04
0B/9F05: A4 04     LDY $04
0B/9F07: B9 62 7B  LDA $7B62,Y
0B/9F0A: 30 03     BMI $9F0F
0B/9F0C: 20 14 9F  JSR $9F14
0B/9F0F: C6 04     DEC $04
0B/9F11: 10 F2     BPL $9F05
0B/9F13: 60        RTS 

; [ init monster tilemap ]

0B/9F14: BE 72 7B  LDX $7B72,Y        ; monster graphics id
0B/9F17: BD A5 9F  LDA $9FA5,X        ; first tile index for each monster
0B/9F1A: 85 05     STA $05
0B/9F1C: B9 92 7B  LDA $7B92,Y        ; y position
0B/9F1F: A2 20     LDX #$20
0B/9F21: 20 79 FC  JSR $FC79          ; multiply
0B/9F24: A5 02     LDA $02
0B/9F26: 79 9A 7B  ADC $7B9A,Y        ; x position
0B/9F29: 85 00     STA $00
0B/9F2B: A5 03     LDA $03
0B/9F2D: 69 20     ADC #$20
0B/9F2F: 85 01     STA $01
0B/9F31: B9 8A 7B  LDA $7B8A,Y        ; width
0B/9F34: 85 02     STA $02
0B/9F36: B9 82 7B  LDA $7B82,Y        ; height
0B/9F39: 85 03     STA $03
0B/9F3B: 20 2A FA  JSR $FA2A          ; wait for vblank
0B/9F3E: A4 05     LDY $05
0B/9F40: A6 02     LDX $02
0B/9F42: 20 58 9D  JSR $9D58          ; fill ppu sequential (set address)
0B/9F45: 84 05     STY $05
0B/9F47: A5 00     LDA $00
0B/9F49: 18        CLC 
0B/9F4A: 69 20     ADC #$20           ; next row
0B/9F4C: 85 00     STA $00
0B/9F4E: 90 02     BCC $9F52
0B/9F50: E6 01     INC $01
0B/9F52: C6 03     DEC $03
0B/9F54: D0 E8     BNE $9F3E
0B/9F56: 60        RTS 

; [ init boss tilemap ]

0B/9F57: AD 72 7B  LDA $7B72
0B/9F5A: 48        PHA 
0B/9F5B: 38        SEC 
0B/9F5C: E9 09     SBC #$09
0B/9F5E: A2 90     LDX #$90
0B/9F60: 20 79 FC  JSR $FC79          ; multiply
0B/9F63: A5 02     LDA $02
0B/9F65: 69 DE     ADC #$DE           ; 0B/8DDE
0B/9F67: 85 02     STA $02
0B/9F69: A5 03     LDA $03
0B/9F6B: 69 8D     ADC #$8D
0B/9F6D: 85 03     STA $03
0B/9F6F: AD 82 7B  LDA $7B82
0B/9F72: 85 04     STA $04
0B/9F74: A9 C4     LDA #$C4
0B/9F76: 85 00     STA $00
0B/9F78: A9 20     LDA #$20
0B/9F7A: 85 01     STA $01
0B/9F7C: 68        PLA 
0B/9F7D: C9 0F     CMP #$0F
0B/9F7F: D0 04     BNE $9F85
0B/9F81: C6 00     DEC $00
0B/9F83: C6 00     DEC $00
0B/9F85: AE 8A 7B  LDX $7B8A
0B/9F88: 20 6F FD  JSR $FD6F          ; copy data to ppu
0B/9F8B: 98        TYA 
0B/9F8C: 18        CLC 
0B/9F8D: 65 02     ADC $02
0B/9F8F: 85 02     STA $02
0B/9F91: 90 02     BCC $9F95
0B/9F93: E6 03     INC $03
0B/9F95: A5 00     LDA $00
0B/9F97: 18        CLC 
0B/9F98: 69 20     ADC #$20
0B/9F9A: 85 00     STA $00
0B/9F9C: 90 02     BCC $9FA0
0B/9F9E: E6 01     INC $01
0B/9FA0: C6 04     DEC $04
0B/9FA2: D0 E1     BNE $9F85
0B/9FA4: 60        RTS 

; first tile index for each monster
0B/9FA5: 20 30 40 58 70 94 B8 DC B8

; [ fade in battle bg ]

0B/9FAE: AD 49 7B  LDA $7B49          ; battle bg
0B/9FB1: 29 07     AND #$07
0B/9FB3: 18        CLC 
0B/9FB4: 69 B8     ADC #$B8           ; 07/B800 or 08/B800
0B/9FB6: 85 01     STA $01
0B/9FB8: A9 00     LDA #$00
0B/9FBA: 85 00     STA $00
0B/9FBC: 20 53 FB  JSR $FB53          ; copy battle bg graphics to buffer
0B/9FBF: A9 00     LDA #$00
0B/9FC1: AA        TAX 
0B/9FC2: 9D 00 77  STA $7700,X        ; clear 2nd half of buffer
0B/9FC5: E8        INX 
0B/9FC6: D0 FA     BNE $9FC2
0B/9FC8: A9 08     LDA #$08
0B/9FCA: 85 07     STA $07
0B/9FCC: A9 00     LDA #$00
0B/9FCE: 85 09     STA $09
0B/9FD0: A9 01     LDA #$01
0B/9FD2: 85 05     STA $05
0B/9FD4: 85 06     STA $06
; start of frame loop
0B/9FD6: A9 10     LDA #$10
0B/9FD8: 85 08     STA $08
0B/9FDA: A5 06     LDA $06
0B/9FDC: 85 05     STA $05
0B/9FDE: A6 09     LDX $09
0B/9FE0: A0 08     LDY #$08
0B/9FE2: BD 00 76  LDA $7600,X
0B/9FE5: 25 05     AND $05
0B/9FE7: 1D 00 77  ORA $7700,X
0B/9FEA: 9D 00 77  STA $7700,X
0B/9FED: 06 05     ASL $05
0B/9FEF: 90 04     BCC $9FF5
0B/9FF1: A9 01     LDA #$01
0B/9FF3: 85 05     STA $05
0B/9FF5: E8        INX 
0B/9FF6: 88        DEY 
0B/9FF7: D0 E9     BNE $9FE2
0B/9FF9: 8A        TXA 
0B/9FFA: 18        CLC 
0B/9FFB: 69 08     ADC #$08
0B/9FFD: AA        TAX 
0B/9FFE: C6 08     DEC $08
0B/A000: D0 DE     BNE $9FE0
0B/A002: 06 06     ASL $06
0B/A004: 90 04     BCC $A00A
0B/A006: A9 01     LDA #$01
0B/A008: 85 06     STA $06
0B/A00A: A9 00     LDA #$00
0B/A00C: 85 00     STA $00
0B/A00E: A9 11     LDA #$11
0B/A010: 85 01     STA $01
0B/A012: A9 00     LDA #$00
0B/A014: 85 02     STA $02
0B/A016: A9 77     LDA #$77
0B/A018: 85 03     STA $03
0B/A01A: 20 A2 9D  JSR $9DA2          ; copy 8 tiles to ppu
0B/A01D: 98        TYA 
0B/A01E: 18        CLC 
0B/A01F: 65 00     ADC $00
0B/A021: 85 00     STA $00
0B/A023: 98        TYA 
0B/A024: 18        CLC 
0B/A025: 65 02     ADC $02
0B/A027: 85 02     STA $02
0B/A029: 90 02     BCC $A02D
0B/A02B: E6 03     INC $03
0B/A02D: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0B/A030: 20 48 FA  JSR $FA48          ; update sound
0B/A033: A5 00     LDA $00
0B/A035: D0 E3     BNE $A01A
0B/A037: C6 07     DEC $07
0B/A039: F0 03     BEQ $A03E
0B/A03B: 4C D6 9F  JMP $9FD6
0B/A03E: A9 08     LDA #$08
0B/A040: 85 07     STA $07
0B/A042: A5 09     LDA $09
0B/A044: 49 08     EOR #$08
0B/A046: 85 09     STA $09
0B/A048: F0 03     BEQ $A04D
0B/A04A: 4C D6 9F  JMP $9FD6
0B/A04D: 60        RTS 

; [ monster entry ]

0B/A04E: AE 56 7B  LDX $7B56
0B/A051: A0 01     LDY #$01           ; bg palette 0
0B/A053: 20 03 FC  JSR $FC03          ; load battle palette
0B/A056: AE 57 7B  LDX $7B57
0B/A059: A0 05     LDY #$05           ; bg palette 1
0B/A05B: 20 03 FC  JSR $FC03          ; load battle palette
0B/A05E: A9 A0     LDA #$A0           ; initial bg horizontal scroll position
0B/A060: 85 01     STA $01
; start of frame loop
0B/A062: 20 54 9E  JSR $9E54          ; wait for vblank (oam & color update)
0B/A065: A5 01     LDA $01
0B/A067: 38        SEC 
0B/A068: E9 10     SBC #$10
0B/A06A: 85 01     STA $01
0B/A06C: B0 01     BCS $A06F
0B/A06E: 60        RTS 
0B/A06F: A9 31     LDA #$31           ; skip 40 scanlines for battle bg
0B/A071: 85 00     STA $00
0B/A073: 2C 02 20  BIT $2002          ; wait for end of vblank
0B/A076: 70 FB     BVS $A073
0B/A078: A2 12     LDX #$12           ; (2)             \
0B/A07A: 20 89 A0  JSR $A089          ; (6) + 78 = 84   | 93 * 49 = 4557 cycles
0B/A07D: C6 00     DEC $00            ; (5)             |   ~40 scanlines
0B/A07F: D0 F7     BNE $A078          ; (2)             /
0B/A081: A5 01     LDA $01
0B/A083: 8D 05 20  STA $2005          ; set ppu horizontal scroll
0B/A086: 4C 62 A0  JMP $A062

; [ wait 78 cycles ]

0B/A089: CA        DEX                ; (2) * 18 = 36
0B/A08A: D0 FD     BNE $A089          ; (2) * 18 = 36
0B/A08C: 60        RTS                ; (6)

; [ character entry ]

0B/A08D: A2 7D     LDX #$7D
0B/A08F: A0 1D     LDY #$1D           ; sprite palette 3
0B/A091: 20 03 FC  JSR $FC03          ; load battle palette
0B/A094: E8        INX 
0B/A095: A0 11     LDY #$11           ; sprite palette 0
0B/A097: 20 03 FC  JSR $FC03          ; load battle palette
0B/A09A: E8        INX 
0B/A09B: A0 15     LDY #$15           ; sprite palette 1
0B/A09D: 20 03 FC  JSR $FC03          ; load battle palette
0B/A0A0: A2 03     LDX #$03
0B/A0A2: 86 10     STX $10
0B/A0A4: A9 00     LDA #$00
0B/A0A6: BC AE 7B  LDY $7BAE,X
0B/A0A9: C0 03     CPY #$03
0B/A0AB: B0 02     BCS $A0AF
0B/A0AD: A9 02     LDA #$02
0B/A0AF: 9D C2 7B  STA $7BC2,X
0B/A0B2: 9D C6 7B  STA $7BC6,X
0B/A0B5: 20 02 A1  JSR $A102          ; init character base x positions
0B/A0B8: A6 10     LDX $10
0B/A0BA: 20 3A A4  JSR $A43A          ; draw character
0B/A0BD: A6 10     LDX $10
0B/A0BF: CA        DEX 
0B/A0C0: 10 E0     BPL $A0A2
; start of frame loop
0B/A0C2: 20 33 9E  JSR $9E33          ; wait for vblank (menu, oam & color update)
0B/A0C5: A2 03     LDX #$03
0B/A0C7: 86 10     STX $10
0B/A0C9: BD CA 7B  LDA $7BCA,X
0B/A0CC: DD D2 7B  CMP $7BD2,X
0B/A0CF: F0 05     BEQ $A0D6          ; branch if character is done moving
0B/A0D1: A9 80     LDA #$80           ; move left 
0B/A0D3: 20 12 A5  JSR $A512          ; move character
0B/A0D6: A6 10     LDX $10
0B/A0D8: 20 3A A4  JSR $A43A          ; draw character
0B/A0DB: A6 10     LDX $10            ; next character
0B/A0DD: CA        DEX 
0B/A0DE: 10 E7     BPL $A0C7
0B/A0E0: A2 03     LDX #$03
0B/A0E2: BD CA 7B  LDA $7BCA,X
0B/A0E5: DD D2 7B  CMP $7BD2,X
0B/A0E8: D0 D8     BNE $A0C2          ; wait until all characters are done moving
0B/A0EA: CA        DEX 
0B/A0EB: 10 F5     BPL $A0E2
0B/A0ED: 20 33 9E  JSR $9E33          ; wait for vblank (menu, oam & color update)
0B/A0F0: A2 03     LDX #$03
0B/A0F2: 86 10     STX $10
0B/A0F4: 20 FD AB  JSR $ABFD
0B/A0F7: 20 3A A4  JSR $A43A          ; draw character
0B/A0FA: A6 10     LDX $10
0B/A0FC: CA        DEX 
0B/A0FD: 10 F3     BPL $A0F2
0B/A0FF: 4C 33 9E  JMP $9E33          ; wait for vblank (menu, oam & color update)

; [ init character base x positions ]

0B/A102: A9 D0     LDA #$D0           ; front row
0B/A104: BC BE 7B  LDY $7BBE,X
0B/A107: F0 02     BEQ $A10B          ; branch if in front row
0B/A109: A9 E0     LDA #$E0           ; back row
0B/A10B: 9D D2 7B  STA $7BD2,X        ; set base x position
0B/A10E: 60        RTS 

; [  ]

0B/A10F: 86 02     STX $02
0B/A111: 85 03     STA $03
0B/A113: 84 04     STY $04
0B/A115: A5 04     LDA $04
0B/A117: 85 05     STA $05
0B/A119: A9 FC     LDA #$FC
0B/A11B: A4 01     LDY $01
0B/A11D: 84 07     STY $07
0B/A11F: F0 0A     BEQ $A12B
0B/A121: 38        SEC 
0B/A122: 2A        ROL 
0B/A123: 2A        ROL 
0B/A124: 06 05     ASL $05
0B/A126: 06 05     ASL $05
0B/A128: 88        DEY 
0B/A129: D0 F6     BNE $A121
0B/A12B: 85 06     STA $06
0B/A12D: A6 02     LDX $02
0B/A12F: A4 00     LDY $00
0B/A131: B9 C8 79  LDA $79C8,Y
0B/A134: 25 06     AND $06
0B/A136: 05 05     ORA $05
0B/A138: 99 C8 79  STA $79C8,Y
0B/A13B: A5 07     LDA $07
0B/A13D: 49 01     EOR #$01
0B/A13F: 85 07     STA $07
0B/A141: 29 01     AND #$01
0B/A143: 38        SEC 
0B/A144: F0 0A     BEQ $A150
0B/A146: 26 06     ROL $06
0B/A148: 26 06     ROL $06
0B/A14A: 06 05     ASL $05
0B/A14C: 06 05     ASL $05
0B/A14E: 90 09     BCC $A159
0B/A150: 66 06     ROR $06
0B/A152: 66 06     ROR $06
0B/A154: 46 05     LSR $05
0B/A156: 46 05     LSR $05
0B/A158: C8        INY 
0B/A159: CA        DEX 
0B/A15A: D0 D5     BNE $A131
0B/A15C: A5 01     LDA $01
0B/A15E: 49 02     EOR #$02
0B/A160: 85 01     STA $01
0B/A162: 29 02     AND #$02
0B/A164: D0 07     BNE $A16D
0B/A166: A5 00     LDA $00
0B/A168: 18        CLC 
0B/A169: 69 08     ADC #$08
0B/A16B: 85 00     STA $00
0B/A16D: C6 03     DEC $03
0B/A16F: D0 A4     BNE $A115
0B/A171: 60        RTS 

; [  ]

0B/A172: 86 05     STX $05
0B/A174: 85 04     STA $04
0B/A176: A0 00     LDY #$00
0B/A178: 20 DA A1  JSR $A1DA
0B/A17B: A5 00     LDA $00
0B/A17D: 85 0B     STA $0B
0B/A17F: A5 05     LDA $05
0B/A181: 85 0A     STA $0A
0B/A183: A5 01     LDA $01
0B/A185: 85 09     STA $09
0B/A187: A9 00     LDA #$00
0B/A189: 85 08     STA $08
0B/A18B: 06 06     ASL $06
0B/A18D: 26 08     ROL $08
0B/A18F: 06 06     ASL $06
0B/A191: 26 08     ROL $08
0B/A193: A9 FC     LDA #$FC
0B/A195: A6 09     LDX $09
0B/A197: F0 0A     BEQ $A1A3
0B/A199: 38        SEC 
0B/A19A: 2A        ROL 
0B/A19B: 2A        ROL 
0B/A19C: 06 08     ASL $08
0B/A19E: 06 08     ASL $08
0B/A1A0: CA        DEX 
0B/A1A1: D0 F6     BNE $A199
0B/A1A3: A6 0B     LDX $0B
0B/A1A5: 3D C8 79  AND $79C8,X
0B/A1A8: 05 08     ORA $08
0B/A1AA: 9D C8 79  STA $79C8,X
0B/A1AD: A5 09     LDA $09
0B/A1AF: 49 01     EOR #$01
0B/A1B1: 85 09     STA $09
0B/A1B3: 29 01     AND #$01
0B/A1B5: D0 02     BNE $A1B9
0B/A1B7: E6 0B     INC $0B
0B/A1B9: C6 07     DEC $07
0B/A1BB: D0 03     BNE $A1C0
0B/A1BD: 20 DA A1  JSR $A1DA
0B/A1C0: C6 0A     DEC $0A
0B/A1C2: D0 C3     BNE $A187
0B/A1C4: A5 01     LDA $01
0B/A1C6: 49 02     EOR #$02
0B/A1C8: 85 01     STA $01
0B/A1CA: 29 02     AND #$02
0B/A1CC: D0 07     BNE $A1D5
0B/A1CE: A5 00     LDA $00
0B/A1D0: 18        CLC 
0B/A1D1: 69 08     ADC #$08
0B/A1D3: 85 00     STA $00
0B/A1D5: C6 04     DEC $04
0B/A1D7: D0 A2     BNE $A17B
0B/A1D9: 60        RTS 
0B/A1DA: B1 02     LDA ($02),Y
0B/A1DC: 85 06     STA $06
0B/A1DE: C8        INY 
0B/A1DF: A9 04     LDA #$04
0B/A1E1: 85 07     STA $07
0B/A1E3: 60        RTS 

; [ copy left attribute table to ppu ]

0B/A1E4: A9 C8     LDA #$C8           ; $79C8
0B/A1E6: 85 02     STA $02
0B/A1E8: A9 79     LDA #$79
0B/A1EA: 85 03     STA $03
0B/A1EC: A9 23     LDA #$23           ; ppu $23C0 (left attribute table)
0B/A1EE: 85 01     STA $01
0B/A1F0: A9 C0     LDA #$C0
0B/A1F2: 85 00     STA $00
0B/A1F4: A2 40     LDX #$40
0B/A1F6: 4C 6F FD  JMP $FD6F          ; copy data to ppu

; [ copy right attribute table to ppu ]

0B/A1F9: A9 08     LDA #$08           ; $7A08
0B/A1FB: 85 02     STA $02
0B/A1FD: A9 7A     LDA #$7A
0B/A1FF: 85 03     STA $03
0B/A201: A9 27     LDA #$27           ; ppu $27C0 (right attribute table)
0B/A203: D0 E9     BNE $A1EE

; [  ]

0B/A205: A8        TAY 
0B/A206: B9 62 7B  LDA $7B62,Y
0B/A209: 10 01     BPL $A20C
0B/A20B: 60        RTS 
0B/A20C: B9 72 7B  LDA $7B72,Y        ; monster graphics id
0B/A20F: C9 09     CMP #$09
0B/A211: B0 1C     BCS $A22F
0B/A213: B9 7A 7B  LDA $7B7A,Y
0B/A216: 85 02     STA $02
0B/A218: BE 9A 7B  LDX $7B9A,Y
0B/A21B: B9 92 7B  LDA $7B92,Y
0B/A21E: 20 B8 9C  JSR $9CB8
0B/A221: B9 8A 7B  LDA $7B8A,Y
0B/A224: 4A        LSR 
0B/A225: AA        TAX 
0B/A226: B9 82 7B  LDA $7B82,Y
0B/A229: 4A        LSR 
0B/A22A: A4 02     LDY $02
0B/A22C: 4C 0F A1  JMP $A10F
0B/A22F: E9 09     SBC #$09
0B/A231: 48        PHA 
0B/A232: A2 09     LDX #$09
0B/A234: 20 79 FC  JSR $FC79          ; multiply
0B/A237: A5 02     LDA $02
0B/A239: 69 16     ADC #$16           ; 0B/9216
0B/A23B: 85 02     STA $02
0B/A23D: A5 03     LDA $03
0B/A23F: 69 92     ADC #$92
0B/A241: 85 03     STA $03
0B/A243: 68        PLA 
0B/A244: C9 06     CMP #$06
0B/A246: F0 0E     BEQ $A256
0B/A248: A9 09     LDA #$09
0B/A24A: 85 00     STA $00
0B/A24C: A9 02     LDA #$02
0B/A24E: 85 01     STA $01
0B/A250: A2 06     LDX #$06
0B/A252: A9 06     LDA #$06
0B/A254: D0 0C     BNE $A262
0B/A256: A9 08     LDA #$08
0B/A258: 85 00     STA $00
0B/A25A: A9 03     LDA #$03
0B/A25C: 85 01     STA $01
0B/A25E: A2 09     LDX #$09
0B/A260: A9 06     LDA #$06
0B/A262: 4C 72 A1  JMP $A172

; [ copy character graphics to ppu ]

0B/A265: 86 04     STX $04
0B/A267: 20 CF 9D  JSR $9DCF          ; clear ppu data buffer
0B/A26A: BC A2 7B  LDY $7BA2,X
0B/A26D: 30 33     BMI $A2A2          ; branch if character not present
0B/A26F: D0 12     BNE $A283
; normal
0B/A271: BD BA 7B  LDA $7BBA,X        ; character id
0B/A274: 0A        ASL 
0B/A275: 69 9E     ADC #$9E           ; 09/9E00 (battle character graphics)
0B/A277: 85 01     STA $01
0B/A279: A9 00     LDA #$00
0B/A27B: 85 00     STA $00
0B/A27D: A2 00     LDX #$00
0B/A27F: A0 80     LDY #$80
0B/A281: D0 1C     BNE $A29F
; toad or mini
0B/A283: 88        DEY 
0B/A284: 98        TYA 
0B/A285: 20 A2 AD  JSR $ADA2          ; asl6
0B/A288: 69 80     ADC #$80
0B/A28A: 85 00     STA $00
0B/A28C: A9 9D     LDA #$9D
0B/A28E: 85 01     STA $01
0B/A290: A2 50     LDX #$50
0B/A292: A0 10     LDY #$10
0B/A294: 20 BA FB  JSR $FBBA          ; copy sprite graphics to buffer
0B/A297: 98        TYA 
0B/A298: 18        CLC 
0B/A299: 65 00     ADC $00
0B/A29B: 85 00     STA $00
0B/A29D: A2 70     LDX #$70
0B/A29F: 20 BA FB  JSR $FBBA          ; copy sprite graphics to buffer
0B/A2A2: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0B/A2A5: A5 04     LDA $04
0B/A2A7: A2 80     LDX #$80
0B/A2A9: 20 79 FC  JSR $FC79          ; multiply
0B/A2AC: A5 02     LDA $02
0B/A2AE: 85 00     STA $00
0B/A2B0: A5 03     LDA $03
0B/A2B2: 85 01     STA $01
0B/A2B4: 20 C6 9D  JSR $9DC6          ; init ppu data buffer address
0B/A2B7: 20 A2 9D  JSR $9DA2          ; copy 8 tiles to ppu
0B/A2BA: 4C 46 FD  JMP $FD46          ; wait for first battlefield scanline

; [  ]

0B/A2BD: 85 08     STA $08
0B/A2BF: A6 26     LDX $26
0B/A2C1: A5 06     LDA $06
0B/A2C3: 20 21 A3  JSR $A321
0B/A2C6: 20 E9 A2  JSR $A2E9
0B/A2C9: A9 80     LDA #$80
0B/A2CB: 85 00     STA $00
0B/A2CD: A9 03     LDA #$03
0B/A2CF: 85 01     STA $01
0B/A2D1: 20 AB A3  JSR $A3AB
0B/A2D4: A6 26     LDX $26
0B/A2D6: A5 07     LDA $07
0B/A2D8: 20 21 A3  JSR $A321
0B/A2DB: 20 E9 A2  JSR $A2E9
0B/A2DE: A9 E0     LDA #$E0
0B/A2E0: 85 00     STA $00
0B/A2E2: A9 03     LDA #$03
0B/A2E4: 85 01     STA $01
0B/A2E6: 4C AB A3  JMP $A3AB
0B/A2E9: A5 08     LDA $08
0B/A2EB: C9 02     CMP #$02
0B/A2ED: F0 01     BEQ $A2F0
0B/A2EF: 60        RTS 
0B/A2F0: A0 25     LDY #$25
0B/A2F2: 20 F7 A2  JSR $A2F7
0B/A2F5: A0 2D     LDY #$2D
0B/A2F7: A2 03     LDX #$03
0B/A2F9: B9 00 76  LDA $7600,Y
0B/A2FC: 29 1F     AND #$1F
0B/A2FE: 99 00 76  STA $7600,Y
0B/A301: C8        INY 
0B/A302: CA        DEX 
0B/A303: D0 F4     BNE $A2F9
0B/A305: 60        RTS 

; [  ]

0B/A306: 8A        TXA 
0B/A307: 48        PHA 
0B/A308: BD C2 7B  LDA $7BC2,X
0B/A30B: 20 21 A3  JSR $A321
0B/A30E: 68        PLA 
0B/A30F: A2 60     LDX #$60
0B/A311: 20 79 FC  JSR $FC79          ; multiply
0B/A314: A5 02     LDA $02
0B/A316: 85 00     STA $00
0B/A318: A5 03     LDA $03
0B/A31A: 69 02     ADC #$02
0B/A31C: 85 01     STA $01
0B/A31E: 4C AB A3  JMP $A3AB

; [  ]

0B/A321: 85 00     STA $00
0B/A323: 20 CF 9D  JSR $9DCF
0B/A326: BD A2 7B  LDA $7BA2,X
0B/A329: F0 03     BEQ $A32E
0B/A32B: 10 43     BPL $A370
0B/A32D: 60        RTS 
0B/A32E: BD BA 7B  LDA $7BBA,X
0B/A331: 0A        ASL 
0B/A332: 69 9E     ADC #$9E
0B/A334: 85 04     STA $04
0B/A336: A6 00     LDX $00
0B/A338: F0 35     BEQ $A36F
0B/A33A: CA        DEX 
0B/A33B: A9 06     LDA #$06
0B/A33D: 20 79 FC  JSR $FC79          ; multiply
0B/A340: A5 02     LDA $02
0B/A342: 85 05     STA $05
0B/A344: A9 00     LDA #$00
0B/A346: 85 03     STA $03
0B/A348: A9 00     LDA #$00
0B/A34A: 85 01     STA $01
0B/A34C: A6 05     LDX $05
0B/A34E: BD 88 92  LDA $9288,X
0B/A351: E6 05     INC $05
0B/A353: 20 A4 AD  JSR $ADA4          ; asl4
0B/A356: 26 01     ROL $01
0B/A358: 69 00     ADC #$00
0B/A35A: 85 00     STA $00
0B/A35C: A5 01     LDA $01
0B/A35E: 65 04     ADC $04
0B/A360: 85 01     STA $01
0B/A362: A6 03     LDX $03
0B/A364: A0 10     LDY #$10
0B/A366: 20 BA FB  JSR $FBBA          ; copy sprite graphics to buffer
0B/A369: 86 03     STX $03
0B/A36B: E0 60     CPX #$60
0B/A36D: D0 D9     BNE $A348
0B/A36F: 60        RTS 
0B/A370: A9 9D     LDA #$9D
0B/A372: 85 01     STA $01
0B/A374: BC A2 7B  LDY $7BA2,X
0B/A377: 88        DEY 
0B/A378: 98        TYA 
0B/A379: 20 A4 AD  JSR $ADA4          ; asl4
0B/A37C: 85 02     STA $02
0B/A37E: A4 00     LDY $00
0B/A380: F0 04     BEQ $A386
0B/A382: C0 08     CPY #$08
0B/A384: D0 01     BNE $A387
0B/A386: 60        RTS 
0B/A387: 88        DEY 
0B/A388: 18        CLC 
0B/A389: B9 B6 A3  LDA $A3B6,Y
0B/A38C: 10 0C     BPL $A39A
0B/A38E: A9 40     LDA #$40
0B/A390: 65 02     ADC $02
0B/A392: 85 00     STA $00
0B/A394: A9 88     LDA #$88
0B/A396: 85 01     STA $01
0B/A398: D0 0A     BNE $A3A4
0B/A39A: 06 02     ASL $02
0B/A39C: 06 02     ASL $02
0B/A39E: 65 02     ADC $02
0B/A3A0: 69 80     ADC #$80
0B/A3A2: 85 00     STA $00
0B/A3A4: A2 50     LDX #$50
0B/A3A6: A0 10     LDY #$10
0B/A3A8: 4C BA FB  JMP $FBBA          ; copy sprite graphics to buffer

; [  ]

0B/A3AB: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0B/A3AE: A2 60     LDX #$60
0B/A3B0: 20 BA 9D  JSR $9DBA          ; copy buffer to ppu
0B/A3B3: 4C 46 FD  JMP $FD46          ; wait for first battlefield scanline

0B/A3B6: 00 10 C0 C0 20 10 30

; [ init character sprite data ]

0B/A3BD: A9 00     LDA #$00           ; $7900 (character sprite data)
0B/A3BF: 85 04     STA $04
0B/A3C1: 85 00     STA $00
0B/A3C3: A9 79     LDA #$79
0B/A3C5: 85 05     STA $05
0B/A3C7: A6 00     LDX $00
0B/A3C9: BC 2C A4  LDY $A42C,X
0B/A3CC: 20 E3 A3  JSR $A3E3
0B/A3CF: A6 00     LDX $00
0B/A3D1: BC 33 A4  LDY $A433,X
0B/A3D4: 20 F1 A3  JSR $A3F1
0B/A3D7: 20 04 A4  JSR $A404
0B/A3DA: E6 00     INC $00
0B/A3DC: A6 00     LDX $00
0B/A3DE: E0 07     CPX #$07
0B/A3E0: D0 E5     BNE $A3C7
0B/A3E2: 60        RTS 

; [  ]

0B/A3E3: A2 00     LDX #$00
0B/A3E5: B9 F4 92  LDA $92F4,Y
0B/A3E8: 95 14     STA $14,X
0B/A3EA: E8        INX 
0B/A3EB: C8        INY 
0B/A3EC: E0 06     CPX #$06
0B/A3EE: D0 F5     BNE $A3E5
0B/A3F0: 60        RTS 

; [  ]

0B/A3F1: A2 00     LDX #$00
0B/A3F3: B9 64 92  LDA $9264,Y
0B/A3F6: 95 0E     STA $0E,X
0B/A3F8: B9 76 92  LDA $9276,Y
0B/A3FB: 95 08     STA $08,X
0B/A3FD: E8        INX 
0B/A3FE: C8        INY 
0B/A3FF: E0 06     CPX #$06
0B/A401: D0 F0     BNE $A3F3
0B/A403: 60        RTS 

; [  ]

0B/A404: A0 00     LDY #$00
0B/A406: A2 00     LDX #$00
0B/A408: B5 08     LDA $08,X
0B/A40A: 91 04     STA ($04),Y
0B/A40C: C8        INY 
0B/A40D: B5 14     LDA $14,X
0B/A40F: 91 04     STA ($04),Y
0B/A411: C8        INY 
0B/A412: A9 00     LDA #$00
0B/A414: 91 04     STA ($04),Y
0B/A416: C8        INY 
0B/A417: B5 0E     LDA $0E,X
0B/A419: 91 04     STA ($04),Y
0B/A41B: C8        INY 
0B/A41C: E8        INX 
0B/A41D: C0 18     CPY #$18
0B/A41F: D0 E7     BNE $A408
0B/A421: 98        TYA 
0B/A422: 18        CLC 
0B/A423: 65 04     ADC $04
0B/A425: 85 04     STA $04
0B/A427: 90 02     BCC $A42B
0B/A429: E6 05     INC $05
0B/A42B: 60        RTS 

0B/A42C: 00 06 0C 00 06 0C 0C
0B/A433: 00 00 00 0C 0C 0C 06

; [ draw character ]

0B/A43A: 86 04     STX $04
0B/A43C: BD A2 7B  LDA $7BA2,X        ; character graphics type
0B/A43F: 10 01     BPL $A442          ; return if hidden
0B/A441: 60        RTS 
0B/A442: 85 05     STA $05
0B/A444: BD C2 7B  LDA $7BC2,X
0B/A447: 85 06     STA $06
0B/A449: 29 7F     AND #$7F
0B/A44B: 85 07     STA $07
0B/A44D: A2 08     LDX #$08
0B/A44F: A5 07     LDA $07
0B/A451: C9 03     CMP #$03
0B/A453: 90 02     BCC $A457
0B/A455: A2 06     LDX #$06
0B/A457: A5 04     LDA $04
0B/A459: 20 79 FC  JSR $FC79          ; multiply
0B/A45C: A5 02     LDA $02
0B/A45E: 85 08     STA $08
0B/A460: A9 00     LDA #$00
0B/A462: A6 07     LDX $07
0B/A464: F0 11     BEQ $A477
0B/A466: A9 06     LDA #$06
0B/A468: E0 08     CPX #$08
0B/A46A: F0 0B     BEQ $A477
0B/A46C: CA        DEX 
0B/A46D: BD 0B A5  LDA $A50B,X
0B/A470: A6 05     LDX $05
0B/A472: F0 03     BEQ $A477
0B/A474: 18        CLC 
0B/A475: 69 03     ADC #$03
0B/A477: A2 18     LDX #$18
0B/A479: 20 79 FC  JSR $FC79          ; multiply
0B/A47C: A5 02     LDA $02
0B/A47E: 69 00     ADC #$00
0B/A480: 85 00     STA $00
0B/A482: A5 03     LDA $03
0B/A484: 69 79     ADC #$79           ; $7900 (character sprite data)
0B/A486: 85 01     STA $01
0B/A488: A5 04     LDA $04
0B/A48A: 0A        ASL 
0B/A48B: AA        TAX 
0B/A48C: B5 2C     LDA $2C,X          ; pointer to character sprite data
0B/A48E: 85 02     STA $02
0B/A490: B5 2D     LDA $2D,X
0B/A492: 85 03     STA $03
0B/A494: A0 00     LDY #$00
0B/A496: A2 00     LDX #$00
0B/A498: C8        INY 
0B/A499: B1 00     LDA ($00),Y
0B/A49B: 18        CLC 
0B/A49C: 65 08     ADC $08
0B/A49E: 95 0A     STA $0A,X
0B/A4A0: C8        INY 
0B/A4A1: C8        INY 
0B/A4A2: C8        INY 
0B/A4A3: E8        INX 
0B/A4A4: C0 18     CPY #$18
0B/A4A6: D0 F0     BNE $A498
0B/A4A8: 24 06     BIT $06
0B/A4AA: 10 14     BPL $A4C0
0B/A4AC: A5 05     LDA $05
0B/A4AE: D0 10     BNE $A4C0
0B/A4B0: A2 00     LDX #$00
0B/A4B2: B5 0A     LDA $0A,X
0B/A4B4: B4 0B     LDY $0B,X
0B/A4B6: 94 0A     STY $0A,X
0B/A4B8: 95 0B     STA $0B,X
0B/A4BA: E8        INX 
0B/A4BB: E8        INX 
0B/A4BC: E0 06     CPX #$06
0B/A4BE: D0 F2     BNE $A4B2
0B/A4C0: A6 04     LDX $04
0B/A4C2: BD CA 7B  LDA $7BCA,X        ; x position
0B/A4C5: 85 08     STA $08
0B/A4C7: BD CE 7B  LDA $7BCE,X        ; y position
0B/A4CA: 85 09     STA $09
0B/A4CC: BD B6 7B  LDA $7BB6,X        ; palette
0B/A4CF: 24 06     BIT $06
0B/A4D1: 10 02     BPL $A4D5
0B/A4D3: 09 40     ORA #$40           ; flip horizontal
0B/A4D5: 85 05     STA $05
0B/A4D7: A5 07     LDA $07
0B/A4D9: D0 0C     BNE $A4E7
0B/A4DB: A0 00     LDY #$00
0B/A4DD: A9 F0     LDA #$F0
0B/A4DF: 91 02     STA ($02),Y        ; hide sprite
0B/A4E1: C8        INY 
0B/A4E2: C0 18     CPY #$18
0B/A4E4: D0 F9     BNE $A4DF
0B/A4E6: 60        RTS 
0B/A4E7: A0 00     LDY #$00
0B/A4E9: A2 00     LDX #$00
0B/A4EB: B1 00     LDA ($00),Y        ; y offset
0B/A4ED: 18        CLC 
0B/A4EE: 65 09     ADC $09            ; add y position
0B/A4F0: 91 02     STA ($02),Y
0B/A4F2: C8        INY 
0B/A4F3: B5 0A     LDA $0A,X          ; tile id
0B/A4F5: E8        INX 
0B/A4F6: 91 02     STA ($02),Y
0B/A4F8: C8        INY 
0B/A4F9: A5 05     LDA $05            ; palette and flip flags
0B/A4FB: 91 02     STA ($02),Y
0B/A4FD: C8        INY 
0B/A4FE: B1 00     LDA ($00),Y        ; x offset
0B/A500: 18        CLC 
0B/A501: 65 08     ADC $08            ; add x position
0B/A503: 91 02     STA ($02),Y
0B/A505: C8        INY 
0B/A506: C0 18     CPY #$18
0B/A508: D0 E1     BNE $A4EB
0B/A50A: 60        RTS 

0B/A50B: 00 01 02 02 02 02 02

; [ move character ]

; A: msb set = move left, msb clear = move right
; X: character id

0B/A512: 85 00     STA $00
0B/A514: BD A2 7B  LDA $7BA2,X        ; character graphics type
0B/A517: 30 3D     BMI $A556          ; branch if normal or hidden
0B/A519: F0 3B     BEQ $A556
0B/A51B: C9 01     CMP #$01
0B/A51D: F0 67     BEQ $A586
; toad
0B/A51F: BD D6 7B  LDA $7BD6,X
0B/A522: 29 07     AND #$07
0B/A524: 9D D6 7B  STA $7BD6,X
0B/A527: A8        TAY 
0B/A528: BD CA 7B  LDA $7BCA,X        ; x position
0B/A52B: 24 00     BIT $00
0B/A52D: 10 07     BPL $A536
0B/A52F: 38        SEC 
0B/A530: F9 33 93  SBC $9333,Y
0B/A533: 4C 3A A5  JMP $A53A
0B/A536: 18        CLC 
0B/A537: 79 33 93  ADC $9333,Y
0B/A53A: 9D CA 7B  STA $7BCA,X
0B/A53D: BD CE 7B  LDA $7BCE,X
0B/A540: 18        CLC 
0B/A541: 79 3B 93  ADC $933B,Y
0B/A544: 9D CE 7B  STA $7BCE,X
0B/A547: BD C2 7B  LDA $7BC2,X
0B/A54A: F0 06     BEQ $A552
0B/A54C: B9 43 93  LDA $9343,Y
0B/A54F: 9D C2 7B  STA $7BC2,X
0B/A552: FE D6 7B  INC $7BD6,X
0B/A555: 60        RTS 
; normal
0B/A556: BD CA 7B  LDA $7BCA,X        ; x position
0B/A559: 24 00     BIT $00
0B/A55B: 10 06     BPL $A563
0B/A55D: 38        SEC 
0B/A55E: E9 02     SBC #$02           ; move left
0B/A560: 4C 66 A5  JMP $A566
0B/A563: 18        CLC 
0B/A564: 69 02     ADC #$02           ; move right
0B/A566: 9D CA 7B  STA $7BCA,X
0B/A569: BD D6 7B  LDA $7BD6,X
0B/A56C: C9 03     CMP #$03
0B/A56E: 90 12     BCC $A582
0B/A570: A9 00     LDA #$00
0B/A572: 9D D6 7B  STA $7BD6,X
0B/A575: BD DA 7B  LDA $7BDA,X
0B/A578: 49 FF     EOR #$FF
0B/A57A: 9D DA 7B  STA $7BDA,X
0B/A57D: F0 03     BEQ $A582
0B/A57F: 20 A7 A5  JSR $A5A7
0B/A582: FE D6 7B  INC $7BD6,X
0B/A585: 60        RTS 
; mini
0B/A586: BD CA 7B  LDA $7BCA,X        ; x position
0B/A589: 24 00     BIT $00
0B/A58B: 10 06     BPL $A593
0B/A58D: 38        SEC 
0B/A58E: E9 01     SBC #$01
0B/A590: 4C 96 A5  JMP $A596
0B/A593: 18        CLC 
0B/A594: 69 01     ADC #$01
0B/A596: 9D CA 7B  STA $7BCA,X
0B/A599: BD D6 7B  LDA $7BD6,X
0B/A59C: 29 01     AND #$01
0B/A59E: F0 03     BEQ $A5A3
0B/A5A0: 20 A7 A5  JSR $A5A7
0B/A5A3: FE D6 7B  INC $7BD6,X
0B/A5A6: 60        RTS 

; [  ]

0B/A5A7: BC C6 7B  LDY $7BC6,X
0B/A5AA: BD C2 7B  LDA $7BC2,X
0B/A5AD: F0 0A     BEQ $A5B9
0B/A5AF: C9 01     CMP #$01
0B/A5B1: F0 02     BEQ $A5B5
0B/A5B3: A0 01     LDY #$01
0B/A5B5: 98        TYA 
0B/A5B6: 9D C2 7B  STA $7BC2,X
0B/A5B9: 60        RTS 

; [  ]

0B/A5BA: 20 8B 9C  JSR $9C8B          ; init character sprite pointers
0B/A5BD: A2 03     LDX #$03
0B/A5BF: 86 10     STX $10
0B/A5C1: 20 02 A1  JSR $A102
0B/A5C4: BD CA 7B  LDA $7BCA,X
0B/A5C7: DD D2 7B  CMP $7BD2,X
0B/A5CA: F0 03     BEQ $A5CF
0B/A5CC: 20 80 A6  JSR $A680
0B/A5CF: C6 10     DEC $10
0B/A5D1: A6 10     LDX $10
0B/A5D3: 10 EC     BPL $A5C1
0B/A5D5: 20 95 A6  JSR $A695
0B/A5D8: A2 03     LDX #$03
0B/A5DA: 86 10     STX $10
0B/A5DC: BD D2 7B  LDA $7BD2,X
0B/A5DF: DD CA 7B  CMP $7BCA,X
0B/A5E2: F0 0B     BEQ $A5EF
0B/A5E4: 90 06     BCC $A5EC
0B/A5E6: 20 33 A6  JSR $A633
0B/A5E9: 4C EF A5  JMP $A5EF
0B/A5EC: 20 22 A6  JSR $A622
0B/A5EF: C6 10     DEC $10
0B/A5F1: A6 10     LDX $10
0B/A5F3: 10 E7     BPL $A5DC
0B/A5F5: 20 95 A6  JSR $A695
0B/A5F8: A2 03     LDX #$03
0B/A5FA: 86 10     STX $10
0B/A5FC: 20 78 A6  JSR $A678
0B/A5FF: C6 10     DEC $10
0B/A601: A6 10     LDX $10
0B/A603: 10 F7     BPL $A5FC
0B/A605: A6 9E     LDX $9E
0B/A607: E0 04     CPX #$04
0B/A609: 90 0A     BCC $A615
0B/A60B: 20 E7 9D  JSR $9DE7
0B/A60E: A9 00     LDA #$00
0B/A610: 85 43     STA $43
0B/A612: 4C 1D A6  JMP $A61D
0B/A615: A6 9E     LDX $9E
0B/A617: 20 20 A6  JSR $A620
0B/A61A: 20 76 A6  JSR $A676
0B/A61D: 4C 95 A6  JMP $A695

; [  ]

0B/A620: A9 C0     LDA #$C0
0B/A622: 85 11     STA $11
0B/A624: 86 12     STX $12
0B/A626: A9 80     LDA #$80           ; move left
0B/A628: 85 13     STA $13
0B/A62A: 20 47 A6  JSR $A647
0B/A62D: 20 7E A6  JSR $A67E
0B/A630: 4C 95 A6  JMP $A695

; [  ]

0B/A633: 86 12     STX $12
0B/A635: BD D2 7B  LDA $7BD2,X
0B/A638: 85 11     STA $11
0B/A63A: A9 00     LDA #$00           ; move right
0B/A63C: 85 13     STA $13
0B/A63E: 20 47 A6  JSR $A647
0B/A641: 20 76 A6  JSR $A676
0B/A644: 4C 95 A6  JMP $A695

; [  ]

0B/A647: 20 7E A6  JSR $A67E
0B/A64A: 20 95 A6  JSR $A695
0B/A64D: A6 12     LDX $12
0B/A64F: BD CA 7B  LDA $7BCA,X
0B/A652: C5 11     CMP $11
0B/A654: F0 1D     BEQ $A673
0B/A656: A5 13     LDA $13
0B/A658: 20 12 A5  JSR $A512          ; move character
0B/A65B: A6 12     LDX $12
0B/A65D: BC A2 7B  LDY $7BA2,X
0B/A660: C0 02     CPY #$02
0B/A662: D0 09     BNE $A66D
0B/A664: A4 13     LDY $13
0B/A666: 30 05     BMI $A66D
0B/A668: 09 80     ORA #$80
0B/A66A: 9D C2 7B  STA $7BC2,X
0B/A66D: 20 3A A4  JSR $A43A          ; draw character
0B/A670: 4C 4A A6  JMP $A64A
0B/A673: 4C 95 A6  JMP $A695
0B/A676: A6 12     LDX $12
0B/A678: 20 FD AB  JSR $ABFD
0B/A67B: 4C 3A A4  JMP $A43A          ; draw character
0B/A67E: A6 12     LDX $12
0B/A680: A9 00     LDA #$00
0B/A682: 9D D6 7B  STA $7BD6,X
0B/A685: 9D DA 7B  STA $7BDA,X
0B/A688: A9 01     LDA #$01
0B/A68A: 9D C2 7B  STA $7BC2,X
0B/A68D: A9 02     LDA #$02
0B/A68F: 9D C6 7B  STA $7BC6,X
0B/A692: 4C 3A A4  JMP $A43A          ; draw character

; [  ]

0B/A695: 24 43     BIT $43
0B/A697: 30 03     BMI $A69C
0B/A699: 4C 2A 9E  JMP $9E2A          ; wait for vblank (menu & oam update)
0B/A69C: 20 CB AF  JSR $AFCB          ; update status animation
0B/A69F: 4C 46 FD  JMP $FD46          ; wait for first battlefield scanline

; --------------------------------------------------------------------------

; [ choose targets ]

0B/A6A2: A2 04     LDX #$04
0B/A6A4: BD 50 93  LDA $9350,X        ; magic targeting properties
0B/A6A7: 95 00     STA $00,X
0B/A6A9: CA        DEX 
0B/A6AA: 10 F8     BPL $A6A4
0B/A6AC: A9 00     LDA #$00
0B/A6AE: 85 0C     STA $0C
0B/A6B0: 85 0D     STA $0D
0B/A6B2: 85 0E     STA $0E
0B/A6B4: A9 FF     LDA #$FF
0B/A6B6: 85 0B     STA $0B
0B/A6B8: A0 2A     LDY #$2A
0B/A6BA: B1 80     LDA ($80),Y        ; battle command
0B/A6BC: F0 12     BEQ $A6D0
0B/A6BE: AA        TAX 
0B/A6BF: 66 04     ROR $04            ; get the targeting bit for this spell
0B/A6C1: 66 03     ROR $03
0B/A6C3: 66 02     ROR $02
0B/A6C5: 66 01     ROR $01
0B/A6C7: 66 00     ROR $00
0B/A6C9: CA        DEX 
0B/A6CA: D0 F3     BNE $A6BF
0B/A6CC: 90 08     BCC $A6D6
0B/A6CE: B0 0C     BCS $A6DC
; fight
0B/A6D0: 20 F1 A6  JSR $A6F1
0B/A6D3: 4C 07 A7  JMP $A707
; target characters
0B/A6D6: A9 00     LDA #$00
0B/A6D8: 85 0B     STA $0B
0B/A6DA: F0 2B     BEQ $A707
; target monsters
0B/A6DC: 20 E2 A6  JSR $A6E2
0B/A6DF: 4C 07 A7  JMP $A707

; [  ]

0B/A6E2: A2 00     LDX #$00
0B/A6E4: 86 0D     STX $0D
0B/A6E6: BD 62 7B  LDA $7B62,X
0B/A6E9: 10 05     BPL $A6F0
0B/A6EB: E8        INX 
0B/A6EC: E0 08     CPX #$08
0B/A6EE: D0 F4     BNE $A6E4
0B/A6F0: 60        RTS 

; [  ]

0B/A6F1: A9 FF     LDA #$FF
0B/A6F3: 85 0E     STA $0E
0B/A6F5: A2 07     LDX #$07
0B/A6F7: 86 0D     STX $0D
0B/A6F9: BD 62 7B  LDA $7B62,X
0B/A6FC: 30 05     BMI $A703          ; branch if no monster in this slot
0B/A6FE: BD 5A 7B  LDA $7B5A,X
0B/A701: F0 03     BEQ $A706          ; branch if monster in back row
0B/A703: CA        DEX 
0B/A704: 10 F1     BPL $A6F7
0B/A706: 60        RTS 

; [  ]

0B/A707: A9 00     LDA #$00
0B/A709: 85 0F     STA $0F
0B/A70B: 20 6F A8  JSR $A86F
0B/A70E: 20 4B A9  JSR $A94B          ; update status animation
0B/A711: A5 0C     LDA $0C
0B/A713: 05 0D     ORA $0D
0B/A715: 29 80     AND #$80
0B/A717: F0 06     BEQ $A71F
0B/A719: 20 6F A8  JSR $A86F
0B/A71C: 20 4B A9  JSR $A94B          ; update status animation
0B/A71F: 20 34 FC  JSR $FC34          ; update joypad input
0B/A722: A5 0B     LDA $0B
0B/A724: D0 06     BNE $A72C          ; branch if cursor is on monsters
0B/A726: 20 DC A7  JSR $A7DC          ; get player input (character target)
0B/A729: 4C 2F A7  JMP $A72F
0B/A72C: 20 32 A7  JSR $A732          ; get player input (monster target)
0B/A72F: 4C 07 A7  JMP $A707

; [ get player input (monster target) ]

0B/A732: A5 34     LDA $34
0B/A734: 29 03     AND #$03
0B/A736: F0 03     BEQ $A73B          ; branch if not pressing A or B button
0B/A738: 4C 48 A8  JMP $A848
0B/A73B: A5 34     LDA $34
0B/A73D: 0A        ASL 
0B/A73E: B0 58     BCS $A798
0B/A740: 0A        ASL 
0B/A741: B0 70     BCS $A7B3
0B/A743: 0A        ASL 
0B/A744: B0 28     BCS $A76E
0B/A746: 0A        ASL 
0B/A747: B0 01     BCS $A74A
0B/A749: 60        RTS 
; up button
0B/A74A: A5 0D     LDA $0D
0B/A74C: 29 0F     AND #$0F
0B/A74E: 85 0D     STA $0D
0B/A750: F0 13     BEQ $A765
0B/A752: C6 0D     DEC $0D
0B/A754: A6 0D     LDX $0D
0B/A756: BD 62 7B  LDA $7B62,X
0B/A759: 30 EF     BMI $A74A
0B/A75B: A5 0E     LDA $0E
0B/A75D: F0 05     BEQ $A764
0B/A75F: BD 5A 7B  LDA $7B5A,X
0B/A762: D0 E6     BNE $A74A
0B/A764: 60        RTS 
0B/A765: A9 88     LDA #$88
0B/A767: 85 0D     STA $0D
0B/A769: A5 0E     LDA $0E
0B/A76B: D0 DD     BNE $A74A
0B/A76D: 60        RTS 
; down button
0B/A76E: A5 0D     LDA $0D
0B/A770: 10 06     BPL $A778
0B/A772: A9 00     LDA #$00
0B/A774: 85 0D     STA $0D
0B/A776: F0 06     BEQ $A77E
0B/A778: C9 07     CMP #$07
0B/A77A: B0 13     BCS $A78F
0B/A77C: E6 0D     INC $0D
0B/A77E: A6 0D     LDX $0D
0B/A780: BD 62 7B  LDA $7B62,X
0B/A783: 30 E9     BMI $A76E
0B/A785: A5 0E     LDA $0E
0B/A787: F0 05     BEQ $A78E
0B/A789: BD 5A 7B  LDA $7B5A,X
0B/A78C: D0 E0     BNE $A76E
0B/A78E: 60        RTS 
0B/A78F: A9 80     LDA #$80
0B/A791: 85 0D     STA $0D
0B/A793: A5 0E     LDA $0E
0B/A795: D0 D7     BNE $A76E
0B/A797: 60        RTS 
; right button
0B/A798: A5 0D     LDA $0D
0B/A79A: C9 06     CMP #$06
0B/A79C: B0 0C     BCS $A7AA
0B/A79E: E6 0D     INC $0D
0B/A7A0: E6 0D     INC $0D
0B/A7A2: A6 0D     LDX $0D
0B/A7A4: BD 62 7B  LDA $7B62,X
0B/A7A7: 30 EF     BMI $A798
0B/A7A9: 60        RTS 
0B/A7AA: A9 00     LDA #$00
0B/A7AC: 85 0B     STA $0B
0B/A7AE: A9 00     LDA #$00
0B/A7B0: 85 0C     STA $0C
0B/A7B2: 60        RTS 
; left button
0B/A7B3: A5 0D     LDA $0D
0B/A7B5: 30 19     BMI $A7D0
0B/A7B7: C9 02     CMP #$02
0B/A7B9: 90 15     BCC $A7D0
0B/A7BB: C6 0D     DEC $0D
0B/A7BD: C6 0D     DEC $0D
0B/A7BF: A6 0D     LDX $0D
0B/A7C1: BD 62 7B  LDA $7B62,X
0B/A7C4: 30 ED     BMI $A7B3
0B/A7C6: A5 0E     LDA $0E
0B/A7C8: F0 05     BEQ $A7CF
0B/A7CA: BD 5A 7B  LDA $7B5A,X
0B/A7CD: D0 E4     BNE $A7B3
0B/A7CF: 60        RTS 
0B/A7D0: A9 00     LDA #$00
0B/A7D2: 85 0B     STA $0B
0B/A7D4: AD DE 7B  LDA $7BDE
0B/A7D7: 85 0C     STA $0C
0B/A7D9: C6 0C     DEC $0C
0B/A7DB: 60        RTS 

; [ get player input (character target) ]

0B/A7DC: A5 34     LDA $34
0B/A7DE: 29 03     AND #$03
0B/A7E0: D0 66     BNE $A848          ; branch if pressing A or B button
0B/A7E2: A5 34     LDA $34
0B/A7E4: 0A        ASL 
0B/A7E5: B0 4B     BCS $A832
0B/A7E7: 0A        ASL 
0B/A7E8: B0 53     BCS $A83D
0B/A7EA: 0A        ASL 
0B/A7EB: B0 22     BCS $A80F
0B/A7ED: 0A        ASL 
0B/A7EE: B0 01     BCS $A7F1
0B/A7F0: 60        RTS 
; up button
0B/A7F1: A5 0C     LDA $0C
0B/A7F3: 29 07     AND #$07
0B/A7F5: 85 0C     STA $0C
0B/A7F7: F0 03     BEQ $A7FC
0B/A7F9: C6 0C     DEC $0C
0B/A7FB: 60        RTS 
0B/A7FC: AD DE 7B  LDA $7BDE
0B/A7FF: 18        CLC 
0B/A800: 69 80     ADC #$80
0B/A802: 85 0C     STA $0C
0B/A804: A5 0E     LDA $0E
0B/A806: F0 06     BEQ $A80E
0B/A808: AE DE 7B  LDX $7BDE
0B/A80B: CA        DEX 
0B/A80C: 86 0C     STX $0C
0B/A80E: 60        RTS 
; down button
0B/A80F: A5 0C     LDA $0C
0B/A811: 10 05     BPL $A818
0B/A813: A9 00     LDA #$00
0B/A815: 85 0C     STA $0C
0B/A817: 60        RTS 
0B/A818: AD DE 7B  LDA $7BDE
0B/A81B: 38        SEC 
0B/A81C: E9 02     SBC #$02
0B/A81E: C5 0C     CMP $0C
0B/A820: 90 03     BCC $A825
0B/A822: E6 0C     INC $0C
0B/A824: 60        RTS 
0B/A825: A9 80     LDA #$80
0B/A827: 85 0C     STA $0C
0B/A829: A5 0E     LDA $0E
0B/A82B: F0 04     BEQ $A831
0B/A82D: A9 00     LDA #$00
0B/A82F: 85 0C     STA $0C
0B/A831: 60        RTS 
; right button
0B/A832: A9 FF     LDA #$FF
0B/A834: 85 0B     STA $0B
0B/A836: A9 80     LDA #$80
0B/A838: 85 0D     STA $0D
0B/A83A: 4C 6E A7  JMP $A76E
; left button
0B/A83D: A9 FF     LDA #$FF
0B/A83F: 85 0B     STA $0B
0B/A841: A9 08     LDA #$08
0B/A843: 85 0D     STA $0D
0B/A845: 4C 4A A7  JMP $A74A
; A or B button
0B/A848: 4A        LSR 
0B/A849: B0 04     BCS $A84F          ; branch if A button is pressed
0B/A84B: A9 FF     LDA #$FF           ; invalid target
0B/A84D: D0 14     BNE $A863
0B/A84F: A5 0B     LDA $0B
0B/A851: D0 08     BNE $A85B          ; branch if targeting monsters
0B/A853: A5 0C     LDA $0C
0B/A855: 10 0C     BPL $A863
0B/A857: A9 08     LDA #$08           ; target all characters
0B/A859: D0 08     BNE $A863
0B/A85B: A5 0D     LDA $0D
0B/A85D: 10 02     BPL $A861
0B/A85F: A9 08     LDA #$08           ; target all monsters
0B/A861: 09 80     ORA #$80
0B/A863: A0 2B     LDY #$2B
0B/A865: 91 80     STA ($80),Y        ; set target
0B/A867: 20 06 9D  JSR $9D06          ; reset cursor sprites
0B/A86A: 68        PLA 
0B/A86B: 68        PLA 
0B/A86C: 4C 4B A9  JMP $A94B          ; update status animation

; [  ]

0B/A86F: 20 06 9D  JSR $9D06          ; reset cursor sprites
0B/A872: A5 0B     LDA $0B
0B/A874: D0 1F     BNE $A895
0B/A876: A9 00     LDA #$00
0B/A878: A6 0C     LDX $0C
0B/A87A: 10 38     BPL $A8B4
0B/A87C: A9 00     LDA #$00
0B/A87E: 85 0A     STA $0A
0B/A880: A6 0F     LDX $0F
0B/A882: EC DE 7B  CPX $7BDE
0B/A885: B0 0D     BCS $A894
0B/A887: 20 B4 A8  JSR $A8B4
0B/A88A: E6 0F     INC $0F
0B/A88C: E6 0A     INC $0A
0B/A88E: A5 0A     LDA $0A
0B/A890: C9 02     CMP #$02
0B/A892: D0 EC     BNE $A880
0B/A894: 60        RTS 
0B/A895: A9 00     LDA #$00
0B/A897: A6 0D     LDX $0D
0B/A899: 10 5D     BPL $A8F8
0B/A89B: A9 00     LDA #$00
0B/A89D: 85 0A     STA $0A
0B/A89F: A6 0F     LDX $0F
0B/A8A1: BC 62 7B  LDY $7B62,X
0B/A8A4: 30 03     BMI $A8A9
0B/A8A6: 20 F8 A8  JSR $A8F8
0B/A8A9: E6 0F     INC $0F
0B/A8AB: E6 0A     INC $0A
0B/A8AD: A5 0A     LDA $0A
0B/A8AF: C9 04     CMP #$04
0B/A8B1: D0 EC     BNE $A89F
0B/A8B3: 60        RTS 

; [  ]

0B/A8B4: 85 02     STA $02
0B/A8B6: BD A2 7B  LDA $7BA2,X
0B/A8B9: F0 12     BEQ $A8CD
0B/A8BB: BD CA 7B  LDA $7BCA,X
0B/A8BE: 38        SEC 
0B/A8BF: E9 10     SBC #$10
0B/A8C1: 85 00     STA $00
0B/A8C3: BD CE 7B  LDA $7BCE,X
0B/A8C6: 18        CLC 
0B/A8C7: 69 08     ADC #$08
0B/A8C9: 85 04     STA $04
0B/A8CB: D0 26     BNE $A8F3
0B/A8CD: BD C2 7B  LDA $7BC2,X
0B/A8D0: C9 08     CMP #$08
0B/A8D2: D0 12     BNE $A8E6
0B/A8D4: BD CA 7B  LDA $7BCA,X
0B/A8D7: 38        SEC 
0B/A8D8: E9 18     SBC #$18
0B/A8DA: 85 00     STA $00
0B/A8DC: BD CE 7B  LDA $7BCE,X
0B/A8DF: 18        CLC 
0B/A8E0: 69 08     ADC #$08
0B/A8E2: 85 04     STA $04
0B/A8E4: D0 0D     BNE $A8F3
0B/A8E6: BD CA 7B  LDA $7BCA,X
0B/A8E9: 38        SEC 
0B/A8EA: E9 10     SBC #$10
0B/A8EC: 85 00     STA $00
0B/A8EE: BD CE 7B  LDA $7BCE,X
0B/A8F1: 85 04     STA $04
0B/A8F3: A5 02     LDA $02
0B/A8F5: 4C 15 A9  JMP $A915
0B/A8F8: 85 02     STA $02
0B/A8FA: BD 9A 7B  LDA $7B9A,X
0B/A8FD: 10 01     BPL $A900
0B/A8FF: 60        RTS 
0B/A900: 0A        ASL 
0B/A901: 0A        ASL 
0B/A902: 0A        ASL 
0B/A903: 38        SEC 
0B/A904: E9 10     SBC #$10
0B/A906: 85 00     STA $00
0B/A908: BD 92 7B  LDA $7B92,X
0B/A90B: 0A        ASL 
0B/A90C: 0A        ASL 
0B/A90D: 0A        ASL 
0B/A90E: 85 04     STA $04
0B/A910: A5 02     LDA $02
0B/A912: 4C 15 A9  JMP $A915

; [  ]

0B/A915: 0A        ASL 
0B/A916: AA        TAX 
0B/A917: B5 24     LDA $24,X
0B/A919: 85 08     STA $08
0B/A91B: B5 25     LDA $25,X
0B/A91D: 85 09     STA $09
0B/A91F: A5 00     LDA $00
0B/A921: 85 02     STA $02
0B/A923: 18        CLC 
0B/A924: 69 08     ADC #$08
0B/A926: 85 01     STA $01
0B/A928: 85 03     STA $03
0B/A92A: A5 04     LDA $04
0B/A92C: 85 05     STA $05
0B/A92E: 18        CLC 
0B/A92F: 69 08     ADC #$08
0B/A931: 85 06     STA $06
0B/A933: 85 07     STA $07
0B/A935: A0 00     LDY #$00
0B/A937: A2 00     LDX #$00
0B/A939: B5 04     LDA $04,X
0B/A93B: 91 08     STA ($08),Y
0B/A93D: C8        INY 
0B/A93E: C8        INY 
0B/A93F: C8        INY 
0B/A940: B5 00     LDA $00,X
0B/A942: 91 08     STA ($08),Y
0B/A944: C8        INY 
0B/A945: E8        INX 
0B/A946: C0 10     CPY #$10
0B/A948: D0 EF     BNE $A939
0B/A94A: 60        RTS 

; [ update status animation ]

; used while choosing targets

0B/A94B: 20 CB AF  JSR $AFCB          ; update status animation
0B/A94E: 4C 46 FD  JMP $FD46          ; wait for first battlefield scanline

; --------------------------------------------------------------------------

; [  ]

0B/A951: A9 03     LDA #$03
0B/A953: 85 A5     STA $A5
0B/A955: 20 70 A9  JSR $A970
0B/A958: A0 08     LDY #$08
0B/A95A: B1 A1     LDA ($A1),Y
0B/A95C: 09 80     ORA #$80
0B/A95E: 91 A1     STA ($A1),Y
0B/A960: A0 2B     LDY #$2B
0B/A962: B1 9F     LDA ($9F),Y
0B/A964: 29 7F     AND #$7F
0B/A966: AA        TAX 
0B/A967: A9 FF     LDA #$FF
0B/A969: 9D 62 7B  STA $7B62,X
0B/A96C: CE 4D 7B  DEC $7B4D          ; decrement number of monsters remaining
0B/A96F: 60        RTS 

; [  ]

0B/A970: A5 27     LDA $27
0B/A972: 48        PHA 
0B/A973: 20 7A A9  JSR $A97A
0B/A976: 68        PLA 
0B/A977: 85 27     STA $27
0B/A979: 60        RTS 
0B/A97A: 86 00     STX $00
0B/A97C: A5 A5     LDA $A5
0B/A97E: D0 01     BNE $A981
0B/A980: 60        RTS 
0B/A981: A0 04     LDY #$04
0B/A983: A2 18     LDX #$18
0B/A985: 20 42 97  JSR $9742
0B/A988: 20 33 9E  JSR $9E33          ; wait for vblank (menu, oam & color update)
0B/A98B: A6 00     LDX $00
0B/A98D: BD 9A 7B  LDA $7B9A,X
0B/A990: 85 04     STA $04
0B/A992: 0A        ASL 
0B/A993: 0A        ASL 
0B/A994: 0A        ASL 
0B/A995: 85 08     STA $08
0B/A997: BD 92 7B  LDA $7B92,X
0B/A99A: 85 05     STA $05
0B/A99C: 0A        ASL 
0B/A99D: 0A        ASL 
0B/A99E: 0A        ASL 
0B/A99F: 38        SEC 
0B/A9A0: E9 01     SBC #$01
0B/A9A2: 85 09     STA $09
0B/A9A4: BD 8A 7B  LDA $7B8A,X
0B/A9A7: 85 06     STA $06
0B/A9A9: BD 82 7B  LDA $7B82,X
0B/A9AC: 85 07     STA $07
0B/A9AE: 20 E7 9D  JSR $9DE7
0B/A9B1: A6 00     LDX $00
0B/A9B3: BD 72 7B  LDA $7B72,X
0B/A9B6: C9 09     CMP #$09
0B/A9B8: 90 03     BCC $A9BD
0B/A9BA: 4C DB AA  JMP $AADB
0B/A9BD: A9 10     LDA #$10
0B/A9BF: 85 20     STA $20
0B/A9C1: A9 02     LDA #$02
0B/A9C3: 85 21     STA $21
0B/A9C5: A0 00     LDY #$00
0B/A9C7: A2 00     LDX #$00
0B/A9C9: B5 20     LDA $20,X
0B/A9CB: 18        CLC 
0B/A9CC: 69 18     ADC #$18
0B/A9CE: 95 22     STA $22,X
0B/A9D0: A9 02     LDA #$02
0B/A9D2: 95 23     STA $23,X
0B/A9D4: E8        INX 
0B/A9D5: E8        INX 
0B/A9D6: C8        INY 
0B/A9D7: C0 05     CPY #$05
0B/A9D9: D0 EE     BNE $A9C9
0B/A9DB: A5 08     LDA $08
0B/A9DD: 85 00     STA $00
0B/A9DF: A0 00     LDY #$00
0B/A9E1: C8        INY 
0B/A9E2: A9 58     LDA #$58
0B/A9E4: 91 20     STA ($20),Y
0B/A9E6: A9 59     LDA #$59
0B/A9E8: 91 22     STA ($22),Y
0B/A9EA: A9 5A     LDA #$5A
0B/A9EC: 91 24     STA ($24),Y
0B/A9EE: A9 5B     LDA #$5B
0B/A9F0: 91 26     STA ($26),Y
0B/A9F2: A9 5C     LDA #$5C
0B/A9F4: 91 28     STA ($28),Y
0B/A9F6: A9 5D     LDA #$5D
0B/A9F8: 91 2A     STA ($2A),Y
0B/A9FA: C8        INY 
0B/A9FB: A9 02     LDA #$02
0B/A9FD: 91 20     STA ($20),Y
0B/A9FF: 91 22     STA ($22),Y
0B/AA01: 91 24     STA ($24),Y
0B/AA03: 91 26     STA ($26),Y
0B/AA05: 91 28     STA ($28),Y
0B/AA07: 91 2A     STA ($2A),Y
0B/AA09: C8        INY 
0B/AA0A: A5 00     LDA $00
0B/AA0C: 91 20     STA ($20),Y
0B/AA0E: 91 22     STA ($22),Y
0B/AA10: 91 24     STA ($24),Y
0B/AA12: 91 26     STA ($26),Y
0B/AA14: 91 28     STA ($28),Y
0B/AA16: 91 2A     STA ($2A),Y
0B/AA18: 18        CLC 
0B/AA19: 69 08     ADC #$08
0B/AA1B: 85 00     STA $00
0B/AA1D: C8        INY 
0B/AA1E: C0 18     CPY #$18
0B/AA20: D0 BF     BNE $A9E1
0B/AA22: A2 00     LDX #$00
0B/AA24: A0 00     LDY #$00
0B/AA26: 94 0A     STY $0A,X
0B/AA28: 88        DEY 
0B/AA29: E8        INX 
0B/AA2A: E0 07     CPX #$07
0B/AA2C: D0 F8     BNE $AA26
0B/AA2E: A4 A5     LDY $A5
0B/AA30: C0 03     CPY #$03
0B/AA32: F0 07     BEQ $AA3B
0B/AA34: 88        DEY 
0B/AA35: BE A7 AB  LDX $ABA7,Y
0B/AA38: 20 72 9E  JSR $9E72          ; play battle sound effect
0B/AA3B: A9 00     LDA #$00
0B/AA3D: 85 12     STA $12
0B/AA3F: A9 20     LDA #$20
0B/AA41: 85 13     STA $13
0B/AA43: A9 04     LDA #$04
0B/AA45: 85 14     STA $14
0B/AA47: 20 7D AB  JSR $AB7D
0B/AA4A: C6 14     DEC $14
0B/AA4C: D0 F9     BNE $AA47
0B/AA4E: A2 00     LDX #$00
0B/AA50: 86 11     STX $11
0B/AA52: B5 0A     LDA $0A,X
0B/AA54: 30 15     BMI $AA6B
0B/AA56: 0A        ASL 
0B/AA57: 0A        ASL 
0B/AA58: 0A        ASL 
0B/AA59: 65 09     ADC $09
0B/AA5B: 48        PHA 
0B/AA5C: 8A        TXA 
0B/AA5D: 0A        ASL 
0B/AA5E: AA        TAX 
0B/AA5F: B5 20     LDA $20,X
0B/AA61: 85 00     STA $00
0B/AA63: B5 21     LDA $21,X
0B/AA65: 85 01     STA $01
0B/AA67: 68        PLA 
0B/AA68: 20 B8 AA  JSR $AAB8
0B/AA6B: E6 11     INC $11
0B/AA6D: A6 11     LDX $11
0B/AA6F: E0 06     CPX #$06
0B/AA71: D0 DF     BNE $AA52
0B/AA73: A5 10     LDA $10
0B/AA75: 30 05     BMI $AA7C
0B/AA77: 20 C7 AA  JSR $AAC7
0B/AA7A: E6 05     INC $05
0B/AA7C: A2 00     LDX #$00
0B/AA7E: 86 11     STX $11
0B/AA80: B5 0A     LDA $0A,X
0B/AA82: 30 14     BMI $AA98
0B/AA84: C5 07     CMP $07
0B/AA86: 90 10     BCC $AA98
0B/AA88: 8A        TXA 
0B/AA89: 0A        ASL 
0B/AA8A: AA        TAX 
0B/AA8B: B5 20     LDA $20,X
0B/AA8D: 85 00     STA $00
0B/AA8F: B5 21     LDA $21,X
0B/AA91: 85 01     STA $01
0B/AA93: A9 F0     LDA #$F0
0B/AA95: 20 B8 AA  JSR $AAB8
0B/AA98: A6 11     LDX $11
0B/AA9A: F6 0A     INC $0A,X
0B/AA9C: E8        INX 
0B/AA9D: 86 11     STX $11
0B/AA9F: E0 06     CPX #$06
0B/AAA1: D0 DD     BNE $AA80
0B/AAA3: E6 10     INC $10
0B/AAA5: A5 10     LDA $10
0B/AAA7: 30 06     BMI $AAAF
0B/AAA9: A5 07     LDA $07
0B/AAAB: C5 10     CMP $10
0B/AAAD: 90 03     BCC $AAB2
0B/AAAF: 4C 43 AA  JMP $AA43
0B/AAB2: 20 E7 9D  JSR $9DE7
0B/AAB5: 4C 2A 9E  JMP $9E2A          ; wait for vblank (menu & oam update)

; [  ]

0B/AAB8: A0 00     LDY #$00
0B/AABA: A2 00     LDX #$00
0B/AABC: 91 00     STA ($00),Y
0B/AABE: 20 FC 9D  JSR $9DFC
0B/AAC1: E8        INX 
0B/AAC2: E4 06     CPX $06
0B/AAC4: D0 F6     BNE $AABC
0B/AAC6: 60        RTS 

; [  ]

0B/AAC7: A5 05     LDA $05
0B/AAC9: A2 20     LDX #$20
0B/AACB: 20 79 FC  JSR $FC79          ; multiply
0B/AACE: A5 04     LDA $04
0B/AAD0: 65 02     ADC $02
0B/AAD2: 85 12     STA $12
0B/AAD4: A5 03     LDA $03
0B/AAD6: 69 20     ADC #$20
0B/AAD8: 85 13     STA $13
0B/AADA: 60        RTS 
0B/AADB: AD 72 7B  LDA $7B72
0B/AADE: C9 0F     CMP #$0F
0B/AAE0: F0 0C     BEQ $AAEE
0B/AAE2: A2 05     LDX #$05
0B/AAE4: 20 72 9E  JSR $9E72          ; play battle sound effect
0B/AAE7: A9 07     LDA #$07           ; affect bg palettes 0 and 1
0B/AAE9: 85 00     STA $00
0B/AAEB: 4C 7D 9E  JMP $9E7D          ; fade out palettes
0B/AAEE: A9 40     LDA #$40           ; play song $00 (silence)
0B/AAF0: 85 E0     STA $E0
0B/AAF2: A2 06     LDX #$06
0B/AAF4: 20 72 9E  JSR $9E72          ; play battle sound effect
0B/AAF7: 20 CF 9D  JSR $9DCF
0B/AAFA: A2 90     LDX #$90
0B/AAFC: A0 70     LDY #$70
0B/AAFE: A9 80     LDA #$80
0B/AB00: 85 00     STA $00
0B/AB02: A9 9A     LDA #$9A
0B/AB04: 85 01     STA $01
0B/AB06: 20 BA FB  JSR $FBBA          ; copy sprite graphics to buffer
0B/AB09: 20 C6 9D  JSR $9DC6
0B/AB0C: A9 E0     LDA #$E0
0B/AB0E: 85 04     STA $04
0B/AB10: A9 76     LDA #$76
0B/AB12: 85 05     STA $05
0B/AB14: A9 07     LDA #$07
0B/AB16: 85 06     STA $06
0B/AB18: A9 00     LDA #$00
0B/AB1A: 85 00     STA $00
0B/AB1C: A9 18     LDA #$18
0B/AB1E: 85 01     STA $01
0B/AB20: 20 76 AB  JSR $AB76
0B/AB23: 20 3F 9E  JSR $9E3F          ; render menu and wait for vblank
0B/AB26: 20 95 AB  JSR $AB95
0B/AB29: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0B/AB2C: A2 00     LDX #$00
0B/AB2E: A0 00     LDY #$00
0B/AB30: BD 00 76  LDA $7600,X
0B/AB33: 31 04     AND ($04),Y
0B/AB35: 9D 00 76  STA $7600,X
0B/AB38: E8        INX 
0B/AB39: C8        INY 
0B/AB3A: C0 10     CPY #$10
0B/AB3C: D0 F2     BNE $AB30
0B/AB3E: E0 80     CPX #$80
0B/AB40: D0 EC     BNE $AB2E
0B/AB42: 20 76 AB  JSR $AB76
0B/AB45: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0B/AB48: 20 A2 9D  JSR $9DA2          ; copy 8 tiles to ppu
0B/AB4B: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0B/AB4E: A5 00     LDA $00
0B/AB50: 18        CLC 
0B/AB51: 69 80     ADC #$80
0B/AB53: 85 00     STA $00
0B/AB55: A5 01     LDA $01
0B/AB57: 69 00     ADC #$00
0B/AB59: 85 01     STA $01
0B/AB5B: C9 20     CMP #$20
0B/AB5D: D0 C1     BNE $AB20
0B/AB5F: A5 04     LDA $04
0B/AB61: 38        SEC 
0B/AB62: E9 10     SBC #$10
0B/AB64: 85 04     STA $04
0B/AB66: A9 04     LDA #$04
0B/AB68: 20 1F 9E  JSR $9E1F          ; wait 4 frames
0B/AB6B: C6 06     DEC $06
0B/AB6D: D0 A9     BNE $AB18
0B/AB6F: A9 00     LDA #$00
0B/AB71: 85 39     STA $39
0B/AB73: 4C 33 9E  JMP $9E33          ; wait for vblank (menu, oam & color update)

; [  ]

0B/AB76: A5 39     LDA $39
0B/AB78: 49 01     EOR #$01
0B/AB7A: 85 39     STA $39
0B/AB7C: 60        RTS 

; [  ]

0B/AB7D: 20 3F 9E  JSR $9E3F          ; render menu and wait for vblank
0B/AB80: 20 60 9E  JSR $9E60          ; copy oam data to ppu
0B/AB83: A5 12     LDA $12
0B/AB85: 85 00     STA $00
0B/AB87: A5 13     LDA $13
0B/AB89: 85 01     STA $01
0B/AB8B: A6 06     LDX $06
0B/AB8D: A9 00     LDA #$00
0B/AB8F: 20 63 9D  JSR $9D63          ; fill ppu (set address)
0B/AB92: 4C 46 FD  JMP $FD46          ; wait for first battlefield scanline

; [  ]

0B/AB95: 20 7E FD  JSR $FD7E          ; set ppu address
0B/AB98: AD 07 20  LDA $2007
0B/AB9B: A0 00     LDY #$00
0B/AB9D: AD 07 20  LDA $2007
0B/ABA0: 99 00 76  STA $7600,Y
0B/ABA3: C8        INY 
0B/ABA4: 10 F7     BPL $AB9D
0B/ABA6: 60        RTS 

0B/ABA7: 04 0E 

; [  ]

0B/ABA9: AA        TAX 
0B/ABAA: E0 01     CPX #$01
0B/ABAC: 90 01     BCC $ABAF
0B/ABAE: CA        DEX 
0B/ABAF: E0 07     CPX #$07
0B/ABB1: D0 01     BNE $ABB4
0B/ABB3: E8        INX 
0B/ABB4: A9 40     LDA #$40
0B/ABB6: 20 79 FC  JSR $FC79          ; multiply
0B/ABB9: A5 02     LDA $02
0B/ABBB: 85 00     STA $00
0B/ABBD: A9 98     LDA #$98
0B/ABBF: 65 03     ADC $03
0B/ABC1: 85 01     STA $01
0B/ABC3: A2 00     LDX #$00
0B/ABC5: A0 80     LDY #$80
0B/ABC7: 20 BA FB  JSR $FBBA          ; copy sprite graphics to buffer
0B/ABCA: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0B/ABCD: A9 00     LDA #$00
0B/ABCF: 85 00     STA $00
0B/ABD1: A9 05     LDA #$05
0B/ABD3: 85 01     STA $01
0B/ABD5: 20 C6 9D  JSR $9DC6
0B/ABD8: 20 A2 9D  JSR $9DA2          ; copy 8 tiles to ppu
0B/ABDB: 4C 46 FD  JMP $FD46          ; wait for first battlefield scanline

; [ load character graphics ]

0B/ABDE: A6 27     LDX $27            ; character id
0B/ABE0: 20 B4 9B  JSR $9BB4
0B/ABE3: A6 27     LDX $27
0B/ABE5: 20 FD AB  JSR $ABFD
0B/ABE8: 20 06 A3  JSR $A306
0B/ABEB: A6 27     LDX $27
0B/ABED: 20 65 A2  JSR $A265          ; copy character graphics to ppu
0B/ABF0: A4 27     LDY $27
0B/ABF2: 20 8F 9B  JSR $9B8F          ; init character palette id
0B/ABF5: A6 27     LDX $27
0B/ABF7: 20 3A A4  JSR $A43A          ; draw character
0B/ABFA: 4C 2A 9E  JMP $9E2A          ; wait for vblank (menu & oam update)

; [  ]

0B/ABFD: BC AE 7B  LDY $7BAE,X
0B/AC00: B9 4B 93  LDA $934B,Y
0B/AC03: 9D C2 7B  STA $7BC2,X
0B/AC06: 60        RTS 

; [  ]

0B/AC07: 85 00     STA $00
0B/AC09: BD B6 7B  LDA $7BB6,X
0B/AC0C: 85 01     STA $01
0B/AC0E: BD CA 7B  LDA $7BCA,X
0B/AC11: 85 02     STA $02
0B/AC13: BD CE 7B  LDA $7BCE,X
0B/AC16: 85 03     STA $03
0B/AC18: A0 00     LDY #$00
0B/AC1A: BD A2 7B  LDA $7BA2,X
0B/AC1D: F0 02     BEQ $AC21
0B/AC1F: A0 0C     LDY #$0C
0B/AC21: A2 00     LDX #$00
0B/AC23: 18        CLC 
0B/AC24: B9 76 92  LDA $9276,Y
0B/AC27: 65 03     ADC $03
0B/AC29: 9D 70 02  STA $0270,X
0B/AC2C: E8        INX 
0B/AC2D: A5 00     LDA $00
0B/AC2F: 9D 70 02  STA $0270,X
0B/AC32: E6 00     INC $00
0B/AC34: E8        INX 
0B/AC35: A5 01     LDA $01
0B/AC37: 9D 70 02  STA $0270,X
0B/AC3A: E8        INX 
0B/AC3B: 18        CLC 
0B/AC3C: B9 64 92  LDA $9264,Y
0B/AC3F: 65 02     ADC $02
0B/AC41: 9D 70 02  STA $0270,X
0B/AC44: E8        INX 
0B/AC45: C8        INY 
0B/AC46: E0 18     CPX #$18
0B/AC48: D0 D9     BNE $AC23
0B/AC4A: 60        RTS 

; [  ]

0B/AC4B: 86 02     STX $02
0B/AC4D: 85 03     STA $03
0B/AC4F: A6 26     LDX $26
0B/AC51: BD CA 7B  LDA $7BCA,X
0B/AC54: 85 04     STA $04
0B/AC56: BD CE 7B  LDA $7BCE,X
0B/AC59: 85 05     STA $05
0B/AC5B: A6 02     LDX $02
0B/AC5D: D0 01     BNE $AC60
0B/AC5F: 60        RTS 
0B/AC60: CA        DEX 
0B/AC61: 8A        TXA 
0B/AC62: 0A        ASL 
0B/AC63: AA        TAX 
0B/AC64: BD 95 AD  LDA $AD95,X
0B/AC67: 85 00     STA $00
0B/AC69: BD 96 AD  LDA $AD96,X
0B/AC6C: 85 01     STA $01
0B/AC6E: 6C 00 00  JMP ($0000)

; 0: 
0B/AC71: A5 03     LDA $03
0B/AC73: 29 01     AND #$01
0B/AC75: 49 01     EOR #$01
0B/AC77: 85 06     STA $06
0B/AC79: 20 64 AD  JSR $AD64
0B/AC7C: A5 06     LDA $06
0B/AC7E: 49 01     EOR #$01
0B/AC80: 20 3F AD  JSR $AD3F
0B/AC83: 4C 19 AD  JMP $AD19

; 1: 
0B/AC86: A5 03     LDA $03
0B/AC88: 29 01     AND #$01
0B/AC8A: 49 01     EOR #$01
0B/AC8C: 85 06     STA $06
0B/AC8E: 20 64 AD  JSR $AD64
0B/AC91: A6 06     LDX $06
0B/AC93: E8        INX 
0B/AC94: 8A        TXA 
0B/AC95: 20 3F AD  JSR $AD3F
0B/AC98: 4C 19 AD  JMP $AD19

; 2: 
0B/AC9B: A5 03     LDA $03
0B/AC9D: 29 01     AND #$01
0B/AC9F: D0 06     BNE $ACA7
0B/ACA1: A9 F0     LDA #$F0
0B/ACA3: 8D 88 02  STA $0288
0B/ACA6: 60        RTS 
0B/ACA7: A5 04     LDA $04
0B/ACA9: 38        SEC 
0B/ACAA: E9 05     SBC #$05
0B/ACAC: 85 06     STA $06
0B/ACAE: A5 05     LDA $05
0B/ACB0: 18        CLC 
0B/ACB1: 69 09     ADC #$09
0B/ACB3: 85 07     STA $07
0B/ACB5: A5 03     LDA $03
0B/ACB7: 29 02     AND #$02
0B/ACB9: F0 04     BEQ $ACBF
0B/ACBB: E6 06     INC $06
0B/ACBD: E6 06     INC $06
0B/ACBF: A5 07     LDA $07
0B/ACC1: 8D 88 02  STA $0288
0B/ACC4: A9 53     LDA #$53
0B/ACC6: 8D 89 02  STA $0289
0B/ACC9: A6 26     LDX $26
0B/ACCB: BD B6 7B  LDA $7BB6,X
0B/ACCE: 8D 8A 02  STA $028A
0B/ACD1: A5 06     LDA $06
0B/ACD3: 8D 8B 02  STA $028B
0B/ACD6: 60        RTS 

; 3: 
0B/ACD7: A9 03     LDA #$03
0B/ACD9: 20 3F AD  JSR $AD3F
0B/ACDC: A5 03     LDA $03
0B/ACDE: F0 08     BEQ $ACE8
0B/ACE0: A9 F0     LDA #$F0
0B/ACE2: 85 0B     STA $0B
0B/ACE4: 85 0D     STA $0D
0B/ACE6: A9 0D     LDA #$0D
0B/ACE8: 20 64 AD  JSR $AD64
0B/ACEB: 4C 19 AD  JMP $AD19

; 4: 
0B/ACEE: A9 0E     LDA #$0E
0B/ACF0: 20 64 AD  JSR $AD64
0B/ACF3: A5 1C     LDA $1C
0B/ACF5: 85 06     STA $06
0B/ACF7: 18        CLC 
0B/ACF8: 69 08     ADC #$08
0B/ACFA: 85 07     STA $07
0B/ACFC: A5 1D     LDA $1D
0B/ACFE: 85 0A     STA $0A
0B/AD00: 85 0B     STA $0B
0B/AD02: A0 10     LDY #$10
0B/AD04: A9 02     LDA #$02
0B/AD06: 4C 1D AD  JMP $AD1D

; 5: 
0B/AD09: A5 03     LDA $03
0B/AD0B: 18        CLC 
0B/AD0C: 69 03     ADC #$03
0B/AD0E: 20 64 AD  JSR $AD64
0B/AD11: A9 01     LDA #$01
0B/AD13: 20 3F AD  JSR $AD3F
0B/AD16: 4C 19 AD  JMP $AD19

; [  ]

0B/AD19: A0 00     LDY #$00
0B/AD1B: A9 04     LDA #$04
0B/AD1D: 85 00     STA $00
0B/AD1F: A2 00     LDX #$00
0B/AD21: B5 0A     LDA $0A,X
0B/AD23: 99 88 02  STA $0288,Y
0B/AD26: C8        INY 
0B/AD27: B5 0E     LDA $0E,X
0B/AD29: 99 88 02  STA $0288,Y
0B/AD2C: C8        INY 
0B/AD2D: B5 12     LDA $12,X
0B/AD2F: 99 88 02  STA $0288,Y
0B/AD32: C8        INY 
0B/AD33: B5 06     LDA $06,X
0B/AD35: 99 88 02  STA $0288,Y
0B/AD38: C8        INY 
0B/AD39: E8        INX 
0B/AD3A: E4 00     CPX $00
0B/AD3C: D0 E3     BNE $AD21
0B/AD3E: 60        RTS 

; [  ]

0B/AD3F: 0A        ASL 
0B/AD40: AA        TAX 
0B/AD41: BD AC 93  LDA $93AC,X
0B/AD44: 18        CLC 
0B/AD45: 65 04     ADC $04
0B/AD47: 85 06     STA $06
0B/AD49: 85 08     STA $08
0B/AD4B: 18        CLC 
0B/AD4C: 69 08     ADC #$08
0B/AD4E: 85 07     STA $07
0B/AD50: 85 09     STA $09
0B/AD52: BD AD 93  LDA $93AD,X
0B/AD55: 18        CLC 
0B/AD56: 65 05     ADC $05
0B/AD58: 85 0A     STA $0A
0B/AD5A: 85 0B     STA $0B
0B/AD5C: 18        CLC 
0B/AD5D: 69 08     ADC #$08
0B/AD5F: 85 0C     STA $0C
0B/AD61: 85 0D     STA $0D
0B/AD63: 60        RTS 

; [  ]

0B/AD64: A2 05     LDX #$05
0B/AD66: 20 79 FC  JSR $FC79          ; multiply
0B/AD69: A5 02     LDA $02
0B/AD6B: 69 55     ADC #$55
0B/AD6D: 85 00     STA $00
0B/AD6F: A5 03     LDA $03
0B/AD71: 69 93     ADC #$93
0B/AD73: 85 01     STA $01
0B/AD75: A0 04     LDY #$04
0B/AD77: B1 00     LDA ($00),Y
0B/AD79: 0A        ASL 
0B/AD7A: 0A        ASL 
0B/AD7B: 69 A0     ADC #$A0
0B/AD7D: 85 02     STA $02
0B/AD7F: A9 93     LDA #$93
0B/AD81: 69 00     ADC #$00
0B/AD83: 85 03     STA $03
0B/AD85: A0 03     LDY #$03
0B/AD87: B1 00     LDA ($00),Y
0B/AD89: 99 0E 00  STA $000E,Y
0B/AD8C: B1 02     LDA ($02),Y
0B/AD8E: 99 12 00  STA $0012,Y
0B/AD91: 88        DEY 
0B/AD92: 10 F3     BPL $AD87
0B/AD94: 60        RTS 

0B/AD95: AC71 AC86 AC9B ACD7 ACEE AD09

; [ asl ]

0B/ADA1: 0A        ASL 
0B/ADA2: 0A        ASL 
0B/ADA3: 0A        ASL 
0B/ADA4: 0A        ASL 
0B/ADA5: 0A        ASL 
0B/ADA6: 0A        ASL 
0B/ADA7: 0A        ASL 
0B/ADA8: 60        RTS 

; [ asl (16-bit) ]

0B/ADA9: 0A        ASL 
0B/ADAA: 26 01     ROL $01
0B/ADAC: 0A        ASL 
0B/ADAD: 26 01     ROL $01
0B/ADAF: 0A        ASL 
0B/ADB0: 26 01     ROL $01
0B/ADB2: 0A        ASL 
0B/ADB3: 26 01     ROL $01
0B/ADB5: 0A        ASL 
0B/ADB6: 26 01     ROL $01
0B/ADB8: 0A        ASL 
0B/ADB9: 26 01     ROL $01
0B/ADBB: 0A        ASL 
0B/ADBC: 26 01     ROL $01
0B/ADBE: 60        RTS 

; [ characters run off-screen ]

0B/ADBF: AD 09 93  LDA $9309           ; play song
0B/ADC2: 85 E0     STA $E0
0B/ADC4: A2 03     LDX #$03
0B/ADC6: 86 10     STX $10
0B/ADC8: A9 00     LDA #$00
0B/ADCA: 9D D6 7B  STA $7BD6,X
0B/ADCD: 9D DA 7B  STA $7BDA,X
0B/ADD0: BD AE 7B  LDA $7BAE,X
0B/ADD3: C9 03     CMP #$03
0B/ADD5: B0 08     BCS $ADDF
0B/ADD7: A9 05     LDA #$05
0B/ADD9: 9D C2 7B  STA $7BC2,X
0B/ADDC: 20 06 A3  JSR $A306
0B/ADDF: C6 10     DEC $10
0B/ADE1: A6 10     LDX $10
0B/ADE3: 10 E3     BPL $ADC8
0B/ADE5: A9 03     LDA #$03           ; repeat 3 times
0B/ADE7: 85 11     STA $11
0B/ADE9: A2 03     LDX #$03
0B/ADEB: 86 10     STX $10
0B/ADED: 20 3A A4  JSR $A43A          ; draw character
0B/ADF0: C6 10     DEC $10
0B/ADF2: A6 10     LDX $10
0B/ADF4: 10 F7     BPL $ADED
0B/ADF6: A9 18     LDA #$18           ; wait 24 frames
0B/ADF8: 85 10     STA $10
0B/ADFA: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/ADFD: C6 10     DEC $10
0B/ADFF: D0 F9     BNE $ADFA
0B/AE01: A2 03     LDX #$03
0B/AE03: BD AE 7B  LDA $7BAE,X        ; character pose
0B/AE06: C9 03     CMP #$03
0B/AE08: B0 08     BCS $AE12
0B/AE0A: BD C2 7B  LDA $7BC2,X
0B/AE0D: 49 04     EOR #$04           ; toggle victory pose
0B/AE0F: 9D C2 7B  STA $7BC2,X
0B/AE12: CA        DEX 
0B/AE13: 10 EE     BPL $AE03
0B/AE15: C6 11     DEC $11
0B/AE17: D0 D0     BNE $ADE9
0B/AE19: A2 03     LDX #$03
0B/AE1B: 86 10     STX $10
0B/AE1D: BD AE 7B  LDA $7BAE,X
0B/AE20: C9 03     CMP #$03
0B/AE22: B0 14     BCS $AE38
0B/AE24: BD CA 7B  LDA $7BCA,X
0B/AE27: D0 05     BNE $AE2E
0B/AE29: 9D C2 7B  STA $7BC2,X
0B/AE2C: F0 0A     BEQ $AE38
0B/AE2E: A9 02     LDA #$02
0B/AE30: 9D C6 7B  STA $7BC6,X
0B/AE33: A9 80     LDA #$80           ; move left
0B/AE35: 20 12 A5  JSR $A512          ; move character
0B/AE38: A6 10     LDX $10
0B/AE3A: 20 3A A4  JSR $A43A          ; draw character
0B/AE3D: C6 10     DEC $10
0B/AE3F: A6 10     LDX $10
0B/AE41: 10 DA     BPL $AE1D
0B/AE43: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/AE46: A2 03     LDX #$03
0B/AE48: A9 00     LDA #$00
0B/AE4A: 85 00     STA $00
0B/AE4C: BD AE 7B  LDA $7BAE,X
0B/AE4F: C9 03     CMP #$03
0B/AE51: B0 07     BCS $AE5A
0B/AE53: BD CA 7B  LDA $7BCA,X
0B/AE56: 05 00     ORA $00
0B/AE58: 85 00     STA $00
0B/AE5A: CA        DEX 
0B/AE5B: 10 EF     BPL $AE4C
0B/AE5D: A5 00     LDA $00
0B/AE5F: D0 B8     BNE $AE19
0B/AE61: A2 04     LDX #$04           ; hide all sprites except sprite 0
0B/AE63: A9 F0     LDA #$F0
0B/AE65: 9D 00 02  STA $0200,X
0B/AE68: E8        INX 
0B/AE69: D0 FA     BNE $AE65
0B/AE6B: 4C 2A 9E  JMP $9E2A          ; wait for vblank (menu & oam update)

; [ characters run away ]

0B/AE6E: A2 03     LDX #$03
0B/AE70: 86 10     STX $10
0B/AE72: A9 00     LDA #$00
0B/AE74: 9D D6 7B  STA $7BD6,X
0B/AE77: 9D DA 7B  STA $7BDA,X
0B/AE7A: BD AE 7B  LDA $7BAE,X
0B/AE7D: C9 03     CMP #$03
0B/AE7F: B0 08     BCS $AE89
0B/AE81: A9 01     LDA #$01
0B/AE83: 9D C2 7B  STA $7BC2,X
0B/AE86: 20 3A A4  JSR $A43A          ; draw character
0B/AE89: C6 10     DEC $10
0B/AE8B: A6 10     LDX $10
0B/AE8D: 10 E3     BPL $AE72
0B/AE8F: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/AE92: A2 03     LDX #$03
0B/AE94: 86 10     STX $10
0B/AE96: BD AE 7B  LDA $7BAE,X
0B/AE99: C9 03     CMP #$03
0B/AE9B: B0 18     BCS $AEB5
0B/AE9D: BD CA 7B  LDA $7BCA,X
0B/AEA0: C9 F0     CMP #$F0
0B/AEA2: 90 07     BCC $AEAB
0B/AEA4: A9 00     LDA #$00
0B/AEA6: 9D C2 7B  STA $7BC2,X
0B/AEA9: F0 0A     BEQ $AEB5
0B/AEAB: A9 02     LDA #$02
0B/AEAD: 9D C6 7B  STA $7BC6,X
0B/AEB0: A9 00     LDA #$00           ; move right
0B/AEB2: 20 12 A5  JSR $A512          ; move character
0B/AEB5: A6 10     LDX $10
0B/AEB7: 20 3A A4  JSR $A43A          ; draw character
0B/AEBA: C6 10     DEC $10
0B/AEBC: A6 10     LDX $10
0B/AEBE: 10 D6     BPL $AE96
0B/AEC0: A9 04     LDA #$04
0B/AEC2: 85 00     STA $00
0B/AEC4: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/AEC7: C6 00     DEC $00
0B/AEC9: D0 F9     BNE $AEC4
0B/AECB: A2 03     LDX #$03
0B/AECD: A9 00     LDA #$00
0B/AECF: 85 00     STA $00
0B/AED1: BD AE 7B  LDA $7BAE,X
0B/AED4: C9 03     CMP #$03
0B/AED6: B0 07     BCS $AEDF
0B/AED8: BD CA 7B  LDA $7BCA,X
0B/AEDB: 49 F0     EOR #$F0
0B/AEDD: 85 00     STA $00
0B/AEDF: CA        DEX 
0B/AEE0: 10 EF     BPL $AED1
0B/AEE2: A5 00     LDA $00
0B/AEE4: D0 AC     BNE $AE92
0B/AEE6: A2 04     LDX #$04
0B/AEE8: A9 F0     LDA #$F0
0B/AEEA: 9D 00 02  STA $0200,X
0B/AEED: E8        INX 
0B/AEEE: D0 FA     BNE $AEEA
0B/AEF0: F0 36     BEQ $AF28          ; return from battle

; [ battle defeat ]

0B/AEF2: AD 48 7B  LDA $7B48
0B/AEF5: C9 7F     CMP #$7F
0B/AEF7: F0 0F     BEQ $AF08          ; branch if intro battle
0B/AEF9: AD 0A 93  LDA $930A          ; play song
0B/AEFC: 85 E0     STA $E0
0B/AEFE: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/AF01: 20 34 FC  JSR $FC34          ; update joypad input
0B/AF04: A5 34     LDA $34
0B/AF06: F0 F6     BEQ $AEFE          ; wait for keypress
0B/AF08: 20 79 9E  JSR $9E79          ; fade out palettes
0B/AF0B: A9 40     LDA #$40           ; play song $00 (silence)
0B/AF0D: 85 E0     STA $E0
0B/AF0F: AD 48 7B  LDA $7B48
0B/AF12: C9 7F     CMP #$7F
0B/AF14: F0 07     BEQ $AF1D          ; branch if intro battle
0B/AF16: 68        PLA 
0B/AF17: 68        PLA 
0B/AF18: 68        PLA 
0B/AF19: 68        PLA 
0B/AF1A: 4C 2E FE  JMP $FE2E          ; reset
0B/AF1D: A9 5A     LDA #$5A           ; wait 90 frames
0B/AF1F: 85 00     STA $00
0B/AF21: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/AF24: C6 00     DEC $00
0B/AF26: D0 F9     BNE $AF21
0B/AF28: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/AF2B: 68        PLA 
0B/AF2C: 68        PLA 
0B/AF2D: 68        PLA 
0B/AF2E: 68        PLA 
0B/AF2F: 4C 0F FA  JMP $FA0F          ; return from battle

; [ load status graphics ]

0B/AF32: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0B/AF35: 20 E7 9D  JSR $9DE7
0B/AF38: 20 CF 9D  JSR $9DCF
0B/AF3B: A2 03     LDX #$03
0B/AF3D: 86 04     STX $04
0B/AF3F: BD A2 7B  LDA $7BA2,X
0B/AF42: 30 2A     BMI $AF6E
0B/AF44: BD AE 7B  LDA $7BAE,X
0B/AF47: C9 03     CMP #$03
0B/AF49: B0 23     BCS $AF6E
0B/AF4B: A9 00     LDA #$00
0B/AF4D: 85 01     STA $01
0B/AF4F: BD B2 7B  LDA $7BB2,X
0B/AF52: C9 FF     CMP #$FF
0B/AF54: F0 18     BEQ $AF6E
0B/AF56: 20 AC AD  JSR $ADAC          ; asl6 (16-bit)
0B/AF59: 18        CLC 
0B/AF5A: 69 C0     ADC #$C0           ; 0B/9BC0 (status graphics)
0B/AF5C: 85 00     STA $00
0B/AF5E: A5 01     LDA $01
0B/AF60: 69 9B     ADC #$9B
0B/AF62: 85 01     STA $01
0B/AF64: 8A        TXA 
0B/AF65: 20 A2 AD  JSR $ADA2          ; asl6
0B/AF68: AA        TAX 
0B/AF69: A0 40     LDY #$40
0B/AF6B: 20 BA FB  JSR $FBBA          ; copy sprite graphics to buffer
0B/AF6E: C6 04     DEC $04            ; next character
0B/AF70: A6 04     LDX $04
0B/AF72: 10 CB     BPL $AF3F
0B/AF74: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0B/AF77: A9 80     LDA #$80
0B/AF79: 85 00     STA $00
0B/AF7B: A9 03     LDA #$03
0B/AF7D: 85 01     STA $01
0B/AF7F: 20 C6 9D  JSR $9DC6
0B/AF82: 20 A2 9D  JSR $9DA2          ; copy 8 tiles to ppu
0B/AF85: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0B/AF88: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0B/AF8B: A9 00     LDA #$00
0B/AF8D: 85 00     STA $00
0B/AF8F: A9 04     LDA #$04
0B/AF91: 85 01     STA $01
0B/AF93: 20 C6 9D  JSR $9DC6
0B/AF96: 38        SEC 
0B/AF97: 66 02     ROR $02
0B/AF99: 20 A2 9D  JSR $9DA2          ; copy 8 tiles to ppu
0B/AF9C: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0B/AF9F: A0 19     LDY #$19           ; sprite palette 2
0B/AFA1: A2 7C     LDX #$7C
0B/AFA3: 20 03 FC  JSR $FC03          ; load battle palette
0B/AFA6: A2 03     LDX #$03
0B/AFA8: 8A        TXA 
0B/AFA9: 0A        ASL 
0B/AFAA: 0A        ASL 
0B/AFAB: 48        PHA 
0B/AFAC: 0A        ASL 
0B/AFAD: A8        TAY 
0B/AFAE: 68        PLA 
0B/AFAF: 18        CLC 
0B/AFB0: 69 38     ADC #$38
0B/AFB2: 99 81 02  STA $0281,Y
0B/AFB5: C8        INY 
0B/AFB6: C8        INY 
0B/AFB7: C8        INY 
0B/AFB8: C8        INY 
0B/AFB9: 69 01     ADC #$01
0B/AFBB: 99 81 02  STA $0281,Y
0B/AFBE: CA        DEX 
0B/AFBF: 10 E7     BPL $AFA8
0B/AFC1: A9 80     LDA #$80
0B/AFC3: 85 43     STA $43
0B/AFC5: 20 33 9E  JSR $9E33          ; wait for vblank (menu, oam & color update)
0B/AFC8: 4C 5B FD  JMP $FD5B          ; wait for first menu scanline

; [ update status animation ]

0B/AFCB: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0B/AFCE: A9 80     LDA #$80           ; $0280 (status sprites)
0B/AFD0: 85 00     STA $00
0B/AFD2: A9 02     LDA #$02
0B/AFD4: 85 01     STA $01
0B/AFD6: A2 03     LDX #$03           ; start with character slot 3
0B/AFD8: A0 0A     LDY #$0A           ; change every 10 frames
0B/AFDA: BD B2 7B  LDA $7BB2,X
0B/AFDD: C9 06     CMP #$06
0B/AFDF: D0 02     BNE $AFE3          ; branch if not confused ???
0B/AFE1: A0 05     LDY #$05           ; change every 5 frames
0B/AFE3: 84 06     STY $06
0B/AFE5: BD DF 7B  LDA $7BDF,X
0B/AFE8: C5 06     CMP $06
0B/AFEA: 90 5C     BCC $B048          ; branch if no change
0B/AFEC: A9 00     LDA #$00
0B/AFEE: 9D DF 7B  STA $7BDF,X        ; clear frame counter
0B/AFF1: BD CA 7B  LDA $7BCA,X        ; character x position
0B/AFF4: 85 02     STA $02            ; use for status sprite x position
0B/AFF6: A9 F0     LDA #$F0
0B/AFF8: BC A2 7B  LDY $7BA2,X
0B/AFFB: D0 17     BNE $B014
0B/AFFD: BC B2 7B  LDY $7BB2,X
0B/B000: 30 12     BMI $B014
0B/B002: BD CE 7B  LDA $7BCE,X        ; character y position
0B/B005: C0 00     CPY #$00
0B/B007: D0 02     BNE $B00B
0B/B009: 69 0C     ADC #$0C
0B/B00B: 38        SEC 
0B/B00C: E9 04     SBC #$04
0B/B00E: C0 06     CPY #$06
0B/B010: D0 02     BNE $B014
0B/B012: E9 04     SBC #$04
0B/B014: 85 03     STA $03            ; y position
0B/B016: 8A        TXA 
0B/B017: 0A        ASL 
0B/B018: 0A        ASL 
0B/B019: 0A        ASL 
0B/B01A: A8        TAY 
0B/B01B: A9 02     LDA #$02           ; update 2 sprites
0B/B01D: 85 04     STA $04
0B/B01F: A5 03     LDA $03
0B/B021: 91 00     STA ($00),Y        ; y position
0B/B023: C8        INY 
0B/B024: B1 00     LDA ($00),Y        ; toggle tile index
0B/B026: 49 02     EOR #$02
0B/B028: 91 00     STA ($00),Y
0B/B02A: C8        INY 
0B/B02B: A9 02     LDA #$02
0B/B02D: 91 00     STA ($00),Y        ; use sprite palette 2
0B/B02F: C8        INY 
0B/B030: A5 02     LDA $02
0B/B032: 91 00     STA ($00),Y        ; x position
0B/B034: 18        CLC 
0B/B035: 69 08     ADC #$08           ; 2nd sprite is shifted 8 pixels right
0B/B037: 85 02     STA $02
0B/B039: C8        INY 
0B/B03A: C6 04     DEC $04
0B/B03C: D0 E1     BNE $B01F
0B/B03E: BD B2 7B  LDA $7BB2,X
0B/B041: C9 06     CMP #$06
0B/B043: D0 03     BNE $B048
0B/B045: 20 51 B0  JSR $B051
0B/B048: FE DF 7B  INC $7BDF,X        ; increment frame counter
0B/B04B: CA        DEX                ; next character
0B/B04C: 10 8A     BPL $AFD8
0B/B04E: 4C 4E 9E  JMP $9E4E          ; wait for vblank (oam update)

; [  ]

0B/B051: 8A        TXA 
0B/B052: 20 A4 AD  JSR $ADA4          ; asl4
0B/B055: 85 02     STA $02
0B/B057: 8A        TXA 
0B/B058: 20 A5 AD  JSR $ADA5          ; asl3
0B/B05B: 18        CLC 
0B/B05C: 65 02     ADC $02
0B/B05E: 69 31     ADC #$31
0B/B060: A8        TAY 
0B/B061: B1 00     LDA ($00),Y
0B/B063: 49 02     EOR #$02
0B/B065: 91 00     STA ($00),Y
0B/B067: 20 FC 9D  JSR $9DFC
0B/B06A: B1 00     LDA ($00),Y
0B/B06C: 49 02     EOR #$02
0B/B06E: 91 00     STA ($00),Y
0B/B070: 60        RTS 

; [ show attack animation ]

0B/B071: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0B/B074: A6 26     LDX $26
0B/B076: E0 04     CPX #$04
0B/B078: 90 03     BCC $B07D
0B/B07A: 4C E8 B0  JMP $B0E8
0B/B07D: A5 2B     LDA $2B
0B/B07F: D0 64     BNE $B0E5
0B/B081: A6 26     LDX $26
0B/B083: 20 20 A6  JSR $A620
0B/B086: 20 69 B4  JSR $B469
0B/B089: A2 01     LDX #$01
0B/B08B: 86 22     STX $22
0B/B08D: B5 20     LDA $20,X
0B/B08F: F0 3F     BEQ $B0D0
0B/B091: 8A        TXA 
0B/B092: F0 02     BEQ $B096
0B/B094: A9 0A     LDA #$0A
0B/B096: 18        CLC 
0B/B097: 75 20     ADC $20,X
0B/B099: A8        TAY 
0B/B09A: B9 E6 93  LDA $93E6,Y
0B/B09D: 85 06     STA $06
0B/B09F: B9 EB 93  LDA $93EB,Y
0B/B0A2: 85 07     STA $07
0B/B0A4: A6 26     LDX $26
0B/B0A6: BD A2 7B  LDA $7BA2,X
0B/B0A9: F0 07     BEQ $B0B2
0B/B0AB: A2 02     LDX #$02
0B/B0AD: 86 06     STX $06
0B/B0AF: E8        INX 
0B/B0B0: 86 07     STX $07
0B/B0B2: A6 22     LDX $22
0B/B0B4: B5 20     LDA $20,X
0B/B0B6: 20 BD A2  JSR $A2BD
0B/B0B9: A6 22     LDX $22
0B/B0BB: B5 1E     LDA $1E,X
0B/B0BD: B4 20     LDY $20,X
0B/B0BF: C0 04     CPY #$04
0B/B0C1: D0 02     BNE $B0C5
0B/B0C3: A9 08     LDA #$08
0B/B0C5: 20 A9 AB  JSR $ABA9
0B/B0C8: A6 22     LDX $22
0B/B0CA: 20 36 B4  JSR $B436
0B/B0CD: 20 B5 B4  JSR $B4B5
0B/B0D0: A6 22     LDX $22
0B/B0D2: CA        DEX 
0B/B0D3: 10 B6     BPL $B08B
0B/B0D5: 20 E7 9D  JSR $9DE7
0B/B0D8: A6 26     LDX $26
0B/B0DA: 20 3A A4  JSR $A43A          ; draw character
0B/B0DD: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/B0E0: A6 26     LDX $26
0B/B0E2: 20 33 A6  JSR $A633
0B/B0E5: 4C EB B0  JMP $B0EB
0B/B0E8: 4C EB B0  JMP $B0EB

; [  ]

0B/B0EB: A6 27     LDX $27
0B/B0ED: E0 04     CPX #$04
0B/B0EF: 90 0F     BCC $B100
0B/B0F1: A6 26     LDX $26
0B/B0F3: E0 04     CPX #$04
0B/B0F5: 90 06     BCC $B0FD
0B/B0F7: A9 02     LDA #$02
0B/B0F9: 85 20     STA $20
0B/B0FB: 85 21     STA $21
0B/B0FD: 4C 84 B1  JMP $B184
0B/B100: 24 28     BIT $28
0B/B102: 50 2A     BVC $B12E
0B/B104: 30 06     BMI $B10C
0B/B106: 20 F6 B5  JSR $B5F6
0B/B109: 4C 96 B1  JMP $B196
0B/B10C: A6 24     LDX $24
0B/B10E: D0 0B     BNE $B11B
0B/B110: A2 0D     LDX #$0D
0B/B112: 20 72 9E  JSR $9E72          ; play battle sound effect
0B/B115: 20 31 B1  JSR $B131
0B/B118: 4C 96 B1  JMP $B196
0B/B11B: A2 0A     LDX #$0A
0B/B11D: 20 72 9E  JSR $9E72          ; play battle sound effect
0B/B120: A9 F0     LDA #$F0
0B/B122: 85 11     STA $11
0B/B124: A9 04     LDA #$04
0B/B126: 85 10     STA $10
0B/B128: 20 4B B1  JSR $B14B
0B/B12B: 20 31 B1  JSR $B131
0B/B12E: 4C 96 B1  JMP $B196

; [  ]

0B/B131: A9 08     LDA #$08
0B/B133: 85 17     STA $17
0B/B135: A6 27     LDX $27
0B/B137: BD CA 7B  LDA $7BCA,X
0B/B13A: 18        CLC 
0B/B13B: 69 04     ADC #$04
0B/B13D: 85 11     STA $11
0B/B13F: A9 02     LDA #$02
0B/B141: 85 10     STA $10
0B/B143: 20 4B B1  JSR $B14B
0B/B146: C6 17     DEC $17
0B/B148: D0 EB     BNE $B135
0B/B14A: 60        RTS 

; [  ]

0B/B14B: A6 27     LDX $27
0B/B14D: BD CA 7B  LDA $7BCA,X
0B/B150: 9D CA 7B  STA $7BCA,X
0B/B153: 20 3A A4  JSR $A43A          ; draw character
0B/B156: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/B159: A6 27     LDX $27
0B/B15B: BD CA 7B  LDA $7BCA,X
0B/B15E: 18        CLC 
0B/B15F: 65 10     ADC $10
0B/B161: C5 11     CMP $11
0B/B163: D0 EB     BNE $B150
0B/B165: 9D CA 7B  STA $7BCA,X
0B/B168: 20 3A A4  JSR $A43A          ; draw character
0B/B16B: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/B16E: A6 27     LDX $27
0B/B170: BD CA 7B  LDA $7BCA,X
0B/B173: 38        SEC 
0B/B174: E5 10     SBC $10
0B/B176: DD D2 7B  CMP $7BD2,X
0B/B179: D0 EA     BNE $B165
0B/B17B: 9D CA 7B  STA $7BCA,X
0B/B17E: 20 3A A4  JSR $A43A          ; draw character
0B/B181: 4C 2A 9E  JMP $9E2A          ; wait for vblank (menu & oam update)

; [  ]

0B/B184: 24 28     BIT $28
0B/B186: 50 0B     BVC $B193
0B/B188: 10 06     BPL $B190
0B/B18A: 20 99 B1  JSR $B199
0B/B18D: 4C 93 B1  JMP $B193
0B/B190: 20 F6 B5  JSR $B5F6
0B/B193: 4C 96 B1  JMP $B196
0B/B196: 4C 2A 9E  JMP $9E2A          ; wait for vblank (menu & oam update)

; [  ]

0B/B199: A9 20     LDA #$20
0B/B19B: 85 00     STA $00
0B/B19D: A9 93     LDA #$93
0B/B19F: 85 01     STA $01
0B/B1A1: A2 00     LDX #$00
0B/B1A3: A0 60     LDY #$60
0B/B1A5: 20 BA FB  JSR $FBBA          ; copy sprite graphics to buffer
0B/B1A8: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0B/B1AB: A9 40     LDA #$40
0B/B1AD: 85 00     STA $00
0B/B1AF: A9 04     LDA #$04
0B/B1B1: 85 01     STA $01
0B/B1B3: A2 60     LDX #$60
0B/B1B5: 20 BA 9D  JSR $9DBA          ; copy buffer to ppu
0B/B1B8: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0B/B1BB: A2 00     LDX #$00
0B/B1BD: 86 18     STX $18
0B/B1BF: 20 36 B4  JSR $B436
0B/B1C2: A6 18     LDX $18
0B/B1C4: B5 20     LDA $20,X
0B/B1C6: 20 D2 B1  JSR $B1D2
0B/B1C9: E6 18     INC $18
0B/B1CB: A6 18     LDX $18
0B/B1CD: E0 02     CPX #$02
0B/B1CF: D0 EE     BNE $B1BF
0B/B1D1: 60        RTS 

; [  ]

0B/B1D2: A8        TAY 
0B/B1D3: D0 01     BNE $B1D6
0B/B1D5: 60        RTS 
0B/B1D6: 24 28     BIT $28
0B/B1D8: 70 01     BVS $B1DB
0B/B1DA: 60        RTS 
0B/B1DB: 88        DEY 
0B/B1DC: D0 03     BNE $B1E1
0B/B1DE: 4C 91 B2  JMP $B291
0B/B1E1: 88        DEY 
0B/B1E2: D0 03     BNE $B1E7
0B/B1E4: 4C 44 B3  JMP $B344
0B/B1E7: 20 01 9E  JSR $9E01
0B/B1EA: 86 16     STX $16
0B/B1EC: A2 07     LDX #$07
0B/B1EE: A9 F0     LDA #$F0
0B/B1F0: 95 0A     STA $0A,X
0B/B1F2: CA        DEX 
0B/B1F3: 10 FB     BPL $B1F0
0B/B1F5: A9 01     LDA #$01
0B/B1F7: 85 1D     STA $1D
0B/B1F9: A6 9C     LDX $9C
0B/B1FB: E0 04     CPX #$04
0B/B1FD: 90 07     BCC $B206
0B/B1FF: 8A        TXA 
0B/B200: 4A        LSR 
0B/B201: 4A        LSR 
0B/B202: 85 1D     STA $1D
0B/B204: A2 03     LDX #$03
0B/B206: 86 1C     STX $1C
0B/B208: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/B20B: A6 1C     LDX $1C
0B/B20D: 86 09     STX $09
0B/B20F: A4 16     LDY $16
0B/B211: B9 9A 7B  LDA $7B9A,Y
0B/B214: 18        CLC 
0B/B215: 79 8A 7B  ADC $7B8A,Y
0B/B218: AA        TAX 
0B/B219: 69 01     ADC #$01
0B/B21B: 20 11 FD  JSR $FD11          ; random (X..A)
0B/B21E: 0A        ASL 
0B/B21F: 0A        ASL 
0B/B220: 0A        ASL 
0B/B221: A6 09     LDX $09
0B/B223: 95 0A     STA $0A,X
0B/B225: A4 16     LDY $16
0B/B227: B9 92 7B  LDA $7B92,Y
0B/B22A: AA        TAX 
0B/B22B: E8        INX 
0B/B22C: 38        SEC 
0B/B22D: 79 82 7B  ADC $7B82,Y
0B/B230: E9 02     SBC #$02
0B/B232: 20 11 FD  JSR $FD11          ; random (X..A)
0B/B235: 0A        ASL 
0B/B236: 0A        ASL 
0B/B237: 0A        ASL 
0B/B238: A6 09     LDX $09
0B/B23A: 95 0E     STA $0E,X
0B/B23C: C6 09     DEC $09
0B/B23E: 10 CF     BPL $B20F
0B/B240: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/B243: A6 16     LDX $16
0B/B245: BD 8A 7B  LDA $7B8A,X
0B/B248: 4A        LSR 
0B/B249: 85 19     STA $19
0B/B24B: 20 D7 B3  JSR $B3D7
0B/B24E: A0 84     LDY #$84
0B/B250: A9 F0     LDA #$F0
0B/B252: 20 F9 9D  JSR $9DF9          ; set oam value
0B/B255: 20 FC 9D  JSR $9DFC
0B/B258: C0 A4     CPY #$A4
0B/B25A: D0 F6     BNE $B252
0B/B25C: A2 09     LDX #$09
0B/B25E: 20 72 9E  JSR $9E72          ; play battle sound effect
0B/B261: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/B264: 20 25 B4  JSR $B425
0B/B267: 20 D7 B3  JSR $B3D7
0B/B26A: C6 19     DEC $19
0B/B26C: D0 F3     BNE $B261
0B/B26E: A0 80     LDY #$80
0B/B270: A9 F0     LDA #$F0
0B/B272: 20 F9 9D  JSR $9DF9          ; set oam value
0B/B275: 20 FC 9D  JSR $9DFC
0B/B278: C0 A0     CPY #$A0
0B/B27A: D0 F6     BNE $B272
0B/B27C: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/B27F: A9 08     LDA #$08
0B/B281: 20 1F 9E  JSR $9E1F          ; wait 8 frames
0B/B284: C6 1D     DEC $1D
0B/B286: F0 03     BEQ $B28B
0B/B288: 4C 08 B2  JMP $B208
0B/B28B: 20 E1 9D  JSR $9DE1
0B/B28E: 4C 2A 9E  JMP $9E2A          ; wait for vblank (menu & oam update)
0B/B291: A9 00     LDA #$00
0B/B293: 85 02     STA $02
0B/B295: A2 07     LDX #$07
0B/B297: 20 72 9E  JSR $9E72          ; play battle sound effect
0B/B29A: 20 E1 9D  JSR $9DE1
0B/B29D: A0 71     LDY #$71
0B/B29F: A2 00     LDX #$00
0B/B2A1: BD 61 B4  LDA $B461,X
0B/B2A4: 20 F9 9D  JSR $9DF9          ; set oam value
0B/B2A7: E8        INX 
0B/B2A8: E0 04     CPX #$04
0B/B2AA: D0 F5     BNE $B2A1
0B/B2AC: A0 72     LDY #$72
0B/B2AE: A2 00     LDX #$00
0B/B2B0: BD 65 B4  LDA $B465,X
0B/B2B3: 45 02     EOR $02
0B/B2B5: 20 F9 9D  JSR $9DF9          ; set oam value
0B/B2B8: E8        INX 
0B/B2B9: E0 04     CPX #$04
0B/B2BB: D0 F3     BNE $B2B0
0B/B2BD: A9 01     LDA #$01
0B/B2BF: A2 F8     LDX #$F8
0B/B2C1: A4 02     LDY $02
0B/B2C3: F0 04     BEQ $B2C9
0B/B2C5: A9 FE     LDA #$FE
0B/B2C7: A2 08     LDX #$08
0B/B2C9: 85 03     STA $03
0B/B2CB: 86 05     STX $05
0B/B2CD: 20 01 9E  JSR $9E01
0B/B2D0: BD 8A 7B  LDA $7B8A,X
0B/B2D3: 4A        LSR 
0B/B2D4: 18        CLC 
0B/B2D5: 65 03     ADC $03
0B/B2D7: 7D 9A 7B  ADC $7B9A,X
0B/B2DA: 0A        ASL 
0B/B2DB: 0A        ASL 
0B/B2DC: 0A        ASL 
0B/B2DD: 85 04     STA $04
0B/B2DF: A0 73     LDY #$73
0B/B2E1: A2 00     LDX #$00
0B/B2E3: A5 04     LDA $04
0B/B2E5: 20 F9 9D  JSR $9DF9          ; set oam value
0B/B2E8: 18        CLC 
0B/B2E9: A5 04     LDA $04
0B/B2EB: 65 05     ADC $05
0B/B2ED: 85 04     STA $04
0B/B2EF: E8        INX 
0B/B2F0: E0 04     CPX #$04
0B/B2F2: D0 EF     BNE $B2E3
0B/B2F4: 20 01 9E  JSR $9E01
0B/B2F7: BD 82 7B  LDA $7B82,X
0B/B2FA: 4A        LSR 
0B/B2FB: 38        SEC 
0B/B2FC: E9 02     SBC #$02
0B/B2FE: 18        CLC 
0B/B2FF: 7D 92 7B  ADC $7B92,X
0B/B302: 0A        ASL 
0B/B303: 0A        ASL 
0B/B304: 0A        ASL 
0B/B305: 85 06     STA $06
0B/B307: A0 70     LDY #$70
0B/B309: 84 07     STY $07
0B/B30B: A5 06     LDA $06
0B/B30D: 20 F9 9D  JSR $9DF9          ; set oam value
0B/B310: 18        CLC 
0B/B311: 69 08     ADC #$08
0B/B313: 85 06     STA $06
0B/B315: 84 07     STY $07
0B/B317: 20 33 9E  JSR $9E33          ; wait for vblank (menu, oam & color update)
0B/B31A: A4 07     LDY $07
0B/B31C: C0 80     CPY #$80
0B/B31E: D0 EB     BNE $B30B
0B/B320: A0 70     LDY #$70
0B/B322: 84 07     STY $07
0B/B324: A9 F0     LDA #$F0
0B/B326: 20 F9 9D  JSR $9DF9          ; set oam value
0B/B329: 84 07     STY $07
0B/B32B: 20 33 9E  JSR $9E33          ; wait for vblank (menu, oam & color update)
0B/B32E: A4 07     LDY $07
0B/B330: C0 80     CPY #$80
0B/B332: D0 F0     BNE $B324
0B/B334: A5 24     LDA $24
0B/B336: F0 0B     BEQ $B343
0B/B338: A5 02     LDA $02
0B/B33A: 49 40     EOR #$40
0B/B33C: 85 02     STA $02
0B/B33E: F0 03     BEQ $B343
0B/B340: 4C 9A B2  JMP $B29A
0B/B343: 60        RTS 
0B/B344: A9 16     LDA #$16
0B/B346: 8D C1 79  STA $79C1
0B/B349: A9 26     LDA #$26
0B/B34B: 8D C2 79  STA $79C2
0B/B34E: A9 30     LDA #$30
0B/B350: 8D C3 79  STA $79C3
0B/B353: 20 01 9E  JSR $9E01
0B/B356: 86 16     STX $16
0B/B358: A5 9C     LDA $9C
0B/B35A: 0A        ASL 
0B/B35B: 85 17     STA $17
0B/B35D: D0 01     BNE $B360
0B/B35F: 60        RTS 
0B/B360: A2 08     LDX #$08
0B/B362: 20 72 9E  JSR $9E72          ; play battle sound effect
0B/B365: 20 E1 9D  JSR $9DE1
0B/B368: A6 16     LDX $16
0B/B36A: BD 82 7B  LDA $7B82,X
0B/B36D: 20 56 B4  JSR $B456
0B/B370: 85 00     STA $00
0B/B372: A6 16     LDX $16
0B/B374: BD 92 7B  LDA $7B92,X
0B/B377: 0A        ASL 
0B/B378: 0A        ASL 
0B/B379: 0A        ASL 
0B/B37A: 65 00     ADC $00
0B/B37C: AA        TAX 
0B/B37D: A5 17     LDA $17
0B/B37F: 29 01     AND #$01
0B/B381: F0 02     BEQ $B385
0B/B383: A2 F0     LDX #$F0
0B/B385: 8A        TXA 
0B/B386: 85 0A     STA $0A
0B/B388: 85 0B     STA $0B
0B/B38A: 18        CLC 
0B/B38B: 69 08     ADC #$08
0B/B38D: 85 0C     STA $0C
0B/B38F: 85 0D     STA $0D
0B/B391: A6 16     LDX $16
0B/B393: BD 8A 7B  LDA $7B8A,X
0B/B396: 20 56 B4  JSR $B456
0B/B399: 85 00     STA $00
0B/B39B: A6 16     LDX $16
0B/B39D: BD 9A 7B  LDA $7B9A,X
0B/B3A0: 0A        ASL 
0B/B3A1: 0A        ASL 
0B/B3A2: 0A        ASL 
0B/B3A3: 65 00     ADC $00
0B/B3A5: 85 06     STA $06
0B/B3A7: 85 08     STA $08
0B/B3A9: 18        CLC 
0B/B3AA: 69 08     ADC #$08
0B/B3AC: 85 07     STA $07
0B/B3AE: 85 09     STA $09
0B/B3B0: A2 46     LDX #$46
0B/B3B2: 86 0E     STX $0E
0B/B3B4: 86 10     STX $10
0B/B3B6: E8        INX 
0B/B3B7: 86 0F     STX $0F
0B/B3B9: 86 11     STX $11
0B/B3BB: A9 02     LDA #$02
0B/B3BD: 85 12     STA $12
0B/B3BF: 85 13     STA $13
0B/B3C1: A9 82     LDA #$82
0B/B3C3: 85 14     STA $14
0B/B3C5: 85 15     STA $15
0B/B3C7: 20 19 AD  JSR $AD19
0B/B3CA: 20 33 9E  JSR $9E33          ; wait for vblank (menu, oam & color update)
0B/B3CD: A9 02     LDA #$02
0B/B3CF: 20 1F 9E  JSR $9E1F          ; wait 2 frames
0B/B3D2: C6 17     DEC $17
0B/B3D4: D0 8A     BNE $B360
0B/B3D6: 60        RTS 

; [  ]

0B/B3D7: A0 48     LDY #$48
0B/B3D9: A9 02     LDA #$02
0B/B3DB: A6 27     LDX $27
0B/B3DD: E0 04     CPX #$04
0B/B3DF: B0 09     BCS $B3EA
0B/B3E1: 09 40     ORA #$40
0B/B3E3: 84 03     STY $03
0B/B3E5: C8        INY 
0B/B3E6: 84 02     STY $02
0B/B3E8: D0 05     BNE $B3EF
0B/B3EA: 84 02     STY $02
0B/B3EC: C8        INY 
0B/B3ED: 84 03     STY $03
0B/B3EF: 85 00     STA $00
0B/B3F1: A0 00     LDY #$00
0B/B3F3: A2 00     LDX #$00
0B/B3F5: B5 0E     LDA $0E,X
0B/B3F7: 99 80 02  STA $0280,Y
0B/B3FA: 99 84 02  STA $0284,Y
0B/B3FD: A5 02     LDA $02
0B/B3FF: 99 81 02  STA $0281,Y
0B/B402: A5 03     LDA $03
0B/B404: 99 85 02  STA $0285,Y
0B/B407: A5 00     LDA $00
0B/B409: 99 82 02  STA $0282,Y
0B/B40C: 99 86 02  STA $0286,Y
0B/B40F: B5 0A     LDA $0A,X
0B/B411: 99 83 02  STA $0283,Y
0B/B414: 18        CLC 
0B/B415: 69 08     ADC #$08
0B/B417: 99 87 02  STA $0287,Y
0B/B41A: 98        TYA 
0B/B41B: 18        CLC 
0B/B41C: 69 08     ADC #$08
0B/B41E: A8        TAY 
0B/B41F: E8        INX 
0B/B420: E0 04     CPX #$04
0B/B422: D0 D1     BNE $B3F5
0B/B424: 60        RTS 

; [  ]

0B/B425: A2 03     LDX #$03
0B/B427: B5 0A     LDA $0A,X
0B/B429: C9 F0     CMP #$F0
0B/B42B: F0 05     BEQ $B432
0B/B42D: 38        SEC 
0B/B42E: E9 08     SBC #$08
0B/B430: 95 0A     STA $0A,X
0B/B432: CA        DEX 
0B/B433: 10 F2     BPL $B427
0B/B435: 60        RTS 

; [  ]

0B/B436: 86 00     STX $00
0B/B438: B4 20     LDY $20,X
0B/B43A: AE B1 7C  LDX $7CB1
0B/B43D: C0 04     CPY #$04
0B/B43F: F0 0D     BEQ $B44E
0B/B441: A6 00     LDX $00
0B/B443: B5 D0     LDA $D0,X
0B/B445: 38        SEC 
0B/B446: E9 0A     SBC #$0A
0B/B448: 30 09     BMI $B453
0B/B44A: A8        TAY 
0B/B44B: BE 88 8D  LDX $8D88,Y
0B/B44E: A0 19     LDY #$19           ; sprite palette 2
0B/B450: 20 03 FC  JSR $FC03          ; load battle palette
0B/B453: 4C 33 9E  JMP $9E33          ; wait for vblank (menu, oam & color update)

; [  ]

0B/B456: 38        SEC 
0B/B457: E9 02     SBC #$02
0B/B459: A2 00     LDX #$00
0B/B45B: 20 11 FD  JSR $FD11          ; random (X..A)
0B/B45E: 4C A5 AD  JMP $ADA5          ; asl3

0B/B461: 45 44 44 45
0B/B465: 02 02 02 C2

; [  ]

0B/B469: A5 26     LDA $26
0B/B46B: 20 A2 AD  JSR $ADA2          ; asl6
0B/B46E: AA        TAX 
0B/B46F: BD 00 61  LDA $6100,X
0B/B472: 29 80     AND #$80
0B/B474: 85 25     STA $25
0B/B476: BD 1C 61  LDA $611C,X
0B/B479: 38        SEC 
0B/B47A: E9 30     SBC #$30
0B/B47C: 85 D0     STA $D0
0B/B47E: BD 1D 61  LDA $611D,X
0B/B481: 38        SEC 
0B/B482: E9 30     SBC #$30
0B/B484: 85 D1     STA $D1
0B/B486: A9 00     LDA #$00
0B/B488: 85 20     STA $20
0B/B48A: 85 21     STA $21
0B/B48C: 24 28     BIT $28
0B/B48E: 30 05     BMI $B495
0B/B490: A9 04     LDA #$04
0B/B492: 85 20     STA $20
0B/B494: 60        RTS 
0B/B495: 20 C7 FD  JSR $FDC7          ; get equipped weapon types
0B/B498: A2 01     LDX #$01
0B/B49A: B4 1E     LDY $1E,X
0B/B49C: B9 DE 93  LDA $93DE,Y
0B/B49F: 95 20     STA $20,X
0B/B4A1: CA        DEX 
0B/B4A2: 10 F6     BPL $B49A
0B/B4A4: A5 1E     LDA $1E
0B/B4A6: 05 1F     ORA $1F
0B/B4A8: C9 02     CMP #$02
0B/B4AA: B0 08     BCS $B4B4
0B/B4AC: A2 02     LDX #$02
0B/B4AE: A0 00     LDY #$00
0B/B4B0: 86 20     STX $20
0B/B4B2: 84 21     STY $21
0B/B4B4: 60        RTS 

; [  ]

0B/B4B5: A6 26     LDX $26
0B/B4B7: 20 DA 9D  JSR $9DDA          ; hide character sprite
0B/B4BA: 20 E1 9D  JSR $9DE1
0B/B4BD: 86 16     STX $16
0B/B4BF: A9 04     LDA #$04
0B/B4C1: 85 17     STA $17
0B/B4C3: A6 22     LDX $22
0B/B4C5: 8A        TXA 
0B/B4C6: F0 02     BEQ $B4CA
0B/B4C8: A9 05     LDA #$05
0B/B4CA: 18        CLC 
0B/B4CB: 75 20     ADC $20,X
0B/B4CD: AA        TAX 
0B/B4CE: BC DE B5  LDY $B5DE,X
0B/B4D1: D0 01     BNE $B4D4
0B/B4D3: 60        RTS 
0B/B4D4: 88        DEY 
0B/B4D5: 98        TYA 
0B/B4D6: 0A        ASL 
0B/B4D7: AA        TAX 
0B/B4D8: BD D4 B5  LDA $B5D4,X
0B/B4DB: 85 00     STA $00
0B/B4DD: BD D5 B5  LDA $B5D5,X
0B/B4E0: 85 01     STA $01
0B/B4E2: 6C 00 00  JMP ($0000)

0B/B4E5: C8        INY 
0B/B4E6: 84 19     STY $19
0B/B4E8: A9 04     LDA #$04
0B/B4EA: 85 18     STA $18
0B/B4EC: A2 00     LDX #$00
0B/B4EE: 20 AB B5  JSR $B5AB
0B/B4F1: A5 16     LDA $16
0B/B4F3: 49 01     EOR #$01
0B/B4F5: 85 16     STA $16
0B/B4F7: C6 18     DEC $18
0B/B4F9: D0 F1     BNE $B4EC
0B/B4FB: 60        RTS 
0B/B4FC: C8        INY 
0B/B4FD: 84 19     STY $19
0B/B4FF: A5 9C     LDA $9C
0B/B501: 18        CLC 
0B/B502: 69 02     ADC #$02
0B/B504: 0A        ASL 
0B/B505: 85 18     STA $18
0B/B507: A2 01     LDX #$01
0B/B509: 20 AB B5  JSR $B5AB
0B/B50C: E6 16     INC $16
0B/B50E: C6 18     DEC $18
0B/B510: D0 F5     BNE $B507
0B/B512: 60        RTS 
0B/B513: C8        INY 
0B/B514: 84 19     STY $19
0B/B516: A6 26     LDX $26
0B/B518: BD A2 7B  LDA $7BA2,X
0B/B51B: F0 04     BEQ $B521
0B/B51D: A0 03     LDY #$03
0B/B51F: D0 DC     BNE $B4FD
0B/B521: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/B524: A6 26     LDX $26
0B/B526: BD CA 7B  LDA $7BCA,X
0B/B529: 38        SEC 
0B/B52A: E9 0C     SBC #$0C
0B/B52C: 85 1C     STA $1C
0B/B52E: BD CE 7B  LDA $7BCE,X
0B/B531: 18        CLC 
0B/B532: 69 04     ADC #$04
0B/B534: 85 1D     STA $1D
0B/B536: A9 01     LDA #$01
0B/B538: 85 16     STA $16
0B/B53A: A2 05     LDX #$05
0B/B53C: 20 4B AC  JSR $AC4B
0B/B53F: 20 AE B5  JSR $B5AE
0B/B542: A9 00     LDA #$00
0B/B544: 85 16     STA $16
0B/B546: A9 08     LDA #$08
0B/B548: 85 17     STA $17
0B/B54A: A5 1C     LDA $1C
0B/B54C: 18        CLC 
0B/B54D: 69 08     ADC #$08
0B/B54F: 85 1C     STA $1C
0B/B551: A2 05     LDX #$05
0B/B553: 20 4B AC  JSR $AC4B
0B/B556: 20 AE B5  JSR $B5AE
0B/B559: A2 02     LDX #$02
0B/B55B: 20 72 9E  JSR $9E72          ; play battle sound effect
0B/B55E: A9 01     LDA #$01
0B/B560: 85 17     STA $17
0B/B562: A2 05     LDX #$05
0B/B564: 20 4B AC  JSR $AC4B
0B/B567: 20 AE B5  JSR $B5AE
0B/B56A: E6 16     INC $16
0B/B56C: A5 1C     LDA $1C
0B/B56E: 38        SEC 
0B/B56F: E9 08     SBC #$08
0B/B571: 85 1C     STA $1C
0B/B573: C9 A0     CMP #$A0
0B/B575: B0 EB     BCS $B562
0B/B577: 60        RTS 
0B/B578: C8        INY 
0B/B579: C8        INY 
0B/B57A: 84 19     STY $19
0B/B57C: A2 03     LDX #$03
0B/B57E: 20 72 9E  JSR $9E72          ; play battle sound effect
0B/B581: A2 0C     LDX #$0C
0B/B583: 86 18     STX $18
0B/B585: A5 18     LDA $18
0B/B587: 29 01     AND #$01
0B/B589: F0 04     BEQ $B58F
0B/B58B: A9 0F     LDA #$0F
0B/B58D: D0 03     BNE $B592
0B/B58F: AD C1 79  LDA $79C1
0B/B592: 20 71 9D  JSR $9D71
0B/B595: A6 18     LDX $18
0B/B597: BD E8 B5  LDA $B5E8,X
0B/B59A: 85 16     STA $16
0B/B59C: 20 AE B5  JSR $B5AE
0B/B59F: C6 18     DEC $18
0B/B5A1: 10 E2     BPL $B585
0B/B5A3: A9 0F     LDA #$0F
0B/B5A5: 20 71 9D  JSR $9D71
0B/B5A8: 4C 33 9E  JMP $9E33          ; wait for vblank (menu, oam & color update)
0B/B5AB: 20 72 9E  JSR $9E72          ; play battle sound effect
0B/B5AE: A6 26     LDX $26
0B/B5B0: A0 38     LDY #$38
0B/B5B2: A5 16     LDA $16
0B/B5B4: 29 01     AND #$01
0B/B5B6: F0 02     BEQ $B5BA
0B/B5B8: A0 3E     LDY #$3E
0B/B5BA: 98        TYA 
0B/B5BB: 20 07 AC  JSR $AC07
0B/B5BE: A6 26     LDX $26
0B/B5C0: BD A2 7B  LDA $7BA2,X
0B/B5C3: D0 07     BNE $B5CC
0B/B5C5: A6 19     LDX $19
0B/B5C7: A5 16     LDA $16
0B/B5C9: 20 4B AC  JSR $AC4B
0B/B5CC: 20 33 9E  JSR $9E33          ; wait for vblank (menu, oam & color update)
0B/B5CF: A5 17     LDA $17            ; number of frames to wait
0B/B5D1: 4C 1F 9E  JMP $9E1F          ; wait

0B/B5D4: B4E5 B4E5 B4FC B513 B578

0B/B5DE: 00 01 03 04 05 00 02 03 04 05 09 08 07 06 05 04
0B/B5EE: 03 02 05 04 03 02 01 00

; [  ]

0B/B5F6: 20 FF B5  JSR $B5FF
0B/B5F9: 20 E7 9D  JSR $9DE7
0B/B5FC: 4C 33 9E  JMP $9E33          ; wait for vblank (menu, oam & color update)

; [  ]

0B/B5FF: AD B0 7C  LDA $7CB0
0B/B602: C9 18     CMP #$18
0B/B604: B0 39     BCS $B63F
0B/B606: 0A        ASL 
0B/B607: AA        TAX 
0B/B608: BD 62 B6  LDA $B662,X        ; pointers to magic animation graphics
0B/B60B: 85 00     STA $00
0B/B60D: BD 63 B6  LDA $B663,X
0B/B610: 85 01     STA $01
0B/B612: A2 00     LDX #$00           ; load 12 tiles
0B/B614: A0 C0     LDY #$C0
0B/B616: 20 BA FB  JSR $FBBA          ; copy sprite graphics to buffer
0B/B619: A9 40     LDA #$40
0B/B61B: 85 00     STA $00
0B/B61D: A9 04     LDA #$04
0B/B61F: 85 01     STA $01
0B/B621: 20 C6 9D  JSR $9DC6
0B/B624: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0B/B627: A2 60     LDX #$60
0B/B629: 20 BD 9D  JSR $9DBD
0B/B62C: 98        TYA 
0B/B62D: 18        CLC 
0B/B62E: 65 02     ADC $02
0B/B630: 85 02     STA $02
0B/B632: 98        TYA 
0B/B633: 18        CLC 
0B/B634: 65 00     ADC $00
0B/B636: 85 00     STA $00
0B/B638: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0B/B63B: A5 00     LDA $00
0B/B63D: D0 E5     BNE $B624
0B/B63F: 20 E7 9D  JSR $9DE7
0B/B642: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/B645: AE B1 7C  LDX $7CB1
0B/B648: A0 19     LDY #$19           ; sprite palette 2
0B/B64A: 20 03 FC  JSR $FC03          ; load battle palette
0B/B64D: 20 33 9E  JSR $9E33          ; wait for vblank (menu, oam & color update)
0B/B650: AD B0 7C  LDA $7CB0
0B/B653: 0A        ASL 
0B/B654: AA        TAX 
0B/B655: BD 92 B6  LDA $B692,X        ; magic animation jump table
0B/B658: 85 00     STA $00
0B/B65A: BD 93 B6  LDA $B693,X
0B/B65D: 85 01     STA $01
0B/B65F: 6C 00 00  JMP ($0000)

; pointers to magic animation graphics
0B/B662: 9700 97C0 9680 9580 9600 9540 9500 9000
0B/B672: 9400 95C0 9380 94E0 9480 9000 9000 9000
0B/B682: 9DC0 9D80 9000 9000 9000 8860 9360 8860

; magic animation jump table
0B/B692: B8FB B9B4 BA3D BA53 BA56 BA65 BB61 BBAC
0B/B6A2: BBD3 BBE9 BBF8 BC07 BC16 BED8 BED8 BED8
0B/B6B2: BCC0 BCFF BD31 BD31 BD31 BD9D BEB0 BEC4

0B/B6C2: 60        RTS 
0B/B6C3: A5 29     LDA $29
0B/B6C5: C9 08     CMP #$08
0B/B6C7: 90 02     BCC $B6CB
0B/B6C9: A9 07     LDA #$07
0B/B6CB: 09 01     ORA #$01
0B/B6CD: 85 18     STA $18
0B/B6CF: A2 01     LDX #$01
0B/B6D1: 20 E5 B8  JSR $B8E5
0B/B6D4: 20 FE B6  JSR $B6FE
0B/B6D7: A6 18     LDX $18
0B/B6D9: 20 14 B8  JSR $B814
0B/B6DC: A5 14     LDA $14
0B/B6DE: A6 18     LDX $18
0B/B6E0: 20 4C B8  JSR $B84C
0B/B6E3: 20 6B 9E  JSR $9E6B          ; play magic sound effect
0B/B6E6: A5 12     LDA $12
0B/B6E8: 20 AD B8  JSR $B8AD
0B/B6EB: 20 6A B8  JSR $B86A
0B/B6EE: A5 13     LDA $13            ; number of frames to wait
0B/B6F0: 20 1F 9E  JSR $9E1F          ; wait
0B/B6F3: 20 27 B7  JSR $B727
0B/B6F6: 20 46 B7  JSR $B746
0B/B6F9: C9 FF     CMP #$FF
0B/B6FB: F0 EE     BEQ $B6EB
0B/B6FD: 60        RTS 
0B/B6FE: A9 08     LDA #$08
0B/B700: 85 00     STA $00
0B/B702: 85 01     STA $01
0B/B704: 20 01 9E  JSR $9E01
0B/B707: BD 8A 7B  LDA $7B8A,X
0B/B70A: 0A        ASL 
0B/B70B: 0A        ASL 
0B/B70C: 85 02     STA $02
0B/B70E: BD 82 7B  LDA $7B82,X
0B/B711: 0A        ASL 
0B/B712: 0A        ASL 
0B/B713: 85 03     STA $03
0B/B715: 20 C8 B7  JSR $B7C8
0B/B718: A6 27     LDX $27
0B/B71A: E0 04     CPX #$04
0B/B71C: 90 08     BCC $B726
0B/B71E: C6 0C     DEC $0C
0B/B720: C6 0C     DEC $0C
0B/B722: C6 0D     DEC $0D
0B/B724: C6 0D     DEC $0D
0B/B726: 60        RTS 
0B/B727: A2 00     LDX #$00
0B/B729: FE 30 76  INC $7630,X
0B/B72C: BD 30 76  LDA $7630,X
0B/B72F: 30 0C     BMI $B73D
0B/B731: FE 20 76  INC $7620,X
0B/B734: C5 1B     CMP $1B
0B/B736: 90 05     BCC $B73D
0B/B738: A9 80     LDA #$80
0B/B73A: 9D 20 76  STA $7620,X
0B/B73D: 9D 30 76  STA $7630,X
0B/B740: E8        INX 
0B/B741: E4 18     CPX $18
0B/B743: D0 E4     BNE $B729
0B/B745: 60        RTS 
0B/B746: A2 00     LDX #$00
0B/B748: 8A        TXA 
0B/B749: BC 20 76  LDY $7620,X
0B/B74C: C0 80     CPY #$80
0B/B74E: F0 02     BEQ $B752
0B/B750: A9 FF     LDA #$FF
0B/B752: E8        INX 
0B/B753: E4 18     CPX $18
0B/B755: D0 F2     BNE $B749
0B/B757: 60        RTS 
0B/B758: BD FA 93  LDA $93FA,X
0B/B75B: 18        CLC 
0B/B75C: 65 01     ADC $01
0B/B75E: 99 00 02  STA $0200,Y
0B/B761: BD 7A 94  LDA $947A,X
0B/B764: 99 01 02  STA $0201,Y
0B/B767: BD FA 94  LDA $94FA,X
0B/B76A: 99 02 02  STA $0202,Y
0B/B76D: BD 7A 95  LDA $957A,X
0B/B770: 18        CLC 
0B/B771: 65 00     ADC $00
0B/B773: 99 03 02  STA $0203,Y
0B/B776: 4C FC 9D  JMP $9DFC
0B/B779: A0 10     LDY #$10
0B/B77B: A5 01     LDA $01
0B/B77D: 99 00 02  STA $0200,Y
0B/B780: A5 02     LDA $02
0B/B782: 99 01 02  STA $0201,Y
0B/B785: A9 02     LDA #$02
0B/B787: 99 02 02  STA $0202,Y
0B/B78A: A5 00     LDA $00
0B/B78C: 99 03 02  STA $0203,Y
0B/B78F: 4C FC 9D  JMP $9DFC
0B/B792: 20 E7 9D  JSR $9DE7
0B/B795: 20 01 9E  JSR $9E01
0B/B798: BD 8A 7B  LDA $7B8A,X
0B/B79B: 4A        LSR 
0B/B79C: 18        CLC 
0B/B79D: 7D 9A 7B  ADC $7B9A,X
0B/B7A0: 0A        ASL 
0B/B7A1: 0A        ASL 
0B/B7A2: 0A        ASL 
0B/B7A3: 85 00     STA $00
0B/B7A5: BD 82 7B  LDA $7B82,X
0B/B7A8: 4A        LSR 
0B/B7A9: 18        CLC 
0B/B7AA: 7D 92 7B  ADC $7B92,X
0B/B7AD: 0A        ASL 
0B/B7AE: 0A        ASL 
0B/B7AF: 0A        ASL 
0B/B7B0: 85 01     STA $01
0B/B7B2: BC 7A 7B  LDY $7B7A,X
0B/B7B5: BE 56 7B  LDX $7B56,Y
0B/B7B8: A0 19     LDY #$19           ; sprite palette 2
0B/B7BA: 20 03 FC  JSR $FC03          ; load battle palette
0B/B7BD: A9 00     LDA #$00
0B/B7BF: 85 03     STA $03
0B/B7C1: A9 10     LDA #$10
0B/B7C3: 85 04     STA $04
0B/B7C5: 4C 33 9E  JMP $9E33          ; wait for vblank (menu, oam & color update)
0B/B7C8: 20 D4 B7  JSR $B7D4
0B/B7CB: 85 0A     STA $0A
0B/B7CD: 84 0B     STY $0B
0B/B7CF: 85 00     STA $00
0B/B7D1: 84 01     STY $01
0B/B7D3: 60        RTS 
0B/B7D4: A6 27     LDX $27
0B/B7D6: E0 04     CPX #$04
0B/B7D8: B0 15     BCS $B7EF
0B/B7DA: A0 03     LDY #$03
0B/B7DC: 84 0D     STY $0D
0B/B7DE: 88        DEY 
0B/B7DF: 84 0C     STY $0C
0B/B7E1: BD CE 7B  LDA $7BCE,X
0B/B7E4: 38        SEC 
0B/B7E5: E5 01     SBC $01
0B/B7E7: A8        TAY 
0B/B7E8: BD CA 7B  LDA $7BCA,X
0B/B7EB: 38        SEC 
0B/B7EC: E5 00     SBC $00
0B/B7EE: 60        RTS 
0B/B7EF: 20 03 9E  JSR $9E03
0B/B7F2: BD 82 7B  LDA $7B82,X
0B/B7F5: 85 0D     STA $0D
0B/B7F7: 4A        LSR 
0B/B7F8: 18        CLC 
0B/B7F9: 7D 92 7B  ADC $7B92,X
0B/B7FC: 0A        ASL 
0B/B7FD: 0A        ASL 
0B/B7FE: 0A        ASL 
0B/B7FF: 38        SEC 
0B/B800: E5 03     SBC $03
0B/B802: A8        TAY 
0B/B803: BD 8A 7B  LDA $7B8A,X
0B/B806: 85 0C     STA $0C
0B/B808: 4A        LSR 
0B/B809: 18        CLC 
0B/B80A: 7D 9A 7B  ADC $7B9A,X
0B/B80D: 0A        ASL 
0B/B80E: 0A        ASL 
0B/B80F: 0A        ASL 
0B/B810: 38        SEC 
0B/B811: E5 02     SBC $02
0B/B813: 60        RTS 
0B/B814: CA        DEX 
0B/B815: 86 09     STX $09
0B/B817: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/B81A: A2 00     LDX #$00
0B/B81C: A5 0C     LDA $0C
0B/B81E: 20 11 FD  JSR $FD11          ; random (X..A)
0B/B821: A4 09     LDY $09
0B/B823: 0A        ASL 
0B/B824: 0A        ASL 
0B/B825: 0A        ASL 
0B/B826: 65 0A     ADC $0A
0B/B828: 99 00 76  STA $7600,Y
0B/B82B: A2 00     LDX #$00
0B/B82D: A5 0D     LDA $0D
0B/B82F: 20 11 FD  JSR $FD11          ; random (X..A)
0B/B832: A4 09     LDY $09
0B/B834: 0A        ASL 
0B/B835: 0A        ASL 
0B/B836: 0A        ASL 
0B/B837: 65 0B     ADC $0B
0B/B839: 99 10 76  STA $7610,Y
0B/B83C: A5 09     LDA $09
0B/B83E: 29 02     AND #$02
0B/B840: D0 03     BNE $B845
0B/B842: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/B845: C6 09     DEC $09
0B/B847: 10 D1     BPL $B81A
0B/B849: 4C 2A 9E  JMP $9E2A          ; wait for vblank (menu & oam update)
0B/B84C: 85 1C     STA $1C
0B/B84E: CA        DEX 
0B/B84F: 86 1D     STX $1D
0B/B851: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/B854: A2 00     LDX #$00
0B/B856: A5 1C     LDA $1C
0B/B858: 20 11 FD  JSR $FD11          ; random (X..A)
0B/B85B: 38        SEC 
0B/B85C: E5 1C     SBC $1C
0B/B85E: A6 1D     LDX $1D
0B/B860: 9D 30 76  STA $7630,X
0B/B863: C6 1D     DEC $1D
0B/B865: 10 ED     BPL $B854
0B/B867: 4C 2A 9E  JMP $9E2A          ; wait for vblank (menu & oam update)
0B/B86A: 20 E7 9D  JSR $9DE7
0B/B86D: A9 10     LDA #$10
0B/B86F: 85 19     STA $19
0B/B871: A0 00     LDY #$00
0B/B873: 84 02     STY $02
0B/B875: B9 00 76  LDA $7600,Y
0B/B878: 85 00     STA $00
0B/B87A: B9 10 76  LDA $7610,Y
0B/B87D: 85 01     STA $01
0B/B87F: A5 1A     LDA $1A
0B/B881: 85 03     STA $03
0B/B883: B9 30 76  LDA $7630,Y
0B/B886: 30 1D     BMI $B8A5
0B/B888: B9 20 76  LDA $7620,Y
0B/B88B: 30 18     BMI $B8A5
0B/B88D: 20 A4 AD  JSR $ADA4          ; asl4
0B/B890: AA        TAX 
0B/B891: 86 04     STX $04
0B/B893: BD 40 76  LDA $7640,X
0B/B896: AA        TAX 
0B/B897: A4 19     LDY $19
0B/B899: 20 58 B7  JSR $B758
0B/B89C: 84 19     STY $19
0B/B89E: A6 04     LDX $04
0B/B8A0: E8        INX 
0B/B8A1: C6 03     DEC $03
0B/B8A3: D0 EC     BNE $B891
0B/B8A5: A4 02     LDY $02
0B/B8A7: C8        INY 
0B/B8A8: C4 18     CPY $18
0B/B8AA: D0 C7     BNE $B873
0B/B8AC: 60        RTS 
0B/B8AD: 0A        ASL 
0B/B8AE: AA        TAX 
0B/B8AF: BD 25 BF  LDA $BF25,X
0B/B8B2: 85 1C     STA $1C
0B/B8B4: BD 26 BF  LDA $BF26,X
0B/B8B7: 85 1D     STA $1D
0B/B8B9: A0 00     LDY #$00
0B/B8BB: B1 1C     LDA ($1C),Y
0B/B8BD: 85 1A     STA $1A
0B/B8BF: C8        INY 
0B/B8C0: B1 1C     LDA ($1C),Y
0B/B8C2: 85 1B     STA $1B
0B/B8C4: 85 00     STA $00
0B/B8C6: C8        INY 
0B/B8C7: A2 00     LDX #$00
0B/B8C9: A5 1A     LDA $1A
0B/B8CB: 85 01     STA $01
0B/B8CD: B1 1C     LDA ($1C),Y
0B/B8CF: 9D 40 76  STA $7640,X
0B/B8D2: C8        INY 
0B/B8D3: E8        INX 
0B/B8D4: C6 01     DEC $01
0B/B8D6: D0 F5     BNE $B8CD
0B/B8D8: CA        DEX 
0B/B8D9: 8A        TXA 
0B/B8DA: 29 F0     AND #$F0
0B/B8DC: 18        CLC 
0B/B8DD: 69 10     ADC #$10
0B/B8DF: AA        TAX 
0B/B8E0: C6 00     DEC $00
0B/B8E2: D0 E5     BNE $B8C9
0B/B8E4: 60        RTS 
0B/B8E5: A0 20     LDY #$20
0B/B8E7: A9 FF     LDA #$FF
0B/B8E9: 99 00 76  STA $7600,Y
0B/B8EC: C8        INY 
0B/B8ED: C0 30     CPY #$30
0B/B8EF: D0 F8     BNE $B8E9
0B/B8F1: 8A        TXA 
0B/B8F2: 99 00 76  STA $7600,Y
0B/B8F5: C8        INY 
0B/B8F6: C0 40     CPY #$40
0B/B8F8: D0 F8     BNE $B8F2
0B/B8FA: 60        RTS 

0B/B8FB: A5 29     LDA $29
0B/B8FD: C9 08     CMP #$08
0B/B8FF: 90 02     BCC $B903
0B/B901: A9 08     LDA #$08
0B/B903: 4A        LSR 
0B/B904: 85 06     STA $06
0B/B906: 4A        LSR 
0B/B907: 85 07     STA $07
0B/B909: A9 10     LDA #$10
0B/B90B: 85 00     STA $00
0B/B90D: A9 E8     LDA #$E8
0B/B90F: 85 01     STA $01
0B/B911: A9 18     LDA #$18
0B/B913: 85 02     STA $02
0B/B915: A9 00     LDA #$00
0B/B917: 85 03     STA $03
0B/B919: 20 C8 B7  JSR $B7C8
0B/B91C: A5 27     LDA $27
0B/B91E: C9 04     CMP #$04
0B/B920: 90 09     BCC $B92B
0B/B922: BD 82 7B  LDA $7B82,X
0B/B925: 0A        ASL 
0B/B926: 0A        ASL 
0B/B927: 65 0B     ADC $0B
0B/B929: 85 0B     STA $0B
0B/B92B: A9 02     LDA #$02
0B/B92D: 38        SEC 
0B/B92E: E5 07     SBC $07
0B/B930: 0A        ASL 
0B/B931: 0A        ASL 
0B/B932: 0A        ASL 
0B/B933: 65 0A     ADC $0A
0B/B935: 85 0A     STA $0A
0B/B937: A6 06     LDX $06
0B/B939: BD AA B9  LDA $B9AA,X
0B/B93C: 85 0C     STA $0C
0B/B93E: 85 17     STA $17
0B/B940: BD AF B9  LDA $B9AF,X
0B/B943: 85 0D     STA $0D
0B/B945: 85 16     STA $16
0B/B947: 8A        TXA 
0B/B948: 0A        ASL 
0B/B949: 69 03     ADC #$03
0B/B94B: A2 07     LDX #$07
0B/B94D: 95 0E     STA $0E,X
0B/B94F: 49 01     EOR #$01
0B/B951: CA        DEX 
0B/B952: 10 F9     BPL $B94D
0B/B954: 20 6B 9E  JSR $9E6B          ; play magic sound effect
0B/B957: A2 00     LDX #$00
0B/B959: 86 18     STX $18
0B/B95B: 20 E7 9D  JSR $9DE7
0B/B95E: A5 0A     LDA $0A
0B/B960: 85 08     STA $08
0B/B962: A4 07     LDY $07
0B/B964: C8        INY 
0B/B965: 84 19     STY $19
0B/B967: A0 10     LDY #$10
0B/B969: A6 18     LDX $18
0B/B96B: B5 0C     LDA $0C,X
0B/B96D: 4A        LSR 
0B/B96E: 08        PHP 
0B/B96F: 0A        ASL 
0B/B970: 69 02     ADC #$02
0B/B972: 85 1A     STA $1A
0B/B974: 4A        LSR 
0B/B975: 0A        ASL 
0B/B976: 0A        ASL 
0B/B977: 0A        ASL 
0B/B978: 85 02     STA $02
0B/B97A: A5 0B     LDA $0B
0B/B97C: 38        SEC 
0B/B97D: E5 02     SBC $02
0B/B97F: 85 01     STA $01
0B/B981: A5 08     LDA $08
0B/B983: 85 00     STA $00
0B/B985: 18        CLC 
0B/B986: 69 10     ADC #$10
0B/B988: 85 08     STA $08
0B/B98A: A2 00     LDX #$00
0B/B98C: 28        PLP 
0B/B98D: 90 02     BCC $B991
0B/B98F: A2 0C     LDX #$0C
0B/B991: 20 58 B7  JSR $B758
0B/B994: E8        INX 
0B/B995: C6 1A     DEC $1A
0B/B997: D0 F8     BNE $B991
0B/B999: C6 19     DEC $19
0B/B99B: D0 CC     BNE $B969
0B/B99D: A9 03     LDA #$03
0B/B99F: 20 1F 9E  JSR $9E1F          ; wait 3 frames
0B/B9A2: A6 18     LDX $18
0B/B9A4: E8        INX 
0B/B9A5: E0 0C     CPX #$0C
0B/B9A7: D0 B0     BNE $B959
0B/B9A9: 60        RTS 

0B/B9AA: 00 01 03 05 07
0B/B9AF: 01 02 04 06 08

; [  ]

0B/B9B4: A2 03     LDX #$03
0B/B9B6: BD B0 79  LDA $79B0,X
0B/B9B9: 95 10     STA $10,X
0B/B9BB: CA        DEX 
0B/B9BC: 10 F8     BPL $B9B6
0B/B9BE: A0 04     LDY #$04
0B/B9C0: A2 08     LDX #$08
0B/B9C2: 20 42 97  JSR $9742
0B/B9C5: 20 33 9E  JSR $9E33          ; wait for vblank (menu, oam & color update)
0B/B9C8: 20 6B 9E  JSR $9E6B          ; play magic sound effect
0B/B9CB: A2 05     LDX #$05
0B/B9CD: 86 0E     STX $0E
0B/B9CF: 86 0F     STX $0F
0B/B9D1: A2 20     LDX #$20
0B/B9D3: A9 C0     LDA #$C0
0B/B9D5: 20 11 FD  JSR $FD11          ; random (X..A)
0B/B9D8: 85 00     STA $00
0B/B9DA: A9 08     LDA #$08
0B/B9DC: 85 01     STA $01
0B/B9DE: A0 10     LDY #$10
0B/B9E0: 84 03     STY $03
0B/B9E2: A2 18     LDX #$18
0B/B9E4: A4 03     LDY $03
0B/B9E6: 20 58 B7  JSR $B758
0B/B9E9: 84 03     STY $03
0B/B9EB: E8        INX 
0B/B9EC: E0 24     CPX #$24
0B/B9EE: D0 F4     BNE $B9E4
0B/B9F0: A9 01     LDA #$01
0B/B9F2: 20 1F 9E  JSR $9E1F          ; wait 1 frame
0B/B9F5: 20 E7 9D  JSR $9DE7
0B/B9F8: A9 02     LDA #$02
0B/B9FA: 20 1F 9E  JSR $9E1F          ; wait 2 frames
0B/B9FD: C6 0E     DEC $0E
0B/B9FF: D0 DD     BNE $B9DE
0B/BA01: A2 03     LDX #$03
0B/BA03: B5 10     LDA $10,X
0B/BA05: 9D B0 79  STA $79B0,X
0B/BA08: CA        DEX 
0B/BA09: 10 F8     BPL $BA03
0B/BA0B: 20 E7 9D  JSR $9DE7
0B/BA0E: A9 03     LDA #$03
0B/BA10: 20 1F 9E  JSR $9E1F          ; wait 3 frames
0B/BA13: A9 FC     LDA #$FC
0B/BA15: 85 00     STA $00
0B/BA17: A9 10     LDA #$10
0B/BA19: 85 01     STA $01
0B/BA1B: A9 18     LDA #$18
0B/BA1D: 85 03     STA $03
0B/BA1F: A9 04     LDA #$04
0B/BA21: 85 02     STA $02
0B/BA23: 20 C8 B7  JSR $B7C8
0B/BA26: A0 10     LDY #$10
0B/BA28: A2 26     LDX #$26
0B/BA2A: 20 58 B7  JSR $B758
0B/BA2D: A5 01     LDA $01
0B/BA2F: 18        CLC 
0B/BA30: 69 08     ADC #$08
0B/BA32: 85 01     STA $01
0B/BA34: C0 24     CPY #$24
0B/BA36: D0 F2     BNE $BA2A
0B/BA38: A9 03     LDA #$03
0B/BA3A: 4C 1F 9E  JMP $9E1F          ; wait 3 frames
0B/BA3D: A9 06     LDA #$06
0B/BA3F: 85 14     STA $14
0B/BA41: A9 01     LDA #$01
0B/BA43: 85 12     STA $12
0B/BA45: A9 04     LDA #$04
0B/BA47: 85 13     STA $13
0B/BA49: A5 29     LDA $29
0B/BA4B: 4A        LSR 
0B/BA4C: 4A        LSR 
0B/BA4D: 0A        ASL 
0B/BA4E: 69 07     ADC #$07
0B/BA50: 4C CD B6  JMP $B6CD
0B/BA53: 4C 16 BF  JMP $BF16
0B/BA56: A9 06     LDA #$06
0B/BA58: 85 14     STA $14
0B/BA5A: A9 04     LDA #$04
0B/BA5C: 85 12     STA $12
0B/BA5E: A9 04     LDA #$04
0B/BA60: 85 13     STA $13
0B/BA62: 4C C3 B6  JMP $B6C3

; [  ]

0B/BA65: 20 CF 9D  JSR $9DCF
0B/BA68: 20 01 9E  JSR $9E01
0B/BA6B: BC 72 7B  LDY $7B72,X
0B/BA6E: B9 38 BB  LDA $BB38,Y
0B/BA71: 85 02     STA $02
0B/BA73: B9 48 BB  LDA $BB48,Y
0B/BA76: 85 03     STA $03
0B/BA78: A9 10     LDA #$10
0B/BA7A: 85 00     STA $00
0B/BA7C: 85 01     STA $01
0B/BA7E: 20 C8 B7  JSR $B7C8
0B/BA81: A9 09     LDA #$09
0B/BA83: 85 12     STA $12
0B/BA85: A5 0B     LDA $0B
0B/BA87: 18        CLC 
0B/BA88: 69 30     ADC #$30
0B/BA8A: A6 27     LDX $27
0B/BA8C: E0 04     CPX #$04
0B/BA8E: 90 17     BCC $BAA7
0B/BA90: 20 03 9E  JSR $9E03
0B/BA93: BC 82 7B  LDY $7B82,X
0B/BA96: C0 07     CPY #$07
0B/BA98: 90 0D     BCC $BAA7
0B/BA9A: 69 2F     ADC #$2F
0B/BA9C: 06 12     ASL $12
0B/BA9E: BC 8A 7B  LDY $7B8A,X
0B/BAA1: C0 07     CPY #$07
0B/BAA3: 90 02     BCC $BAA7
0B/BAA5: 06 12     ASL $12
0B/BAA7: 85 10     STA $10
0B/BAA9: A0 00     LDY #$00
0B/BAAB: B9 58 BB  LDA $BB58,Y
0B/BAAE: 20 07 FD  JSR $FD07          ; get low/high nybble
0B/BAB1: 0A        ASL 
0B/BAB2: 0A        ASL 
0B/BAB3: 0A        ASL 
0B/BAB4: 65 0A     ADC $0A
0B/BAB6: 99 C0 76  STA $76C0,Y
0B/BAB9: 99 C9 76  STA $76C9,Y
0B/BABC: 69 30     ADC #$30
0B/BABE: 99 D2 76  STA $76D2,Y
0B/BAC1: 99 DB 76  STA $76DB,Y
0B/BAC4: 8A        TXA 
0B/BAC5: 0A        ASL 
0B/BAC6: 0A        ASL 
0B/BAC7: 0A        ASL 
0B/BAC8: 65 0B     ADC $0B
0B/BACA: 99 00 76  STA $7600,Y
0B/BACD: 99 12 76  STA $7612,Y
0B/BAD0: 69 30     ADC #$30
0B/BAD2: 99 09 76  STA $7609,Y
0B/BAD5: 99 1B 76  STA $761B,Y
0B/BAD8: C8        INY 
0B/BAD9: C0 09     CPY #$09
0B/BADB: D0 CE     BNE $BAAB
0B/BADD: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/BAE0: 20 6B 9E  JSR $9E6B          ; play magic sound effect
0B/BAE3: A9 02     LDA #$02
0B/BAE5: 85 03     STA $03
0B/BAE7: A2 44     LDX #$44
0B/BAE9: 86 0E     STX $0E
0B/BAEB: A9 06     LDA #$06
0B/BAED: 85 11     STA $11
0B/BAEF: A2 00     LDX #$00
0B/BAF1: A0 10     LDY #$10
0B/BAF3: A5 03     LDA $03
0B/BAF5: 49 40     EOR #$40
0B/BAF7: 85 03     STA $03
0B/BAF9: A5 0E     LDA $0E
0B/BAFB: 85 02     STA $02
0B/BAFD: BD 00 76  LDA $7600,X
0B/BB00: 18        CLC 
0B/BB01: 69 08     ADC #$08
0B/BB03: C5 10     CMP $10
0B/BB05: D0 02     BNE $BB09
0B/BB07: A5 0B     LDA $0B
0B/BB09: 9D 00 76  STA $7600,X
0B/BB0C: 85 01     STA $01
0B/BB0E: BD C0 76  LDA $76C0,X
0B/BB11: 85 00     STA $00
0B/BB13: 20 08 9E  JSR $9E08          ; copy sprite to oam data
0B/BB16: E8        INX 
0B/BB17: E4 12     CPX $12
0B/BB19: D0 D8     BNE $BAF3
0B/BB1B: A9 01     LDA #$01
0B/BB1D: 20 1F 9E  JSR $9E1F          ; wait 1 frame
0B/BB20: C6 11     DEC $11
0B/BB22: D0 CB     BNE $BAEF
0B/BB24: A6 0E     LDX $0E
0B/BB26: E8        INX 
0B/BB27: E0 48     CPX #$48
0B/BB29: D0 BE     BNE $BAE9
0B/BB2B: A6 27     LDX $27
0B/BB2D: E0 04     CPX #$04
0B/BB2F: 90 06     BCC $BB37
0B/BB31: 20 03 9E  JSR $9E03
0B/BB34: 20 51 A9  JSR $A951
0B/BB37: 60        RTS 

0B/BB38: 18 18 18 18 18 18 18 18 18 30 30 30 30 30 30 30
0B/BB48: 18 18 18 18 18 18 18 18 30 30 30 30 30 30 30 30

0B/BB58: 02 11 14 23 25 30 42 44 51

; [  ]

0B/BB61: A9 01     LDA #$01
0B/BB63: 85 18     STA $18
0B/BB65: A2 01     LDX #$01
0B/BB67: 20 E5 B8  JSR $B8E5
0B/BB6A: A9 00     LDA #$00
0B/BB6C: 8D 20 76  STA $7620
0B/BB6F: 8D 30 76  STA $7630
0B/BB72: A9 04     LDA #$04
0B/BB74: 85 01     STA $01
0B/BB76: A9 08     LDA #$08
0B/BB78: 85 00     STA $00
0B/BB7A: A9 0F     LDA #$0F
0B/BB7C: 85 03     STA $03
0B/BB7E: A9 10     LDA #$10
0B/BB80: 85 02     STA $02
0B/BB82: 20 C8 B7  JSR $B7C8
0B/BB85: A5 0A     LDA $0A
0B/BB87: 8D 00 76  STA $7600
0B/BB8A: A4 0B     LDY $0B
0B/BB8C: 8C 10 76  STY $7610
0B/BB8F: 20 6B 9E  JSR $9E6B          ; play magic sound effect
0B/BB92: A9 03     LDA #$03
0B/BB94: 20 AD B8  JSR $B8AD
0B/BB97: 20 6A B8  JSR $B86A
0B/BB9A: A9 04     LDA #$04
0B/BB9C: 20 1F 9E  JSR $9E1F          ; wait 4 frames
0B/BB9F: A6 27     LDX $27
0B/BBA1: E0 04     CPX #$04
0B/BBA3: 90 06     BCC $BBAB
0B/BBA5: 20 03 9E  JSR $9E03
0B/BBA8: 20 51 A9  JSR $A951
0B/BBAB: 60        RTS 
0B/BBAC: 20 6B 9E  JSR $9E6B          ; play magic sound effect
0B/BBAF: A4 27     LDY $27
0B/BBB1: C0 04     CPY #$04
0B/BBB3: 90 1D     BCC $BBD2
0B/BBB5: 88        DEY 
0B/BBB6: 88        DEY 
0B/BBB7: 88        DEY 
0B/BBB8: 88        DEY 
0B/BBB9: A9 03     LDA #$03
0B/BBBB: 20 16 A2  JSR $A216
0B/BBBE: 20 3F 9E  JSR $9E3F          ; render menu and wait for vblank
0B/BBC1: 20 E4 A1  JSR $A1E4          ; copy left attribute table to ppu
0B/BBC4: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0B/BBC7: A9 06     LDA #$06
0B/BBC9: 20 1F 9E  JSR $9E1F          ; wait 6 frames
0B/BBCC: 20 01 9E  JSR $9E01
0B/BBCF: 20 51 A9  JSR $A951
0B/BBD2: 60        RTS 
0B/BBD3: A9 08     LDA #$08
0B/BBD5: 85 14     STA $14
0B/BBD7: A9 01     LDA #$01
0B/BBD9: 85 12     STA $12
0B/BBDB: A9 06     LDA #$06
0B/BBDD: 85 13     STA $13
0B/BBDF: A5 29     LDA $29
0B/BBE1: 4A        LSR 
0B/BBE2: 4A        LSR 
0B/BBE3: 0A        ASL 
0B/BBE4: 69 07     ADC #$07
0B/BBE6: 4C CD B6  JMP $B6CD
0B/BBE9: A9 06     LDA #$06
0B/BBEB: 85 14     STA $14
0B/BBED: A9 05     LDA #$05
0B/BBEF: 85 12     STA $12
0B/BBF1: A9 05     LDA #$05
0B/BBF3: 85 13     STA $13
0B/BBF5: 4C C3 B6  JMP $B6C3
0B/BBF8: A9 06     LDA #$06
0B/BBFA: 85 14     STA $14
0B/BBFC: A9 06     LDA #$06
0B/BBFE: 85 12     STA $12
0B/BC00: A9 06     LDA #$06
0B/BC02: 85 13     STA $13
0B/BC04: 4C C3 B6  JMP $B6C3
0B/BC07: A9 06     LDA #$06
0B/BC09: 85 14     STA $14
0B/BC0B: A9 07     LDA #$07
0B/BC0D: 85 12     STA $12
0B/BC0F: A9 04     LDA #$04
0B/BC11: 85 13     STA $13
0B/BC13: 4C C3 B6  JMP $B6C3
0B/BC16: A9 01     LDA #$01
0B/BC18: 85 18     STA $18
0B/BC1A: A2 01     LDX #$01
0B/BC1C: 20 E5 B8  JSR $B8E5
0B/BC1F: A6 27     LDX $27
0B/BC21: E0 04     CPX #$04
0B/BC23: B0 17     BCS $BC3C
0B/BC25: A9 08     LDA #$08
0B/BC27: 85 10     STA $10
0B/BC29: A0 03     LDY #$03
0B/BC2B: 84 0D     STY $0D
0B/BC2D: 88        DEY 
0B/BC2E: 84 0C     STY $0C
0B/BC30: BD CE 7B  LDA $7BCE,X
0B/BC33: A8        TAY 
0B/BC34: BD CA 7B  LDA $7BCA,X
0B/BC37: 38        SEC 
0B/BC38: E9 08     SBC #$08
0B/BC3A: D0 27     BNE $BC63
0B/BC3C: A9 0E     LDA #$0E
0B/BC3E: 85 10     STA $10
0B/BC40: 20 03 9E  JSR $9E03
0B/BC43: BD 82 7B  LDA $7B82,X
0B/BC46: 85 0D     STA $0D
0B/BC48: 4A        LSR 
0B/BC49: 18        CLC 
0B/BC4A: 7D 92 7B  ADC $7B92,X
0B/BC4D: 0A        ASL 
0B/BC4E: 0A        ASL 
0B/BC4F: 0A        ASL 
0B/BC50: 38        SEC 
0B/BC51: E9 0D     SBC #$0D
0B/BC53: A8        TAY 
0B/BC54: BD 8A 7B  LDA $7B8A,X
0B/BC57: 85 0C     STA $0C
0B/BC59: 38        SEC 
0B/BC5A: E9 01     SBC #$01
0B/BC5C: 18        CLC 
0B/BC5D: 7D 9A 7B  ADC $7B9A,X
0B/BC60: 0A        ASL 
0B/BC61: 0A        ASL 
0B/BC62: 0A        ASL 
0B/BC63: 8D 00 76  STA $7600
0B/BC66: 8C 10 76  STY $7610
0B/BC69: 85 0A     STA $0A
0B/BC6B: 84 0B     STY $0B
0B/BC6D: A2 00     LDX #$00
0B/BC6F: A5 29     LDA $29
0B/BC71: C9 08     CMP #$08
0B/BC73: 90 01     BCC $BC76
0B/BC75: E8        INX 
0B/BC76: 8A        TXA 
0B/BC77: 18        CLC 
0B/BC78: 65 10     ADC $10
0B/BC7A: 20 AD B8  JSR $B8AD
0B/BC7D: A5 29     LDA $29
0B/BC7F: 4A        LSR 
0B/BC80: 0A        ASL 
0B/BC81: 09 01     ORA #$01
0B/BC83: 85 07     STA $07
0B/BC85: 49 FF     EOR #$FF
0B/BC87: AA        TAX 
0B/BC88: 86 09     STX $09
0B/BC8A: A9 00     LDA #$00
0B/BC8C: 8D 20 76  STA $7620
0B/BC8F: 8D 30 76  STA $7630
0B/BC92: 85 08     STA $08
0B/BC94: 85 0F     STA $0F
0B/BC96: 20 6B 9E  JSR $9E6B          ; play magic sound effect
0B/BC99: A5 29     LDA $29
0B/BC9B: 85 0E     STA $0E
0B/BC9D: 20 6A B8  JSR $B86A
0B/BCA0: A9 01     LDA #$01
0B/BCA2: 20 1F 9E  JSR $9E1F          ; wait 1 frame
0B/BCA5: A6 0F     LDX $0F
0B/BCA7: B5 07     LDA $07,X
0B/BCA9: 18        CLC 
0B/BCAA: 6D 10 76  ADC $7610
0B/BCAD: 8D 10 76  STA $7610
0B/BCB0: E8        INX 
0B/BCB1: E0 03     CPX #$03
0B/BCB3: 90 02     BCC $BCB7
0B/BCB5: A2 00     LDX #$00
0B/BCB7: 86 0F     STX $0F
0B/BCB9: C6 0E     DEC $0E
0B/BCBB: D0 E0     BNE $BC9D
0B/BCBD: 4C 2A 9E  JMP $9E2A          ; wait for vblank (menu & oam update)
0B/BCC0: 20 FF BE  JSR $BEFF
0B/BCC3: A6 27     LDX $27
0B/BCC5: E0 04     CPX #$04
0B/BCC7: B0 01     BCS $BCCA
0B/BCC9: 60        RTS 
0B/BCCA: 20 92 B7  JSR $B792
0B/BCCD: 20 DD BC  JSR $BCDD
0B/BCD0: 20 79 B7  JSR $B779
0B/BCD3: A9 02     LDA #$02
0B/BCD5: 20 1F 9E  JSR $9E1F          ; wait 2 frames
0B/BCD8: C6 04     DEC $04
0B/BCDA: D0 F1     BNE $BCCD
0B/BCDC: 60        RTS 
0B/BCDD: A5 03     LDA $03
0B/BCDF: 29 07     AND #$07
0B/BCE1: 85 03     STA $03
0B/BCE3: A8        TAY 
0B/BCE4: A5 00     LDA $00
0B/BCE6: 38        SEC 
0B/BCE7: F9 33 93  SBC $9333,Y
0B/BCEA: 85 00     STA $00
0B/BCEC: A5 01     LDA $01
0B/BCEE: 18        CLC 
0B/BCEF: 79 3B 93  ADC $933B,Y
0B/BCF2: 85 01     STA $01
0B/BCF4: B9 43 93  LDA $9343,Y
0B/BCF7: 18        CLC 
0B/BCF8: 69 43     ADC #$43
0B/BCFA: 85 02     STA $02
0B/BCFC: E6 03     INC $03
0B/BCFE: 60        RTS 
0B/BCFF: 20 FF BE  JSR $BEFF
0B/BD02: A6 27     LDX $27
0B/BD04: E0 04     CPX #$04
0B/BD06: B0 01     BCS $BD09
0B/BD08: 60        RTS 
0B/BD09: 20 92 B7  JSR $B792
0B/BD0C: A9 44     LDA #$44
0B/BD0E: 85 02     STA $02
0B/BD10: 20 20 BD  JSR $BD20
0B/BD13: 20 79 B7  JSR $B779
0B/BD16: A9 02     LDA #$02
0B/BD18: 20 1F 9E  JSR $9E1F          ; wait 2 frames
0B/BD1B: C6 04     DEC $04
0B/BD1D: D0 F1     BNE $BD10
0B/BD1F: 60        RTS 
0B/BD20: A5 03     LDA $03
0B/BD22: 29 07     AND #$07
0B/BD24: 85 03     STA $03
0B/BD26: C6 00     DEC $00
0B/BD28: A5 02     LDA $02
0B/BD2A: 49 01     EOR #$01
0B/BD2C: 85 02     STA $02
0B/BD2E: E6 03     INC $03
0B/BD30: 60        RTS 
0B/BD31: 20 6B 9E  JSR $9E6B          ; play magic sound effect
0B/BD34: AD B6 93  LDA $93B6
0B/BD37: 85 01     STA $01
0B/BD39: A0 01     LDY #$01
0B/BD3B: 84 02     STY $02
0B/BD3D: AE B0 7C  LDX $7CB0
0B/BD40: E0 13     CPX #$13
0B/BD42: F0 05     BEQ $BD49
0B/BD44: B9 B6 93  LDA $93B6,Y
0B/BD47: 85 39     STA $39
0B/BD49: C8        INY 
0B/BD4A: E0 12     CPX #$12
0B/BD4C: F0 06     BEQ $BD54
0B/BD4E: B9 B6 93  LDA $93B6,Y
0B/BD51: 20 71 9D  JSR $9D71
0B/BD54: C8        INY 
0B/BD55: B9 B6 93  LDA $93B6,Y
0B/BD58: C8        INY 
0B/BD59: 84 02     STY $02
0B/BD5B: 20 1F 9E  JSR $9E1F          ; wait
0B/BD5E: A4 02     LDY $02
0B/BD60: C6 01     DEC $01
0B/BD62: D0 D7     BNE $BD3B
0B/BD64: A9 0F     LDA #$0F
0B/BD66: 20 71 9D  JSR $9D71
0B/BD69: A9 00     LDA #$00
0B/BD6B: 85 39     STA $39
0B/BD6D: 20 33 9E  JSR $9E33          ; wait for vblank (menu, oam & color update)
0B/BD70: AD B0 7C  LDA $7CB0
0B/BD73: C9 14     CMP #$14
0B/BD75: F0 01     BEQ $BD78
0B/BD77: 60        RTS 
0B/BD78: A0 08     LDY #$08
0B/BD7A: A9 80     LDA #$80
0B/BD7C: 91 9F     STA ($9F),Y
0B/BD7E: AE BB 7C  LDX $7CBB
0B/BD81: BD 5E 7D  LDA $7D5E,X
0B/BD84: 38        SEC 
0B/BD85: E9 04     SBC #$04
0B/BD87: AA        TAX 
0B/BD88: 48        PHA 
0B/BD89: A9 03     LDA #$03
0B/BD8B: 85 A5     STA $A5
0B/BD8D: 20 70 A9  JSR $A970
0B/BD90: 68        PLA 
0B/BD91: AA        TAX 
0B/BD92: A9 FF     LDA #$FF
0B/BD94: 9D 62 7B  STA $7B62,X
0B/BD97: CE 4D 7B  DEC $7B4D          ; decrement number of monsters remaining
0B/BD9A: 4C 2A 9E  JMP $9E2A          ; wait for vblank (menu & oam update)
0B/BD9D: A9 03     LDA #$03
0B/BD9F: 85 14     STA $14
0B/BDA1: 20 AE BD  JSR $BDAE
0B/BDA4: C6 14     DEC $14
0B/BDA6: D0 F9     BNE $BDA1
0B/BDA8: 20 31 B1  JSR $B131
0B/BDAB: 4C 2A 9E  JMP $9E2A          ; wait for vblank (menu & oam update)
0B/BDAE: 20 E5 B8  JSR $B8E5
0B/BDB1: A9 0B     LDA #$0B
0B/BDB3: 20 AD B8  JSR $B8AD
0B/BDB6: A2 03     LDX #$03
0B/BDB8: 86 18     STX $18
0B/BDBA: A0 07     LDY #$07
0B/BDBC: 20 47 BE  JSR $BE47
0B/BDBF: A6 18     LDX $18
0B/BDC1: BD 10 76  LDA $7610,X
0B/BDC4: 9D 10 77  STA $7710,X
0B/BDC7: BD 00 76  LDA $7600,X
0B/BDCA: 9D 00 77  STA $7700,X
0B/BDCD: CA        DEX 
0B/BDCE: 10 F1     BPL $BDC1
0B/BDD0: A0 03     LDY #$03
0B/BDD2: 20 47 BE  JSR $BE47
0B/BDD5: A6 18     LDX $18
0B/BDD7: BD 00 77  LDA $7700,X
0B/BDDA: 38        SEC 
0B/BDDB: FD 00 76  SBC $7600,X
0B/BDDE: 9D 20 77  STA $7720,X
0B/BDE1: BD 10 77  LDA $7710,X
0B/BDE4: 38        SEC 
0B/BDE5: FD 10 76  SBC $7610,X
0B/BDE8: 9D 30 77  STA $7730,X
0B/BDEB: 4A        LSR 
0B/BDEC: 9D 40 77  STA $7740,X
0B/BDEF: CA        DEX 
0B/BDF0: 10 E5     BPL $BDD7
0B/BDF2: A9 7F     LDA #$7F
0B/BDF4: A6 18     LDX $18
0B/BDF6: 20 4C B8  JSR $B84C
0B/BDF9: A9 08     LDA #$08
0B/BDFB: 85 17     STA $17
0B/BDFD: 20 4F BE  JSR $BE4F
0B/BE00: C6 17     DEC $17
0B/BE02: D0 F9     BNE $BDFD
0B/BE04: 20 6A B8  JSR $B86A
0B/BE07: 20 2A 9E  JSR $9E2A          ; wait for vblank (menu & oam update)
0B/BE0A: A2 00     LDX #$00
0B/BE0C: A0 00     LDY #$00
0B/BE0E: BD 10 76  LDA $7610,X
0B/BE11: DD 10 77  CMP $7710,X
0B/BE14: F0 02     BEQ $BE18
0B/BE16: A0 FF     LDY #$FF
0B/BE18: E8        INX 
0B/BE19: E4 18     CPX $18
0B/BE1B: D0 F1     BNE $BE0E
0B/BE1D: 98        TYA 
0B/BE1E: D0 D9     BNE $BDF9
0B/BE20: 4C 2A 9E  JMP $9E2A          ; wait for vblank (menu & oam update)

; [  ]

0B/BE23: A6 27     LDX $27
0B/BE25: E0 04     CPX #$04
0B/BE27: B0 0B     BCS $BE34
0B/BE29: A9 A0     LDA #$A0
0B/BE2B: 85 00     STA $00
0B/BE2D: A9 BE     LDA #$BE
0B/BE2F: 85 01     STA $01
0B/BE31: 4C 3C BE  JMP $BE3C
0B/BE34: A9 A8     LDA #$A8
0B/BE36: 85 00     STA $00
0B/BE38: A9 BE     LDA #$BE
0B/BE3A: 85 01     STA $01
0B/BE3C: A2 03     LDX #$03
0B/BE3E: B1 00     LDA ($00),Y
0B/BE40: 95 0A     STA $0A,X
0B/BE42: 88        DEY 
0B/BE43: CA        DEX 
0B/BE44: 10 F8     BPL $BE3E
0B/BE46: 60        RTS 

; [  ]

0B/BE47: 20 23 BE  JSR $BE23
0B/BE4A: A6 18     LDX $18
0B/BE4C: 4C 14 B8  JMP $B814
0B/BE4F: A2 00     LDX #$00
0B/BE51: 86 16     STX $16
0B/BE53: FE 30 76  INC $7630,X
0B/BE56: BD 30 76  LDA $7630,X
0B/BE59: 30 3F     BMI $BE9A
0B/BE5B: 20 6B 9E  JSR $9E6B          ; play magic sound effect
0B/BE5E: A6 16     LDX $16
0B/BE60: A9 00     LDA #$00
0B/BE62: 9D 20 76  STA $7620,X
0B/BE65: 9D 30 76  STA $7630,X
0B/BE68: BD 10 76  LDA $7610,X
0B/BE6B: DD 10 77  CMP $7710,X
0B/BE6E: D0 07     BNE $BE77
0B/BE70: A9 80     LDA #$80
0B/BE72: 9D 30 76  STA $7630,X
0B/BE75: D0 23     BNE $BE9A
0B/BE77: FE 10 76  INC $7610,X
0B/BE7A: BD 40 77  LDA $7740,X
0B/BE7D: 18        CLC 
0B/BE7E: 7D 20 77  ADC $7720,X
0B/BE81: 9D 40 77  STA $7740,X
0B/BE84: DD 30 77  CMP $7730,X
0B/BE87: 90 03     BCC $BE8C
0B/BE89: FE 00 76  INC $7600,X
0B/BE8C: BD 40 77  LDA $7740,X
0B/BE8F: DD 30 77  CMP $7730,X
0B/BE92: 90 03     BCC $BE97
0B/BE94: FD 30 77  SBC $7730,X
0B/BE97: 9D 40 77  STA $7740,X
0B/BE9A: E8        INX 
0B/BE9B: E4 18     CPX $18
0B/BE9D: D0 B2     BNE $BE51
0B/BE9F: 60        RTS 

0B/BEA0: 98 00 04 02
0B/BEA4: C0 78 06 02
0B/BEA8: 00 00 05 02

0B/BEAC: 60        RTS 
0B/BEAD: 78        SEI 
0B/BEAE: 06 02     ASL $02
0B/BEB0: A6 27     LDX $27
0B/BEB2: E0 04     CPX #$04
0B/BEB4: 90 01     BCC $BEB7
0B/BEB6: 60        RTS 
0B/BEB7: A2 0D     LDX #$0D
0B/BEB9: 20 72 9E  JSR $9E72          ; play battle sound effect
0B/BEBC: A6 27     LDX $27
0B/BEBE: 20 31 B1  JSR $B131
0B/BEC1: 4C 2A 9E  JMP $9E2A          ; wait for vblank (menu & oam update)

0B/BEC4: A6 27     LDX $27
0B/BEC6: E0 04     CPX #$04
0B/BEC8: 90 01     BCC $BECB
0B/BECA: 60        RTS 
0B/BECB: A2 0D     LDX #$0D
0B/BECD: 20 72 9E  JSR $9E72          ; play battle sound effect
0B/BED0: A6 27     LDX $27
0B/BED2: 20 31 B1  JSR $B131
0B/BED5: 4C 2A 9E  JMP $9E2A          ; wait for vblank (menu & oam update)
0B/BED8: 20 6B 9E  JSR $9E6B          ; play magic sound effect
0B/BEDB: A2 10     LDX #$10
0B/BEDD: 86 04     STX $04
0B/BEDF: 8A        TXA 
0B/BEE0: 4A        LSR 
0B/BEE1: 90 04     BCC $BEE7
0B/BEE3: A9 0F     LDA #$0F
0B/BEE5: D0 03     BNE $BEEA
0B/BEE7: AD C1 79  LDA $79C1
0B/BEEA: 20 71 9D  JSR $9D71
0B/BEED: A9 02     LDA #$02
0B/BEEF: 20 1F 9E  JSR $9E1F          ; wait 2 frames
0B/BEF2: A6 04     LDX $04
0B/BEF4: CA        DEX 
0B/BEF5: D0 E6     BNE $BEDD
0B/BEF7: A9 0F     LDA #$0F
0B/BEF9: 20 71 9D  JSR $9D71
0B/BEFC: 4C 33 9E  JMP $9E33          ; wait for vblank (menu, oam & color update)
0B/BEFF: 20 16 BF  JSR $BF16
0B/BF02: A6 27     LDX $27
0B/BF04: E0 04     CPX #$04
0B/BF06: B0 01     BCS $BF09
0B/BF08: 60        RTS 
0B/BF09: A5 27     LDA $27
0B/BF0B: 48        PHA 
0B/BF0C: 20 03 9E  JSR $9E03
0B/BF0F: 20 51 A9  JSR $A951
0B/BF12: 68        PLA 
0B/BF13: 85 27     STA $27
0B/BF15: 60        RTS 
0B/BF16: A9 06     LDA #$06
0B/BF18: 85 14     STA $14
0B/BF1A: A9 0A     LDA #$0A
0B/BF1C: 85 12     STA $12
0B/BF1E: A9 06     LDA #$06
0B/BF20: 85 13     STA $13
0B/BF22: 4C C3 B6  JMP $B6C3

; pointers to frame data ???
0B/BF25: BF45 BF53 BF5D BF75 BF67 BF87 BF99 BFAB
0B/BF35: BFB5 BFBA BFBF BFCD BFD3 BFD7 BFDB BFE0

; frame data ???
0B/BF45: 04 03 27 6C 6D 6E 28 6F 70 71 29 72 73 74
0B/BF53: 01 08 00 24 25 26 27 28 29 2A
0B/BF5D: 02 03 00 2B 24 2C 25 2D 26 2E
0B/BF67: 04 03 00 01 2B 2F 25 30 2D 31 27 32 33 34
0B/BF75: 10 01 0C 0D 3E 3F 0E 0F 40 41 42 43 44 45 46 47 48 49
0B/BF87: 04 04 00 0D 2B 4A 24 4B 2C 4C 25 4D 2D 4E 26 4F 2E 50
0B/BF99: 04 04 00 01 02 03 27 32 33 34 51 52 53 4A 54 55 56 57
0B/BFAB: 04 02 00 58 59 5A 24 4B 2C 5C
0B/BFB5: 03 01 00 5B 5D
0B/BFBB: 03 01 26 5E 5F
0B/BFBF: 04 03 60 61 62 63 64 65 66 67 68 69 6A 6B
0B/BFCD: 04 01 00 01 02 03
0B/BFD3: 02 01 00 01
0B/BFD7: 02 01 0C 0D
0B/BFDB: 03 01 75 76 77
0B/BFE0: 03 01 78 79 7A

; stale data
0B/BFE5:          76 77
0B/BFE7: 03 01 78 79 7A
0B/BFEC:       01 00 01
0B/BFEF: 02 01 0C 0D
0B/BFF3: 03 01 75 76 77
0B/BFF8: 03 01 78 79 7A
0B/BFFD: FF F8 FF

; --------------------------------------------------------------------------

0C/8F43: 4C 28 90  JMP $9028          ; battle main
0C/8F46: 4C 5E 8F  JMP $8F5E          ; sort values
0C/8F49: 4C 68 98  JMP $9868          ; init battle stats
0C/8F4C: 4C E7 95  JMP $95E7          ; copy text to buffer
0C/8F4F: 4C 50 92  JMP $9250          ; open window
0C/8F52: 4C E1 96  JMP $96E1          ; update character/monster pointers
0C/8F55: 4C 49 97  JMP $9749          ; convert hex to decimal
0C/8F58: 4C B5 96  JMP $96B5
0C/8F5B: 4C 02 9D  JMP $9D02          ; set positions for 16x16 sprite

; [ sort values ]

;    A: index of last value
;  $02: index of first value
; +$04: pointer to values
; +$06: pointer to buffer for sorted indices

0C/8F5E: 48        PHA 
0C/8F5F: 38        SEC 
0C/8F60: E5 02     SBC $02
0C/8F62: AA        TAX 
0C/8F63: E8        INX 
0C/8F64: 86 00     STX $00            ; number of values
0C/8F66: A0 01     LDY #$01
0C/8F68: A2 00     LDX #$00
0C/8F6A: 8A        TXA 
0C/8F6B: 91 06     STA ($06),Y        ; start with sequential indices
0C/8F6D: C8        INY 
0C/8F6E: E8        INX 
0C/8F6F: E4 00     CPX $00
0C/8F71: D0 F7     BNE $8F6A
0C/8F73: 68        PLA 
0C/8F74: 85 03     STA $03
0C/8F76: A5 00     LDA $00
0C/8F78: 48        PHA 
0C/8F79: A5 01     LDA $01
0C/8F7B: 48        PHA 
0C/8F7C: 8A        TXA 
0C/8F7D: 48        PHA 
0C/8F7E: A6 02     LDX $02
0C/8F80: 86 00     STX $00
0C/8F82: A4 03     LDY $03
0C/8F84: 84 01     STY $01
0C/8F86: A4 02     LDY $02
0C/8F88: B1 04     LDA ($04),Y
0C/8F8A: 85 08     STA $08
0C/8F8C: A4 03     LDY $03
0C/8F8E: C4 02     CPY $02
0C/8F90: 90 46     BCC $8FD8
0C/8F92: B1 04     LDA ($04),Y
0C/8F94: C5 08     CMP $08
0C/8F96: B0 03     BCS $8F9B
0C/8F98: 88        DEY 
0C/8F99: 90 F7     BCC $8F92
0C/8F9B: 84 03     STY $03
0C/8F9D: A4 02     LDY $02
0C/8F9F: B1 04     LDA ($04),Y
0C/8FA1: C5 08     CMP $08
0C/8FA3: F0 05     BEQ $8FAA
0C/8FA5: 90 03     BCC $8FAA
0C/8FA7: C8        INY 
0C/8FA8: B0 F5     BCS $8F9F
0C/8FAA: 84 02     STY $02
0C/8FAC: A4 03     LDY $03
0C/8FAE: C4 02     CPY $02
0C/8FB0: 90 26     BCC $8FD8
0C/8FB2: B1 04     LDA ($04),Y
0C/8FB4: AA        TAX 
0C/8FB5: B1 06     LDA ($06),Y
0C/8FB7: 85 09     STA $09
0C/8FB9: A4 02     LDY $02
0C/8FBB: B1 04     LDA ($04),Y
0C/8FBD: A4 03     LDY $03
0C/8FBF: 91 04     STA ($04),Y
0C/8FC1: A4 02     LDY $02
0C/8FC3: B1 06     LDA ($06),Y
0C/8FC5: A4 03     LDY $03
0C/8FC7: 91 06     STA ($06),Y
0C/8FC9: A4 02     LDY $02
0C/8FCB: A5 09     LDA $09
0C/8FCD: 91 06     STA ($06),Y
0C/8FCF: 8A        TXA 
0C/8FD0: 91 04     STA ($04),Y
0C/8FD2: C6 03     DEC $03
0C/8FD4: E6 02     INC $02
0C/8FD6: B0 B4     BCS $8F8C
0C/8FD8: A6 02     LDX $02
0C/8FDA: C4 00     CPY $00
0C/8FDC: F0 0A     BEQ $8FE8
0C/8FDE: 90 08     BCC $8FE8
0C/8FE0: A5 00     LDA $00
0C/8FE2: 85 02     STA $02
0C/8FE4: 98        TYA 
0C/8FE5: 20 74 8F  JSR $8F74
0C/8FE8: E4 01     CPX $01
0C/8FEA: B0 07     BCS $8FF3
0C/8FEC: 86 02     STX $02
0C/8FEE: A5 01     LDA $01
0C/8FF0: 20 74 8F  JSR $8F74
0C/8FF3: 68        PLA 
0C/8FF4: AA        TAX 
0C/8FF5: 68        PLA 
0C/8FF6: 85 01     STA $01
0C/8FF8: 68        PLA 
0C/8FF9: 85 00     STA $00
0C/8FFB: 60        RTS 

; [ compare (16-bit) ]

; compare +$00 with +$02

0C/8FFC: 38        SEC 
0C/8FFD: A5 00     LDA $00
0C/8FFF: E5 02     SBC $02
0C/9001: 85 04     STA $04
0C/9003: A5 01     LDA $01
0C/9005: E5 03     SBC $03
0C/9007: 05 04     ORA $04
0C/9009: 60        RTS 

; [ set bit ]

0C/900A: 1D 20 90  ORA $9020,X
0C/900D: 60        RTS 

; [ clear bit ]

0C/900E: 49 FF     EOR #$FF
0C/9010: 1D 20 90  ORA $9020,X
0C/9013: 49 FF     EOR #$FF
0C/9015: 60        RTS 

; [ check bit ]

0C/9016: 48        PHA 
0C/9017: BD 20 90  LDA $9020,X
0C/901A: 85 00     STA $00
0C/901C: 68        PLA 
0C/901D: 24 00     BIT $00
0C/901F: 60        RTS 

; bit masks
0C/9020: 01 02 04 08 10 20 40 80

; --------------------------------------------------------------------------

; [ battle main ]

0C/9028: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/902B: A9 00     LDA #$00
0C/902D: 85 9E     STA $9E
0C/902F: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9032: A5 9E     LDA $9E
0C/9034: 09 80     ORA #$80
0C/9036: 20 FB FA  JSR $FAFB          ; update character equipment
0C/9039: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/903C: E6 9E     INC $9E            ; next character
0C/903E: A5 9E     LDA $9E
0C/9040: C9 04     CMP #$04
0C/9042: D0 EB     BNE $902F
0C/9044: 20 9F 90  JSR $909F          ; init battle ram
0C/9047: A5 3A     LDA $3A
0C/9049: 09 01     ORA #$01           ; use right nametable in menu area
0C/904B: 85 3A     STA $3A
0C/904D: 20 0D 91  JSR $910D          ; draw monster name window
0C/9050: 20 2A 91  JSR $912A          ; draw character stats window
0C/9053: 20 1D 98  JSR $981D          ; scroll menu to default position
0C/9056: 20 47 91  JSR $9147          ; draw battle command window
0C/9059: A0 20     LDY #$20
0C/905B: 20 9B 94  JSR $949B          ; wait 32 frames
; start of battle loop
0C/905E: 20 5E A3  JSR $A35E          ; get monster actions
0C/9061: 20 E0 FA  JSR $FAE0          ; load status graphics
0C/9064: 20 D0 FA  JSR $FAD0          ; copy cursor graphics to ppu
0C/9067: A9 00     LDA #$00
0C/9069: 85 9E     STA $9E
; start of character loop (command input)
0C/906B: 20 2C 98  JSR $982C          ; scroll menu to battle command window
0C/906E: AD CA 7C  LDA $7CCA
0C/9071: F0 03     BEQ $9076
0C/9073: 20 3E 9B  JSR $9B3E
0C/9076: AC 4A 7B  LDY $7B4A
0C/9079: F0 04     BEQ $907F          ; branch if a normal battle
0C/907B: C0 01     CPY #$01
0C/907D: F0 1A     BEQ $9099          ; branch if surprised
0C/907F: 20 87 91  JSR $9187          ; get command input
0C/9082: A5 9E     LDA $9E
0C/9084: C9 04     CMP #$04
0C/9086: D0 E3     BNE $906B
0C/9088: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/908B: A9 04     LDA #$04
0C/908D: 85 9E     STA $9E
0C/908F: 20 BC FA  JSR $FABC
0C/9092: A9 00     LDA #$00
0C/9094: 85 9E     STA $9E
0C/9096: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/9099: 20 1D 98  JSR $981D          ; scroll menu to default position
0C/909C: 4C 08 A3  JMP $A308          ; do battle round

; [ init battle ram ]

0C/909F: A9 00     LDA #$00
0C/90A1: A2 00     LDX #$00
0C/90A3: 9D B0 7C  STA $7CB0,X
0C/90A6: E8        INX 
0C/90A7: E0 9F     CPX #$9F
0C/90A9: D0 F8     BNE $90A3
0C/90AB: A2 34     LDX #$34
0C/90AD: 95 44     STA $44,X
0C/90AF: CA        DEX 
0C/90B0: 10 FB     BPL $90AD
0C/90B2: A2 01     LDX #$01
0C/90B4: 8E B2 7C  STX $7CB2          ; init to 1
0C/90B7: 8E B3 7C  STX $7CB3
0C/90BA: 8E CA 7C  STX $7CCA
0C/90BD: CA        DEX 
0C/90BE: 8E C0 7C  STX $7CC0          ; clear obtained gil
0C/90C1: 8E C1 7C  STX $7CC1
0C/90C4: CA        DEX 
0C/90C5: 8E A4 7D  STX $7DA4          ; init to $FF
0C/90C8: 8E D4 7D  STX $7DD4
0C/90CB: 8E 04 7E  STX $7E04
0C/90CE: 8E 34 7E  STX $7E34
0C/90D1: 8E 64 7E  STX $7E64
0C/90D4: 8E 94 7E  STX $7E94
0C/90D7: 8E C4 7E  STX $7EC4
0C/90DA: 8E F4 7E  STX $7EF4
0C/90DD: 8E 24 7F  STX $7F24
0C/90E0: 8E 54 7F  STX $7F54
0C/90E3: 8E 84 7F  STX $7F84
0C/90E6: 8E B4 7F  STX $7FB4
0C/90E9: 38        SEC 
0C/90EA: A9 07     LDA #$07
0C/90EC: ED 1F 60  SBC $601F
0C/90EF: 0A        ASL 
0C/90F0: 0A        ASL 
0C/90F1: 0A        ASL 
0C/90F2: 0A        ASL 
0C/90F3: 85 AB     STA $AB            ; battle message speed
0C/90F5: A9 04     LDA #$04
0C/90F7: 8D B8 7C  STA $7CB8
0C/90FA: A9 00     LDA #$00
0C/90FC: 8D 7C 00  STA $007C
0C/90FF: A9 78     LDA #$78
0C/9101: 8D 7D 00  STA $007D
0C/9104: A9 76     LDA #$76
0C/9106: 85 A9     STA $A9
0C/9108: A9 00     LDA #$00
0C/910A: 85 A8     STA $A8
0C/910C: 60        RTS 

; [ draw monster name window ]

0C/910D: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9110: 20 90 94  JSR $9490          ; clear text buffer
0C/9113: 20 83 96  JSR $9683          ; draw monster names
0C/9116: A2 03     LDX #$03
0C/9118: BD 26 91  LDA $9126,X
0C/911B: 95 62     STA $62,X
0C/911D: CA        DEX 
0C/911E: 10 F8     BPL $9118
0C/9120: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/9123: 4C 50 92  JMP $9250          ; open window

; monster name window position data
0C/9126: 00 13 09 1E

; [ draw character stats window ]

0C/912A: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/912D: 20 90 94  JSR $9490          ; clear text buffer
0C/9130: 20 AA 94  JSR $94AA          ; draw character stats text
0C/9133: A2 03     LDX #$03
0C/9135: BD 43 91  LDA $9143,X
0C/9138: 95 62     STA $62,X
0C/913A: CA        DEX 
0C/913B: 10 F8     BPL $9135
0C/913D: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/9140: 4C 50 92  JMP $9250          ; open window

; character stats window position data
0C/9143: 0A 13 1F 1E

; [ draw battle command window ]

0C/9147: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/914A: 20 90 94  JSR $9490          ; clear text buffer
0C/914D: A9 06     LDA #$06
0C/914F: 85 68     STA $68
0C/9151: A9 00     LDA #$00           ; string $00 (battle command names)
0C/9153: 85 72     STA $72
0C/9155: A9 07     LDA #$07
0C/9157: 85 73     STA $73
0C/9159: A5 72     LDA $72
0C/915B: 85 66     STA $66
0C/915D: A5 73     LDA $73
0C/915F: 85 67     STA $67
0C/9161: 20 2F 97  JSR $972F          ; load battle text
0C/9164: 18        CLC                ; next command
0C/9165: A5 73     LDA $73
0C/9167: 69 0C     ADC #$0C
0C/9169: 85 73     STA $73
0C/916B: E6 72     INC $72
0C/916D: A5 72     LDA $72
0C/916F: C9 04     CMP #$04
0C/9171: D0 E6     BNE $9159
0C/9173: A2 03     LDX #$03
0C/9175: BD 83 91  LDA $9183,X
0C/9178: 95 62     STA $62,X
0C/917A: CA        DEX 
0C/917B: 10 F8     BPL $9175
0C/917D: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/9180: 4C 50 92  JMP $9250          ; open window

; battle command window position data
0C/9183: 20 13 27 1E

; [ get battle command input ]

0C/9187: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/918A: A5 9E     LDA $9E
0C/918C: AA        TAX 
0C/918D: A9 00     LDA #$00
0C/918F: 9D CE 7F  STA $7FCE,X
0C/9192: 9D D6 7F  STA $7FD6,X
0C/9195: 20 08 92  JSR $9208          ; check if dead or stone
0C/9198: D0 3D     BNE $91D7
0C/919A: 20 11 92  JSR $9211          ; get confused character action
0C/919D: D0 38     BNE $91D7          ; branch if confused, paralyzed, or asleep
0C/919F: 20 BC FA  JSR $FABC
0C/91A2: A9 01     LDA #$01
0C/91A4: 8D E3 7C  STA $7CE3
0C/91A7: 8D E7 7C  STA $7CE7
0C/91AA: 8D EB 7C  STA $7CEB
0C/91AD: 8D EF 7C  STA $7CEF
0C/91B0: A9 BF     LDA #$BF           ; 0C/BFC5 (battle command cursor positions)
0C/91B2: 85 67     STA $67
0C/91B4: A9 C5     LDA #$C5
0C/91B6: 85 66     STA $66
0C/91B8: A9 04     LDA #$04
0C/91BA: 85 5C     STA $5C
0C/91BC: A9 00     LDA #$00
0C/91BE: 85 5D     STA $5D
0C/91C0: 85 50     STA $50
0C/91C2: 85 51     STA $51
0C/91C4: 20 E4 FA  JSR $FAE4          ; update status animation
0C/91C7: 20 A8 9B  JSR $9BA8          ; get battle command input
0C/91CA: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/91CD: AD 34 00  LDA $0034
0C/91D0: C9 01     CMP #$01
0C/91D2: D0 07     BNE $91DB          ; branch if A button is not pressed
0C/91D4: 20 31 92  JSR $9231          ; target select
0C/91D7: E6 9E     INC $9E
0C/91D9: D0 2C     BNE $9207
; go to previous character
0C/91DB: A5 9E     LDA $9E
0C/91DD: F0 28     BEQ $9207
0C/91DF: C6 9E     DEC $9E
0C/91E1: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/91E4: 20 08 92  JSR $9208          ; check if dead or stone
0C/91E7: D0 05     BNE $91EE
0C/91E9: 20 11 92  JSR $9211          ; get confused character action
0C/91EC: F0 19     BEQ $9207          ; branch if not confused, paralyzed, or asleep
0C/91EE: A5 9E     LDA $9E
0C/91F0: F0 15     BEQ $9207
0C/91F2: C6 9E     DEC $9E
0C/91F4: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/91F7: 20 08 92  JSR $9208          ; check if dead or stone
0C/91FA: D0 05     BNE $9201
0C/91FC: 20 11 92  JSR $9211          ; get confused character action
0C/91FF: F0 06     BEQ $9207          ; branch if not confused, paralyzed, or asleep
0C/9201: A5 9E     LDA $9E
0C/9203: F0 02     BEQ $9207
0C/9205: C6 9E     DEC $9E
0C/9207: 60        RTS 

; [ check if dead or stone ]

0C/9208: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/920B: 20 6C AF  JSR $AF6C          ; get status 1
0C/920E: 29 C0     AND #$C0
0C/9210: 60        RTS 

; [ get confused character action ]

0C/9211: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/9214: 20 80 AF  JSR $AF80          ; get status 2
0C/9217: 48        PHA 
0C/9218: 29 80     AND #$80
0C/921A: F0 11     BEQ $922D          ; branch if not confused
0C/921C: A2 00     LDX #$00
0C/921E: A9 03     LDA #$03
0C/9220: 20 11 FD  JSR $FD11          ; random (X..A)
0C/9223: A0 2B     LDY #$2B
0C/9225: 91 80     STA ($80),Y        ; target a random character
0C/9227: A0 2A     LDY #$2A
0C/9229: A9 00     LDA #$00           ; battle command $00 (fight)
0C/922B: 91 80     STA ($80),Y
0C/922D: 68        PLA 
0C/922E: 29 C8     AND #$C8
0C/9230: 60        RTS 

; [ target select ]

0C/9231: A5 54     LDA $54
0C/9233: 0A        ASL 
0C/9234: 18        CLC 
0C/9235: 69 F5     ADC #$F5           ; 0C/BFF5 (target select jump table)
0C/9237: 85 62     STA $62
0C/9239: A9 00     LDA #$00
0C/923B: 69 BF     ADC #$BF
0C/923D: 85 63     STA $63
0C/923F: A0 00     LDY #$00
0C/9241: B1 62     LDA ($62),Y
0C/9243: 85 64     STA $64
0C/9245: C8        INY 
0C/9246: B1 62     LDA ($62),Y
0C/9248: 85 65     STA $65
0C/924A: 20 E4 FA  JSR $FAE4          ; update status animation
0C/924D: 6C 64 00  JMP ($0064)

; [ open window ]

; $62: left
; $63: top
; $64: right
; $65: bottom

0C/9250: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9253: 38        SEC 
0C/9254: A5 64     LDA $64
0C/9256: E5 62     SBC $62
0C/9258: AA        TAX 
0C/9259: E8        INX 
0C/925A: 86 4F     STX $4F            ; width
0C/925C: 38        SEC 
0C/925D: A5 65     LDA $65
0C/925F: E5 63     SBC $63
0C/9261: E9 03     SBC #$03
0C/9263: 85 4E     STA $4E            ; height
0C/9265: A5 62     LDA $62
0C/9267: C9 20     CMP #$20
0C/9269: 90 19     BCC $9284
; right tilemap
0C/926B: A9 24     LDA #$24
0C/926D: 85 69     STA $69
0C/926F: A9 00     LDA #$00
0C/9271: 85 68     STA $68
0C/9273: A9 20     LDA #$20
0C/9275: 85 6B     STA $6B
0C/9277: A9 00     LDA #$00
0C/9279: 85 6A     STA $6A
0C/927B: A9 40     LDA #$40
0C/927D: 85 67     STA $67
0C/927F: 20 A1 92  JSR $92A1          ; calculate window tilemap ppu address
0C/9282: D0 17     BNE $929B
; left tilemap
0C/9284: A9 20     LDA #$20
0C/9286: 85 69     STA $69
0C/9288: A9 00     LDA #$00
0C/928A: 85 68     STA $68
0C/928C: A9 24     LDA #$24
0C/928E: 85 6B     STA $6B
0C/9290: A9 00     LDA #$00
0C/9292: 85 6A     STA $6A
0C/9294: A9 20     LDA #$20
0C/9296: 85 67     STA $67
0C/9298: 20 A1 92  JSR $92A1          ; calculate window tilemap ppu address
0C/929B: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/929E: 4C 0C 93  JMP $930C          ; copy window tilemap to ppu

; [ calculate window tilemap ppu address ]

0C/92A1: A5 62     LDA $62
0C/92A3: 85 66     STA $66
0C/92A5: A5 63     LDA $63
0C/92A7: F0 11     BEQ $92BA
0C/92A9: A8        TAY 
0C/92AA: 18        CLC 
0C/92AB: A5 68     LDA $68
0C/92AD: 69 20     ADC #$20           ; get ppu address for top row
0C/92AF: 85 68     STA $68
0C/92B1: A5 69     LDA $69
0C/92B3: 69 00     ADC #$00
0C/92B5: 85 69     STA $69
0C/92B7: 88        DEY 
0C/92B8: D0 F0     BNE $92AA
0C/92BA: A5 67     LDA $67
0C/92BC: C9 20     CMP #$20
0C/92BE: F0 07     BEQ $92C7
0C/92C0: 38        SEC 
0C/92C1: A5 62     LDA $62
0C/92C3: E9 20     SBC #$20
0C/92C5: 85 66     STA $66
0C/92C7: 18        CLC 
0C/92C8: A5 68     LDA $68
0C/92CA: 65 66     ADC $66            ; add left position
0C/92CC: 85 68     STA $68
0C/92CE: A5 69     LDA $69
0C/92D0: 69 00     ADC #$00
0C/92D2: 85 69     STA $69
0C/92D4: A5 64     LDA $64
0C/92D6: C5 67     CMP $67
0C/92D8: B0 0A     BCS $92E4
0C/92DA: A5 4F     LDA $4F
0C/92DC: 85 62     STA $62
0C/92DE: A9 00     LDA #$00
0C/92E0: 85 63     STA $63
0C/92E2: F0 23     BEQ $9307
0C/92E4: A5 63     LDA $63
0C/92E6: F0 11     BEQ $92F9
0C/92E8: A8        TAY 
0C/92E9: 18        CLC 
0C/92EA: A5 6A     LDA $6A
0C/92EC: 69 20     ADC #$20
0C/92EE: 85 6A     STA $6A
0C/92F0: A5 6B     LDA $6B
0C/92F2: 69 00     ADC #$00
0C/92F4: 85 6B     STA $6B
0C/92F6: 88        DEY 
0C/92F7: D0 F0     BNE $92E9
0C/92F9: 38        SEC 
0C/92FA: A5 67     LDA $67
0C/92FC: E5 62     SBC $62
0C/92FE: 85 62     STA $62
0C/9300: 38        SEC 
0C/9301: A5 4F     LDA $4F
0C/9303: E5 62     SBC $62
0C/9305: 85 63     STA $63
0C/9307: C6 62     DEC $62
0C/9309: C6 62     DEC $62
0C/930B: 60        RTS 

; [ copy window tilemap to ppu ]

0C/930C: 18        CLC 
0C/930D: A5 A8     LDA $A8
0C/930F: 65 A7     ADC $A7
0C/9311: 85 6C     STA $6C
0C/9313: A5 A9     LDA $A9
0C/9315: 69 00     ADC #$00
0C/9317: 85 6D     STA $6D
0C/9319: A9 03     LDA #$03
0C/931B: 85 44     STA $44
0C/931D: 20 2A FA  JSR $FA2A          ; wait for vblank
0C/9320: A5 44     LDA $44
; bottom border
0C/9322: C9 03     CMP #$03
0C/9324: D0 08     BNE $932E
0C/9326: 20 40 94  JSR $9440          ; get top border tiles
0C/9329: 20 4A 93  JSR $934A          ; draw top/bottom border
0C/932C: D0 16     BNE $9344
; middle
0C/932E: C9 02     CMP #$02
0C/9330: D0 05     BNE $9337
0C/9332: 20 8C 93  JSR $938C          ; draw text and left/right border
0C/9335: D0 0D     BNE $9344
; bottom border
0C/9337: C9 01     CMP #$01
0C/9339: D0 06     BNE $9341
0C/933B: 20 4D 94  JSR $944D          ; get bottom border tiles
0C/933E: 20 4A 93  JSR $934A
0C/9341: 4C 5D 9A  JMP $9A5D
0C/9344: 20 5D 9A  JSR $9A5D
0C/9347: 4C 1D 93  JMP $931D

; [ draw top/bottom border ]

0C/934A: 20 02 94  JSR $9402          ; set ppu address
0C/934D: A5 64     LDA $64
0C/934F: 8D 07 20  STA $2007
0C/9352: A5 62     LDA $62
0C/9354: 48        PHA 
0C/9355: A5 63     LDA $63
0C/9357: F0 02     BEQ $935B
0C/9359: E6 62     INC $62
0C/935B: A5 62     LDA $62
0C/935D: F0 07     BEQ $9366
0C/935F: A4 62     LDY $62
0C/9361: A5 65     LDA $65
0C/9363: 20 85 9B  JSR $9B85          ; fill ppu
0C/9366: A5 63     LDA $63
0C/9368: F0 14     BEQ $937E
0C/936A: 20 17 94  JSR $9417          ; set ppu address (overflow)
0C/936D: A4 63     LDY $63
0C/936F: 88        DEY 
0C/9370: 98        TYA 
0C/9371: F0 08     BEQ $937B
0C/9373: A4 63     LDY $63
0C/9375: 88        DEY 
0C/9376: A5 65     LDA $65
0C/9378: 20 85 9B  JSR $9B85          ; fill ppu
0C/937B: 20 32 94  JSR $9432          ; increment tilemap row (overflow)
0C/937E: A5 67     LDA $67
0C/9380: 8D 07 20  STA $2007
0C/9383: 20 24 94  JSR $9424          ; increment tilemap row
0C/9386: 68        PLA 
0C/9387: 85 62     STA $62
0C/9389: C6 44     DEC $44
0C/938B: 60        RTS 

; [ draw text and left/right border ]

0C/938C: 20 02 94  JSR $9402          ; set ppu address
0C/938F: A9 FA     LDA #$FA           ; left border
0C/9391: 8D 07 20  STA $2007
0C/9394: A5 62     LDA $62            ; save width
0C/9396: 48        PHA 
0C/9397: A0 00     LDY #$00
0C/9399: A5 63     LDA $63
0C/939B: F0 02     BEQ $939F
0C/939D: E6 62     INC $62
0C/939F: A5 62     LDA $62
0C/93A1: F0 0B     BEQ $93AE
0C/93A3: A6 62     LDX $62
0C/93A5: B1 6C     LDA ($6C),Y
0C/93A7: 8D 07 20  STA $2007
0C/93AA: C8        INY 
0C/93AB: CA        DEX 
0C/93AC: D0 F7     BNE $93A5
0C/93AE: 68        PLA                ; restore width
0C/93AF: 85 62     STA $62
0C/93B1: A5 63     LDA $63
0C/93B3: F0 18     BEQ $93CD
0C/93B5: 20 17 94  JSR $9417          ; set ppu address (overflow)
0C/93B8: A6 63     LDX $63
0C/93BA: CA        DEX 
0C/93BB: 8A        TXA 
0C/93BC: F0 0C     BEQ $93CA
0C/93BE: A6 63     LDX $63
0C/93C0: CA        DEX 
0C/93C1: B1 6C     LDA ($6C),Y
0C/93C3: 8D 07 20  STA $2007
0C/93C6: C8        INY 
0C/93C7: CA        DEX 
0C/93C8: D0 F7     BNE $93C1
0C/93CA: 20 32 94  JSR $9432          ; increment tilemap row (overflow)
0C/93CD: A9 FB     LDA #$FB           ; right border
0C/93CF: 8D 07 20  STA $2007
0C/93D2: 20 24 94  JSR $9424          ; increment tilemap row
0C/93D5: C6 4E     DEC $4E
0C/93D7: D0 02     BNE $93DB
0C/93D9: C6 44     DEC $44
0C/93DB: A5 62     LDA $62
0C/93DD: C9 FF     CMP #$FF
0C/93DF: D0 02     BNE $93E3
0C/93E1: A9 00     LDA #$00
0C/93E3: 18        CLC 
0C/93E4: 65 6C     ADC $6C
0C/93E6: 85 6C     STA $6C
0C/93E8: A5 6D     LDA $6D
0C/93EA: 69 00     ADC #$00
0C/93EC: 85 6D     STA $6D
0C/93EE: A5 63     LDA $63
0C/93F0: C9 08     CMP #$08
0C/93F2: D0 02     BNE $93F6
0C/93F4: A9 07     LDA #$07
0C/93F6: 18        CLC 
0C/93F7: 65 6C     ADC $6C
0C/93F9: 85 6C     STA $6C
0C/93FB: A5 6D     LDA $6D
0C/93FD: 69 00     ADC #$00
0C/93FF: 85 6D     STA $6D
0C/9401: 60        RTS 

; [ set ppu address ]

0C/9402: A5 69     LDA $69
0C/9404: 8D 06 20  STA $2006
0C/9407: A5 68     LDA $68
0C/9409: 8D 06 20  STA $2006
0C/940C: A9 00     LDA #$00
0C/940E: 8D 05 20  STA $2005
0C/9411: A5 37     LDA $37
0C/9413: 8D 05 20  STA $2005
0C/9416: 60        RTS 

; [ set ppu address (overflow) ]

0C/9417: A5 6B     LDA $6B
0C/9419: 8D 06 20  STA $2006
0C/941C: A5 6A     LDA $6A
0C/941E: 8D 06 20  STA $2006
0C/9421: 4C 0C 94  JMP $940C

; [ increment tilemap row ]

0C/9424: 18        CLC 
0C/9425: A5 68     LDA $68
0C/9427: 69 20     ADC #$20
0C/9429: 85 68     STA $68
0C/942B: A5 69     LDA $69
0C/942D: 69 00     ADC #$00
0C/942F: 85 69     STA $69
0C/9431: 60        RTS 

; [ increment tilemap row (overflow) ]

0C/9432: 18        CLC 
0C/9433: A5 6A     LDA $6A
0C/9435: 69 20     ADC #$20
0C/9437: 85 6A     STA $6A
0C/9439: A5 6B     LDA $6B
0C/943B: 69 00     ADC #$00
0C/943D: 85 6B     STA $6B
0C/943F: 60        RTS 

; [ get top border tiles ]

0C/9440: A9 F7     LDA #$F7
0C/9442: 85 64     STA $64
0C/9444: A9 F8     LDA #$F8
0C/9446: 85 65     STA $65
0C/9448: A9 F9     LDA #$F9
0C/944A: 85 67     STA $67
0C/944C: 60        RTS 

; [ get bottom border tiles ]

0C/944D: A9 FC     LDA #$FC
0C/944F: 85 64     STA $64
0C/9451: A9 FD     LDA #$FD
0C/9453: 85 65     STA $65
0C/9455: A9 FE     LDA #$FE
0C/9457: 85 67     STA $67
0C/9459: 60        RTS 

; [ select target 0: fight ]

0C/945A: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/945D: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/9460: A0 2A     LDY #$2A
0C/9462: A9 00     LDA #$00           ; battle command $00 (fight)
0C/9464: 91 80     STA ($80),Y
0C/9466: A6 9E     LDX $9E
0C/9468: FE F3 7C  INC $7CF3,X
0C/946B: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/946E: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9471: 20 C0 FA  JSR $FAC0          ; choose targets
0C/9474: A0 2B     LDY #$2B
0C/9476: B1 80     LDA ($80),Y
0C/9478: C9 FF     CMP #$FF
0C/947A: D0 07     BNE $9483
0C/947C: A6 9E     LDX $9E
0C/947E: DE F3 7C  DEC $7CF3,X
0C/9481: C6 9E     DEC $9E
0C/9483: 4C 5B FD  JMP $FD5B          ; wait for first menu scanline

; [ target select 1: flee ]

0C/9486: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/9489: A0 2A     LDY #$2A
0C/948B: A9 FE     LDA #$FE           ; battle command $FE (running away)
0C/948D: 91 80     STA ($80),Y
0C/948F: 60        RTS 

; [ clear text buffer ]

0C/9490: A0 00     LDY #$00
0C/9492: A9 FF     LDA #$FF
0C/9494: 99 00 76  STA $7600,Y
0C/9497: C8        INY 
0C/9498: D0 FA     BNE $9494
0C/949A: 60        RTS 

; [ wait ]

0C/949B: 98        TYA 
0C/949C: F0 0B     BEQ $94A9
0C/949E: 8D B9 7C  STA $7CB9
0C/94A1: 20 5D 9A  JSR $9A5D
0C/94A4: CE B9 7C  DEC $7CB9
0C/94A7: D0 F8     BNE $94A1
0C/94A9: 60        RTS 

; [ draw character stats text ]

0C/94AA: 20 63 9A  JSR $9A63
0C/94AD: A5 9E     LDA $9E
0C/94AF: 48        PHA 
0C/94B0: A9 C8     LDA #$C8
0C/94B2: 8D 09 76  STA $7609
0C/94B5: A9 C9     LDA #$C9
0C/94B7: 8D 0A 76  STA $760A
0C/94BA: 8D 13 76  STA $7613
0C/94BD: A9 C7     LDA #$C7
0C/94BF: 8D 12 76  STA $7612
0C/94C2: A9 7A     LDA #$7A
0C/94C4: 8D 1F 76  STA $761F
0C/94C7: 8D 47 76  STA $7647
0C/94CA: 8D 6F 76  STA $766F
0C/94CD: 8D 97 76  STA $7697
0C/94D0: A9 FF     LDA #$FF
0C/94D2: 85 9E     STA $9E
0C/94D4: A9 4A     LDA #$4A
0C/94D6: 85 4E     STA $4E
0C/94D8: A9 7D     LDA #$7D
0C/94DA: 85 4F     STA $4F
0C/94DC: A2 14     LDX #$14
0C/94DE: 20 F4 94  JSR $94F4
0C/94E1: A2 3C     LDX #$3C
0C/94E3: 20 F4 94  JSR $94F4
0C/94E6: A2 64     LDX #$64
0C/94E8: 20 F4 94  JSR $94F4
0C/94EB: A2 8C     LDX #$8C
0C/94ED: 20 F4 94  JSR $94F4
0C/94F0: 68        PLA 
0C/94F1: 85 9E     STA $9E
0C/94F3: 60        RTS 

; [ draw stats for character ]

; X: buffer offset

0C/94F4: 18        CLC 
0C/94F5: A5 4E     LDA $4E
0C/94F7: 69 30     ADC #$30
0C/94F9: 85 4E     STA $4E
0C/94FB: A5 4F     LDA $4F
0C/94FD: 69 00     ADC #$00
0C/94FF: 85 4F     STA $4F
0C/9501: E6 9E     INC $9E
0C/9503: 8A        TXA 
0C/9504: 48        PHA 
0C/9505: 85 44     STA $44
0C/9507: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/950A: A5 9E     LDA $9E
0C/950C: C9 03     CMP #$03
0C/950E: D0 0D     BNE $951D
0C/9510: A0 35     LDY #$35
0C/9512: B1 7E     LDA ($7E),Y
0C/9514: 10 07     BPL $951D
0C/9516: 68        PLA 
0C/9517: A9 FF     LDA #$FF
0C/9519: 8D 97 76  STA $7697
0C/951C: 60        RTS 
0C/951D: A0 02     LDY #$02
0C/951F: A2 00     LDX #$00
0C/9521: B1 7A     LDA ($7A),Y
0C/9523: 9D 47 7D  STA $7D47,X
0C/9526: E8        INX 
0C/9527: C8        INY 
0C/9528: E0 06     CPX #$06
0C/952A: D0 F5     BNE $9521
0C/952C: A9 00     LDA #$00
0C/952E: 85 6F     STA $6F
0C/9530: 9D 47 7D  STA $7D47,X
0C/9533: A9 14     LDA #$14
0C/9535: 85 45     STA $45
0C/9537: 20 E7 95  JSR $95E7          ; copy text to buffer
0C/953A: 68        PLA 
0C/953B: 18        CLC 
0C/953C: 69 07     ADC #$07
0C/953E: AA        TAX 
; draw current hp
0C/953F: A0 0A     LDY #$0A
0C/9541: B1 4E     LDA ($4E),Y        ; current hp
0C/9543: 85 62     STA $62
0C/9545: C8        INY 
0C/9546: B1 4E     LDA ($4E),Y
0C/9548: 85 63     STA $63
0C/954A: C8        INY 
0C/954B: 8A        TXA 
0C/954C: 48        PHA 
0C/954D: 20 49 97  JSR $9749          ; convert hex to decimal
0C/9550: 68        PLA 
0C/9551: AA        TAX 
0C/9552: A5 65     LDA $65
0C/9554: 9D 00 76  STA $7600,X        ; copy to buffer
0C/9557: E8        INX 
0C/9558: A5 66     LDA $66
0C/955A: 9D 00 76  STA $7600,X
0C/955D: E8        INX 
0C/955E: A5 67     LDA $67
0C/9560: 9D 00 76  STA $7600,X
0C/9563: E8        INX 
0C/9564: A5 68     LDA $68
0C/9566: 9D 00 76  STA $7600,X
0C/9569: E8        INX 
0C/956A: E8        INX 
0C/956B: A4 9E     LDY $9E
0C/956D: B9 A6 7B  LDA $7BA6,Y
0C/9570: C9 F6     CMP #$F6
0C/9572: F0 21     BEQ $9595          ; branch if no status text
; draw status text
0C/9574: 85 64     STA $64
0C/9576: A9 84     LDA #$84           ; string offset: $0200
0C/9578: 85 63     STA $63
0C/957A: A9 00     LDA #$00
0C/957C: 85 62     STA $62
0C/957E: A9 14     LDA #$14
0C/9580: 85 45     STA $45
0C/9582: 8A        TXA 
0C/9583: 48        PHA 
0C/9584: 85 44     STA $44
0C/9586: 20 B6 9A  JSR $9AB6          ; load text (bank 0A)
0C/9589: 20 E7 95  JSR $95E7          ; copy text to buffer
0C/958C: 68        PLA 
0C/958D: AA        TAX 
0C/958E: E8        INX 
0C/958F: E8        INX 
0C/9590: E8        INX 
0C/9591: E8        INX 
0C/9592: E8        INX 
0C/9593: D0 2C     BNE $95C1
; draw max hp
0C/9595: A0 0E     LDY #$0E
0C/9597: B1 4E     LDA ($4E),Y        ; max mp
0C/9599: 85 62     STA $62
0C/959B: C8        INY 
0C/959C: B1 4E     LDA ($4E),Y
0C/959E: 85 63     STA $63
0C/95A0: C8        INY 
0C/95A1: 8A        TXA 
0C/95A2: 48        PHA 
0C/95A3: 20 49 97  JSR $9749          ; convert hex to decimal
0C/95A6: 68        PLA 
0C/95A7: AA        TAX 
0C/95A8: A5 65     LDA $65
0C/95AA: 9D 00 76  STA $7600,X        ; copy to buffer
0C/95AD: E8        INX 
0C/95AE: A5 66     LDA $66
0C/95B0: 9D 00 76  STA $7600,X
0C/95B3: E8        INX 
0C/95B4: A5 67     LDA $67
0C/95B6: 9D 00 76  STA $7600,X
0C/95B9: E8        INX 
0C/95BA: A5 68     LDA $68
0C/95BC: 9D 00 76  STA $7600,X
0C/95BF: E8        INX 
0C/95C0: E8        INX 
; draw current mp
0C/95C1: A0 0C     LDY #$0C
0C/95C3: B1 4E     LDA ($4E),Y        ; current mp
0C/95C5: 85 62     STA $62
0C/95C7: C8        INY 
0C/95C8: B1 4E     LDA ($4E),Y
0C/95CA: 85 63     STA $63
0C/95CC: C8        INY 
0C/95CD: 8A        TXA 
0C/95CE: 48        PHA 
0C/95CF: 20 49 97  JSR $9749          ; convert hex to decimal
0C/95D2: 68        PLA 
0C/95D3: AA        TAX 
0C/95D4: A5 66     LDA $66
0C/95D6: 9D 00 76  STA $7600,X        ; copy to buffer
0C/95D9: E8        INX 
0C/95DA: A5 67     LDA $67
0C/95DC: 9D 00 76  STA $7600,X
0C/95DF: E8        INX 
0C/95E0: A5 68     LDA $68
0C/95E2: 9D 00 76  STA $7600,X
0C/95E5: E8        INX 
0C/95E6: 60        RTS 

; [ copy text to buffer ]

; copy loaded text in $7D47 buffer and add dakuten
; the dakuten code was removed in the english translation
;  $44: destination buffer offset
; +$A8: destination buffer address

0C/95E7: 18        CLC 
0C/95E8: A5 A8     LDA $A8
0C/95EA: 65 44     ADC $44
0C/95EC: 85 6C     STA $6C
0C/95EE: A5 A9     LDA $A9
0C/95F0: 65 6F     ADC $6F
0C/95F2: 85 6D     STA $6D
0C/95F4: A0 00     LDY #$00
0C/95F6: A2 00     LDX #$00
0C/95F8: BD 47 7D  LDA $7D47,X        ; text buffer
0C/95FB: F0 50     BEQ $964D          ; branch if null-terminator
0C/95FD: C9 6E     CMP #$6E
0C/95FF: B0 46     BCS $9647          ; branch if no dakuten
0C/9601: C9 64     CMP #$64
0C/9603: 90 19     BCC $961E
0C/9605: B0 00     BCS $9607
; handakuten
0C/9607: 48        PHA 
0C/9608: A9 C1     LDA #$C1           ; handakuten
0C/960A: 85 6A     STA $6A
0C/960C: 68        PLA 
0C/960D: 20 4E 96  JSR $964E          ; copy dakuten to buffer
0C/9610: C9 69     CMP #$69
0C/9612: B0 05     BCS $9619
0C/9614: 18        CLC 
0C/9615: 69 3F     ADC #$3F
0C/9617: D0 2E     BNE $9647
0C/9619: 18        CLC 
0C/961A: 69 7A     ADC #$7A
0C/961C: D0 29     BNE $9647
; dakuten
0C/961E: 48        PHA 
0C/961F: A9 C0     LDA #$C0           ; dakuten
0C/9621: 85 6A     STA $6A
0C/9623: 68        PLA 
0C/9624: 20 4E 96  JSR $964E          ; copy dakuten to buffer
0C/9627: C9 5F     CMP #$5F
0C/9629: 90 06     BCC $9631
0C/962B: 18        CLC 
0C/962C: 69 84     ADC #$84
0C/962E: 4C 47 96  JMP $9647
0C/9631: C9 50     CMP #$50
0C/9633: 90 06     BCC $963B
0C/9635: 18        CLC 
0C/9636: 69 7F     ADC #$7F
0C/9638: 4C 47 96  JMP $9647
0C/963B: C9 4B     CMP #$4B
0C/963D: 90 05     BCC $9644
0C/963F: 18        CLC 
0C/9640: 69 58     ADC #$58
0C/9642: D0 03     BNE $9647
0C/9644: 18        CLC 
0C/9645: 69 53     ADC #$53
0C/9647: 91 6C     STA ($6C),Y
0C/9649: E8        INX 
0C/964A: C8        INY 
0C/964B: D0 AB     BNE $95F8
0C/964D: 60        RTS 

; [ copy dakuten to buffer ]

; $6A: dakuten character

0C/964E: 48        PHA 
0C/964F: 98        TYA 
0C/9650: 85 6B     STA $6B
0C/9652: 48        PHA 
0C/9653: A5 6C     LDA $6C
0C/9655: 48        PHA 
0C/9656: A5 6D     LDA $6D
0C/9658: 48        PHA 
0C/9659: 38        SEC 
0C/965A: A5 6C     LDA $6C
0C/965C: E5 45     SBC $45
0C/965E: 85 6C     STA $6C
0C/9660: A5 6D     LDA $6D
0C/9662: E9 00     SBC #$00
0C/9664: 85 6D     STA $6D
0C/9666: 18        CLC 
0C/9667: A5 6C     LDA $6C
0C/9669: 65 6B     ADC $6B
0C/966B: 85 6C     STA $6C
0C/966D: A5 6D     LDA $6D
0C/966F: 69 00     ADC #$00
0C/9671: 85 6D     STA $6D
0C/9673: A0 00     LDY #$00
0C/9675: A5 6A     LDA $6A
0C/9677: 91 6C     STA ($6C),Y
0C/9679: 68        PLA 
0C/967A: 85 6D     STA $6D
0C/967C: 68        PLA 
0C/967D: 85 6C     STA $6C
0C/967F: 68        PLA 
0C/9680: A8        TAY 
0C/9681: 68        PLA 
0C/9682: 60        RTS 

; [ draw monster names ]

0C/9683: A9 AC     LDA #$AC           ; 05/AC44 (monster names)
0C/9685: 85 63     STA $63
0C/9687: A9 44     LDA #$44
0C/9689: 85 62     STA $62
0C/968B: A9 08     LDA #$08
0C/968D: 85 45     STA $45
0C/968F: 85 44     STA $44
0C/9691: A2 00     LDX #$00
0C/9693: 86 4B     STX $4B
0C/9695: A6 4B     LDX $4B
0C/9697: BD 4E 7B  LDA $7B4E,X
0C/969A: 30 0F     BMI $96AB
0C/969C: 85 64     STA $64
0C/969E: 20 AB 9A  JSR $9AAB          ; load text (bank 05)
0C/96A1: 20 E7 95  JSR $95E7          ; copy text to buffer
0C/96A4: 18        CLC 
0C/96A5: A5 44     LDA $44
0C/96A7: 69 10     ADC #$10
0C/96A9: 85 44     STA $44
0C/96AB: A6 4B     LDX $4B
0C/96AD: E8        INX 
0C/96AE: 86 4B     STX $4B
0C/96B0: E0 04     CPX #$04
0C/96B2: D0 E1     BNE $9695
0C/96B4: 60        RTS 

; [ get window position data pointer ]

; unused, same as 05/ABD8

0C/96B5: A5 62     LDA $62
0C/96B7: 48        PHA 
0C/96B8: A5 63     LDA $63
0C/96BA: 48        PHA 
0C/96BB: A9 00     LDA #$00
0C/96BD: 85 65     STA $65
0C/96BF: A5 64     LDA $64
0C/96C1: 0A        ASL 
0C/96C2: 26 65     ROL $65
0C/96C4: 18        CLC 
0C/96C5: 65 62     ADC $62
0C/96C7: 85 62     STA $62
0C/96C9: A5 65     LDA $65
0C/96CB: 65 63     ADC $63
0C/96CD: 85 63     STA $63
0C/96CF: A0 00     LDY #$00
0C/96D1: B1 62     LDA ($62),Y
0C/96D3: 85 78     STA $78
0C/96D5: C8        INY 
0C/96D6: B1 62     LDA ($62),Y
0C/96D8: 85 79     STA $79
0C/96DA: 68        PLA 
0C/96DB: A5 63     LDA $63
0C/96DD: 68        PLA 
0C/96DE: A5 62     LDA $62
0C/96E0: 60        RTS 

; [ update character/monster pointers ]

0C/96E1: 8A        TXA 
0C/96E2: 48        PHA 
0C/96E3: A5 9E     LDA $9E            ; character/monster id
0C/96E5: C9 04     CMP #$04
0C/96E7: B0 1C     BCS $9705          ; branch if a monster
0C/96E9: 20 26 97  JSR $9726          ; get character properties offset
0C/96EC: 18        CLC 
0C/96ED: 69 00     ADC #$00           ; $6100 (character properties 1)
0C/96EF: 85 7A     STA $7A
0C/96F1: A9 00     LDA #$00
0C/96F3: 69 61     ADC #$61
0C/96F5: 85 7B     STA $7B
0C/96F7: 20 26 97  JSR $9726          ; get character properties offset
0C/96FA: 18        CLC 
0C/96FB: 69 00     ADC #$00           ; $6100 (character properties 1)
0C/96FD: 85 7E     STA $7E
0C/96FF: A9 00     LDA #$00
0C/9701: 69 62     ADC #$62
0C/9703: 85 7F     STA $7F
0C/9705: A5 9E     LDA $9E
0C/9707: 85 00     STA $00
0C/9709: A9 30     LDA #$30           ; multiply by 48 bytes
0C/970B: 85 02     STA $02
0C/970D: A9 00     LDA #$00
0C/970F: 85 01     STA $01
0C/9711: 85 03     STA $03
0C/9713: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/9716: 18        CLC 
0C/9717: A5 04     LDA $04
0C/9719: 69 7A     ADC #$7A           ; $7D7A (character/monster battle stats)
0C/971B: 85 80     STA $80
0C/971D: A5 05     LDA $05
0C/971F: 69 7D     ADC #$7D
0C/9721: 85 81     STA $81
0C/9723: 68        PLA 
0C/9724: AA        TAX 
0C/9725: 60        RTS 

; [ get character properties offset ]

0C/9726: A5 9E     LDA $9E
0C/9728: 0A        ASL 
0C/9729: 0A        ASL 
0C/972A: 0A        ASL 
0C/972B: 0A        ASL 
0C/972C: 0A        ASL 
0C/972D: 0A        ASL 
0C/972E: 60        RTS 

; [ load battle text ]

; $66: text id
; $67: tile offset

0C/972F: A9 B2     LDA #$B2           ; 05/B295 (battle text)
0C/9731: 85 63     STA $63
0C/9733: A9 95     LDA #$95
0C/9735: 85 62     STA $62
0C/9737: A5 66     LDA $66
0C/9739: 85 64     STA $64
0C/973B: 20 AB 9A  JSR $9AAB          ; load text (bank 05)
0C/973E: A5 68     LDA $68
0C/9740: 85 45     STA $45
0C/9742: A5 67     LDA $67
0C/9744: 85 44     STA $44
0C/9746: 4C E7 95  JMP $95E7          ; copy text to buffer

; [ convert hex to decimal ]

0C/9749: A9 10     LDA #$10           ; 10000
0C/974B: 85 70     STA $70
0C/974D: A9 27     LDA #$27
0C/974F: 85 71     STA $71
0C/9751: 20 E9 97  JSR $97E9
0C/9754: A5 64     LDA $64
0C/9756: 48        PHA 
0C/9757: A9 E8     LDA #$E8           ; 1000
0C/9759: 85 70     STA $70
0C/975B: A9 03     LDA #$03
0C/975D: 85 71     STA $71
0C/975F: 20 E9 97  JSR $97E9
0C/9762: A5 64     LDA $64
0C/9764: 85 65     STA $65
0C/9766: A9 64     LDA #$64           ; 100
0C/9768: 85 70     STA $70
0C/976A: A9 00     LDA #$00
0C/976C: 85 71     STA $71
0C/976E: 20 E9 97  JSR $97E9
0C/9771: A5 64     LDA $64
0C/9773: 85 66     STA $66
0C/9775: A9 0A     LDA #$0A           ; 10
0C/9777: 85 70     STA $70
0C/9779: A9 00     LDA #$00
0C/977B: 85 71     STA $71
0C/977D: 20 E9 97  JSR $97E9
0C/9780: A5 64     LDA $64
0C/9782: 85 67     STA $67
0C/9784: A5 62     LDA $62
0C/9786: 85 68     STA $68
0C/9788: 68        PLA 
0C/9789: 85 64     STA $64
0C/978B: A5 64     LDA $64
0C/978D: D0 06     BNE $9795
0C/978F: A9 FF     LDA #$FF
0C/9791: 85 64     STA $64
0C/9793: D0 07     BNE $979C
0C/9795: 18        CLC 
0C/9796: A5 64     LDA $64
0C/9798: 69 80     ADC #$80           ; get tile id
0C/979A: 85 64     STA $64
0C/979C: A5 64     LDA $64
0C/979E: C9 FF     CMP #$FF
0C/97A0: D0 0A     BNE $97AC
0C/97A2: A5 65     LDA $65
0C/97A4: D0 06     BNE $97AC
0C/97A6: A9 FF     LDA #$FF
0C/97A8: 85 65     STA $65
0C/97AA: D0 07     BNE $97B3
0C/97AC: 18        CLC 
0C/97AD: A5 65     LDA $65
0C/97AF: 69 80     ADC #$80
0C/97B1: 85 65     STA $65
0C/97B3: A5 65     LDA $65
0C/97B5: C9 FF     CMP #$FF
0C/97B7: D0 0A     BNE $97C3
0C/97B9: A5 66     LDA $66
0C/97BB: D0 06     BNE $97C3
0C/97BD: A9 FF     LDA #$FF
0C/97BF: 85 66     STA $66
0C/97C1: D0 07     BNE $97CA
0C/97C3: 18        CLC 
0C/97C4: A5 66     LDA $66
0C/97C6: 69 80     ADC #$80
0C/97C8: 85 66     STA $66
0C/97CA: A5 66     LDA $66
0C/97CC: C9 FF     CMP #$FF
0C/97CE: D0 0A     BNE $97DA
0C/97D0: A5 67     LDA $67
0C/97D2: D0 06     BNE $97DA
0C/97D4: A9 FF     LDA #$FF
0C/97D6: 85 67     STA $67
0C/97D8: D0 07     BNE $97E1
0C/97DA: 18        CLC 
0C/97DB: A5 67     LDA $67
0C/97DD: 69 80     ADC #$80
0C/97DF: 85 67     STA $67
0C/97E1: 18        CLC 
0C/97E2: A5 68     LDA $68
0C/97E4: 69 80     ADC #$80
0C/97E6: 85 68     STA $68
0C/97E8: 60        RTS 

; [ divide ]

0C/97E9: A2 00     LDX #$00
0C/97EB: E8        INX 
0C/97EC: 38        SEC 
0C/97ED: A5 62     LDA $62
0C/97EF: E5 70     SBC $70
0C/97F1: 85 62     STA $62
0C/97F3: A5 63     LDA $63
0C/97F5: E5 71     SBC $71
0C/97F7: 85 63     STA $63
0C/97F9: B0 F0     BCS $97EB
0C/97FB: CA        DEX 
0C/97FC: 86 64     STX $64
0C/97FE: 18        CLC 
0C/97FF: A5 62     LDA $62
0C/9801: 65 70     ADC $70
0C/9803: 85 62     STA $62
0C/9805: A5 63     LDA $63
0C/9807: 65 71     ADC $71
0C/9809: 85 63     STA $63
0C/980B: 60        RTS 

; [ copy oam data to ppu ]

0C/980C: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/980F: 20 2A FA  JSR $FA2A          ; wait for vblank
0C/9812: A9 00     LDA #$00           ; clear oam address
0C/9814: 8D 03 20  STA $2003
0C/9817: A9 02     LDA #$02           ; copy oam data to ppu
0C/9819: 8D 14 40  STA $4014
0C/981C: 60        RTS 

; [ scroll menu to default position ]

0C/981D: A9 00     LDA #$00
0C/981F: 85 64     STA $64
0C/9821: A9 00     LDA #$00
0C/9823: 85 65     STA $65
0C/9825: A9 01     LDA #$01
0C/9827: 85 63     STA $63
0C/9829: 4C C6 9A  JMP $9AC6          ; scroll menu

; [ scroll menu to battle command window ]

0C/982C: A9 48     LDA #$48
0C/982E: 85 64     STA $64
0C/9830: A9 00     LDA #$00
0C/9832: 85 65     STA $65
0C/9834: A9 00     LDA #$00
0C/9836: 85 63     STA $63
0C/9838: 4C C6 9A  JMP $9AC6          ; scroll menu

; [  ]

0C/983B: A9 00     LDA #$00
0C/983D: 85 64     STA $64
0C/983F: A9 01     LDA #$01
0C/9841: 85 65     STA $65
0C/9843: A9 00     LDA #$00
0C/9845: 85 63     STA $63
0C/9847: 4C C6 9A  JMP $9AC6          ; scroll menu

; [  ]

0C/984A: A9 48     LDA #$48
0C/984C: 85 64     STA $64
0C/984E: A9 00     LDA #$00
0C/9850: 85 65     STA $65
0C/9852: A9 01     LDA #$01
0C/9854: 85 63     STA $63
0C/9856: 4C C6 9A  JMP $9AC6          ; scroll menu

; [  ]

0C/9859: A9 40     LDA #$40
0C/985B: 85 64     STA $64
0C/985D: A9 01     LDA #$01
0C/985F: 85 65     STA $65
0C/9861: A9 00     LDA #$00
0C/9863: 85 63     STA $63
0C/9865: 4C C6 9A  JMP $9AC6          ; scroll menu

; [ init battle stats ]

0C/9868: A9 7D     LDA #$7D           ; $7D7A (character/monster properties)
0C/986A: 85 45     STA $45
0C/986C: A9 7A     LDA #$7A
0C/986E: 85 44     STA $44
0C/9870: A2 0C     LDX #$0C
0C/9872: A0 00     LDY #$00
0C/9874: A9 00     LDA #$00
0C/9876: 91 44     STA ($44),Y
0C/9878: C8        INY 
0C/9879: C0 30     CPY #$30
0C/987B: D0 F9     BNE $9876
0C/987D: 18        CLC 
0C/987E: A5 44     LDA $44
0C/9880: 69 30     ADC #$30
0C/9882: 85 44     STA $44
0C/9884: A5 45     LDA $45
0C/9886: 69 00     ADC #$00
0C/9888: 85 45     STA $45
0C/988A: CA        DEX 
0C/988B: D0 E5     BNE $9872
0C/988D: A9 00     LDA #$00
0C/988F: 85 9E     STA $9E
; start of character loop
0C/9891: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/9894: A0 35     LDY #$35
0C/9896: B1 7E     LDA ($7E),Y        ; invert character row
0C/9898: 49 01     EOR #$01
0C/989A: 91 7E     STA ($7E),Y
0C/989C: A9 00     LDA #$00
0C/989E: A0 06     LDY #$06
0C/98A0: 91 80     STA ($80),Y
0C/98A2: A0 09     LDY #$09
0C/98A4: 91 80     STA ($80),Y
0C/98A6: A0 2D     LDY #$2D
0C/98A8: 91 80     STA ($80),Y
0C/98AA: A0 12     LDY #$12
0C/98AC: 91 80     STA ($80),Y
0C/98AE: A0 13     LDY #$13
0C/98B0: 91 80     STA ($80),Y
0C/98B2: A9 14     LDA #$14
0C/98B4: A0 07     LDY #$07
0C/98B6: 91 80     STA ($80),Y
0C/98B8: A0 01     LDY #$01
0C/98BA: B1 7A     LDA ($7A),Y
0C/98BC: 20 C1 9A  JSR $9AC1          ; set character status 1
0C/98BF: A0 2C     LDY #$2C
0C/98C1: 91 80     STA ($80),Y
0C/98C3: A5 9E     LDA $9E
0C/98C5: C9 03     CMP #$03
0C/98C7: D0 0F     BNE $98D8
0C/98C9: A0 35     LDY #$35
0C/98CB: B1 7E     LDA ($7E),Y
0C/98CD: 10 09     BPL $98D8
0C/98CF: A9 80     LDA #$80
0C/98D1: 20 C1 9A  JSR $9AC1          ; set character status 1
0C/98D4: A0 2C     LDY #$2C
0C/98D6: 91 80     STA ($80),Y
0C/98D8: A0 08     LDY #$08
0C/98DA: B1 7A     LDA ($7A),Y
0C/98DC: A0 0A     LDY #$0A
0C/98DE: 91 80     STA ($80),Y
0C/98E0: A0 09     LDY #$09
0C/98E2: B1 7A     LDA ($7A),Y
0C/98E4: A0 0B     LDY #$0B
0C/98E6: 91 80     STA ($80),Y
0C/98E8: A0 0A     LDY #$0A
0C/98EA: B1 7A     LDA ($7A),Y
0C/98EC: A0 0E     LDY #$0E
0C/98EE: 91 80     STA ($80),Y
0C/98F0: A0 0B     LDY #$0B
0C/98F2: B1 7A     LDA ($7A),Y
0C/98F4: A0 0F     LDY #$0F
0C/98F6: 91 80     STA ($80),Y
0C/98F8: A0 0C     LDY #$0C
0C/98FA: B1 7A     LDA ($7A),Y
0C/98FC: A0 0C     LDY #$0C
0C/98FE: 91 80     STA ($80),Y
0C/9900: A0 0D     LDY #$0D
0C/9902: B1 7A     LDA ($7A),Y
0C/9904: A0 0D     LDY #$0D
0C/9906: 91 80     STA ($80),Y
0C/9908: A0 0E     LDY #$0E
0C/990A: B1 7A     LDA ($7A),Y
0C/990C: A0 10     LDY #$10
0C/990E: 91 80     STA ($80),Y
0C/9910: A0 0F     LDY #$0F
0C/9912: B1 7A     LDA ($7A),Y
0C/9914: A0 11     LDY #$11
0C/9916: 91 80     STA ($80),Y
0C/9918: A5 80     LDA $80
0C/991A: 85 A1     STA $A1
0C/991C: A5 81     LDA $81
0C/991E: 85 A2     STA $A2
0C/9920: 20 E0 AE  JSR $AEE0
0C/9923: E6 9E     INC $9E            ; next character
0C/9925: A5 9E     LDA $9E
0C/9927: C9 04     CMP #$04
0C/9929: F0 03     BEQ $992E
0C/992B: 4C 91 98  JMP $9891
0C/992E: A9 7E     LDA #$7E
0C/9930: 85 77     STA $77
0C/9932: A9 3A     LDA #$3A
0C/9934: 85 76     STA $76
0C/9936: A9 00     LDA #$00
0C/9938: 85 9E     STA $9E
; start of monster loop
0C/993A: A9 00     LDA #$00
0C/993C: A2 00     LDX #$00
0C/993E: 95 44     STA $44,X
0C/9940: E8        INX 
0C/9941: E0 30     CPX #$30
0C/9943: D0 F9     BNE $993E
0C/9945: A6 9E     LDX $9E
0C/9947: BD 62 7B  LDA $7B62,X
0C/994A: 10 07     BPL $9953
0C/994C: A9 80     LDA #$80
0C/994E: 85 4C     STA $4C
0C/9950: 4C 32 9A  JMP $9A32
0C/9953: 85 00     STA $00
0C/9955: A9 0A     LDA #$0A
0C/9957: 85 02     STA $02
0C/9959: A9 00     LDA #$00
0C/995B: 85 01     STA $01
0C/995D: 85 03     STA $03
0C/995F: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/9962: A5 04     LDA $04
0C/9964: 69 C3     ADC #$C3           ; 0C/87C3 (monster properties)
0C/9966: 85 7A     STA $7A
0C/9968: A5 05     LDA $05
0C/996A: 69 87     ADC #$87
0C/996C: 85 7B     STA $7B
0C/996E: A0 01     LDY #$01
0C/9970: B1 7A     LDA ($7A),Y
0C/9972: 0A        ASL 
0C/9973: 18        CLC 
0C/9974: 69 C3     ADC #$C3           ; 0C/8CC3 (monster hp/mp values)
0C/9976: 85 78     STA $78
0C/9978: A9 00     LDA #$00
0C/997A: 69 8C     ADC #$8C
0C/997C: 85 79     STA $79
0C/997E: A0 00     LDY #$00
0C/9980: B1 78     LDA ($78),Y
0C/9982: 85 4E     STA $4E
0C/9984: 85 52     STA $52
0C/9986: C8        INY 
0C/9987: B1 78     LDA ($78),Y
0C/9989: 85 4F     STA $4F
0C/998B: 85 53     STA $53
0C/998D: A0 02     LDY #$02
0C/998F: B1 7A     LDA ($7A),Y
0C/9991: 0A        ASL 
0C/9992: 18        CLC 
0C/9993: 69 C3     ADC #$C3           ; 0C/8CC3 (monster hp/mp values)
0C/9995: 85 78     STA $78
0C/9997: A9 00     LDA #$00
0C/9999: 69 8C     ADC #$8C
0C/999B: 85 79     STA $79
0C/999D: A0 00     LDY #$00
0C/999F: B1 78     LDA ($78),Y
0C/99A1: 85 A1     STA $A1
0C/99A3: 85 50     STA $50
0C/99A5: 85 54     STA $54
0C/99A7: C8        INY 
0C/99A8: B1 78     LDA ($78),Y
0C/99AA: 85 A2     STA $A2
0C/99AC: 85 51     STA $51
0C/99AE: 85 55     STA $55
0C/99B0: A0 03     LDY #$03
0C/99B2: B1 7A     LDA ($7A),Y
0C/99B4: 20 07 FD  JSR $FD07          ; get low/high nybble
0C/99B7: A8        TAY 
0C/99B8: B9 03 8D  LDA $8D03,Y
0C/99BB: 85 5C     STA $5C
0C/99BD: BD 13 8D  LDA $8D13,X
0C/99C0: 85 5D     STA $5D
0C/99C2: A0 04     LDY #$04
0C/99C4: B1 7A     LDA ($7A),Y
0C/99C6: 20 07 FD  JSR $FD07          ; get low/high nybble
0C/99C9: A8        TAY 
0C/99CA: B9 23 8D  LDA $8D23,Y
0C/99CD: 85 5E     STA $5E
0C/99CF: BD 33 8D  LDA $8D33,X
0C/99D2: 85 61     STA $61
0C/99D4: A0 05     LDY #$05
0C/99D6: B1 7A     LDA ($7A),Y
0C/99D8: 20 07 FD  JSR $FD07          ; get low/high nybble
0C/99DB: A8        TAY 
0C/99DC: B9 03 8D  LDA $8D03,Y
0C/99DF: 85 44     STA $44
0C/99E1: BD 13 8D  LDA $8D13,X
0C/99E4: 85 45     STA $45
0C/99E6: A0 06     LDY #$06
0C/99E8: B1 7A     LDA ($7A),Y
0C/99EA: 20 07 FD  JSR $FD07          ; get low/high nybble
0C/99ED: A8        TAY 
0C/99EE: B9 23 8D  LDA $8D23,Y
0C/99F1: 85 46     STA $46
0C/99F3: BD 03 8D  LDA $8D03,X
0C/99F6: 85 47     STA $47
0C/99F8: A0 07     LDY #$07
0C/99FA: B1 7A     LDA ($7A),Y
0C/99FC: 20 07 FD  JSR $FD07          ; get low/high nybble
0C/99FF: A8        TAY 
0C/9A00: B9 13 8D  LDA $8D13,Y
0C/9A03: 85 48     STA $48
0C/9A05: BD 43 8D  LDA $8D43,X
0C/9A08: 85 59     STA $59
0C/9A0A: A0 08     LDY #$08
0C/9A0C: B1 7A     LDA ($7A),Y
0C/9A0E: 20 07 FD  JSR $FD07          ; get low/high nybble
0C/9A11: A8        TAY 
0C/9A12: B9 53 8D  LDA $8D53,Y
0C/9A15: 85 49     STA $49
0C/9A17: BD 63 8D  LDA $8D63,X
0C/9A1A: 85 5A     STA $5A
0C/9A1C: A0 09     LDY #$09
0C/9A1E: B1 7A     LDA ($7A),Y
0C/9A20: 20 07 FD  JSR $FD07          ; get low/high nybble
0C/9A23: A8        TAY 
0C/9A24: B9 23 8D  LDA $8D23,Y
0C/9A27: 85 58     STA $58
0C/9A29: BD 63 8D  LDA $8D63,X
0C/9A2C: 85 5B     STA $5B
0C/9A2E: A9 14     LDA #$14
0C/9A30: 85 4B     STA $4B
0C/9A32: A0 00     LDY #$00
0C/9A34: A2 00     LDX #$00
0C/9A36: B5 44     LDA $44,X
0C/9A38: 91 76     STA ($76),Y
0C/9A3A: C8        INY 
0C/9A3B: E8        INX 
0C/9A3C: E0 30     CPX #$30
0C/9A3E: D0 F6     BNE $9A36
0C/9A40: 18        CLC                ; next monster
0C/9A41: A5 76     LDA $76
0C/9A43: 69 30     ADC #$30
0C/9A45: 85 76     STA $76
0C/9A47: A5 77     LDA $77
0C/9A49: 69 00     ADC #$00
0C/9A4B: 85 77     STA $77
0C/9A4D: E6 9E     INC $9E
0C/9A4F: A5 9E     LDA $9E
0C/9A51: C9 08     CMP #$08
0C/9A53: F0 03     BEQ $9A58
0C/9A55: 4C 3A 99  JMP $993A
0C/9A58: A9 00     LDA #$00
0C/9A5A: 85 9E     STA $9E
0C/9A5C: 60        RTS 

; [  ]

0C/9A5D: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9A60: 4C 5B FD  JMP $FD5B          ; wait for first menu scanline

; [  ]

0C/9A63: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/9A66: 4C 46 FD  JMP $FD46          ; wait for first battlefield scanline

; [ init battle nmi jump code ]

0C/9A69: A9 9A     LDA #$9A           ; JMP $9A79
0C/9A6B: 8D 02 01  STA $0102
0C/9A6E: A9 79     LDA #$79
0C/9A70: 8D 01 01  STA $0101
0C/9A73: A9 4C     LDA #$4C
0C/9A75: 8D 00 01  STA $0100
0C/9A78: 60        RTS 

; [ battle nmi ]

0C/9A79: 08        PHP 
0C/9A7A: 48        PHA 
0C/9A7B: 8A        TXA 
0C/9A7C: 48        PHA 
0C/9A7D: 98        TYA 
0C/9A7E: 48        PHA 
0C/9A7F: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9A82: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/9A85: A9 00     LDA #$00
0C/9A87: 85 AC     STA $AC
0C/9A89: 68        PLA 
0C/9A8A: A8        TAY 
0C/9A8B: 68        PLA 
0C/9A8C: AA        TAX 
0C/9A8D: 68        PLA 
0C/9A8E: 28        PLP 
0C/9A8F: 40        RTI 

; [ hide cursor sprites ]

0C/9A90: A9 F0     LDA #$F0
0C/9A92: 8D 50 02  STA $0250
0C/9A95: 8D 54 02  STA $0254
0C/9A98: 8D 58 02  STA $0258
0C/9A9B: 8D 5C 02  STA $025C
0C/9A9E: 8D 40 02  STA $0240
0C/9AA1: 8D 44 02  STA $0244
0C/9AA4: 8D 48 02  STA $0248
0C/9AA7: 8D 4C 02  STA $024C
0C/9AAA: 60        RTS 

; [ load text (bank 05) ]

; +$62: pointer table address
;  $64: index

0C/9AAB: A2 00     LDX #$00
0C/9AAD: 86 6F     STX $6F
0C/9AAF: 86 AA     STX $AA
0C/9AB1: A2 05     LDX #$05
0C/9AB3: 4C 8C FD  JMP $FD8C          ; load text

; [ load text (bank 0A) ]

; +$62: pointer table address
;  $64: index

0C/9AB6: A2 00     LDX #$00
0C/9AB8: 86 6F     STX $6F
0C/9ABA: 86 AA     STX $AA
0C/9ABC: A2 0A     LDX #$0A
0C/9ABE: 4C 8C FD  JMP $FD8C          ; load text

; [ set character status 1 ]

0C/9AC1: A0 08     LDY #$08
0C/9AC3: 91 80     STA ($80),Y
0C/9AC5: 60        RTS 

; [ scroll menu ]

0C/9AC6: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9AC9: 20 90 9A  JSR $9A90          ; hide cursor sprites
0C/9ACC: 20 0C 98  JSR $980C          ; copy oam data to ppu
0C/9ACF: A5 3A     LDA $3A
0C/9AD1: 29 01     AND #$01
0C/9AD3: 85 62     STA $62
0C/9AD5: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9AD8: A5 63     LDA $63
0C/9ADA: D0 22     BNE $9AFE
0C/9ADC: 18        CLC 
0C/9ADD: A5 38     LDA $38
0C/9ADF: 69 20     ADC #$20
0C/9AE1: 85 38     STA $38
0C/9AE3: A5 62     LDA $62
0C/9AE5: 69 00     ADC #$00
0C/9AE7: 85 62     STA $62
0C/9AE9: 38        SEC 
0C/9AEA: A5 64     LDA $64
0C/9AEC: E5 38     SBC $38
0C/9AEE: A5 65     LDA $65
0C/9AF0: E5 62     SBC $62
0C/9AF2: 90 37     BCC $9B2B
0C/9AF4: A5 3A     LDA $3A
0C/9AF6: 29 FE     AND #$FE
0C/9AF8: 05 62     ORA $62
0C/9AFA: 85 3A     STA $3A
0C/9AFC: D0 27     BNE $9B25
0C/9AFE: 38        SEC 
0C/9AFF: A5 38     LDA $38
0C/9B01: E9 20     SBC #$20
0C/9B03: 85 38     STA $38
0C/9B05: A5 62     LDA $62
0C/9B07: E9 00     SBC #$00
0C/9B09: 85 62     STA $62
0C/9B0B: A5 62     LDA $62
0C/9B0D: 10 06     BPL $9B15
0C/9B0F: A9 00     LDA #$00
0C/9B11: 85 38     STA $38
0C/9B13: 85 62     STA $62
0C/9B15: 38        SEC 
0C/9B16: A5 64     LDA $64
0C/9B18: E5 38     SBC $38
0C/9B1A: A5 65     LDA $65
0C/9B1C: E5 62     SBC $62
0C/9B1E: B0 0B     BCS $9B2B
0C/9B20: 20 35 9B  JSR $9B35
0C/9B23: D0 00     BNE $9B25
0C/9B25: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/9B28: 4C D5 9A  JMP $9AD5
0C/9B2B: A5 64     LDA $64
0C/9B2D: 85 38     STA $38
0C/9B2F: 20 35 9B  JSR $9B35
0C/9B32: 4C 5B FD  JMP $FD5B          ; wait for first menu scanline

; [  ]

0C/9B35: A5 3A     LDA $3A
0C/9B37: 29 FE     AND #$FE
0C/9B39: 05 62     ORA $62
0C/9B3B: 85 3A     STA $3A
0C/9B3D: 60        RTS 

; [  ]

0C/9B3E: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9B41: A9 88     LDA #$88
0C/9B43: 85 68     STA $68
0C/9B45: A9 27     LDA #$27
0C/9B47: 85 69     STA $69
0C/9B49: A9 80     LDA #$80
0C/9B4B: 85 6A     STA $6A
0C/9B4D: A9 23     LDA #$23
0C/9B4F: 85 6B     STA $6B
0C/9B51: A9 0A     LDA #$0A
0C/9B53: 85 66     STA $66
0C/9B55: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/9B58: 20 2A FA  JSR $FA2A          ; wait for vblank
0C/9B5B: 20 02 94  JSR $9402          ; set ppu address
0C/9B5E: A0 18     LDY #$18
0C/9B60: A9 FF     LDA #$FF
0C/9B62: 20 85 9B  JSR $9B85          ; fill ppu
0C/9B65: 20 17 94  JSR $9417          ; set ppu address (overflow)
0C/9B68: A0 0A     LDY #$0A
0C/9B6A: A9 FF     LDA #$FF
0C/9B6C: 20 85 9B  JSR $9B85          ; fill ppu
0C/9B6F: 20 8C 9B  JSR $9B8C
0C/9B72: 20 9A 9B  JSR $9B9A
0C/9B75: C6 66     DEC $66
0C/9B77: F0 06     BEQ $9B7F
0C/9B79: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9B7C: 4C 55 9B  JMP $9B55
0C/9B7F: A9 00     LDA #$00
0C/9B81: 8D CA 7C  STA $7CCA
0C/9B84: 60        RTS 

; [ fill ppu ]

; A: fill tile
; Y: count

0C/9B85: 8D 07 20  STA $2007
0C/9B88: 88        DEY 
0C/9B89: D0 FA     BNE $9B85
0C/9B8B: 60        RTS 

; [  ]

0C/9B8C: 38        SEC 
0C/9B8D: A5 68     LDA $68
0C/9B8F: E9 20     SBC #$20
0C/9B91: 85 68     STA $68
0C/9B93: A5 69     LDA $69
0C/9B95: E9 00     SBC #$00
0C/9B97: 85 69     STA $69
0C/9B99: 60        RTS 

; [  ]

0C/9B9A: 38        SEC 
0C/9B9B: A5 6A     LDA $6A
0C/9B9D: E9 20     SBC #$20
0C/9B9F: 85 6A     STA $6A
0C/9BA1: A5 6B     LDA $6B
0C/9BA3: E9 00     SBC #$00
0C/9BA5: 85 6B     STA $6B
0C/9BA7: 60        RTS 

; [ get battle command input ]

0C/9BA8: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9BAB: A5 50     LDA $50
0C/9BAD: D0 20     BNE $9BCF
0C/9BAF: 85 53     STA $53
0C/9BB1: 85 54     STA $54
0C/9BB3: A0 00     LDY #$00
0C/9BB5: B1 66     LDA ($66),Y
0C/9BB7: 8D 47 02  STA $0247
0C/9BBA: 85 56     STA $56
0C/9BBC: C8        INY 
0C/9BBD: B1 66     LDA ($66),Y
0C/9BBF: 8D 44 02  STA $0244
0C/9BC2: 85 55     STA $55
0C/9BC4: A9 40     LDA #$40           ; $0240 (cursor 1 sprite)
0C/9BC6: 85 64     STA $64
0C/9BC8: A9 02     LDA #$02
0C/9BCA: 85 65     STA $65
0C/9BCC: 20 02 9D  JSR $9D02          ; set positions for 16x16 sprite
0C/9BCF: 20 E4 FA  JSR $FAE4          ; update status animation
0C/9BD2: AD BA 7C  LDA $7CBA
0C/9BD5: F0 03     BEQ $9BDA
0C/9BD7: 20 F5 9E  JSR $9EF5
0C/9BDA: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9BDD: 20 34 FC  JSR $FC34          ; update joypad input
0C/9BE0: 20 E4 FA  JSR $FAE4          ; update status animation
0C/9BE3: 20 BF 9C  JSR $9CBF
0C/9BE6: AD 34 00  LDA $0034
0C/9BE9: F0 EF     BEQ $9BDA          ; wait for keypress
0C/9BEB: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9BEE: A5 5D     LDA $5D
0C/9BF0: F0 27     BEQ $9C19
0C/9BF2: AD 34 00  LDA $0034
0C/9BF5: C9 80     CMP #$80
0C/9BF7: D0 10     BNE $9C09
; right button
0C/9BF9: E6 53     INC $53
0C/9BFB: A5 53     LDA $53
0C/9BFD: C5 5D     CMP $5D
0C/9BFF: D0 05     BNE $9C06
0C/9C01: A9 00     LDA #$00
0C/9C03: 8D 53 00  STA $0053
0C/9C06: 4C 6C 9C  JMP $9C6C
; left button
0C/9C09: C9 40     CMP #$40
0C/9C0B: D0 0C     BNE $9C19
0C/9C0D: C6 53     DEC $53
0C/9C0F: 10 05     BPL $9C16
0C/9C11: A6 5D     LDX $5D
0C/9C13: CA        DEX 
0C/9C14: 86 53     STX $53
0C/9C16: 4C 6C 9C  JMP $9C6C
; down button
0C/9C19: AD 34 00  LDA $0034
0C/9C1C: C9 20     CMP #$20
0C/9C1E: D0 0F     BNE $9C2F          ; branch if not pressing select button
0C/9C20: E6 54     INC $54
0C/9C22: A5 54     LDA $54
0C/9C24: C5 5C     CMP $5C
0C/9C26: D0 04     BNE $9C2C
0C/9C28: A9 00     LDA #$00
0C/9C2A: 85 54     STA $54
0C/9C2C: 4C 6C 9C  JMP $9C6C
; up button
0C/9C2F: C9 10     CMP #$10
0C/9C31: D0 0C     BNE $9C3F
0C/9C33: C6 54     DEC $54
0C/9C35: 10 05     BPL $9C3C
0C/9C37: A6 5C     LDX $5C
0C/9C39: CA        DEX 
0C/9C3A: 86 54     STX $54
0C/9C3C: 4C 6C 9C  JMP $9C6C
; A button
0C/9C3F: C9 01     CMP #$01
0C/9C41: D0 1C     BNE $9C5F
0C/9C43: A9 00     LDA #$00
0C/9C45: A6 5C     LDX $5C
0C/9C47: F0 06     BEQ $9C4F
0C/9C49: 18        CLC 
0C/9C4A: 65 54     ADC $54
0C/9C4C: CA        DEX 
0C/9C4D: D0 FA     BNE $9C49
0C/9C4F: 18        CLC 
0C/9C50: 65 53     ADC $53
0C/9C52: AA        TAX 
0C/9C53: BD E3 7C  LDA $7CE3,X
0C/9C56: D0 06     BNE $9C5E
0C/9C58: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/9C5B: 4C DA 9B  JMP $9BDA
0C/9C5E: 60        RTS 
; B button
0C/9C5F: C9 02     CMP #$02
0C/9C61: D0 03     BNE $9C66
0C/9C63: 4C 5B FD  JMP $FD5B          ; wait for first menu scanline
0C/9C66: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/9C69: 4C DA 9B  JMP $9BDA
0C/9C6C: A5 66     LDA $66
0C/9C6E: 85 68     STA $68
0C/9C70: A5 67     LDA $67
0C/9C72: 85 69     STA $69
0C/9C74: A5 53     LDA $53
0C/9C76: 0A        ASL 
0C/9C77: 85 44     STA $44
0C/9C79: A4 5C     LDY $5C
0C/9C7B: 88        DEY 
0C/9C7C: 18        CLC 
0C/9C7D: 65 44     ADC $44
0C/9C7F: 88        DEY 
0C/9C80: D0 FA     BNE $9C7C
0C/9C82: 85 44     STA $44
0C/9C84: A5 54     LDA $54
0C/9C86: 0A        ASL 
0C/9C87: 18        CLC 
0C/9C88: 65 44     ADC $44
0C/9C8A: 18        CLC 
0C/9C8B: 65 66     ADC $66
0C/9C8D: 85 68     STA $68
0C/9C8F: A9 00     LDA #$00
0C/9C91: 65 67     ADC $67
0C/9C93: 85 69     STA $69
0C/9C95: A0 00     LDY #$00
0C/9C97: B1 68     LDA ($68),Y
0C/9C99: 8D 47 02  STA $0247
0C/9C9C: 85 56     STA $56
0C/9C9E: C8        INY 
0C/9C9F: B1 68     LDA ($68),Y
0C/9CA1: 8D 44 02  STA $0244
0C/9CA4: 85 55     STA $55
0C/9CA6: A9 40     LDA #$40
0C/9CA8: 85 64     STA $64
0C/9CAA: A9 02     LDA #$02
0C/9CAC: 85 65     STA $65
0C/9CAE: 20 02 9D  JSR $9D02          ; set positions for 16x16 sprite
0C/9CB1: 20 E4 FA  JSR $FAE4          ; update status animation
0C/9CB4: AD BA 7C  LDA $7CBA
0C/9CB7: F0 03     BEQ $9CBC
0C/9CB9: 20 F5 9E  JSR $9EF5
0C/9CBC: 4C DA 9B  JMP $9BDA

; [  ]

0C/9CBF: A5 51     LDA $51
0C/9CC1: F0 3E     BEQ $9D01
0C/9CC3: AD B2 7C  LDA $7CB2
0C/9CC6: D0 33     BNE $9CFB
0C/9CC8: AD B3 7C  LDA $7CB3
0C/9CCB: 8D B2 7C  STA $7CB2
0C/9CCE: A5 56     LDA $56
0C/9CD0: 8D 47 02  STA $0247
0C/9CD3: A5 55     LDA $55
0C/9CD5: 8D 44 02  STA $0244
0C/9CD8: A9 02     LDA #$02           ; $0240 (cursor 1 sprite)
0C/9CDA: 85 65     STA $65
0C/9CDC: A9 40     LDA #$40
0C/9CDE: 85 64     STA $64
0C/9CE0: 20 02 9D  JSR $9D02          ; set positions for 16x16 sprite
0C/9CE3: A5 58     LDA $58
0C/9CE5: 8D 57 02  STA $0257
0C/9CE8: A5 57     LDA $57
0C/9CEA: 8D 54 02  STA $0254
0C/9CED: A9 02     LDA #$02           ; $0250 (cursor 2 sprite)
0C/9CEF: 85 65     STA $65
0C/9CF1: A9 50     LDA #$50
0C/9CF3: 85 64     STA $64
0C/9CF5: 20 02 9D  JSR $9D02          ; set positions for 16x16 sprite
0C/9CF8: 4C 01 9D  JMP $9D01
0C/9CFB: CE B2 7C  DEC $7CB2
0C/9CFE: 20 90 9A  JSR $9A90          ; hide cursor sprites
0C/9D01: 60        RTS 

; [ set positions for 16x16 sprite ]

; +$64: pointer to top-right sprite data

0C/9D02: A0 04     LDY #$04
0C/9D04: B1 64     LDA ($64),Y
0C/9D06: 85 62     STA $62            ; $62: y position
0C/9D08: A0 07     LDY #$07
0C/9D0A: B1 64     LDA ($64),Y
0C/9D0C: 85 63     STA $63            ; $63: x position
0C/9D0E: A0 00     LDY #$00
0C/9D10: A5 62     LDA $62
0C/9D12: 91 64     STA ($64),Y        ; set top-left sprite position
0C/9D14: C8        INY 
0C/9D15: C8        INY 
0C/9D16: C8        INY 
0C/9D17: 38        SEC 
0C/9D18: A5 63     LDA $63
0C/9D1A: E9 08     SBC #$08
0C/9D1C: 91 64     STA ($64),Y
0C/9D1E: C8        INY 
0C/9D1F: C8        INY 
0C/9D20: C8        INY 
0C/9D21: C8        INY 
0C/9D22: C8        INY 
0C/9D23: 18        CLC 
0C/9D24: A5 62     LDA $62
0C/9D26: 69 08     ADC #$08
0C/9D28: 91 64     STA ($64),Y        ; set bottom-left sprite position
0C/9D2A: C8        INY 
0C/9D2B: C8        INY 
0C/9D2C: C8        INY 
0C/9D2D: 38        SEC 
0C/9D2E: A5 63     LDA $63
0C/9D30: E9 08     SBC #$08
0C/9D32: 91 64     STA ($64),Y
0C/9D34: C8        INY 
0C/9D35: 18        CLC 
0C/9D36: A5 62     LDA $62
0C/9D38: 69 08     ADC #$08
0C/9D3A: 91 64     STA ($64),Y        ; set bottom right sprite position
0C/9D3C: C8        INY 
0C/9D3D: C8        INY 
0C/9D3E: C8        INY 
0C/9D3F: A5 63     LDA $63
0C/9D41: 91 64     STA ($64),Y
0C/9D43: 60        RTS 

; [ target select 2: magic ]

0C/9D44: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9D47: 20 90 94  JSR $9490          ; clear text buffer
0C/9D4A: A9 C7     LDA #$C7
0C/9D4C: 8D 01 76  STA $7601
0C/9D4F: A9 C9     LDA #$C9
0C/9D51: 8D 02 76  STA $7602
0C/9D54: A0 0C     LDY #$0C
0C/9D56: B1 80     LDA ($80),Y
0C/9D58: 85 62     STA $62
0C/9D5A: C8        INY 
0C/9D5B: B1 80     LDA ($80),Y
0C/9D5D: 85 63     STA $63
0C/9D5F: 20 49 97  JSR $9749          ; convert hex to decimal
0C/9D62: A2 07     LDX #$07
0C/9D64: A5 66     LDA $66
0C/9D66: 9D 00 76  STA $7600,X
0C/9D69: E8        INX 
0C/9D6A: A5 67     LDA $67
0C/9D6C: 9D 00 76  STA $7600,X
0C/9D6F: E8        INX 
0C/9D70: A5 68     LDA $68
0C/9D72: 9D 00 76  STA $7600,X
0C/9D75: A0 10     LDY #$10
0C/9D77: B1 80     LDA ($80),Y
0C/9D79: 85 62     STA $62
0C/9D7B: C8        INY 
0C/9D7C: B1 80     LDA ($80),Y
0C/9D7E: 85 63     STA $63
0C/9D80: 20 49 97  JSR $9749          ; convert hex to decimal
0C/9D83: A2 0B     LDX #$0B
0C/9D85: A5 66     LDA $66
0C/9D87: 9D 00 76  STA $7600,X
0C/9D8A: E8        INX 
0C/9D8B: A5 67     LDA $67
0C/9D8D: 9D 00 76  STA $7600,X
0C/9D90: E8        INX 
0C/9D91: A5 68     LDA $68
0C/9D93: 9D 00 76  STA $7600,X
0C/9D96: A2 0A     LDX #$0A
0C/9D98: A9 7A     LDA #$7A
0C/9D9A: 9D 00 76  STA $7600,X
0C/9D9D: A9 07     LDA #$07           ; $07: "MP Cost"
0C/9D9F: 85 66     STA $66
0C/9DA1: A9 1C     LDA #$1C
0C/9DA3: 85 67     STA $67
0C/9DA5: 20 2F 97  JSR $972F          ; load battle text
0C/9DA8: A2 03     LDX #$03
0C/9DAA: BD 70 9F  LDA $9F70,X        ; mp window position data
0C/9DAD: 95 62     STA $62,X
0C/9DAF: CA        DEX 
0C/9DB0: 10 F8     BPL $9DAA
0C/9DB2: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/9DB5: 20 50 92  JSR $9250          ; open window
0C/9DB8: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9DBB: A0 30     LDY #$30
0C/9DBD: A2 00     LDX #$00
0C/9DBF: 86 76     STX $76
0C/9DC1: B1 7A     LDA ($7A),Y
0C/9DC3: C8        INY 
0C/9DC4: 9D E3 7C  STA $7CE3,X
0C/9DC7: 05 76     ORA $76
0C/9DC9: 85 76     STA $76
0C/9DCB: E8        INX 
0C/9DCC: E0 10     CPX #$10
0C/9DCE: D0 F1     BNE $9DC1
0C/9DD0: 20 90 94  JSR $9490          ; clear text buffer
0C/9DD3: 20 85 9E  JSR $9E85
0C/9DD6: A2 03     LDX #$03
0C/9DD8: BD 74 9F  LDA $9F74,X        ; magic list window position data
0C/9DDB: 95 62     STA $62,X
0C/9DDD: CA        DEX 
0C/9DDE: 10 F8     BPL $9DD8
0C/9DE0: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/9DE3: 20 50 92  JSR $9250          ; open window
0C/9DE6: A9 40     LDA #$40
0C/9DE8: 85 64     STA $64
0C/9DEA: A9 01     LDA #$01
0C/9DEC: 85 65     STA $65
0C/9DEE: A9 00     LDA #$00
0C/9DF0: 85 63     STA $63
0C/9DF2: 20 C6 9A  JSR $9AC6          ; scroll menu
0C/9DF5: A5 76     LDA $76
0C/9DF7: D0 09     BNE $9E02
0C/9DF9: C6 9E     DEC $9E
0C/9DFB: A0 20     LDY #$20
0C/9DFD: 20 9B 94  JSR $949B          ; wait 32 frames
0C/9E00: F0 74     BEQ $9E76
0C/9E02: A9 BF     LDA #$BF           ; 0C/BFD5
0C/9E04: 85 67     STA $67
0C/9E06: A9 D5     LDA #$D5
0C/9E08: 85 66     STA $66
0C/9E0A: A9 04     LDA #$04
0C/9E0C: 85 5C     STA $5C
0C/9E0E: A9 04     LDA #$04
0C/9E10: 85 5D     STA $5D
0C/9E12: A9 01     LDA #$01
0C/9E14: 8D BA 7C  STA $7CBA
0C/9E17: 20 A8 9B  JSR $9BA8
0C/9E1A: AD 34 00  LDA $0034
0C/9E1D: C9 01     CMP #$01
0C/9E1F: F0 02     BEQ $9E23
0C/9E21: D0 51     BNE $9E74          ; branch if A button is not pressed
0C/9E23: 38        SEC 
0C/9E24: A0 0C     LDY #$0C
0C/9E26: B1 80     LDA ($80),Y
0C/9E28: E5 77     SBC $77
0C/9E2A: C8        INY 
0C/9E2B: B1 80     LDA ($80),Y
0C/9E2D: E9 00     SBC #$00
0C/9E2F: B0 02     BCS $9E33
0C/9E31: 90 CF     BCC $9E02
0C/9E33: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9E36: 20 C0 FA  JSR $FAC0          ; choose targets
0C/9E39: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/9E3C: A0 2B     LDY #$2B
0C/9E3E: B1 80     LDA ($80),Y        ; targets
0C/9E40: C9 FF     CMP #$FF
0C/9E42: D0 02     BNE $9E46
0C/9E44: F0 BC     BEQ $9E02
0C/9E46: A5 9E     LDA $9E
0C/9E48: 0A        ASL 
0C/9E49: 0A        ASL 
0C/9E4A: 0A        ASL 
0C/9E4B: 0A        ASL 
0C/9E4C: 85 00     STA $00
0C/9E4E: A5 54     LDA $54
0C/9E50: 0A        ASL 
0C/9E51: 0A        ASL 
0C/9E52: 18        CLC 
0C/9E53: 65 53     ADC $53
0C/9E55: 65 00     ADC $00
0C/9E57: AA        TAX 
0C/9E58: FE F7 7C  INC $7CF7,X
0C/9E5B: A6 9E     LDX $9E
0C/9E5D: A0 2A     LDY #$2A
0C/9E5F: B1 80     LDA ($80),Y
0C/9E61: C9 15     CMP #$15
0C/9E63: B0 05     BCS $9E6A
0C/9E65: FE 3F 7D  INC $7D3F,X
0C/9E68: D0 03     BNE $9E6D
0C/9E6A: FE 43 7D  INC $7D43,X
0C/9E6D: A0 20     LDY #$20
0C/9E6F: 20 9B 94  JSR $949B          ; wait 32 frames
0C/9E72: F0 02     BEQ $9E76
0C/9E74: C6 9E     DEC $9E
0C/9E76: 20 90 9A  JSR $9A90          ; hide cursor sprites
0C/9E79: 20 4A 98  JSR $984A
0C/9E7C: 20 3E 9B  JSR $9B3E
0C/9E7F: A9 00     LDA #$00
0C/9E81: 8D BA 7C  STA $7CBA
0C/9E84: 60        RTS 

; [  ]

0C/9E85: 20 6C AF  JSR $AF6C          ; get status 1
0C/9E88: 29 30     AND #$30
0C/9E8A: D0 0B     BNE $9E97
0C/9E8C: C8        INY 
0C/9E8D: B1 80     LDA ($80),Y
0C/9E8F: 29 10     AND #$10
0C/9E91: D0 04     BNE $9E97
0C/9E93: A5 76     LDA $76
0C/9E95: D0 03     BNE $9E9A
0C/9E97: 4C E2 9E  JMP $9EE2
0C/9E9A: A9 82     LDA #$82           ; string offset: $0100 (item names)
0C/9E9C: 85 63     STA $63
0C/9E9E: A9 00     LDA #$00
0C/9EA0: 85 62     STA $62
0C/9EA2: A9 04     LDA #$04
0C/9EA4: 85 47     STA $47
0C/9EA6: A9 16     LDA #$16
0C/9EA8: 85 48     STA $48
0C/9EAA: A0 30     LDY #$30
0C/9EAC: 98        TYA 
0C/9EAD: 48        PHA 
0C/9EAE: A9 04     LDA #$04
0C/9EB0: 85 46     STA $46
0C/9EB2: 68        PLA 
0C/9EB3: A8        TAY 
0C/9EB4: 18        CLC 
0C/9EB5: B1 7A     LDA ($7A),Y        ; string index
0C/9EB7: 85 64     STA $64
0C/9EB9: C8        INY 
0C/9EBA: 98        TYA 
0C/9EBB: 48        PHA 
0C/9EBC: A9 15     LDA #$15
0C/9EBE: 85 45     STA $45
0C/9EC0: A5 48     LDA $48
0C/9EC2: 85 44     STA $44
0C/9EC4: 20 B6 9A  JSR $9AB6          ; load text (bank 0A)
0C/9EC7: 20 E7 95  JSR $95E7          ; copy text to buffer
0C/9ECA: 18        CLC 
0C/9ECB: A5 48     LDA $48
0C/9ECD: 69 05     ADC #$05
0C/9ECF: 85 48     STA $48
0C/9ED1: C6 46     DEC $46
0C/9ED3: D0 DD     BNE $9EB2
0C/9ED5: 18        CLC 
0C/9ED6: A5 48     LDA $48
0C/9ED8: 69 16     ADC #$16
0C/9EDA: 85 48     STA $48
0C/9EDC: C6 47     DEC $47
0C/9EDE: D0 CE     BNE $9EAE
0C/9EE0: 68        PLA 
0C/9EE1: 60        RTS 
0C/9EE2: A9 00     LDA #$00
0C/9EE4: 85 76     STA $76
0C/9EE6: A9 15     LDA #$15
0C/9EE8: 85 68     STA $68
0C/9EEA: A9 08     LDA #$08           ; $08: "No Magic…"
0C/9EEC: 85 66     STA $66
0C/9EEE: A9 58     LDA #$58
0C/9EF0: 85 67     STA $67
0C/9EF2: 4C 2F 97  JMP $972F          ; load battle text

; [  ]

0C/9EF5: A5 62     LDA $62
0C/9EF7: 48        PHA 
0C/9EF8: A5 63     LDA $63
0C/9EFA: 48        PHA 
0C/9EFB: A5 64     LDA $64
0C/9EFD: 48        PHA 
0C/9EFE: A5 65     LDA $65
0C/9F00: 48        PHA 
0C/9F01: A5 66     LDA $66
0C/9F03: 48        PHA 
0C/9F04: A5 67     LDA $67
0C/9F06: 48        PHA 
0C/9F07: A5 68     LDA $68
0C/9F09: 48        PHA 
0C/9F0A: A5 54     LDA $54
0C/9F0C: 0A        ASL 
0C/9F0D: 0A        ASL 
0C/9F0E: 0A        ASL 
0C/9F0F: 18        CLC 
0C/9F10: 65 53     ADC $53
0C/9F12: 65 53     ADC $53
0C/9F14: 69 10     ADC #$10
0C/9F16: A8        TAY 
0C/9F17: B1 7E     LDA ($7E),Y
0C/9F19: AA        TAX 
0C/9F1A: E8        INX 
0C/9F1B: 86 77     STX $77
0C/9F1D: 86 62     STX $62
0C/9F1F: A0 25     LDY #$25
0C/9F21: 8A        TXA 
0C/9F22: 91 80     STA ($80),Y
0C/9F24: A5 54     LDA $54
0C/9F26: 0A        ASL 
0C/9F27: 0A        ASL 
0C/9F28: 18        CLC 
0C/9F29: 65 53     ADC $53
0C/9F2B: 69 30     ADC #$30
0C/9F2D: A8        TAY 
0C/9F2E: B1 7A     LDA ($7A),Y        ; spell list
0C/9F30: 38        SEC 
0C/9F31: E9 BF     SBC #$BF
0C/9F33: A0 2A     LDY #$2A
0C/9F35: 91 80     STA ($80),Y        ; set battle command
0C/9F37: A9 00     LDA #$00
0C/9F39: 85 63     STA $63
0C/9F3B: 20 49 97  JSR $9749          ; convert hex to decimal
0C/9F3E: A9 23     LDA #$23
0C/9F40: 8D 06 20  STA $2006
0C/9F43: A9 22     LDA #$22
0C/9F45: 8D 06 20  STA $2006
0C/9F48: A9 00     LDA #$00
0C/9F4A: 8D 05 20  STA $2005
0C/9F4D: 8D 05 20  STA $2005
0C/9F50: A5 67     LDA $67
0C/9F52: 8D 07 20  STA $2007
0C/9F55: A5 68     LDA $68
0C/9F57: 8D 07 20  STA $2007
0C/9F5A: 68        PLA 
0C/9F5B: 85 68     STA $68
0C/9F5D: 68        PLA 
0C/9F5E: 85 67     STA $67
0C/9F60: 68        PLA 
0C/9F61: 85 66     STA $66
0C/9F63: 68        PLA 
0C/9F64: 85 65     STA $65
0C/9F66: 68        PLA 
0C/9F67: 85 64     STA $64
0C/9F69: 68        PLA 
0C/9F6A: 85 63     STA $63
0C/9F6C: 68        PLA 
0C/9F6D: 85 62     STA $62
0C/9F6F: 60        RTS 

; mp window position data
0C/9F70: 3F 13 47 1E

; magic list window position data
0C/9F74: 28 13 3E 1E

; [ target select 3: item ]

0C/9F78: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/9F7B: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/9F7E: A2 00     LDX #$00
0C/9F80: A9 01     LDA #$01
0C/9F82: 9D E3 7C  STA $7CE3,X
0C/9F85: E8        INX 
0C/9F86: E0 04     CPX #$04
0C/9F88: D0 F8     BNE $9F82
0C/9F8A: 20 20 A0  JSR $A020          ; open item window
0C/9F8D: 20 3B 98  JSR $983B
0C/9F90: A9 00     LDA #$00
0C/9F92: 85 50     STA $50
0C/9F94: 85 61     STA $61
0C/9F96: A9 BF     LDA #$BF           ; 0C/BFCD
0C/9F98: 85 67     STA $67
0C/9F9A: A9 CD     LDA #$CD
0C/9F9C: 85 66     STA $66
0C/9F9E: A9 02     LDA #$02
0C/9FA0: 85 5C     STA $5C
0C/9FA2: A9 02     LDA #$02
0C/9FA4: 85 5D     STA $5D
0C/9FA6: 20 A8 9B  JSR $9BA8
0C/9FA9: AD 34 00  LDA $0034
0C/9FAC: C9 01     CMP #$01
0C/9FAE: F0 02     BEQ $9FB2
0C/9FB0: D0 54     BNE $A006          ; branch if A button is not pressed
0C/9FB2: A5 51     LDA $51
0C/9FB4: D0 1F     BNE $9FD5
0C/9FB6: AD 47 02  LDA $0247
0C/9FB9: 85 56     STA $56
0C/9FBB: 85 58     STA $58
0C/9FBD: AD 44 02  LDA $0244
0C/9FC0: 85 55     STA $55
0C/9FC2: 85 57     STA $57
0C/9FC4: A9 01     LDA #$01
0C/9FC6: 85 51     STA $51
0C/9FC8: 85 50     STA $50
0C/9FCA: A5 53     LDA $53
0C/9FCC: 85 5E     STA $5E
0C/9FCE: A5 54     LDA $54
0C/9FD0: 85 5F     STA $5F
0C/9FD2: 4C 96 9F  JMP $9F96
0C/9FD5: C6 51     DEC $51
0C/9FD7: C6 50     DEC $50
0C/9FD9: A5 5E     LDA $5E
0C/9FDB: C5 53     CMP $53
0C/9FDD: D0 15     BNE $9FF4
0C/9FDF: A5 5F     LDA $5F
0C/9FE1: C5 54     CMP $54
0C/9FE3: D0 0F     BNE $9FF4
0C/9FE5: 20 41 A1  JSR $A141          ; use item
0C/9FE8: A5 61     LDA $61
0C/9FEA: F0 06     BEQ $9FF2
0C/9FEC: 20 B7 A2  JSR $A2B7
0C/9FEF: 4C 96 9F  JMP $9F96
0C/9FF2: F0 22     BEQ $A016
0C/9FF4: 20 5B A0  JSR $A05B
0C/9FF7: A5 61     LDA $61
0C/9FF9: F0 06     BEQ $A001
0C/9FFB: 20 B7 A2  JSR $A2B7
0C/9FFE: 4C 96 9F  JMP $9F96
0C/A001: C6 9E     DEC $9E
0C/A003: 4C 16 A0  JMP $A016
0C/A006: A5 51     LDA $51
0C/A008: F0 0A     BEQ $A014
0C/A00A: C6 51     DEC $51
0C/A00C: C6 50     DEC $50
0C/A00E: 20 BC A2  JSR $A2BC
0C/A011: 4C 96 9F  JMP $9F96
0C/A014: C6 9E     DEC $9E
0C/A016: A9 00     LDA #$00
0C/A018: 85 51     STA $51
0C/A01A: 20 4A 98  JSR $984A
0C/A01D: 4C 3E 9B  JMP $9B3E

; [ open item window ]

0C/A020: 20 90 94  JSR $9490          ; clear text buffer
0C/A023: A9 15     LDA #$15
0C/A025: 85 68     STA $68
0C/A027: A9 04     LDA #$04           ; $04: "R.Hand"
0C/A029: 85 66     STA $66
0C/A02B: A9 15     LDA #$15
0C/A02D: 85 67     STA $67
0C/A02F: 20 2F 97  JSR $972F          ; load battle text
0C/A032: A9 05     LDA #$05           ; $05: "L.Hand"
0C/A034: 85 66     STA $66
0C/A036: A9 69     LDA #$69
0C/A038: 85 67     STA $67
0C/A03A: 20 2F 97  JSR $972F          ; load battle text
0C/A03D: A9 06     LDA #$06           ; $06: "Items"
0C/A03F: 85 66     STA $66
0C/A041: A9 20     LDA #$20
0C/A043: 85 67     STA $67
0C/A045: 20 2F 97  JSR $972F          ; load battle text
0C/A048: 20 35 A2  JSR $A235
0C/A04B: A2 03     LDX #$03
0C/A04D: BD 04 A3  LDA $A304,X
0C/A050: 95 62     STA $62,X
0C/A052: CA        DEX 
0C/A053: 10 F8     BPL $A04D
0C/A055: 20 BC A2  JSR $A2BC
0C/A058: 4C 50 92  JMP $9250          ; open window

; [  ]

0C/A05B: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/A05E: 20 C2 A2  JSR $A2C2
0C/A061: A5 62     LDA $62
0C/A063: C9 02     CMP #$02
0C/A065: 90 0B     BCC $A072
0C/A067: A5 63     LDA $63
0C/A069: C9 02     CMP #$02
0C/A06B: 90 05     BCC $A072
0C/A06D: A9 01     LDA #$01
0C/A06F: 85 61     STA $61
0C/A071: 60        RTS 
0C/A072: 38        SEC 
0C/A073: A5 62     LDA $62
0C/A075: E5 63     SBC $63
0C/A077: 90 0A     BCC $A083
0C/A079: A5 62     LDA $62
0C/A07B: 48        PHA 
0C/A07C: A5 63     LDA $63
0C/A07E: 85 62     STA $62
0C/A080: 68        PLA 
0C/A081: 85 63     STA $63
0C/A083: 18        CLC 
0C/A084: A5 62     LDA $62
0C/A086: 69 1C     ADC #$1C
0C/A088: 85 62     STA $62
0C/A08A: 18        CLC 
0C/A08B: A5 63     LDA $63
0C/A08D: 69 1C     ADC #$1C
0C/A08F: 85 63     STA $63
0C/A091: A4 62     LDY $62
0C/A093: B1 7A     LDA ($7A),Y
0C/A095: 85 64     STA $64
0C/A097: A4 63     LDY $63
0C/A099: B1 7A     LDA ($7A),Y
0C/A09B: 85 65     STA $65
0C/A09D: A5 64     LDA $64
0C/A09F: C5 65     CMP $65
0C/A0A1: D0 05     BNE $A0A8
0C/A0A3: A9 01     LDA #$01
0C/A0A5: 85 61     STA $61
0C/A0A7: 60        RTS 
0C/A0A8: A5 65     LDA $65
0C/A0AA: F0 09     BEQ $A0B5
0C/A0AC: C9 30     CMP #$30
0C/A0AE: B0 05     BCS $A0B5
0C/A0B0: A9 01     LDA #$01
0C/A0B2: 85 61     STA $61
0C/A0B4: 60        RTS 
0C/A0B5: A5 63     LDA $63
0C/A0B7: C9 1E     CMP #$1E
0C/A0B9: 90 39     BCC $A0F4
0C/A0BB: A5 65     LDA $65
0C/A0BD: C9 68     CMP #$68
0C/A0BF: 90 1B     BCC $A0DC
0C/A0C1: A0 1C     LDY #$1C
0C/A0C3: B1 7A     LDA ($7A),Y
0C/A0C5: C8        INY 
0C/A0C6: 11 7A     ORA ($7A),Y
0C/A0C8: C9 30     CMP #$30
0C/A0CA: F0 28     BEQ $A0F4
0C/A0CC: A5 62     LDA $62
0C/A0CE: 49 01     EOR #$01
0C/A0D0: A8        TAY 
0C/A0D1: B1 7A     LDA ($7A),Y
0C/A0D3: C9 30     CMP #$30
0C/A0D5: F0 1D     BEQ $A0F4
0C/A0D7: A9 01     LDA #$01
0C/A0D9: 85 61     STA $61
0C/A0DB: 60        RTS 
0C/A0DC: A4 62     LDY $62
0C/A0DE: B1 7A     LDA ($7A),Y
0C/A0E0: C9 68     CMP #$68
0C/A0E2: B0 10     BCS $A0F4
0C/A0E4: A5 62     LDA $62
0C/A0E6: 49 01     EOR #$01
0C/A0E8: A8        TAY 
0C/A0E9: B1 7A     LDA ($7A),Y
0C/A0EB: C9 68     CMP #$68
0C/A0ED: 90 05     BCC $A0F4
0C/A0EF: A9 01     LDA #$01
0C/A0F1: 85 61     STA $61
0C/A0F3: 60        RTS 
0C/A0F4: A4 62     LDY $62
0C/A0F6: A5 65     LDA $65
0C/A0F8: 91 7A     STA ($7A),Y
0C/A0FA: A4 63     LDY $63
0C/A0FC: A5 64     LDA $64
0C/A0FE: 91 7A     STA ($7A),Y
0C/A100: A0 1C     LDY #$1C
0C/A102: B1 7A     LDA ($7A),Y
0C/A104: D0 04     BNE $A10A
0C/A106: A9 30     LDA #$30
0C/A108: 91 7A     STA ($7A),Y
0C/A10A: C8        INY 
0C/A10B: B1 7A     LDA ($7A),Y
0C/A10D: D0 04     BNE $A113
0C/A10F: A9 30     LDA #$30
0C/A111: 91 7A     STA ($7A),Y
0C/A113: C8        INY 
0C/A114: B1 7A     LDA ($7A),Y
0C/A116: C9 30     CMP #$30
0C/A118: D0 04     BNE $A11E
0C/A11A: A9 00     LDA #$00
0C/A11C: 91 7A     STA ($7A),Y
0C/A11E: C8        INY 
0C/A11F: B1 7A     LDA ($7A),Y
0C/A121: C9 30     CMP #$30
0C/A123: D0 04     BNE $A129
0C/A125: A9 00     LDA #$00
0C/A127: 91 7A     STA ($7A),Y
0C/A129: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/A12C: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/A12F: A5 9E     LDA $9E
0C/A131: 09 80     ORA #$80
0C/A133: 20 FB FA  JSR $FAFB          ; update character equipment
0C/A136: 20 63 9A  JSR $9A63
0C/A139: 20 20 A0  JSR $A020          ; open item window
0C/A13C: A0 20     LDY #$20
0C/A13E: 4C 9B 94  JMP $949B          ; wait 32 frames

; [ use item ]

0C/A141: 20 C2 A2  JSR $A2C2
0C/A144: A5 63     LDA $63
0C/A146: 85 4E     STA $4E
0C/A148: AA        TAX 
0C/A149: BD C2 7C  LDA $7CC2,X        ; used weapon/item id
0C/A14C: D0 05     BNE $A153
0C/A14E: A9 01     LDA #$01
0C/A150: 85 61     STA $61
0C/A152: 60        RTS 
0C/A153: 48        PHA 
0C/A154: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/A157: 68        PLA 
0C/A158: C9 2F     CMP #$2F
0C/A15A: B0 06     BCS $A162          ; branch if not a usable item
0C/A15C: 38        SEC 
0C/A15D: E9 0E     SBC #$0E
0C/A15F: 4C 8F A1  JMP $A18F
0C/A162: C9 98     CMP #$98
0C/A164: 90 06     BCC $A16C          ; branch if a weapon or armor
0C/A166: 38        SEC 
0C/A167: E9 77     SBC #$77
0C/A169: 4C 8F A1  JMP $A18F
0C/A16C: 38        SEC 
0C/A16D: E9 30     SBC #$30
0C/A16F: 85 00     STA $00
0C/A171: A9 09     LDA #$09           ; weapon properties are 9 bytes each
0C/A173: 85 02     STA $02
0C/A175: A9 00     LDA #$00
0C/A177: 85 01     STA $01
0C/A179: 85 03     STA $03
0C/A17B: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/A17E: 18        CLC 
0C/A17F: A5 04     LDA $04
0C/A181: 69 F6     ADC #$F6           ; 0C/80F6 (weapon properties)
0C/A183: 85 62     STA $62
0C/A185: A5 05     LDA $05
0C/A187: 69 80     ADC #$80
0C/A189: 85 63     STA $63
0C/A18B: A0 08     LDY #$08
0C/A18D: B1 62     LDA ($62),Y        ; get weapon spellcast
0C/A18F: 85 00     STA $00
0C/A191: A9 05     LDA #$05           ; item properties are 5 bytes each
0C/A193: 85 02     STA $02
0C/A195: A9 00     LDA #$00
0C/A197: 85 01     STA $01
0C/A199: 85 03     STA $03
0C/A19B: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/A19E: 18        CLC 
0C/A19F: A5 04     LDA $04
0C/A1A1: 69 36     ADC #$36           ; 0C/8336 (item properties)
0C/A1A3: 85 62     STA $62
0C/A1A5: A5 05     LDA $05
0C/A1A7: 69 83     ADC #$83
0C/A1A9: 85 63     STA $63
0C/A1AB: A0 00     LDY #$00
0C/A1AD: B1 62     LDA ($62),Y        ; item attack
0C/A1AF: C9 FF     CMP #$FF
0C/A1B1: D0 06     BNE $A1B9
0C/A1B3: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/A1B6: 4C 08 A2  JMP $A208
0C/A1B9: A0 2A     LDY #$2A
0C/A1BB: 91 80     STA ($80),Y        ; set battle command
0C/A1BD: A0 01     LDY #$01
0C/A1BF: B1 62     LDA ($62),Y
0C/A1C1: A0 25     LDY #$25
0C/A1C3: 91 80     STA ($80),Y
0C/A1C5: A0 02     LDY #$02
0C/A1C7: B1 62     LDA ($62),Y
0C/A1C9: A0 26     LDY #$26
0C/A1CB: 91 80     STA ($80),Y
0C/A1CD: A0 03     LDY #$03
0C/A1CF: B1 62     LDA ($62),Y
0C/A1D1: C9 01     CMP #$01
0C/A1D3: D0 04     BNE $A1D9
0C/A1D5: A9 88     LDA #$88
0C/A1D7: D0 23     BNE $A1FC
0C/A1D9: C9 05     CMP #$05
0C/A1DB: D0 05     BNE $A1E2
0C/A1DD: A5 9E     LDA $9E
0C/A1DF: 4C FC A1  JMP $A1FC
0C/A1E2: C9 06     CMP #$06
0C/A1E4: D0 04     BNE $A1EA
0C/A1E6: A9 08     LDA #$08
0C/A1E8: D0 12     BNE $A1FC
0C/A1EA: A2 00     LDX #$00
0C/A1EC: A9 0B     LDA #$0B
0C/A1EE: 20 11 FD  JSR $FD11          ; random (X..A)
0C/A1F1: C9 04     CMP #$04
0C/A1F3: B0 02     BCS $A1F7
0C/A1F5: 90 05     BCC $A1FC
0C/A1F7: 38        SEC 
0C/A1F8: E9 04     SBC #$04
0C/A1FA: 09 80     ORA #$80
0C/A1FC: A0 2B     LDY #$2B
0C/A1FE: 91 80     STA ($80),Y
0C/A200: A0 2B     LDY #$2B
0C/A202: B1 80     LDA ($80),Y
0C/A204: C9 FF     CMP #$FF
0C/A206: D0 05     BNE $A20D
0C/A208: A9 01     LDA #$01
0C/A20A: 85 61     STA $61
0C/A20C: 60        RTS 
0C/A20D: A2 00     LDX #$00
0C/A20F: A9 63     LDA #$63
0C/A211: 20 11 FD  JSR $FD11          ; random (X..A)
0C/A214: 85 4F     STA $4F
0C/A216: A0 04     LDY #$04
0C/A218: B1 62     LDA ($62),Y
0C/A21A: 38        SEC 
0C/A21B: E5 4F     SBC $4F
0C/A21D: 90 09     BCC $A228
0C/A21F: A6 4E     LDX $4E
0C/A221: E8        INX 
0C/A222: 8A        TXA 
0C/A223: A6 9E     LDX $9E
0C/A225: 9D D6 7F  STA $7FD6,X
0C/A228: A6 9E     LDX $9E
0C/A22A: 9D CE 7F  STA $7FCE,X
0C/A22D: 20 BC A2  JSR $A2BC
0C/A230: A0 20     LDY #$20
0C/A232: 4C 9B 94  JMP $949B          ; wait 32 frames

; [  ]

0C/A235: A9 82     LDA #$82           ; string offset: $0100 (item names)
0C/A237: 85 63     STA $63
0C/A239: A9 00     LDA #$00
0C/A23B: 85 62     STA $62
0C/A23D: A0 1C     LDY #$1C
0C/A23F: A2 00     LDX #$00
0C/A241: B1 7A     LDA ($7A),Y
0C/A243: 85 64     STA $64
0C/A245: 9D C2 7C  STA $7CC2,X
0C/A248: E8        INX 
0C/A249: 8A        TXA 
0C/A24A: 48        PHA 
0C/A24B: C8        INY 
0C/A24C: 98        TYA 
0C/A24D: 48        PHA 
0C/A24E: A9 15     LDA #$15
0C/A250: 85 45     STA $45
0C/A252: A9 40     LDA #$40
0C/A254: 85 44     STA $44
0C/A256: 20 B6 9A  JSR $9AB6          ; load text (bank 0A)
0C/A259: 20 E7 95  JSR $95E7          ; copy text to buffer
0C/A25C: 68        PLA 
0C/A25D: A8        TAY 
0C/A25E: 68        PLA 
0C/A25F: AA        TAX 
0C/A260: B1 7A     LDA ($7A),Y
0C/A262: 85 64     STA $64
0C/A264: 9D C2 7C  STA $7CC2,X
0C/A267: E8        INX 
0C/A268: 8A        TXA 
0C/A269: 48        PHA 
0C/A26A: C8        INY 
0C/A26B: 98        TYA 
0C/A26C: 48        PHA 
0C/A26D: A9 94     LDA #$94
0C/A26F: 85 44     STA $44
0C/A271: 20 B6 9A  JSR $9AB6          ; load text (bank 0A)
0C/A274: 20 E7 95  JSR $95E7          ; copy text to buffer
0C/A277: 68        PLA 
0C/A278: A8        TAY 
0C/A279: 68        PLA 
0C/A27A: AA        TAX 
0C/A27B: B1 7A     LDA ($7A),Y
0C/A27D: D0 0E     BNE $A28D
0C/A27F: C8        INY 
0C/A280: B1 7A     LDA ($7A),Y
0C/A282: 88        DEY 
0C/A283: 91 7A     STA ($7A),Y
0C/A285: 48        PHA 
0C/A286: C8        INY 
0C/A287: A9 00     LDA #$00
0C/A289: 91 7A     STA ($7A),Y
0C/A28B: 88        DEY 
0C/A28C: 68        PLA 
0C/A28D: 85 64     STA $64
0C/A28F: 9D C2 7C  STA $7CC2,X
0C/A292: E8        INX 
0C/A293: 8A        TXA 
0C/A294: 48        PHA 
0C/A295: C8        INY 
0C/A296: 98        TYA 
0C/A297: 48        PHA 
0C/A298: A9 4B     LDA #$4B
0C/A29A: 85 44     STA $44
0C/A29C: 20 B6 9A  JSR $9AB6          ; load text (bank 0A)
0C/A29F: 20 E7 95  JSR $95E7          ; copy text to buffer
0C/A2A2: 68        PLA 
0C/A2A3: A8        TAY 
0C/A2A4: 68        PLA 
0C/A2A5: AA        TAX 
0C/A2A6: B1 7A     LDA ($7A),Y
0C/A2A8: 85 64     STA $64
0C/A2AA: 9D C2 7C  STA $7CC2,X
0C/A2AD: A9 75     LDA #$75
0C/A2AF: 85 44     STA $44
0C/A2B1: 20 B6 9A  JSR $9AB6          ; load text (bank 0A)
0C/A2B4: 4C E7 95  JMP $95E7          ; copy text to buffer

; [  ]

0C/A2B7: C6 61     DEC $61
0C/A2B9: 4C BC A2  JMP $A2BC

; [  ]

0C/A2BC: 20 90 9A  JSR $9A90          ; hide cursor sprites
0C/A2BF: 4C E4 FA  JMP $FAE4          ; update status animation

; [  ]

0C/A2C2: A5 5E     LDA $5E
0C/A2C4: D0 10     BNE $A2D6
0C/A2C6: A5 5F     LDA $5F
0C/A2C8: D0 06     BNE $A2D0
0C/A2CA: A9 00     LDA #$00
0C/A2CC: 85 62     STA $62
0C/A2CE: F0 14     BEQ $A2E4
0C/A2D0: A9 01     LDA #$01
0C/A2D2: 85 62     STA $62
0C/A2D4: D0 0E     BNE $A2E4
0C/A2D6: A5 5F     LDA $5F
0C/A2D8: D0 06     BNE $A2E0
0C/A2DA: A9 02     LDA #$02
0C/A2DC: 85 62     STA $62
0C/A2DE: D0 04     BNE $A2E4
0C/A2E0: A9 03     LDA #$03
0C/A2E2: 85 62     STA $62
0C/A2E4: A5 53     LDA $53
0C/A2E6: D0 0E     BNE $A2F6
0C/A2E8: A5 54     LDA $54
0C/A2EA: D0 05     BNE $A2F1
0C/A2EC: A9 00     LDA #$00
0C/A2EE: 85 63     STA $63
0C/A2F0: 60        RTS 
0C/A2F1: A9 01     LDA #$01
0C/A2F3: 85 63     STA $63
0C/A2F5: 60        RTS 
0C/A2F6: A5 54     LDA $54
0C/A2F8: D0 05     BNE $A2FF
0C/A2FA: A9 02     LDA #$02
0C/A2FC: 85 63     STA $63
0C/A2FE: 60        RTS 
0C/A2FF: A9 03     LDA #$03
0C/A301: 85 63     STA $63
0C/A303: 60        RTS 

; item window position data
0C/A304: 28 13 3E 1E

; --------------------------------------------------------------------------

; [ do battle round ]

0C/A308: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/A30B: AD 4A 7B  LDA $7B4A
0C/A30E: F0 42     BEQ $A352          ; branch if no surprise or first strike
0C/A310: 20 90 94  JSR $9490          ; clear text buffer
0C/A313: A2 09     LDX #$09           ; $09: "Preemptive Strike"
0C/A315: AC 4A 7B  LDY $7B4A
0C/A318: 88        DEY 
0C/A319: D0 01     BNE $A31C          ; branch if first strike
0C/A31B: E8        INX                ; $0A: "Ambushed!"
0C/A31C: 86 64     STX $64
0C/A31E: A9 B2     LDA #$B2           ; 05/B295 (battle text)
0C/A320: 85 63     STA $63
0C/A322: A9 95     LDA #$95
0C/A324: 85 62     STA $62
0C/A326: 20 AB 9A  JSR $9AAB          ; load text (bank 05)
0C/A329: A9 10     LDA #$10
0C/A32B: 85 44     STA $44
0C/A32D: 85 45     STA $45
0C/A32F: A9 00     LDA #$00
0C/A331: 85 6F     STA $6F
0C/A333: 20 E7 95  JSR $95E7          ; copy text to buffer
0C/A336: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/A339: A9 04     LDA #$04           ; bottom window
0C/A33B: 85 64     STA $64
0C/A33D: 20 42 FB  JSR $FB42          ; open message window
0C/A340: A0 20     LDY #$20
0C/A342: 20 9B 94  JSR $949B          ; wait 32 frames
0C/A345: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/A348: A9 04     LDA #$04           ; bottom window
0C/A34A: 85 64     STA $64
0C/A34C: 20 46 FB  JSR $FB46          ; close message window
0C/A34F: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/A352: 20 8A A6  JSR $A68A
0C/A355: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/A358: 20 41 A7  JSR $A741          ; do actions
0C/A35B: 4C 5E 90  JMP $905E          ; end of battle loop

; [ get monster actions ]

0C/A35E: 20 69 9A  JSR $9A69          ; init battle nmi jump code
0C/A361: A9 00     LDA #$00
0C/A363: 85 76     STA $76
0C/A365: A2 0F     LDX #$0F
0C/A367: 9D CE 7F  STA $7FCE,X
0C/A36A: CA        DEX 
0C/A36B: 10 FA     BPL $A367
0C/A36D: A9 7E     LDA #$7E           ; $7E3A (monster battle stats)
0C/A36F: 85 45     STA $45
0C/A371: A9 3A     LDA #$3A
0C/A373: 85 44     STA $44
0C/A375: 20 09 A7  JSR $A709          ; get monster status 1
0C/A378: 29 C0     AND #$C0
0C/A37A: F0 03     BEQ $A37F          ; branch if not dead or stone
0C/A37C: 20 20 A7  JSR $A720          ; do nothing
0C/A37F: 20 13 A7  JSR $A713          ; get monster status 2
0C/A382: 29 08     AND #$08
0C/A384: D0 06     BNE $A38C          ; branch if asleep
0C/A386: B1 44     LDA ($44),Y
0C/A388: 29 40     AND #$40
0C/A38A: F0 03     BEQ $A38F          ; branch if not paralyzed
0C/A38C: 20 20 A7  JSR $A720          ; do nothing
0C/A38F: AD 4B 7B  LDA $7B4B
0C/A392: D0 6D     BNE $A401
0C/A394: A9 7D     LDA #$7D           ; $7D7A (character battle stats)
0C/A396: 85 47     STA $47
0C/A398: A9 7A     LDA #$7A
0C/A39A: 85 46     STA $46
0C/A39C: A2 04     LDX #$04
0C/A39E: 20 3A A6  JSR $A63A          ; get current hp sum
0C/A3A1: A5 02     LDA $02
0C/A3A3: 85 00     STA $00
0C/A3A5: A5 03     LDA $03
0C/A3A7: 85 01     STA $01
0C/A3A9: A9 7E     LDA #$7E           ; $7E3A (monster battle stats)
0C/A3AB: 85 47     STA $47
0C/A3AD: A9 3A     LDA #$3A
0C/A3AF: 85 46     STA $46
0C/A3B1: A2 08     LDX #$08
0C/A3B3: 20 3A A6  JSR $A63A          ; get current hp sum
0C/A3B6: 38        SEC 
0C/A3B7: A5 00     LDA $00            ; +$00 = (character sum) - (monster sum)
0C/A3B9: E5 02     SBC $02
0C/A3BB: 85 00     STA $00
0C/A3BD: A5 01     LDA $01
0C/A3BF: E5 03     SBC $03
0C/A3C1: 85 01     STA $01
0C/A3C3: B0 06     BCS $A3CB          ; min 0
0C/A3C5: A9 00     LDA #$00
0C/A3C7: 85 00     STA $00
0C/A3C9: 85 01     STA $01
0C/A3CB: 46 01     LSR $01            ; divide by 32
0C/A3CD: 66 00     ROR $00
0C/A3CF: 46 01     LSR $01
0C/A3D1: 66 00     ROR $00
0C/A3D3: 46 01     LSR $01
0C/A3D5: 66 00     ROR $00
0C/A3D7: 46 01     LSR $01
0C/A3D9: 66 00     ROR $00
0C/A3DB: 46 01     LSR $01
0C/A3DD: 66 00     ROR $00
0C/A3DF: A0 14     LDY #$14
0C/A3E1: 18        CLC 
0C/A3E2: B1 44     LDA ($44),Y        ; add to monster fear level
0C/A3E4: 65 00     ADC $00
0C/A3E6: 85 00     STA $00
0C/A3E8: 38        SEC 
0C/A3E9: E9 AA     SBC #$AA           ; subtract 170
0C/A3EB: 85 48     STA $48
0C/A3ED: B0 04     BCS $A3F3          ; min 0
0C/A3EF: A9 00     LDA #$00
0C/A3F1: 85 48     STA $48
0C/A3F3: A2 01     LDX #$01
0C/A3F5: A9 64     LDA #$64
0C/A3F7: 20 11 FD  JSR $FD11          ; random (X..A)
0C/A3FA: C5 48     CMP $48
0C/A3FC: B0 03     BCS $A401          ; branch if monster doesn't try to run
0C/A3FE: 20 36 A7  JSR $A736          ; run away
0C/A401: A0 0C     LDY #$0C
0C/A403: B1 44     LDA ($44),Y        ; current mp
0C/A405: C8        INY 
0C/A406: 11 44     ORA ($44),Y
0C/A408: D0 03     BNE $A40D          ; branch if monster has mp left
0C/A40A: 20 2B A7  JSR $A72B          ; fight
0C/A40D: A6 76     LDX $76
0C/A40F: BD 62 7B  LDA $7B62,X        ; monster id
0C/A412: 85 00     STA $00
0C/A414: A9 0A     LDA #$0A
0C/A416: 85 02     STA $02
0C/A418: A9 00     LDA #$00
0C/A41A: 85 01     STA $01
0C/A41C: 85 03     STA $03
0C/A41E: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/A421: 18        CLC 
0C/A422: A5 04     LDA $04
0C/A424: 69 C3     ADC #$C3           ; 0C/87C3 (monster properties)
0C/A426: 85 46     STA $46
0C/A428: A5 05     LDA $05
0C/A42A: 69 87     ADC #$87
0C/A42C: 85 47     STA $47
0C/A42E: A0 00     LDY #$00
0C/A430: B1 46     LDA ($46),Y        ; monster properties byte 0 (special attack)
0C/A432: 10 03     BPL $A437          ; branch if monster has a valid special
0C/A434: 20 2B A7  JSR $A72B          ; fight
0C/A437: 85 00     STA $00
0C/A439: A9 08     LDA #$08
0C/A43B: 85 02     STA $02
0C/A43D: A9 00     LDA #$00
0C/A43F: 85 01     STA $01
0C/A441: 85 03     STA $03
0C/A443: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/A446: 18        CLC 
0C/A447: A5 04     LDA $04
0C/A449: 69 73     ADC #$73           ; 0C/8D73 (monster special attacks)
0C/A44B: 85 46     STA $46
0C/A44D: A5 05     LDA $05
0C/A44F: 69 8D     ADC #$8D
0C/A451: 85 47     STA $47
0C/A453: A2 00     LDX #$00
0C/A455: A9 63     LDA #$63
0C/A457: 20 11 FD  JSR $FD11          ; random (X..A)
0C/A45A: 85 00     STA $00
0C/A45C: A0 07     LDY #$07
0C/A45E: B9 18 A7  LDA $A718,Y        ; probabilities for monster special attacks
0C/A461: C5 00     CMP $00
0C/A463: B0 03     BCS $A468
0C/A465: 88        DEY 
0C/A466: 10 F6     BPL $A45E
0C/A468: B1 46     LDA ($46),Y        ; attack id
0C/A46A: 85 00     STA $00
0C/A46C: D0 03     BNE $A471          ; branch if not fight
0C/A46E: 20 2B A7  JSR $A72B          ; fight
0C/A471: C9 FE     CMP #$FE
0C/A473: D0 03     BNE $A478          ; branch if not run away
0C/A475: 20 36 A7  JSR $A736          ; run away
0C/A478: C6 00     DEC $00
0C/A47A: A9 05     LDA #$05
0C/A47C: 85 02     STA $02
0C/A47E: A9 00     LDA #$00
0C/A480: 85 01     STA $01
0C/A482: 85 03     STA $03
0C/A484: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/A487: 18        CLC 
0C/A488: A5 04     LDA $04
0C/A48A: 69 36     ADC #$36           ; 0C/8336 (item/attack properties)
0C/A48C: 85 46     STA $46
0C/A48E: A5 05     LDA $05
0C/A490: 69 83     ADC #$83
0C/A492: 85 47     STA $47
0C/A494: A0 01     LDY #$01
0C/A496: B1 46     LDA ($46),Y
0C/A498: A0 25     LDY #$25
0C/A49A: 91 44     STA ($44),Y        ; set spell level
0C/A49C: A0 02     LDY #$02
0C/A49E: B1 46     LDA ($46),Y
0C/A4A0: A0 26     LDY #$26
0C/A4A2: 91 44     STA ($44),Y        ; set mod. spell %
0C/A4A4: A0 03     LDY #$03
0C/A4A6: B1 46     LDA ($46),Y
0C/A4A8: 85 48     STA $48
0C/A4AA: A0 00     LDY #$00
0C/A4AC: B1 46     LDA ($46),Y
0C/A4AE: A8        TAY 
0C/A4AF: 88        DEY 
0C/A4B0: 84 00     STY $00            ; magic id
0C/A4B2: 98        TYA 
0C/A4B3: A6 76     LDX $76
0C/A4B5: 9D D3 7C  STA $7CD3,X
0C/A4B8: A9 07     LDA #$07
0C/A4BA: 85 02     STA $02
0C/A4BC: A9 00     LDA #$00
0C/A4BE: 85 01     STA $01
0C/A4C0: 85 03     STA $03
0C/A4C2: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/A4C5: 18        CLC 
0C/A4C6: A5 04     LDA $04
0C/A4C8: 69 D9     ADC #$D9           ; 0C/85D9 (magic properties)
0C/A4CA: 85 46     STA $46
0C/A4CC: A5 05     LDA $05
0C/A4CE: 69 85     ADC #$85
0C/A4D0: 85 47     STA $47
0C/A4D2: A0 00     LDY #$00
0C/A4D4: B1 46     LDA ($46),Y        ; battle command
0C/A4D6: 85 49     STA $49
0C/A4D8: C9 28     CMP #$28
0C/A4DA: B0 13     BCS $A4EF
0C/A4DC: 20 13 A7  JSR $A713          ; get monster status 2
0C/A4DF: 29 10     AND #$10
0C/A4E1: D0 09     BNE $A4EC          ; branch if mute
0C/A4E3: 20 09 A7  JSR $A709          ; get monster status 1
0C/A4E6: 29 10     AND #$10
0C/A4E8: D0 02     BNE $A4EC          ; branch if amnesia
0C/A4EA: F0 03     BEQ $A4EF
0C/A4EC: 20 2B A7  JSR $A72B          ; fight
0C/A4EF: A0 02     LDY #$02
0C/A4F1: B1 46     LDA ($46),Y
0C/A4F3: A0 27     LDY #$27
0C/A4F5: 91 44     STA ($44),Y        ; set mod. spell power
0C/A4F7: A0 03     LDY #$03
0C/A4F9: B1 46     LDA ($46),Y
0C/A4FB: A0 28     LDY #$28
0C/A4FD: 91 44     STA ($44),Y        ; set spell parameters
0C/A4FF: A0 04     LDY #$04
0C/A501: B1 46     LDA ($46),Y
0C/A503: A0 29     LDY #$29
0C/A505: 91 44     STA ($44),Y
0C/A507: A0 05     LDY #$05
0C/A509: B1 46     LDA ($46),Y
0C/A50B: A0 23     LDY #$23
0C/A50D: 91 44     STA ($44),Y        ; set special effects
0C/A50F: A0 06     LDY #$06
0C/A511: B1 46     LDA ($46),Y
0C/A513: A0 24     LDY #$24
0C/A515: 91 44     STA ($44),Y        ; set spell % penalty
0C/A517: A0 2A     LDY #$2A
0C/A519: A5 49     LDA $49
0C/A51B: 91 44     STA ($44),Y        ; set battle command
0C/A51D: C8        INY 
0C/A51E: A5 48     LDA $48
0C/A520: 91 44     STA ($44),Y
0C/A522: 20 13 A7  JSR $A713          ; get monster status 2
0C/A525: 10 13     BPL $A53A          ; branch if not confused
0C/A527: A2 00     LDX #$00           ; target a random monster
0C/A529: A9 07     LDA #$07
0C/A52B: 20 11 FD  JSR $FD11          ; random (X..A)
0C/A52E: AA        TAX 
0C/A52F: BD 62 7B  LDA $7B62,X
0C/A532: 30 F3     BMI $A527
0C/A534: 8A        TXA 
0C/A535: 09 80     ORA #$80
0C/A537: 4C 10 A6  JMP $A610
0C/A53A: A0 2A     LDY #$2A
0C/A53C: B1 44     LDA ($44),Y        ; battle command
0C/A53E: D0 31     BNE $A571          ; branch if not fight
; fight
0C/A540: A6 76     LDX $76
0C/A542: BD 5A 7B  LDA $7B5A,X
0C/A545: F0 03     BEQ $A54A          ; branch if in front row
0C/A547: 20 20 A7  JSR $A720          ; do nothing
0C/A54A: A2 00     LDX #$00           ; target a random character
0C/A54C: A9 03     LDA #$03
0C/A54E: 20 11 FD  JSR $FD11          ; random (X..A)
0C/A551: 85 9E     STA $9E
0C/A553: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/A556: 20 6C AF  JSR $AF6C          ; get status 1
0C/A559: 29 C0     AND #$C0
0C/A55B: F0 02     BEQ $A55F          ; branch if not dead or stone
0C/A55D: D0 EB     BNE $A54A
0C/A55F: A0 35     LDY #$35
0C/A561: B1 7E     LDA ($7E),Y        ; character row
0C/A563: 4A        LSR 
0C/A564: 90 02     BCC $A568          ; branch if front row
0C/A566: B0 E2     BCS $A54A          ; can't target back row characters
0C/A568: A5 9E     LDA $9E
0C/A56A: AA        TAX 
0C/A56B: FE 37 7D  INC $7D37,X        ; increment character physical hit counter
0C/A56E: 4C 10 A6  JMP $A610
0C/A571: A0 2B     LDY #$2B
0C/A573: B1 44     LDA ($44),Y
0C/A575: C9 01     CMP #$01
0C/A577: D0 05     BNE $A57E
0C/A579: A9 08     LDA #$08
0C/A57B: 4C 0C A6  JMP $A60C
0C/A57E: C9 02     CMP #$02
0C/A580: D0 18     BNE $A59A
0C/A582: A2 00     LDX #$00
0C/A584: A9 03     LDA #$03
0C/A586: 20 11 FD  JSR $FD11          ; random (X..A)
0C/A589: 85 9E     STA $9E
0C/A58B: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/A58E: 20 6C AF  JSR $AF6C          ; get status 1
0C/A591: 29 C0     AND #$C0
0C/A593: D0 ED     BNE $A582
0C/A595: A5 9E     LDA $9E
0C/A597: 4C 0C A6  JMP $A60C
0C/A59A: C9 05     CMP #$05
0C/A59C: D0 07     BNE $A5A5
0C/A59E: A5 76     LDA $76
0C/A5A0: 09 80     ORA #$80
0C/A5A2: 4C 10 A6  JMP $A610
0C/A5A5: C9 06     CMP #$06
0C/A5A7: D0 05     BNE $A5AE
0C/A5A9: A9 88     LDA #$88
0C/A5AB: 4C 10 A6  JMP $A610
0C/A5AE: C9 07     CMP #$07
0C/A5B0: D0 1B     BNE $A5CD
0C/A5B2: A2 00     LDX #$00
0C/A5B4: A9 07     LDA #$07
0C/A5B6: 20 11 FD  JSR $FD11          ; random (X..A)
0C/A5B9: 85 4E     STA $4E
0C/A5BB: A9 3A     LDA #$3A
0C/A5BD: 85 48     STA $48
0C/A5BF: A9 7E     LDA #$7E
0C/A5C1: 85 49     STA $49
0C/A5C3: 20 68 A6  JSR $A668
0C/A5C6: 30 EA     BMI $A5B2
0C/A5C8: A5 4E     LDA $4E
0C/A5CA: 4C 10 A6  JMP $A610
0C/A5CD: A2 00     LDX #$00
0C/A5CF: A9 0B     LDA #$0B
0C/A5D1: 20 11 FD  JSR $FD11          ; random (X..A)
0C/A5D4: 85 4E     STA $4E
0C/A5D6: C9 04     CMP #$04
0C/A5D8: B0 0F     BCS $A5E9
0C/A5DA: A9 7A     LDA #$7A
0C/A5DC: 85 48     STA $48
0C/A5DE: A9 7D     LDA #$7D
0C/A5E0: 85 49     STA $49
0C/A5E2: 20 68 A6  JSR $A668
0C/A5E5: 30 E6     BMI $A5CD
0C/A5E7: 10 1E     BPL $A607
0C/A5E9: 38        SEC 
0C/A5EA: E9 04     SBC #$04
0C/A5EC: 85 4E     STA $4E
0C/A5EE: A9 3A     LDA #$3A
0C/A5F0: 85 48     STA $48
0C/A5F2: A9 7E     LDA #$7E
0C/A5F4: 85 49     STA $49
0C/A5F6: 20 68 A6  JSR $A668
0C/A5F9: 30 D2     BMI $A5CD
0C/A5FB: A5 4E     LDA $4E
0C/A5FD: 25 76     AND $76
0C/A5FF: D0 CC     BNE $A5CD
0C/A601: A5 4E     LDA $4E
0C/A603: 09 80     ORA #$80
0C/A605: 85 4E     STA $4E
0C/A607: A5 4E     LDA $4E
0C/A609: 4C 10 A6  JMP $A610
0C/A60C: AA        TAX 
0C/A60D: FE 3B 7D  INC $7D3B,X
0C/A610: A0 2B     LDY #$2B
0C/A612: 91 44     STA ($44),Y
0C/A614: E6 76     INC $76
0C/A616: A5 76     LDA $76
0C/A618: C9 08     CMP #$08
0C/A61A: F0 10     BEQ $A62C
0C/A61C: 18        CLC 
0C/A61D: A5 44     LDA $44
0C/A61F: 69 30     ADC #$30
0C/A621: 85 44     STA $44
0C/A623: A5 45     LDA $45
0C/A625: 69 00     ADC #$00
0C/A627: 85 45     STA $45
0C/A629: 4C 75 A3  JMP $A375
0C/A62C: A9 01     LDA #$01
0C/A62E: 85 AC     STA $AC
0C/A630: A5 AC     LDA $AC
0C/A632: D0 FC     BNE $A630
0C/A634: 20 2A FA  JSR $FA2A          ; wait for vblank
0C/A637: 4C 5D 9A  JMP $9A5D

; [ get current hp sum ]

;    X: number of characters/monsters to sum
; +$02: sum of hp (out)
; +$46: pointer to character/monster battle stats

0C/A63A: A9 00     LDA #$00
0C/A63C: 85 02     STA $02
0C/A63E: 85 03     STA $03
0C/A640: 20 0E A7  JSR $A70E          ; get status 1
0C/A643: 29 C0     AND #$C0
0C/A645: D0 10     BNE $A657          ; branch if dead or stone
0C/A647: A0 0A     LDY #$0A
0C/A649: 18        CLC 
0C/A64A: B1 46     LDA ($46),Y        ; add current hp
0C/A64C: 65 02     ADC $02
0C/A64E: 85 02     STA $02
0C/A650: C8        INY 
0C/A651: B1 46     LDA ($46),Y
0C/A653: 65 03     ADC $03
0C/A655: 85 03     STA $03
0C/A657: 18        CLC                ; next character
0C/A658: A5 46     LDA $46
0C/A65A: 69 30     ADC #$30
0C/A65C: 85 46     STA $46
0C/A65E: A5 47     LDA $47
0C/A660: 69 00     ADC #$00
0C/A662: 85 47     STA $47
0C/A664: CA        DEX 
0C/A665: D0 D9     BNE $A640
0C/A667: 60        RTS 

; [  ]

0C/A668: A5 4E     LDA $4E
0C/A66A: 85 00     STA $00
0C/A66C: A9 30     LDA #$30
0C/A66E: 85 02     STA $02
0C/A670: A9 00     LDA #$00
0C/A672: 85 01     STA $01
0C/A674: 85 03     STA $03
0C/A676: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/A679: 18        CLC 
0C/A67A: A5 04     LDA $04
0C/A67C: 65 48     ADC $48
0C/A67E: 85 46     STA $46
0C/A680: A5 05     LDA $05
0C/A682: 65 49     ADC $49
0C/A684: 85 47     STA $47
0C/A686: 20 0E A7  JSR $A70E          ; get status 1
0C/A689: 60        RTS 

; [  ]

0C/A68A: A0 00     LDY #$00
0C/A68C: 84 54     STY $54
0C/A68E: 84 9E     STY $9E
0C/A690: A2 00     LDX #$00
0C/A692: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/A695: A0 01     LDY #$01
0C/A697: B1 80     LDA ($80),Y
0C/A699: 95 82     STA $82,X
0C/A69B: E8        INX 
0C/A69C: E6 9E     INC $9E
0C/A69E: E0 04     CPX #$04
0C/A6A0: D0 F0     BNE $A692
0C/A6A2: A2 01     LDX #$01
0C/A6A4: A9 28     LDA #$28
0C/A6A6: 20 11 FD  JSR $FD11          ; random (X..A)
0C/A6A9: A6 54     LDX $54
0C/A6AB: 95 48     STA $48,X
0C/A6AD: E6 54     INC $54
0C/A6AF: E0 0C     CPX #$0C
0C/A6B1: D0 EF     BNE $A6A2
0C/A6B3: A2 00     LDX #$00
0C/A6B5: 86 54     STX $54
0C/A6B7: A6 54     LDX $54
0C/A6B9: 18        CLC 
0C/A6BA: B5 48     LDA $48,X
0C/A6BC: 75 82     ADC $82,X
0C/A6BE: 95 48     STA $48,X
0C/A6C0: E6 54     INC $54
0C/A6C2: A5 54     LDA $54
0C/A6C4: C9 04     CMP #$04
0C/A6C6: D0 EF     BNE $A6B7
0C/A6C8: A9 7E     LDA #$7E
0C/A6CA: 85 55     STA $55
0C/A6CC: A9 3A     LDA #$3A
0C/A6CE: 85 54     STA $54
0C/A6D0: A2 04     LDX #$04
0C/A6D2: A0 01     LDY #$01
0C/A6D4: 18        CLC 
0C/A6D5: B5 48     LDA $48,X
0C/A6D7: 71 54     ADC ($54),Y
0C/A6D9: 95 48     STA $48,X
0C/A6DB: E8        INX 
0C/A6DC: 18        CLC 
0C/A6DD: A5 54     LDA $54
0C/A6DF: 69 30     ADC #$30
0C/A6E1: 85 54     STA $54
0C/A6E3: A5 55     LDA $55
0C/A6E5: 69 00     ADC #$00
0C/A6E7: 85 55     STA $55
0C/A6E9: E0 0C     CPX #$0C
0C/A6EB: D0 E7     BNE $A6D4
0C/A6ED: 20 63 9A  JSR $9A63
0C/A6F0: A9 00     LDA #$00
0C/A6F2: 85 05     STA $05
0C/A6F4: A9 47     LDA #$47
0C/A6F6: 85 04     STA $04
0C/A6F8: A9 7D     LDA #$7D
0C/A6FA: 85 07     STA $07
0C/A6FC: A9 5D     LDA #$5D
0C/A6FE: 85 06     STA $06
0C/A700: A9 01     LDA #$01
0C/A702: 85 02     STA $02
0C/A704: A9 0C     LDA #$0C
0C/A706: 4C 5E 8F  JMP $8F5E          ; sort values

; [ get monster status 1 ]

0C/A709: A0 08     LDY #$08
0C/A70B: B1 44     LDA ($44),Y
0C/A70D: 60        RTS 

; [ get status 1 ]

0C/A70E: A0 08     LDY #$08
0C/A710: B1 46     LDA ($46),Y
0C/A712: 60        RTS 

; [ get monster status 2 ]

0C/A713: A0 09     LDY #$09
0C/A715: B1 44     LDA ($44),Y
0C/A717: 60        RTS 

; probabilities for monster special attacks
0C/A718: 64 50 3C 28 1E 14 0A 05

; [ do nothing (monster) ]

0C/A720: A0 2A     LDY #$2A
0C/A722: A9 FF     LDA #$FF
0C/A724: 91 44     STA ($44),Y
0C/A726: 68        PLA 
0C/A727: 68        PLA 
0C/A728: 4C 14 A6  JMP $A614

; [ fight (monster) ]

0C/A72B: A0 2A     LDY #$2A
0C/A72D: A9 00     LDA #$00
0C/A72F: 91 44     STA ($44),Y
0C/A731: 68        PLA 
0C/A732: 68        PLA 
0C/A733: 4C 22 A5  JMP $A522

; [ run away (monster) ]

0C/A736: A0 2A     LDY #$2A
0C/A738: A9 FE     LDA #$FE
0C/A73A: 91 44     STA ($44),Y
0C/A73C: 68        PLA 
0C/A73D: 68        PLA 
0C/A73E: 4C 14 A6  JMP $A614

; [ do actions ]

0C/A741: A2 00     LDX #$00
0C/A743: 8E BB 7C  STX $7CBB
; start of turn order loop
0C/A746: A2 00     LDX #$00
0C/A748: 86 A6     STX $A6
0C/A74A: 86 2B     STX $2B
0C/A74C: 8E B7 7C  STX $7CB7
0C/A74F: A2 00     LDX #$00
0C/A751: 8E DE 7F  STX $7FDE
0C/A754: 86 AD     STX $AD
0C/A756: 86 AE     STX $AE
0C/A758: 86 E4     STX $E4
0C/A75A: 8E B6 7C  STX $7CB6
0C/A75D: A2 80     LDX #$80
0C/A75F: 86 28     STX $28
0C/A761: 86 AF     STX $AF
0C/A763: A2 08     LDX #$08
0C/A765: 86 E3     STX $E3
0C/A767: A9 FF     LDA #$FF           ; reset battle message queue
0C/A769: A2 13     LDX #$13
0C/A76B: 9D BA 7F  STA $7FBA,X
0C/A76E: CA        DEX 
0C/A76F: 10 FA     BPL $A76B
0C/A771: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/A774: 20 69 9A  JSR $9A69          ; init battle nmi jump code
0C/A777: AE BB 7C  LDX $7CBB
0C/A77A: BD 5E 7D  LDA $7D5E,X        ; turn order
0C/A77D: 85 26     STA $26
0C/A77F: C9 04     CMP #$04
0C/A781: B0 03     BCS $A786          ; branch if a monster
0C/A783: 4C FB A7  JMP $A7FB
; monster attacker
0C/A786: AE 4A 7B  LDX $7B4A
0C/A789: F0 0A     BEQ $A795          ; branch if a normal battle
0C/A78B: E0 02     CPX #$02
0C/A78D: D0 06     BNE $A795          ; branch if not first strike
0C/A78F: 20 93 AC  JSR $AC93          ; do nothing this round
0C/A792: 4C 8C A9  JMP $A98C
0C/A795: 38        SEC 
0C/A796: E9 04     SBC #$04
0C/A798: 85 00     STA $00
0C/A79A: 8D CD 7C  STA $7CCD
0C/A79D: AA        TAX 
0C/A79E: BD 62 7B  LDA $7B62,X        ; monster id
0C/A7A1: C9 7F     CMP #$7F
0C/A7A3: F0 02     BEQ $A7A7
0C/A7A5: 09 80     ORA #$80
0C/A7A7: 85 E1     STA $E1
0C/A7A9: A9 30     LDA #$30
0C/A7AB: 85 02     STA $02
0C/A7AD: A9 00     LDA #$00
0C/A7AF: 85 01     STA $01
0C/A7B1: 85 03     STA $03
0C/A7B3: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/A7B6: 18        CLC 
0C/A7B7: A5 04     LDA $04
0C/A7B9: 69 3A     ADC #$3A           ; $7E3A (monster battle stats)
0C/A7BB: 85 9F     STA $9F
0C/A7BD: A5 05     LDA $05
0C/A7BF: 69 7E     ADC #$7E
0C/A7C1: 85 A0     STA $A0
0C/A7C3: 20 71 AF  JSR $AF71          ; get attacker status 1
0C/A7C6: 29 80     AND #$80
0C/A7C8: D0 07     BNE $A7D1          ; branch if dead
0C/A7CA: C8        INY 
0C/A7CB: B1 9F     LDA ($9F),Y        ; status 2
0C/A7CD: 29 48     AND #$48
0C/A7CF: F0 06     BEQ $A7D7          ; branch if not paralyzed or asleep
0C/A7D1: 20 93 AC  JSR $AC93          ; do nothing this round
0C/A7D4: 4C 8C A9  JMP $A98C
0C/A7D7: A0 2A     LDY #$2A
0C/A7D9: B1 9F     LDA ($9F),Y        ; battle command
0C/A7DB: 30 03     BMI $A7E0
0C/A7DD: 4C B7 A8  JMP $A8B7
0C/A7E0: C9 FF     CMP #$FF
0C/A7E2: D0 06     BNE $A7EA
0C/A7E4: 20 A2 AC  JSR $ACA2          ; show "nothing happend" message
0C/A7E7: 4C 8C A9  JMP $A98C
0C/A7EA: A0 08     LDY #$08
0C/A7EC: A9 C0     LDA #$C0           ; set dead and stone
0C/A7EE: 91 9F     STA ($9F),Y
0C/A7F0: A9 01     LDA #$01
0C/A7F2: 8D B6 7C  STA $7CB6
0C/A7F5: 20 B1 AC  JSR $ACB1          ; show "escaped" message
0C/A7F8: 4C 8C A9  JMP $A98C
; character attacker
0C/A7FB: 85 9E     STA $9E
0C/A7FD: 85 E1     STA $E1
0C/A7FF: AE 4A 7B  LDX $7B4A
0C/A802: CA        DEX 
0C/A803: D0 06     BNE $A80B
0C/A805: 20 93 AC  JSR $AC93          ; do nothing this round
0C/A808: 4C 8C A9  JMP $A98C
0C/A80B: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/A80E: A5 7A     LDA $7A
0C/A810: 85 A3     STA $A3
0C/A812: A5 7B     LDA $7B
0C/A814: 85 A4     STA $A4
0C/A816: A5 80     LDA $80
0C/A818: 85 9F     STA $9F
0C/A81A: A5 81     LDA $81
0C/A81C: 85 A0     STA $A0
0C/A81E: 20 71 AF  JSR $AF71          ; get attacker status 1
0C/A821: 29 C0     AND #$C0
0C/A823: 85 4E     STA $4E
0C/A825: D0 09     BNE $A830          ; branch if dead or stone
0C/A827: C8        INY 
0C/A828: B1 9F     LDA ($9F),Y
0C/A82A: 29 48     AND #$48
0C/A82C: 85 4F     STA $4F
0C/A82E: F0 2F     BEQ $A85F          ; branch if not asleep or paralyzed
0C/A830: A9 FF     LDA #$FF
0C/A832: A0 2A     LDY #$2A
0C/A834: 91 9F     STA ($9F),Y        ; set battle command
0C/A836: A5 4E     LDA $4E
0C/A838: D0 1F     BNE $A859
; asleep or paralyzed
0C/A83A: A5 4F     LDA $4F
0C/A83C: A2 06     LDX #$06
0C/A83E: 20 16 90  JSR $9016          ; check bit
0C/A841: F0 07     BEQ $A84A
0C/A843: A9 12     LDA #$12           ; $12: "Paralyzed"
0C/A845: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/A848: D0 05     BNE $A84F
0C/A84A: A9 11     LDA #$11           ; $11: "Asleep"
0C/A84C: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/A84F: 20 7E BE  JSR $BE7E          ; don't show damage message
0C/A852: A2 00     LDX #$00
0C/A854: 86 A6     STX $A6
0C/A856: 4C 8C A9  JMP $A98C
; dead or stone
0C/A859: 20 93 AC  JSR $AC93          ; do nothing this round
0C/A85C: 4C 8C A9  JMP $A98C
0C/A85F: A0 2A     LDY #$2A
0C/A861: B1 9F     LDA ($9F),Y        ; battle command
0C/A863: 10 2D     BPL $A892
0C/A865: C9 FE     CMP #$FE
0C/A867: D0 23     BNE $A88C          ; branch if not running away
0C/A869: AD 4B 7B  LDA $7B4B
0C/A86C: D0 18     BNE $A886
0C/A86E: A2 00     LDX #$00
0C/A870: A9 64     LDA #$64
0C/A872: 20 11 FD  JSR $FD11          ; random (X..A)
0C/A875: A0 01     LDY #$01
0C/A877: F1 9F     SBC ($9F),Y        ; check vs. evade %
0C/A879: B0 0B     BCS $A886          ; branch if check failed
0C/A87B: A9 01     LDA #$01
0C/A87D: 8D B7 7C  STA $7CB7          ; ran away
0C/A880: 20 B1 AC  JSR $ACB1          ; show "escaped" message
0C/A883: 4C 8C A9  JMP $A98C
0C/A886: 20 C0 AC  JSR $ACC0          ; show "can't escape" message
0C/A889: 4C 8C A9  JMP $A98C
0C/A88C: 20 93 AC  JSR $AC93          ; do nothing this round
0C/A88F: 4C 8C A9  JMP $A98C
0C/A892: D0 23     BNE $A8B7
0C/A894: A0 35     LDY #$35
0C/A896: B1 7E     LDA ($7E),Y
0C/A898: 4A        LSR 
0C/A899: 90 1C     BCC $A8B7
0C/A89B: A0 2E     LDY #$2E
0C/A89D: B1 80     LDA ($80),Y
0C/A89F: C9 07     CMP #$07
0C/A8A1: F0 14     BEQ $A8B7
0C/A8A3: C8        INY 
0C/A8A4: B1 80     LDA ($80),Y
0C/A8A6: C9 07     CMP #$07
0C/A8A8: F0 0D     BEQ $A8B7
0C/A8AA: 20 CF AC  JSR $ACCF          ; show "not effective" message
0C/A8AD: A9 00     LDA #$00
0C/A8AF: 85 E4     STA $E4
0C/A8B1: A9 FF     LDA #$FF
0C/A8B3: A0 2A     LDY #$2A
0C/A8B5: 91 9F     STA ($9F),Y
; do attack
0C/A8B7: A5 A6     LDA $A6
0C/A8B9: D0 19     BNE $A8D4
0C/A8BB: A0 2B     LDY #$2B
0C/A8BD: B1 9F     LDA ($9F),Y        ; targets
0C/A8BF: 29 08     AND #$08
0C/A8C1: F0 11     BEQ $A8D4
0C/A8C3: B1 9F     LDA ($9F),Y
0C/A8C5: 48        PHA 
0C/A8C6: 30 03     BMI $A8CB
0C/A8C8: 38        SEC 
0C/A8C9: E9 04     SBC #$04
0C/A8CB: 29 7F     AND #$7F
0C/A8CD: 85 A6     STA $A6
0C/A8CF: 68        PLA 
0C/A8D0: 29 80     AND #$80
0C/A8D2: 91 9F     STA ($9F),Y
0C/A8D4: A0 2B     LDY #$2B
0C/A8D6: B1 9F     LDA ($9F),Y        ; target
0C/A8D8: 48        PHA 
0C/A8D9: 29 7F     AND #$7F
0C/A8DB: 85 00     STA $00
0C/A8DD: A9 30     LDA #$30
0C/A8DF: 85 02     STA $02
0C/A8E1: A9 00     LDA #$00
0C/A8E3: 85 01     STA $01
0C/A8E5: 85 03     STA $03
0C/A8E7: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/A8EA: 68        PLA 
0C/A8EB: 85 E3     STA $E3
0C/A8ED: 8D 27 00  STA $0027
0C/A8F0: 30 0F     BMI $A901          ; branch if a monster
0C/A8F2: 18        CLC 
0C/A8F3: A9 7A     LDA #$7A           ; $7D7A (character battle stats)
0C/A8F5: 65 04     ADC $04
0C/A8F7: 85 A1     STA $A1
0C/A8F9: A9 7D     LDA #$7D
0C/A8FB: 65 05     ADC $05
0C/A8FD: 85 A2     STA $A2
0C/A8FF: D0 21     BNE $A922
0C/A901: 29 7F     AND #$7F
0C/A903: AA        TAX 
0C/A904: BD 6A 7B  LDA $7B6A,X
0C/A907: C9 7F     CMP #$7F
0C/A909: F0 02     BEQ $A90D
0C/A90B: 09 80     ORA #$80
0C/A90D: 85 E3     STA $E3
0C/A90F: 8A        TXA 
0C/A910: 18        CLC 
0C/A911: 69 04     ADC #$04
0C/A913: 85 27     STA $27
0C/A915: 18        CLC 
0C/A916: A9 3A     LDA #$3A           ; $7E3A (monster battle stats)
0C/A918: 65 04     ADC $04
0C/A91A: 85 A1     STA $A1
0C/A91C: A9 7E     LDA #$7E
0C/A91E: 65 05     ADC $05
0C/A920: 85 A2     STA $A2
0C/A922: 20 76 AF  JSR $AF76          ; get target status 1
0C/A925: 29 C0     AND #$C0
0C/A927: F0 0D     BEQ $A936          ; branch if not dead or stone
0C/A929: A5 A6     LDA $A6
0C/A92B: F0 06     BEQ $A933
0C/A92D: 20 93 AC  JSR $AC93          ; do nothing this round
0C/A930: 4C 8C A9  JMP $A98C
0C/A933: 20 CF AC  JSR $ACCF          ; show "not effective" message
0C/A936: A0 2A     LDY #$2A
0C/A938: B1 9F     LDA ($9F),Y        ; battle command
0C/A93A: D0 0A     BNE $A946          ; branch if not fight
0C/A93C: A9 80     LDA #$80
0C/A93E: 85 28     STA $28
0C/A940: 20 85 AF  JSR $AF85          ; do fight action
0C/A943: 4C 8C A9  JMP $A98C
0C/A946: C9 FF     CMP #$FF
0C/A948: F0 42     BEQ $A98C          ; branch if no command
0C/A94A: A9 00     LDA #$00
0C/A94C: 85 28     STA $28
0C/A94E: 20 C6 B3  JSR $B3C6          ; do magic/item action
0C/A951: A5 2B     LDA $2B
0C/A953: D0 34     BNE $A989
0C/A955: A6 9E     LDX $9E
0C/A957: BD CE 7F  LDA $7FCE,X
0C/A95A: D0 20     BNE $A97C
0C/A95C: 38        SEC 
0C/A95D: A0 0C     LDY #$0C
0C/A95F: B1 9F     LDA ($9F),Y        ; attacker's current mp
0C/A961: A0 25     LDY #$25
0C/A963: F1 9F     SBC ($9F),Y        ; subtract spell level
0C/A965: A0 0C     LDY #$0C
0C/A967: 91 9F     STA ($9F),Y
0C/A969: C8        INY 
0C/A96A: B1 9F     LDA ($9F),Y        ; subtract from high byte
0C/A96C: E9 00     SBC #$00
0C/A96E: 91 9F     STA ($9F),Y
0C/A970: B0 17     BCS $A989
0C/A972: 88        DEY 
0C/A973: A9 00     LDA #$00           ; min zero
0C/A975: 91 9F     STA ($9F),Y
0C/A977: C8        INY 
0C/A978: 91 9F     STA ($9F),Y
0C/A97A: F0 0D     BEQ $A989
0C/A97C: BD D6 7F  LDA $7FD6,X
0C/A97F: F0 08     BEQ $A989
0C/A981: 18        CLC 
0C/A982: 69 1B     ADC #$1B
0C/A984: A8        TAY 
0C/A985: A9 00     LDA #$00
0C/A987: 91 A3     STA ($A3),Y
0C/A989: 4C 8C A9  JMP $A98C
; attack complete
0C/A98C: A9 01     LDA #$01
0C/A98E: 85 AC     STA $AC
0C/A990: A5 AC     LDA $AC
0C/A992: D0 FC     BNE $A990
0C/A994: 20 2A FA  JSR $FA2A          ; wait for vblank
0C/A997: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/A99A: A9 00     LDA #$00           ; top left window
0C/A99C: 85 4F     STA $4F
0C/A99E: 8D CE 7C  STA $7CCE
0C/A9A1: A5 E1     LDA $E1
0C/A9A3: C9 FF     CMP #$FF
0C/A9A5: D0 03     BNE $A9AA
0C/A9A7: 4C 93 AB  JMP $AB93
0C/A9AA: 85 55     STA $55
0C/A9AC: A9 08     LDA #$08
0C/A9AE: 85 45     STA $45
0C/A9B0: 20 4E AC  JSR $AC4E
0C/A9B3: E6 4F     INC $4F
0C/A9B5: A5 E3     LDA $E3
0C/A9B7: C9 08     CMP #$08
0C/A9B9: D0 04     BNE $A9BF
0C/A9BB: A9 FF     LDA #$FF
0C/A9BD: D0 0B     BNE $A9CA
0C/A9BF: 85 55     STA $55
0C/A9C1: A9 08     LDA #$08
0C/A9C3: 85 45     STA $45
0C/A9C5: 20 4E AC  JSR $AC4E
0C/A9C8: A9 01     LDA #$01           ; middle left window
0C/A9CA: 8D CF 7C  STA $7CCF
0C/A9CD: E6 4F     INC $4F
0C/A9CF: A0 2A     LDY #$2A
0C/A9D1: B1 9F     LDA ($9F),Y        ; battle command
0C/A9D3: C9 FE     CMP #$FE
0C/A9D5: F0 0F     BEQ $A9E6
0C/A9D7: A0 09     LDY #$09
0C/A9D9: B1 9F     LDA ($9F),Y        ; status 2
0C/A9DB: 29 48     AND #$48
0C/A9DD: D0 07     BNE $A9E6          ; branch if paralyzed or asleep
0C/A9DF: 20 CC FA  JSR $FACC          ; show attack animation
0C/A9E2: A9 01     LDA #$01
0C/A9E4: 85 2B     STA $2B
0C/A9E6: A5 E4     LDA $E4
0C/A9E8: D0 04     BNE $A9EE
0C/A9EA: A2 FF     LDX #$FF
0C/A9EC: D0 3F     BNE $AA2D
0C/A9EE: C9 64     CMP #$64
0C/A9F0: 90 12     BCC $AA04          ; branch if not a spell
0C/A9F2: 38        SEC 
0C/A9F3: E9 64     SBC #$64
0C/A9F5: 85 55     STA $55
0C/A9F7: A9 07     LDA #$07
0C/A9F9: 85 45     STA $45
0C/A9FB: 85 44     STA $44
0C/A9FD: 20 F3 AC  JSR $ACF3          ; show spell name
0C/AA00: A2 02     LDX #$02           ; top right window
0C/AA02: D0 29     BNE $AA2D
0C/AA04: 85 62     STA $62
0C/AA06: A9 00     LDA #$00
0C/AA08: 85 63     STA $63
0C/AA0A: 20 49 97  JSR $9749          ; convert hex to decimal
0C/AA0D: A2 00     LDX #$00
0C/AA0F: A5 67     LDA $67
0C/AA11: 9D 47 7D  STA $7D47,X        ; copy to text buffer
0C/AA14: E8        INX 
0C/AA15: A5 68     LDA $68
0C/AA17: 9D 47 7D  STA $7D47,X
0C/AA1A: A9 07     LDA #$07
0C/AA1C: 85 45     STA $45
0C/AA1E: 85 44     STA $44
0C/AA20: A9 02     LDA #$02
0C/AA22: 85 AA     STA $AA
0C/AA24: A9 0B     LDA #$0B           ; $0B: "xHit"
0C/AA26: 85 55     STA $55
0C/AA28: 20 DD AC  JSR $ACDD          ; show hit/miss/dmg
0C/AA2B: A2 02     LDX #$02           ; top right window
0C/AA2D: 8E D0 7C  STX $7CD0
0C/AA30: E6 4F     INC $4F
0C/AA32: A5 AE     LDA $AE
0C/AA34: 85 62     STA $62
0C/AA36: A5 AF     LDA $AF
0C/AA38: 10 04     BPL $AA3E
0C/AA3A: A9 FF     LDA #$FF
0C/AA3C: D0 63     BNE $AAA1
0C/AA3E: 85 63     STA $63
0C/AA40: A5 E4     LDA $E4
0C/AA42: D0 15     BNE $AA59
0C/AA44: A9 07     LDA #$07
0C/AA46: 85 45     STA $45
0C/AA48: 85 44     STA $44
0C/AA4A: A9 00     LDA #$00
0C/AA4C: 85 AA     STA $AA
0C/AA4E: A9 0E     LDA #$0E           ; $0E: "Miss…"
0C/AA50: 85 55     STA $55
0C/AA52: 20 DD AC  JSR $ACDD          ; show hit/miss/dmg
0C/AA55: A9 03     LDA #$03
0C/AA57: D0 48     BNE $AAA1
0C/AA59: 20 49 97  JSR $9749          ; convert hex to decimal
0C/AA5C: A2 00     LDX #$00
0C/AA5E: A5 65     LDA $65
0C/AA60: C9 FF     CMP #$FF
0C/AA62: F0 04     BEQ $AA68
0C/AA64: 9D 47 7D  STA $7D47,X        ; copy to text buffer
0C/AA67: E8        INX 
0C/AA68: A5 66     LDA $66
0C/AA6A: 9D 47 7D  STA $7D47,X
0C/AA6D: E8        INX 
0C/AA6E: A5 67     LDA $67
0C/AA70: 9D 47 7D  STA $7D47,X
0C/AA73: E8        INX 
0C/AA74: A5 68     LDA $68
0C/AA76: 9D 47 7D  STA $7D47,X
0C/AA79: A9 07     LDA #$07
0C/AA7B: 85 45     STA $45
0C/AA7D: 85 44     STA $44
0C/AA7F: A5 65     LDA $65
0C/AA81: C9 FF     CMP #$FF
0C/AA83: F0 0F     BEQ $AA94
0C/AA85: E8        INX 
0C/AA86: A9 00     LDA #$00
0C/AA88: 9D 47 7D  STA $7D47,X
0C/AA8B: 85 55     STA $55
0C/AA8D: 20 DD AC  JSR $ACDD          ; show hit/miss/dmg
0C/AA90: A9 03     LDA #$03
0C/AA92: D0 0D     BNE $AAA1
0C/AA94: A9 03     LDA #$03
0C/AA96: 85 AA     STA $AA
0C/AA98: A9 0C     LDA #$0C           ; $0C: " DMG"
0C/AA9A: 85 55     STA $55
0C/AA9C: 20 DD AC  JSR $ACDD          ; show hit/miss/dmg
0C/AA9F: A9 03     LDA #$03           ; middle right window
0C/AAA1: 8D D1 7C  STA $7CD1
0C/AAA4: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/AAA7: 20 71 AF  JSR $AF71          ; get attacker status 1
0C/AAAA: 29 C0     AND #$C0
0C/AAAC: F0 13     BEQ $AAC1
0C/AAAE: AD DE 7F  LDA $7FDE
0C/AAB1: D0 54     BNE $AB07
0C/AAB3: A0 09     LDY #$09
0C/AAB5: B1 9F     LDA ($9F),Y        ; attacker's status 2
0C/AAB7: 29 80     AND #$80
0C/AAB9: F0 52     BEQ $AB0D          ; branch if not confused
0C/AABB: B1 9F     LDA ($9F),Y
0C/AABD: 29 48     AND #$48
0C/AABF: D0 4C     BNE $AB0D          ; branch if not paralyzed or asleep
0C/AAC1: A0 2A     LDY #$2A
0C/AAC3: B1 9F     LDA ($9F),Y        ; battle command
0C/AAC5: C9 FF     CMP #$FF
0C/AAC7: F0 44     BEQ $AB0D
0C/AAC9: C9 FE     CMP #$FE
0C/AACB: F0 40     BEQ $AB0D
0C/AACD: A0 12     LDY #$12
0C/AACF: B1 A1     LDA ($A1),Y        ; target's intellect
0C/AAD1: D0 34     BNE $AB07
0C/AAD3: 20 76 AF  JSR $AF76          ; get target status 1
0C/AAD6: 29 E0     AND #$E0
0C/AAD8: D0 07     BNE $AAE1          ; branch if dead, stone, or toad
0C/AADA: C8        INY 
0C/AADB: B1 A1     LDA ($A1),Y
0C/AADD: 29 20     AND #$20
0C/AADF: F0 2C     BEQ $AB0D          ; branch if not mini
0C/AAE1: A0 2B     LDY #$2B
0C/AAE3: B1 9F     LDA ($9F),Y        ; target
0C/AAE5: 29 7F     AND #$7F
0C/AAE7: AA        TAX 
0C/AAE8: BD 62 7B  LDA $7B62,X
0C/AAEB: C9 FF     CMP #$FF
0C/AAED: F0 1E     BEQ $AB0D
0C/AAEF: A0 08     LDY #$08
0C/AAF1: A9 80     LDA #$80
0C/AAF3: 91 A1     STA ($A1),Y
0C/AAF5: A9 FF     LDA #$FF
0C/AAF7: 9D 62 7B  STA $7B62,X
0C/AAFA: A0 01     LDY #$01
0C/AAFC: 84 A5     STY $A5
0C/AAFE: 20 C8 FA  JSR $FAC8
0C/AB01: CE 4D 7B  DEC $7B4D          ; decrement number of monsters remaining
0C/AB04: 4C 0D AB  JMP $AB0D
0C/AB07: 20 E0 AE  JSR $AEE0
0C/AB0A: 20 D4 FA  JSR $FAD4          ; load character graphics
0C/AB0D: A2 00     LDX #$00
0C/AB0F: BD BA 7F  LDA $7FBA,X
0C/AB12: C9 FF     CMP #$FF
0C/AB14: D0 05     BNE $AB1B
0C/AB16: A4 AB     LDY $AB
0C/AB18: 20 9B 94  JSR $949B
0C/AB1B: A6 AD     LDX $AD
0C/AB1D: F0 02     BEQ $AB21
0C/AB1F: C6 AD     DEC $AD
0C/AB21: A6 AD     LDX $AD
0C/AB23: BD BA 7F  LDA $7FBA,X
0C/AB26: C9 FF     CMP #$FF
0C/AB28: F0 41     BEQ $AB6B          ; branch if no battle message
0C/AB2A: 20 CE BE  JSR $BECE          ; load next battle message
0C/AB2D: A9 04     LDA #$04           ; bottom window
0C/AB2F: 85 4F     STA $4F
0C/AB31: 20 2D AC  JSR $AC2D
0C/AB34: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/AB37: AD B6 7C  LDA $7CB6
0C/AB3A: F0 1E     BEQ $AB5A
0C/AB3C: CE B6 7C  DEC $7CB6
0C/AB3F: AD CD 7C  LDA $7CCD
0C/AB42: AA        TAX 
0C/AB43: A9 FF     LDA #$FF
0C/AB45: 9D 62 7B  STA $7B62,X
0C/AB48: BD 6A 7B  LDA $7B6A,X
0C/AB4B: 09 80     ORA #$80
0C/AB4D: 9D 6A 7B  STA $7B6A,X
0C/AB50: A9 02     LDA #$02
0C/AB52: 85 A5     STA $A5
0C/AB54: 20 C8 FA  JSR $FAC8
0C/AB57: CE 4D 7B  DEC $7B4D          ; decrement number of monsters remaining
0C/AB5A: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/AB5D: A4 AB     LDY $AB
0C/AB5F: 20 9B 94  JSR $949B
0C/AB62: A9 04     LDA #$04           ; bottom window
0C/AB64: 85 54     STA $54
0C/AB66: 20 44 AC  JSR $AC44
0C/AB69: C6 4F     DEC $4F
0C/AB6B: A5 AD     LDA $AD
0C/AB6D: D0 B0     BNE $AB1F
0C/AB6F: A2 00     LDX #$00
0C/AB71: BD BA 7F  LDA $7FBA,X
0C/AB74: C9 FF     CMP #$FF
0C/AB76: D0 05     BNE $AB7D
0C/AB78: A4 AB     LDY $AB
0C/AB7A: 20 9B 94  JSR $949B
0C/AB7D: A6 4F     LDX $4F
0C/AB7F: BD CE 7C  LDA $7CCE,X
0C/AB82: 85 54     STA $54
0C/AB84: 30 07     BMI $AB8D
0C/AB86: 8A        TXA 
0C/AB87: 48        PHA 
0C/AB88: 20 44 AC  JSR $AC44
0C/AB8B: 68        PLA 
0C/AB8C: AA        TAX 
0C/AB8D: CA        DEX 
0C/AB8E: 10 EF     BPL $AB7F
0C/AB90: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/AB93: AD BB 7C  LDA $7CBB
0C/AB96: C9 0B     CMP #$0B
0C/AB98: F0 09     BEQ $ABA3
0C/AB9A: A5 E1     LDA $E1
0C/AB9C: C9 FF     CMP #$FF
0C/AB9E: D0 03     BNE $ABA3
0C/ABA0: 4C EF AB  JMP $ABEF
0C/ABA3: AD B7 7C  LDA $7CB7
0C/ABA6: F0 0F     BEQ $ABB7          ; branch if didn't run away
0C/ABA8: 20 EA AD  JSR $ADEA
0C/ABAB: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/ABAE: 20 2F AD  JSR $AD2F          ; update character properties in sram
0C/ABB1: 20 63 9A  JSR $9A63
0C/ABB4: 4C E8 FA  JMP $FAE8          ; characters run away
0C/ABB7: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/ABBA: 20 30 AF  JSR $AF30
0C/ABBD: AD 4D 7B  LDA $7B4D
0C/ABC0: D0 2D     BNE $ABEF          ; branch if any monsters remain
0C/ABC2: A2 00     LDX #$00
0C/ABC4: A9 18     LDA #$18           ; $18: "You won!"
0C/ABC6: 9D BA 7F  STA $7FBA,X
0C/ABC9: 20 CE BE  JSR $BECE          ; load next battle message
0C/ABCC: A9 04     LDA #$04           ; bottom window
0C/ABCE: 85 4F     STA $4F
0C/ABD0: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/ABD3: 20 2D AC  JSR $AC2D
0C/ABD6: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/ABD9: 20 EA AD  JSR $ADEA
0C/ABDC: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/ABDF: 20 D8 FA  JSR $FAD8          ; characters run off-screen
0C/ABE2: A9 04     LDA #$04           ; bottom window
0C/ABE4: 85 54     STA $54
0C/ABE6: 20 44 AC  JSR $AC44
0C/ABE9: 20 2F AD  JSR $AD2F          ; update character properties in sram
0C/ABEC: 4C 3C FB  JMP $FB3C          ; battle victory
0C/ABEF: A5 A6     LDA $A6
0C/ABF1: F0 10     BEQ $AC03
0C/ABF3: C6 A6     DEC $A6
0C/ABF5: F0 0C     BEQ $AC03
0C/ABF7: A0 2B     LDY #$2B
0C/ABF9: B1 9F     LDA ($9F),Y        ; target
0C/ABFB: AA        TAX 
0C/ABFC: E8        INX 
0C/ABFD: 8A        TXA 
0C/ABFE: 91 9F     STA ($9F),Y
0C/AC00: 4C 4F A7  JMP $A74F
0C/AC03: EE BB 7C  INC $7CBB          ; next character/monster
0C/AC06: AD BB 7C  LDA $7CBB
0C/AC09: C9 0C     CMP #$0C
0C/AC0B: F0 03     BEQ $AC10
0C/AC0D: 4C 46 A7  JMP $A746
; end of round
0C/AC10: 20 63 9A  JSR $9A63
0C/AC13: 20 C4 FA  JSR $FAC4
0C/AC16: A9 00     LDA #$00
0C/AC18: 8D 4A 7B  STA $7B4A
0C/AC1B: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/AC1E: 20 28 AE  JSR $AE28
0C/AC21: 20 EA AD  JSR $ADEA
0C/AC24: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/AC27: 20 2A 91  JSR $912A
0C/AC2A: 4C 5D 9A  JMP $9A5D

; [  ]

0C/AC2D: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/AC30: 20 90 94  JSR $9490          ; clear text buffer
0C/AC33: A9 00     LDA #$00
0C/AC35: 85 6F     STA $6F
0C/AC37: 20 E7 95  JSR $95E7          ; copy text to buffer
0C/AC3A: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/AC3D: A5 4F     LDA $4F
0C/AC3F: 85 64     STA $64
0C/AC41: 4C 42 FB  JMP $FB42          ; open message window

; [  ]

0C/AC44: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/AC47: A5 54     LDA $54
0C/AC49: 85 64     STA $64
0C/AC4B: 4C 46 FB  JMP $FB46          ; close message window

; [ display attacker/target name ]

0C/AC4E: A5 55     LDA $55
0C/AC50: C9 80     CMP #$80
0C/AC52: B0 27     BCS $AC7B          ; branch if a monster
0C/AC54: C9 7F     CMP #$7F
0C/AC56: F0 23     BEQ $AC7B
0C/AC58: A5 9E     LDA $9E
0C/AC5A: 48        PHA 
0C/AC5B: A5 55     LDA $55
0C/AC5D: 85 9E     STA $9E
0C/AC5F: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/AC62: 68        PLA 
0C/AC63: 85 9E     STA $9E
0C/AC65: A0 02     LDY #$02
0C/AC67: A2 00     LDX #$00
0C/AC69: B1 7A     LDA ($7A),Y
0C/AC6B: 9D 47 7D  STA $7D47,X
0C/AC6E: C8        INY 
0C/AC6F: E8        INX 
0C/AC70: E0 06     CPX #$06
0C/AC72: D0 F5     BNE $AC69
0C/AC74: A9 00     LDA #$00
0C/AC76: 9D 47 7D  STA $7D47,X
0C/AC79: F0 0F     BEQ $AC8A
0C/AC7B: 29 7F     AND #$7F
0C/AC7D: 85 64     STA $64
0C/AC7F: A9 AC     LDA #$AC           ; 05/AC44 (monster names)
0C/AC81: 85 63     STA $63
0C/AC83: A9 44     LDA #$44
0C/AC85: 85 62     STA $62
0C/AC87: 20 AB 9A  JSR $9AAB          ; load text (bank 05)
0C/AC8A: A9 08     LDA #$08
0C/AC8C: 85 44     STA $44
0C/AC8E: 85 45     STA $45
0C/AC90: 4C 2D AC  JMP $AC2D

; [ do nothing this round ]

0C/AC93: A2 00     LDX #$00
0C/AC95: 86 AE     STX $AE
0C/AC97: 86 E4     STX $E4
0C/AC99: CA        DEX 
0C/AC9A: 86 E1     STX $E1
0C/AC9C: 8E BA 7F  STX $7FBA
0C/AC9F: 86 AF     STX $AF
0C/ACA1: 60        RTS 

; [ show "nothing happend" message ]

0C/ACA2: A2 00     LDX #$00
0C/ACA4: 86 AE     STX $AE
0C/ACA6: 86 E4     STX $E4
0C/ACA8: CA        DEX 
0C/ACA9: 86 AF     STX $AF
0C/ACAB: A2 13     LDX #$13           ; $13: "Nothing happened."
0C/ACAD: 8E BA 7F  STX $7FBA
0C/ACB0: 60        RTS 

; [ show "escaped" message ]

0C/ACB1: A2 00     LDX #$00
0C/ACB3: 86 AE     STX $AE
0C/ACB5: 86 E4     STX $E4
0C/ACB7: CA        DEX 
0C/ACB8: 86 AF     STX $AF
0C/ACBA: A2 0F     LDX #$0F           ; $0F: "Escaped"
0C/ACBC: 8E BA 7F  STX $7FBA
0C/ACBF: 60        RTS 

; [ show "can't escape" message ]

0C/ACC0: A2 00     LDX #$00
0C/ACC2: 86 AE     STX $AE
0C/ACC4: 86 E4     STX $E4
0C/ACC6: CA        DEX 
0C/ACC7: 86 AF     STX $AF
0C/ACC9: A2 10     LDX #$10           ; $10: "Can't escape!"
0C/ACCB: 8E BA 7F  STX $7FBA
0C/ACCE: 60        RTS 

; [ show "not effective" message ]

0C/ACCF: A2 00     LDX #$00
0C/ACD1: 86 AE     STX $AE
0C/ACD3: A2 80     LDX #$80
0C/ACD5: 86 AF     STX $AF
0C/ACD7: A2 14     LDX #$14           ; $14: "Not effective."
0C/ACD9: 8E BA 7F  STX $7FBA
0C/ACDC: 60        RTS 

; [ show hit/miss/dmg ]

0C/ACDD: A5 55     LDA $55
0C/ACDF: F0 0F     BEQ $ACF0
0C/ACE1: 85 64     STA $64
0C/ACE3: A9 B2     LDA #$B2           ; 05/B295
0C/ACE5: 85 63     STA $63
0C/ACE7: A9 95     LDA #$95
0C/ACE9: 85 62     STA $62
0C/ACEB: A2 05     LDX #$05
0C/ACED: 20 8C FD  JSR $FD8C          ; load text
0C/ACF0: 4C 2D AC  JMP $AC2D

; [ show spell name ]

0C/ACF3: A5 55     LDA $55
0C/ACF5: 85 64     STA $64
0C/ACF7: A9 B0     LDA #$B0           ; 05/B0BB (attack names)
0C/ACF9: 85 63     STA $63
0C/ACFB: A9 BB     LDA #$BB
0C/ACFD: 85 62     STA $62
0C/ACFF: 20 AB 9A  JSR $9AAB          ; load text (bank 05)
0C/AD02: AE BF 7C  LDX $7CBF
0C/AD05: A9 FF     LDA #$FF
0C/AD07: 9D 47 7D  STA $7D47,X
0C/AD0A: A0 25     LDY #$25
0C/AD0C: B1 9F     LDA ($9F),Y        ; spell level
0C/AD0E: 85 62     STA $62
0C/AD10: A9 00     LDA #$00
0C/AD12: 85 63     STA $63
0C/AD14: 20 49 97  JSR $9749          ; convert hex to decimal
0C/AD17: AE BF 7C  LDX $7CBF
0C/AD1A: E8        INX 
0C/AD1B: A5 67     LDA $67
0C/AD1D: 9D 47 7D  STA $7D47,X
0C/AD20: E8        INX 
0C/AD21: A5 68     LDA $68
0C/AD23: 9D 47 7D  STA $7D47,X
0C/AD26: E8        INX 
0C/AD27: A9 00     LDA #$00
0C/AD29: 9D 47 7D  STA $7D47,X
0C/AD2C: 4C 2D AC  JMP $AC2D

; [ update character properties in sram ]

0C/AD2F: A9 00     LDA #$00
0C/AD31: 85 9E     STA $9E
0C/AD33: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/AD36: A5 9E     LDA $9E
0C/AD38: 0A        ASL 
0C/AD39: AA        TAX 
0C/AD3A: 38        SEC 
0C/AD3B: A0 08     LDY #$08
0C/AD3D: B1 7A     LDA ($7A),Y        ; calculate net hp loss
0C/AD3F: A0 0A     LDY #$0A
0C/AD41: F1 80     SBC ($80),Y
0C/AD43: 9D 6A 7D  STA $7D6A,X
0C/AD46: A0 09     LDY #$09
0C/AD48: B1 7A     LDA ($7A),Y
0C/AD4A: A0 0B     LDY #$0B
0C/AD4C: F1 80     SBC ($80),Y
0C/AD4E: 9D 6B 7D  STA $7D6B,X
0C/AD51: B0 08     BCS $AD5B
0C/AD53: A9 00     LDA #$00           ; minimum 0
0C/AD55: 9D 6A 7D  STA $7D6A,X
0C/AD58: 9D 6B 7D  STA $7D6B,X
0C/AD5B: 38        SEC 
0C/AD5C: A0 0C     LDY #$0C
0C/AD5E: B1 7A     LDA ($7A),Y        ; calculate net mp loss
0C/AD60: A0 0C     LDY #$0C
0C/AD62: F1 80     SBC ($80),Y
0C/AD64: 9D 72 7D  STA $7D72,X
0C/AD67: A0 0D     LDY #$0D
0C/AD69: B1 7A     LDA ($7A),Y
0C/AD6B: A0 0D     LDY #$0D
0C/AD6D: F1 80     SBC ($80),Y
0C/AD6F: 9D 73 7D  STA $7D73,X
0C/AD72: B0 08     BCS $AD7C
0C/AD74: A9 00     LDA #$00           ; minimum 0
0C/AD76: 9D 72 7D  STA $7D72,X
0C/AD79: 9D 73 7D  STA $7D73,X
0C/AD7C: AD 48 7B  LDA $7B48
0C/AD7F: C9 7F     CMP #$7F
0C/AD81: F0 2B     BEQ $ADAE          ; branch if final battle ???
0C/AD83: 20 6C AF  JSR $AF6C          ; get status 1
0C/AD86: 48        PHA 
0C/AD87: A0 01     LDY #$01
0C/AD89: 91 7A     STA ($7A),Y        ; update status 1 in sram
0C/AD8B: 68        PLA 
0C/AD8C: 29 C0     AND #$C0
0C/AD8E: F0 08     BEQ $AD98          ; branch if not dead
0C/AD90: A0 35     LDY #$35
0C/AD92: B1 7E     LDA ($7E),Y        ; move to back row
0C/AD94: 09 01     ORA #$01
0C/AD96: 91 7E     STA ($7E),Y
0C/AD98: A0 0A     LDY #$0A           ; current hp
0C/AD9A: 84 44     STY $44
0C/AD9C: A0 09     LDY #$09
0C/AD9E: 84 45     STY $45
0C/ADA0: 20 D9 AD  JSR $ADD9          ; update hp/mp in sram
0C/ADA3: A0 0C     LDY #$0C           ; current mp
0C/ADA5: 84 44     STY $44
0C/ADA7: A0 0D     LDY #$0D
0C/ADA9: 84 45     STY $45
0C/ADAB: 20 D9 AD  JSR $ADD9          ; update hp/mp in sram
0C/ADAE: A0 1C     LDY #$1C
0C/ADB0: B1 7A     LDA ($7A),Y        ; right hand item
0C/ADB2: C9 30     CMP #$30
0C/ADB4: D0 04     BNE $ADBA          ; branch if not unarmed
0C/ADB6: A9 00     LDA #$00
0C/ADB8: 91 7A     STA ($7A),Y
0C/ADBA: C8        INY 
0C/ADBB: B1 7A     LDA ($7A),Y        ; left hand item
0C/ADBD: C9 30     CMP #$30
0C/ADBF: D0 04     BNE $ADC5          ; branch if not unarmed
0C/ADC1: A9 00     LDA #$00
0C/ADC3: 91 7A     STA ($7A),Y
0C/ADC5: A0 35     LDY #$35
0C/ADC7: B1 7E     LDA ($7E),Y        ; invert character row
0C/ADC9: 49 01     EOR #$01
0C/ADCB: 91 7E     STA ($7E),Y
0C/ADCD: E6 9E     INC $9E            ; next character
0C/ADCF: A5 9E     LDA $9E
0C/ADD1: C9 04     CMP #$04
0C/ADD3: F0 03     BEQ $ADD8
0C/ADD5: 4C 33 AD  JMP $AD33
0C/ADD8: 60        RTS 

; [ update hp/mp in sram ]

0C/ADD9: A4 44     LDY $44
0C/ADDB: B1 80     LDA ($80),Y
0C/ADDD: 48        PHA 
0C/ADDE: C8        INY 
0C/ADDF: B1 80     LDA ($80),Y
0C/ADE1: A4 45     LDY $45
0C/ADE3: 91 7A     STA ($7A),Y
0C/ADE5: 88        DEY 
0C/ADE6: 68        PLA 
0C/ADE7: 91 7A     STA ($7A),Y
0C/ADE9: 60        RTS 

; [  ]

0C/ADEA: A2 00     LDX #$00
0C/ADEC: 86 9E     STX $9E
0C/ADEE: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/ADF1: A0 35     LDY #$35
0C/ADF3: B1 7E     LDA ($7E),Y
0C/ADF5: 4A        LSR 
0C/ADF6: B0 07     BCS $ADFF
0C/ADF8: 20 6C AF  JSR $AF6C          ; get status 1
0C/ADFB: 29 C0     AND #$C0
0C/ADFD: F0 26     BEQ $AE25
0C/ADFF: E6 9E     INC $9E
0C/AE01: A5 9E     LDA $9E
0C/AE03: C9 04     CMP #$04
0C/AE05: D0 E7     BNE $ADEE
0C/AE07: A2 00     LDX #$00
0C/AE09: 86 9E     STX $9E
0C/AE0B: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/AE0E: 20 6C AF  JSR $AF6C          ; get status 1
0C/AE11: 29 C0     AND #$C0
0C/AE13: D0 08     BNE $AE1D
0C/AE15: A0 35     LDY #$35
0C/AE17: B1 7E     LDA ($7E),Y
0C/AE19: 29 FE     AND #$FE
0C/AE1B: 91 7E     STA ($7E),Y
0C/AE1D: E6 9E     INC $9E
0C/AE1F: A5 9E     LDA $9E
0C/AE21: C9 04     CMP #$04
0C/AE23: D0 E6     BNE $AE0B
0C/AE25: 4C 5B FD  JMP $FD5B          ; wait for first menu scanline

; [  ]

0C/AE28: A9 00     LDA #$00
0C/AE2A: 85 9E     STA $9E
0C/AE2C: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/AE2F: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/AE32: 20 80 AF  JSR $AF80          ; get status 2
0C/AE35: A0 2D     LDY #$2D
0C/AE37: 91 80     STA ($80),Y
0C/AE39: A9 00     LDA #$00
0C/AE3B: 85 44     STA $44
0C/AE3D: 20 80 AF  JSR $AF80          ; get status 2
0C/AE40: 85 45     STA $45
0C/AE42: 85 47     STA $47
0C/AE44: 46 47     LSR $47
0C/AE46: 90 1F     BCC $AE67
0C/AE48: A2 01     LDX #$01
0C/AE4A: A9 64     LDA #$64
0C/AE4C: 20 11 FD  JSR $FD11          ; random (X..A)
0C/AE4F: 85 46     STA $46
0C/AE51: A5 44     LDA $44
0C/AE53: AA        TAX 
0C/AE54: BD 4B 8E  LDA $8E4B,X
0C/AE57: 38        SEC 
0C/AE58: E5 46     SBC $46
0C/AE5A: 90 0B     BCC $AE67
0C/AE5C: A5 45     LDA $45
0C/AE5E: 20 0E 90  JSR $900E          ; clear bit
0C/AE61: A0 09     LDY #$09
0C/AE63: 91 80     STA ($80),Y
0C/AE65: 85 45     STA $45
0C/AE67: E6 44     INC $44
0C/AE69: A5 44     LDA $44
0C/AE6B: C9 08     CMP #$08
0C/AE6D: D0 D5     BNE $AE44
0C/AE6F: 20 80 AF  JSR $AF80          ; get status 2
0C/AE72: 29 04     AND #$04
0C/AE74: F0 0A     BEQ $AE80
0C/AE76: A2 00     LDX #$00
0C/AE78: A9 02     LDA #$02
0C/AE7A: 20 11 FD  JSR $FD11          ; random (X..A)
0C/AE7D: 20 B0 AE  JSR $AEB0
0C/AE80: 20 6C AF  JSR $AF6C          ; get status 1
0C/AE83: 29 04     AND #$04
0C/AE85: F0 0A     BEQ $AE91
0C/AE87: A2 02     LDX #$02
0C/AE89: A9 04     LDA #$04
0C/AE8B: 20 11 FD  JSR $FD11          ; random (X..A)
0C/AE8E: 20 B0 AE  JSR $AEB0
0C/AE91: A5 9E     LDA $9E
0C/AE93: C9 04     CMP #$04
0C/AE95: B0 08     BCS $AE9F
0C/AE97: 85 27     STA $27
0C/AE99: 20 63 9A  JSR $9A63
0C/AE9C: 20 D4 FA  JSR $FAD4          ; load character graphics
0C/AE9F: 20 5B FD  JSR $FD5B          ; wait for first menu scanline
0C/AEA2: E6 9E     INC $9E
0C/AEA4: A5 9E     LDA $9E
0C/AEA6: C9 0C     CMP #$0C
0C/AEA8: F0 03     BEQ $AEAD
0C/AEAA: 4C 2C AE  JMP $AE2C
0C/AEAD: 4C 30 AF  JMP $AF30

; [  ]

0C/AEB0: 85 44     STA $44
0C/AEB2: 38        SEC 
0C/AEB3: A0 0A     LDY #$0A
0C/AEB5: B1 80     LDA ($80),Y
0C/AEB7: E5 44     SBC $44
0C/AEB9: 91 80     STA ($80),Y
0C/AEBB: C8        INY 
0C/AEBC: B1 80     LDA ($80),Y
0C/AEBE: E9 00     SBC #$00
0C/AEC0: 91 80     STA ($80),Y
0C/AEC2: 90 05     BCC $AEC9
0C/AEC4: 88        DEY 
0C/AEC5: 11 80     ORA ($80),Y
0C/AEC7: D0 16     BNE $AEDF
0C/AEC9: A0 0A     LDY #$0A
0C/AECB: A9 00     LDA #$00
0C/AECD: 91 80     STA ($80),Y
0C/AECF: C8        INY 
0C/AED0: 91 80     STA ($80),Y
0C/AED2: 20 6C AF  JSR $AF6C          ; get status 1
0C/AED5: A0 2C     LDY #$2C
0C/AED7: 91 80     STA ($80),Y
0C/AED9: A0 08     LDY #$08
0C/AEDB: 09 80     ORA #$80
0C/AEDD: 91 80     STA ($80),Y
0C/AEDF: 60        RTS 

; [  ]

0C/AEE0: A0 0A     LDY #$0A
0C/AEE2: B1 A1     LDA ($A1),Y
0C/AEE4: 85 46     STA $46
0C/AEE6: C8        INY 
0C/AEE7: B1 A1     LDA ($A1),Y
0C/AEE9: 85 47     STA $47
0C/AEEB: 05 46     ORA $46
0C/AEED: F0 40     BEQ $AF2F
0C/AEEF: A0 0E     LDY #$0E
0C/AEF1: B1 A1     LDA ($A1),Y
0C/AEF3: 85 48     STA $48
0C/AEF5: C8        INY 
0C/AEF6: B1 A1     LDA ($A1),Y
0C/AEF8: 85 49     STA $49
0C/AEFA: 46 49     LSR $49
0C/AEFC: 66 48     ROR $48
0C/AEFE: 46 49     LSR $49
0C/AF00: 66 48     ROR $48
0C/AF02: 38        SEC 
0C/AF03: A5 48     LDA $48
0C/AF05: E5 46     SBC $46
0C/AF07: A5 49     LDA $49
0C/AF09: E5 47     SBC $47
0C/AF0B: 90 0F     BCC $AF1C
0C/AF0D: 20 7B AF  JSR $AF7B          ; get target status 2
0C/AF10: A0 2D     LDY #$2D
0C/AF12: 91 A1     STA ($A1),Y
0C/AF14: A0 09     LDY #$09
0C/AF16: 09 02     ORA #$02
0C/AF18: 91 A1     STA ($A1),Y
0C/AF1A: D0 13     BNE $AF2F
0C/AF1C: 20 7B AF  JSR $AF7B          ; get target status 2
0C/AF1F: 29 02     AND #$02
0C/AF21: F0 0C     BEQ $AF2F
0C/AF23: B1 A1     LDA ($A1),Y
0C/AF25: A0 2D     LDY #$2D
0C/AF27: 91 A1     STA ($A1),Y
0C/AF29: A0 09     LDY #$09
0C/AF2B: 29 FD     AND #$FD
0C/AF2D: 91 A1     STA ($A1),Y
0C/AF2F: 60        RTS 

; [  ]

0C/AF30: 20 5D 9A  JSR $9A5D
0C/AF33: 20 2A 91  JSR $912A
0C/AF36: 20 46 FD  JSR $FD46          ; wait for first battlefield scanline
0C/AF39: A2 00     LDX #$00
0C/AF3B: 86 9E     STX $9E
0C/AF3D: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/AF40: 20 6C AF  JSR $AF6C          ; get status 1
0C/AF43: 29 E0     AND #$E0
0C/AF45: F0 24     BEQ $AF6B          ; branch if not dead stone or toad
0C/AF47: A0 2A     LDY #$2A
0C/AF49: A9 FF     LDA #$FF
0C/AF4B: 91 80     STA ($80),Y        ; reset battle command
0C/AF4D: E8        INX                ; next character
0C/AF4E: E0 04     CPX #$04
0C/AF50: D0 E9     BNE $AF3B
0C/AF52: A2 00     LDX #$00
0C/AF54: A9 17     LDA #$17           ; $17: " lost."
0C/AF56: 9D BA 7F  STA $7FBA,X
0C/AF59: 20 CE BE  JSR $BECE          ; load next battle message
0C/AF5C: A9 04     LDA #$04
0C/AF5E: 85 4F     STA $4F
0C/AF60: 20 2D AC  JSR $AC2D
0C/AF63: 20 2F AD  JSR $AD2F          ; update character properties in sram
0C/AF66: 68        PLA 
0C/AF67: 68        PLA 
0C/AF68: 4C EC FA  JMP $FAEC          ; battle defeat
0C/AF6B: 60        RTS 

; [ get status 1 ]

0C/AF6C: A0 08     LDY #$08
0C/AF6E: B1 80     LDA ($80),Y        ; status 1
0C/AF70: 60        RTS 

; [ get attacker status 1 ]

0C/AF71: A0 08     LDY #$08
0C/AF73: B1 9F     LDA ($9F),Y        ; status 1
0C/AF75: 60        RTS 

; [ get target status 1 ]

0C/AF76: A0 08     LDY #$08
0C/AF78: B1 A1     LDA ($A1),Y        ; status 1
0C/AF7A: 60        RTS 

; [ get target status 2 ]

0C/AF7B: A0 09     LDY #$09
0C/AF7D: B1 A1     LDA ($A1),Y        ; status 2
0C/AF7F: 60        RTS 

; [ get status 2 ]

0C/AF80: A0 09     LDY #$09
0C/AF82: B1 80     LDA ($80),Y        ; status 2
0C/AF84: 60        RTS 

; --------------------------------------------------------------------------

; [ do fight action ]

0C/AF85: A2 00     LDX #$00
0C/AF87: 86 9C     STX $9C            ; clear damage
0C/AF89: 86 9D     STX $9D
0C/AF8B: 86 9A     STX $9A
0C/AF8D: 86 24     STX $24            ; clear crit flag
0C/AF8F: A2 80     LDX #$80
0C/AF91: 86 9B     STX $9B
0C/AF93: 20 76 AF  JSR $AF76          ; get target status 1
0C/AF96: 29 C0     AND #$C0
0C/AF98: D0 03     BNE $AF9D          ; branch if dead or stone
0C/AF9A: 20 BD AF  JSR $AFBD          ; do fight effect
0C/AF9D: A5 9A     LDA $9A
0C/AF9F: 85 AE     STA $AE
0C/AFA1: A5 9B     LDA $9B
0C/AFA3: 85 AF     STA $AF
0C/AFA5: 05 9A     ORA $9A
0C/AFA7: D0 06     BNE $AFAF
0C/AFA9: A5 28     LDA $28
0C/AFAB: 29 BF     AND #$BF
0C/AFAD: 85 28     STA $28
0C/AFAF: A5 9C     LDA $9C
0C/AFB1: 85 E4     STA $E4
0C/AFB3: A5 24     LDA $24
0C/AFB5: F0 05     BEQ $AFBC
0C/AFB7: A9 0D     LDA #$0D           ; $0D: "Critical Hit!"
0C/AFB9: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/AFBC: 60        RTS 

; [ do fight effect ]

0C/AFBD: A0 18     LDY #$18
0C/AFBF: B1 9F     LDA ($9F),Y        ; main hand hit multiplier
0C/AFC1: A0 07     LDY #$07
0C/AFC3: 18        CLC 
0C/AFC4: 71 9F     ADC ($9F),Y        ; add haste/slow modifier
0C/AFC6: 85 46     STA $46
0C/AFC8: A9 00     LDA #$00
0C/AFCA: 69 00     ADC #$00
0C/AFCC: 85 47     STA $47
0C/AFCE: 38        SEC 
0C/AFCF: A5 46     LDA $46
0C/AFD1: E9 14     SBC #$14           ; subtract 20
0C/AFD3: 85 46     STA $46
0C/AFD5: A5 47     LDA $47
0C/AFD7: E9 00     SBC #$00
0C/AFD9: 85 47     STA $47
0C/AFDB: B0 07     BCS $AFE4
0C/AFDD: A2 01     LDX #$01           ; min 1
0C/AFDF: 86 46     STX $46
0C/AFE1: CA        DEX 
0C/AFE2: 86 47     STX $47
0C/AFE4: A0 19     LDY #$19
0C/AFE6: B1 9F     LDA ($9F),Y        ; main hand hit %
0C/AFE8: 85 44     STA $44
0C/AFEA: A9 00     LDA #$00
0C/AFEC: 85 45     STA $45
0C/AFEE: 20 71 AF  JSR $AF71          ; get attacker status 1
0C/AFF1: 29 02     AND #$02
0C/AFF3: F0 04     BEQ $AFF9          ; branch if not blind
0C/AFF5: 46 45     LSR $45
0C/AFF7: 66 44     ROR $44
0C/AFF9: 20 2C BC  JSR $BC2C          ; check for hit
0C/AFFC: A5 48     LDA $48
0C/AFFE: 85 52     STA $52            ; +$52: number of successful hits
0C/B000: A5 49     LDA $49
0C/B002: 85 53     STA $53
0C/B004: A0 00     LDY #$00
0C/B006: B1 A1     LDA ($A1),Y        ; target's evade multiplier
0C/B008: 85 46     STA $46
0C/B00A: C8        INY 
0C/B00B: B1 A1     LDA ($A1),Y        ; target's evade %
0C/B00D: 85 44     STA $44
0C/B00F: A9 00     LDA #$00
0C/B011: 85 45     STA $45
0C/B013: 85 47     STA $47
0C/B015: 20 76 AF  JSR $AF76          ; get target status 1
0C/B018: 29 02     AND #$02
0C/B01A: F0 04     BEQ $B020          ; branch if not blind
0C/B01C: 46 45     LSR $45
0C/B01E: 66 44     ROR $44
0C/B020: 20 2C BC  JSR $BC2C          ; check for hit
0C/B023: A5 48     LDA $48
0C/B025: 85 54     STA $54
0C/B027: A5 49     LDA $49
0C/B029: 85 55     STA $55
0C/B02B: 38        SEC 
0C/B02C: A5 52     LDA $52            ; subtract evaded hits
0C/B02E: E5 54     SBC $54
0C/B030: 85 9C     STA $9C
0C/B032: A5 53     LDA $53
0C/B034: E5 55     SBC $55
0C/B036: 85 9D     STA $9D            ; set damage multiplier
0C/B038: B0 06     BCS $B040
0C/B03A: A9 00     LDA #$00           ; min zero
0C/B03C: 85 9C     STA $9C
0C/B03E: 85 9D     STA $9D
0C/B040: A5 9C     LDA $9C
0C/B042: 05 9D     ORA $9D
0C/B044: D0 05     BNE $B04B          ; branch if there was at least one hit
0C/B046: 85 9A     STA $9A            ; zero damage
0C/B048: 85 9B     STA $9B
0C/B04A: 60        RTS 
0C/B04B: A5 28     LDA $28
0C/B04D: 09 40     ORA #$40
0C/B04F: 85 28     STA $28
0C/B051: A0 12     LDY #$12
0C/B053: B1 9F     LDA ($9F),Y        ; intellect
0C/B055: 85 44     STA $44
0C/B057: A0 2B     LDY #$2B
0C/B059: B1 9F     LDA ($9F),Y        ; target
0C/B05B: 85 45     STA $45
0C/B05D: A5 44     LDA $44
0C/B05F: F0 06     BEQ $B067          ; branch if monster attacker
; character attacker
0C/B061: A5 45     LDA $45
0C/B063: 10 15     BPL $B07A          ; branch if character target
0C/B065: 30 04     BMI $B06B          ; branch if monster target
; monster attacker
0C/B067: A5 45     LDA $45
0C/B069: 30 0F     BMI $B07A          ; branch if monster target
0C/B06B: 20 7B AF  JSR $AF7B          ; get target status 2
0C/B06E: 29 08     AND #$08
0C/B070: F0 02     BEQ $B074
0C/B072: D0 06     BNE $B07A          ; branch if target is asleep
0C/B074: B1 A1     LDA ($A1),Y
0C/B076: 29 40     AND #$40
0C/B078: F0 0A     BEQ $B084          ; branch if target is not paralyzed
0C/B07A: A0 18     LDY #$18           ; 24 hits
0C/B07C: B1 9F     LDA ($9F),Y        ; hit multiplier
0C/B07E: 85 9C     STA $9C
0C/B080: A9 00     LDA #$00
0C/B082: 85 9D     STA $9D
0C/B084: A0 1A     LDY #$1A
0C/B086: B1 9F     LDA ($9F),Y        ; main hand attack power
0C/B088: 85 44     STA $44
0C/B08A: A9 00     LDA #$00
0C/B08C: 85 45     STA $45
0C/B08E: A0 1C     LDY #$1C
0C/B090: B1 9F     LDA ($9F),Y        ; main hand type bonus
0C/B092: A0 15     LDY #$15
0C/B094: 31 A1     AND ($A1),Y        ; target type
0C/B096: D0 0A     BNE $B0A2
0C/B098: A0 1B     LDY #$1B
0C/B09A: B1 9F     LDA ($9F),Y        ; main hand element
0C/B09C: A0 16     LDY #$16
0C/B09E: 31 A1     AND ($A1),Y        ; target weak elements
0C/B0A0: F0 0D     BEQ $B0AF
0C/B0A2: 18        CLC 
0C/B0A3: A5 44     LDA $44
0C/B0A5: 69 14     ADC #$14           ; +20 attack
0C/B0A7: 85 44     STA $44
0C/B0A9: A5 45     LDA $45
0C/B0AB: 69 00     ADC #$00
0C/B0AD: 85 45     STA $45
0C/B0AF: A0 02     LDY #$02
0C/B0B1: B1 A1     LDA ($A1),Y        ; target defense
0C/B0B3: 85 46     STA $46
0C/B0B5: A9 00     LDA #$00
0C/B0B7: 85 47     STA $47
0C/B0B9: A5 9C     LDA $9C
0C/B0BB: 85 48     STA $48
0C/B0BD: 20 88 BC  JSR $BC88          ; calculate damage
0C/B0C0: A5 4A     LDA $4A
0C/B0C2: 85 9A     STA $9A
0C/B0C4: A5 4B     LDA $4B
0C/B0C6: 85 9B     STA $9B
0C/B0C8: A5 9B     LDA $9B
0C/B0CA: 29 80     AND #$80
0C/B0CC: F0 06     BEQ $B0D4          ; branch if damage is not negative ???
0C/B0CE: A9 00     LDA #$00           ; set damage to zero
0C/B0D0: 85 9A     STA $9A
0C/B0D2: 85 9B     STA $9B
0C/B0D4: A0 0A     LDY #$0A
0C/B0D6: B1 A1     LDA ($A1),Y        ; subtract from target's hp
0C/B0D8: 38        SEC 
0C/B0D9: E5 9A     SBC $9A
0C/B0DB: 91 A1     STA ($A1),Y
0C/B0DD: C8        INY 
0C/B0DE: B1 A1     LDA ($A1),Y
0C/B0E0: E5 9B     SBC $9B
0C/B0E2: 91 A1     STA ($A1),Y
0C/B0E4: 90 08     BCC $B0EE          ; branch if dead
0C/B0E6: B1 A1     LDA ($A1),Y
0C/B0E8: 88        DEY 
0C/B0E9: 11 A1     ORA ($A1),Y
0C/B0EB: D0 1F     BNE $B10C          ; branch if not dead
0C/B0ED: C8        INY 
0C/B0EE: A9 00     LDA #$00
0C/B0F0: 88        DEY 
0C/B0F1: 91 A1     STA ($A1),Y        ; set target hp to zero
0C/B0F3: C8        INY 
0C/B0F4: 91 A1     STA ($A1),Y
0C/B0F6: 20 9A BF  JSR $BF9A          ; add dead target message to queue
0C/B0F9: 20 76 AF  JSR $AF76          ; get target status 1
0C/B0FC: A0 2C     LDY #$2C
0C/B0FE: 91 A1     STA ($A1),Y        ; set previous status
0C/B100: A0 08     LDY #$08
0C/B102: 09 80     ORA #$80
0C/B104: 91 A1     STA ($A1),Y        ; set dead status
0C/B106: A5 28     LDA $28
0C/B108: 09 20     ORA #$20
0C/B10A: 85 28     STA $28
0C/B10C: A0 1D     LDY #$1D
0C/B10E: B1 9F     LDA ($9F),Y        ; main hand weapon special effect
0C/B110: F0 12     BEQ $B124
0C/B112: 85 60     STA $60
0C/B114: 29 01     AND #$01
0C/B116: F0 03     BEQ $B11B
0C/B118: 4C 51 B3  JMP $B351
0C/B11B: A5 60     LDA $60
0C/B11D: 29 02     AND #$02
0C/B11F: F0 0C     BEQ $B12D
0C/B121: 4C 5F B3  JMP $B35F
0C/B124: 60        RTS 

; weapon special effect jump table
0C/B125: B161 B1CC B214 B22A

; from above
0C/B12D: A9 00     LDA #$00
0C/B12F: 85 52     STA $52
0C/B131: 85 53     STA $53
0C/B133: A5 60     LDA $60            ; weapon special effect
0C/B135: 4A        LSR 
0C/B136: 4A        LSR 
0C/B137: A2 04     LDX #$04
0C/B139: 4A        LSR 
0C/B13A: B0 06     BCS $B142
0C/B13C: E6 52     INC $52
0C/B13E: CA        DEX 
0C/B13F: D0 F8     BNE $B139
0C/B141: 60        RTS 
0C/B142: 06 52     ASL $52
0C/B144: 18        CLC 
0C/B145: A9 25     LDA #$25           ; 0C/B125
0C/B147: 65 52     ADC $52
0C/B149: 85 52     STA $52
0C/B14B: A9 B1     LDA #$B1
0C/B14D: 65 53     ADC $53
0C/B14F: 85 53     STA $53
0C/B151: A0 00     LDY #$00
0C/B153: B1 52     LDA ($52),Y
0C/B155: 48        PHA 
0C/B156: C8        INY 
0C/B157: B1 52     LDA ($52),Y
0C/B159: 85 53     STA $53
0C/B15B: 68        PLA 
0C/B15C: 85 52     STA $52
0C/B15E: 6C 52 00  JMP ($0052)
; 0: drain hp
0C/B161: A0 15     LDY #$15
0C/B163: B1 A1     LDA ($A1),Y
0C/B165: 29 80     AND #$80
0C/B167: D0 33     BNE $B19C
0C/B169: A0 0E     LDY #$0E
0C/B16B: B1 A1     LDA ($A1),Y
0C/B16D: 85 52     STA $52
0C/B16F: C8        INY 
0C/B170: B1 A1     LDA ($A1),Y
0C/B172: 85 53     STA $53
0C/B174: 20 79 B2  JSR $B279
0C/B177: 20 31 B3  JSR $B331
0C/B17A: 20 3F B3  JSR $B33F
0C/B17D: 20 1F B3  JSR $B31F
0C/B180: 20 C8 B2  JSR $B2C8
0C/B183: 20 3F B3  JSR $B33F
0C/B186: 20 28 B3  JSR $B328
0C/B189: 20 05 B3  JSR $B305
0C/B18C: A0 0A     LDY #$0A
0C/B18E: B1 A1     LDA ($A1),Y
0C/B190: C8        INY 
0C/B191: 11 A1     ORA ($A1),Y
0C/B193: D0 06     BNE $B19B
0C/B195: A0 08     LDY #$08
0C/B197: A9 80     LDA #$80
0C/B199: 91 A1     STA ($A1),Y
0C/B19B: 60        RTS 
0C/B19C: A0 0E     LDY #$0E
0C/B19E: B1 9F     LDA ($9F),Y
0C/B1A0: 85 52     STA $52
0C/B1A2: C8        INY 
0C/B1A3: B1 9F     LDA ($9F),Y
0C/B1A5: 85 53     STA $53
0C/B1A7: 20 79 B2  JSR $B279
0C/B1AA: 20 3F B3  JSR $B33F
0C/B1AD: 20 28 B3  JSR $B328
0C/B1B0: 20 C8 B2  JSR $B2C8
0C/B1B3: 20 3F B3  JSR $B33F
0C/B1B6: 20 1F B3  JSR $B31F
0C/B1B9: 20 05 B3  JSR $B305
0C/B1BC: A0 0A     LDY #$0A
0C/B1BE: B1 9F     LDA ($9F),Y
0C/B1C0: C8        INY 
0C/B1C1: 11 9F     ORA ($9F),Y
0C/B1C3: D0 06     BNE $B1CB
0C/B1C5: A0 08     LDY #$08
0C/B1C7: A9 80     LDA #$80
0C/B1C9: 91 9F     STA ($9F),Y
0C/B1CB: 60        RTS 
; 1: drain mp
0C/B1CC: A0 15     LDY #$15
0C/B1CE: B1 A1     LDA ($A1),Y
0C/B1D0: 29 80     AND #$80
0C/B1D2: D0 20     BNE $B1F4
0C/B1D4: A0 10     LDY #$10
0C/B1D6: B1 A1     LDA ($A1),Y
0C/B1D8: 85 52     STA $52
0C/B1DA: C8        INY 
0C/B1DB: B1 A1     LDA ($A1),Y
0C/B1DD: 85 53     STA $53
0C/B1DF: 20 79 B2  JSR $B279
0C/B1E2: 20 48 B3  JSR $B348
0C/B1E5: 20 28 B3  JSR $B328
0C/B1E8: 20 05 B3  JSR $B305
0C/B1EB: 20 48 B3  JSR $B348
0C/B1EE: 20 1F B3  JSR $B31F
0C/B1F1: 4C C8 B2  JMP $B2C8
0C/B1F4: A0 10     LDY #$10
0C/B1F6: B1 9F     LDA ($9F),Y
0C/B1F8: 85 52     STA $52
0C/B1FA: C8        INY 
0C/B1FB: B1 9F     LDA ($9F),Y
0C/B1FD: 85 53     STA $53
0C/B1FF: 20 79 B2  JSR $B279
0C/B202: 20 48 B3  JSR $B348
0C/B205: 20 28 B3  JSR $B328
0C/B208: 20 C8 B2  JSR $B2C8
0C/B20B: 20 48 B3  JSR $B348
0C/B20E: 20 1F B3  JSR $B31F
0C/B211: 4C 05 B3  JMP $B305
; 2: ripper
0C/B214: A5 9C     LDA $9C
0C/B216: 85 00     STA $00
0C/B218: A9 00     LDA #$00
0C/B21A: 85 01     STA $01
0C/B21C: A9 14     LDA #$14
0C/B21E: 85 02     STA $02
0C/B220: A9 00     LDA #$00
0C/B222: 85 03     STA $03
0C/B224: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/B227: 4C 31 B3  JMP $B331
; 3: heal
0C/B22A: A0 15     LDY #$15
0C/B22C: B1 A1     LDA ($A1),Y
0C/B22E: 29 80     AND #$80
0C/B230: F0 09     BEQ $B23B          ; branch if not undead
0C/B232: A4 9C     LDY $9C
0C/B234: 20 A4 B2  JSR $B2A4          ; calculate healing damage
0C/B237: 88        DEY 
0C/B238: D0 FA     BNE $B234
0C/B23A: 60        RTS 
0C/B23B: A4 9C     LDY $9C
0C/B23D: 20 A4 B2  JSR $B2A4          ; calculate healing damage
0C/B240: 88        DEY 
0C/B241: D0 FA     BNE $B23D
0C/B243: 18        CLC 
0C/B244: A0 0A     LDY #$0A
0C/B246: B1 A1     LDA ($A1),Y
0C/B248: 65 9A     ADC $9A
0C/B24A: 91 A1     STA ($A1),Y
0C/B24C: C8        INY 
0C/B24D: B1 A1     LDA ($A1),Y
0C/B24F: 65 9B     ADC $9B
0C/B251: 91 A1     STA ($A1),Y
0C/B253: 20 3F B3  JSR $B33F
0C/B256: 20 28 B3  JSR $B328
0C/B259: 20 D8 B2  JSR $B2D8
0C/B25C: A9 00     LDA #$00
0C/B25E: 85 9A     STA $9A
0C/B260: 85 9B     STA $9B
0C/B262: A5 28     LDA $28
0C/B264: 29 DF     AND #$DF
0C/B266: 85 28     STA $28
0C/B268: 20 76 AF  JSR $AF76          ; get target status 1
0C/B26B: 29 7F     AND #$7F
0C/B26D: 91 A1     STA ($A1),Y
0C/B26F: A0 2C     LDY #$2C
0C/B271: 91 A1     STA ($A1),Y
0C/B273: A9 FF     LDA #$FF
0C/B275: 8D BA 7F  STA $7FBA
0C/B278: 60        RTS 

; [ calculate drain damage ]

0C/B279: 46 53     LSR $53            ; divide by 16
0C/B27B: 66 52     ROR $52
0C/B27D: 46 53     LSR $53
0C/B27F: 66 52     ROR $52
0C/B281: 46 53     LSR $53
0C/B283: 66 52     ROR $52
0C/B285: 46 53     LSR $53
0C/B287: 66 52     ROR $52
0C/B289: A5 52     LDA $52
0C/B28B: 05 53     ORA $53
0C/B28D: D0 02     BNE $B291
0C/B28F: E6 52     INC $52            ; min 1
0C/B291: A5 9C     LDA $9C            ; damage multiplier
0C/B293: 85 00     STA $00
0C/B295: A9 00     LDA #$00
0C/B297: 85 01     STA $01
0C/B299: A5 52     LDA $52
0C/B29B: 85 02     STA $02
0C/B29D: A5 53     LDA $53
0C/B29F: 85 03     STA $03
0C/B2A1: 4C 98 FC  JMP $FC98          ; multiply (16-bit)

; [ calculate healing damage ]

0C/B2A4: A2 00     LDX #$00
0C/B2A6: 86 52     STX $52
0C/B2A8: 86 53     STX $53
0C/B2AA: A9 1E     LDA #$1E
0C/B2AC: 20 11 FD  JSR $FD11          ; random (X..A)
0C/B2AF: 18        CLC 
0C/B2B0: 69 1E     ADC #$1E
0C/B2B2: 85 04     STA $04
0C/B2B4: A5 53     LDA $53
0C/B2B6: 69 00     ADC #$00
0C/B2B8: 85 05     STA $05
0C/B2BA: 18        CLC 
0C/B2BB: A5 9A     LDA $9A
0C/B2BD: 65 04     ADC $04
0C/B2BF: 85 9A     STA $9A
0C/B2C1: A5 9B     LDA $9B
0C/B2C3: 65 05     ADC $05
0C/B2C5: 85 9B     STA $9B
0C/B2C7: 60        RTS 

; [  ]

0C/B2C8: A4 56     LDY $56
0C/B2CA: 18        CLC 
0C/B2CB: B1 58     LDA ($58),Y
0C/B2CD: 65 04     ADC $04
0C/B2CF: 91 58     STA ($58),Y
0C/B2D1: C8        INY 
0C/B2D2: B1 58     LDA ($58),Y
0C/B2D4: 65 05     ADC $05
0C/B2D6: 91 58     STA ($58),Y
0C/B2D8: A4 56     LDY $56
0C/B2DA: B1 58     LDA ($58),Y
0C/B2DC: 85 00     STA $00
0C/B2DE: C8        INY 
0C/B2DF: B1 58     LDA ($58),Y
0C/B2E1: 85 01     STA $01
0C/B2E3: A4 57     LDY $57
0C/B2E5: B1 58     LDA ($58),Y
0C/B2E7: 85 02     STA $02
0C/B2E9: C8        INY 
0C/B2EA: B1 58     LDA ($58),Y
0C/B2EC: 85 03     STA $03
0C/B2EE: A5 04     LDA $04
0C/B2F0: 48        PHA 
0C/B2F1: 20 FC 8F  JSR $8FFC          ; compare (16-bit)
0C/B2F4: 90 0B     BCC $B301
0C/B2F6: A4 56     LDY $56
0C/B2F8: A5 02     LDA $02
0C/B2FA: 91 58     STA ($58),Y
0C/B2FC: C8        INY 
0C/B2FD: A5 03     LDA $03
0C/B2FF: 91 58     STA ($58),Y
0C/B301: 68        PLA 
0C/B302: 85 04     STA $04
0C/B304: 60        RTS 

; [  ]

0C/B305: A4 56     LDY $56
0C/B307: 38        SEC 
0C/B308: B1 58     LDA ($58),Y
0C/B30A: E5 04     SBC $04
0C/B30C: 91 58     STA ($58),Y
0C/B30E: C8        INY 
0C/B30F: B1 58     LDA ($58),Y
0C/B311: E5 05     SBC $05
0C/B313: 91 58     STA ($58),Y
0C/B315: B0 07     BCS $B31E
0C/B317: A9 00     LDA #$00
0C/B319: 91 58     STA ($58),Y
0C/B31B: 88        DEY 
0C/B31C: 91 58     STA ($58),Y
0C/B31E: 60        RTS 

; [  ]

0C/B31F: A5 9F     LDA $9F
0C/B321: 85 58     STA $58
0C/B323: A5 A0     LDA $A0
0C/B325: 85 59     STA $59
0C/B327: 60        RTS 

; [  ]

0C/B328: A5 A1     LDA $A1
0C/B32A: 85 58     STA $58
0C/B32C: A5 A2     LDA $A2
0C/B32E: 85 59     STA $59
0C/B330: 60        RTS 

; [  ]

0C/B331: 18        CLC 
0C/B332: A5 9A     LDA $9A
0C/B334: 65 04     ADC $04
0C/B336: 85 9A     STA $9A
0C/B338: A5 9B     LDA $9B
0C/B33A: 65 05     ADC $05
0C/B33C: 85 9B     STA $9B
0C/B33E: 60        RTS 

; [  ]

0C/B33F: A0 0A     LDY #$0A
0C/B341: 84 56     STY $56
0C/B343: A0 0E     LDY #$0E
0C/B345: 84 57     STY $57
0C/B347: 60        RTS 

; [  ]

0C/B348: A0 0C     LDY #$0C
0C/B34A: 84 56     STY $56
0C/B34C: A0 10     LDY #$10
0C/B34E: 84 57     STY $57
0C/B350: 60        RTS 

; [  ]

0C/B351: A0 08     LDY #$08
0C/B353: 84 56     STY $56
0C/B355: A0 2C     LDY #$2C
0C/B357: 84 5E     STY $5E
0C/B359: A9 FE     LDA #$FE
0C/B35B: 85 57     STA $57
0C/B35D: D0 0E     BNE $B36D
0C/B35F: A0 09     LDY #$09
0C/B361: 84 56     STY $56
0C/B363: A0 2D     LDY #$2D
0C/B365: 84 5E     STY $5E
0C/B367: A9 FD     LDA #$FD
0C/B369: 85 57     STA $57
0C/B36B: D0 00     BNE $B36D
0C/B36D: A0 03     LDY #$03
0C/B36F: B1 A1     LDA ($A1),Y
0C/B371: 85 46     STA $46
0C/B373: C8        INY 
0C/B374: B1 A1     LDA ($A1),Y
0C/B376: 85 44     STA $44
0C/B378: A9 00     LDA #$00
0C/B37A: 85 45     STA $45
0C/B37C: 85 47     STA $47
0C/B37E: 20 76 AF  JSR $AF76          ; get target status 1
0C/B381: 29 02     AND #$02
0C/B383: F0 04     BEQ $B389
0C/B385: 46 45     LSR $45
0C/B387: 66 44     ROR $44
0C/B389: 20 2C BC  JSR $BC2C          ; check for hit
0C/B38C: A0 1D     LDY #$1D
0C/B38E: B1 9F     LDA ($9F),Y
0C/B390: 25 57     AND $57
0C/B392: 85 52     STA $52
0C/B394: 38        SEC 
0C/B395: A5 9C     LDA $9C
0C/B397: E5 48     SBC $48
0C/B399: 90 2A     BCC $B3C5
0C/B39B: F0 28     BEQ $B3C5
0C/B39D: A4 56     LDY $56
0C/B39F: B1 A1     LDA ($A1),Y
0C/B3A1: A4 5E     LDY $5E
0C/B3A3: 91 A1     STA ($A1),Y
0C/B3A5: 05 52     ORA $52
0C/B3A7: A4 56     LDY $56
0C/B3A9: 91 A1     STA ($A1),Y
0C/B3AB: A4 56     LDY $56
0C/B3AD: C0 08     CPY #$08
0C/B3AF: D0 0F     BNE $B3C0
0C/B3B1: B1 A1     LDA ($A1),Y
0C/B3B3: 29 80     AND #$80
0C/B3B5: F0 09     BEQ $B3C0
0C/B3B7: A9 00     LDA #$00
0C/B3B9: A0 0A     LDY #$0A
0C/B3BB: 91 A1     STA ($A1),Y
0C/B3BD: C8        INY 
0C/B3BE: 91 A1     STA ($A1),Y
0C/B3C0: A5 52     LDA $52
0C/B3C2: 20 5C BF  JSR $BF5C          ; show status inflicted message
0C/B3C5: 60        RTS 

; --------------------------------------------------------------------------

; [ do magic/item action ]

0C/B3C6: A9 00     LDA #$00
0C/B3C8: 85 4A     STA $4A
0C/B3CA: 85 4B     STA $4B
0C/B3CC: 8D AE 00  STA $00AE
0C/B3CF: A9 80     LDA #$80
0C/B3D1: 8D AF 00  STA $00AF
0C/B3D4: A5 28     LDA $28
0C/B3D6: 09 40     ORA #$40
0C/B3D8: 85 28     STA $28
0C/B3DA: A0 2A     LDY #$2A
0C/B3DC: B1 9F     LDA ($9F),Y        ; spell id
0C/B3DE: 85 6C     STA $6C
0C/B3E0: 85 5E     STA $5E
0C/B3E2: AE BB 7C  LDX $7CBB          ; counter for turn order
0C/B3E5: BD 5E 7D  LDA $7D5E,X        ; turn order
0C/B3E8: C9 04     CMP #$04
0C/B3EA: 90 21     BCC $B40D          ; branch if a character
; monster attacker
0C/B3EC: 38        SEC 
0C/B3ED: E9 04     SBC #$04
0C/B3EF: AA        TAX 
0C/B3F0: BD D3 7C  LDA $7CD3,X
0C/B3F3: 18        CLC 
0C/B3F4: 69 64     ADC #$64
0C/B3F6: 85 E4     STA $E4
0C/B3F8: A0 23     LDY #$23
0C/B3FA: B1 9F     LDA ($9F),Y        ; palette id
0C/B3FC: 8D B1 7C  STA $7CB1
0C/B3FF: C8        INY 
0C/B400: B1 9F     LDA ($9F),Y        ; animation id
0C/B402: 8D B0 7C  STA $7CB0
0C/B405: C8        INY 
0C/B406: B1 9F     LDA ($9F),Y
0C/B408: 85 29     STA $29
0C/B40A: 4C 87 B4  JMP $B487
; character attacker
0C/B40D: A0 25     LDY #$25
0C/B40F: B1 9F     LDA ($9F),Y        ; spell level
0C/B411: 85 29     STA $29
0C/B413: A5 6C     LDA $6C
0C/B415: AA        TAX 
0C/B416: CA        DEX 
0C/B417: 8A        TXA 
0C/B418: 85 6C     STA $6C
0C/B41A: 18        CLC 
0C/B41B: 69 64     ADC #$64
0C/B41D: 85 E4     STA $E4
0C/B41F: A5 6C     LDA $6C
0C/B421: 85 00     STA $00
0C/B423: A9 07     LDA #$07           ; size: 7 bytes
0C/B425: 85 02     STA $02
0C/B427: A9 00     LDA #$00
0C/B429: 85 01     STA $01
0C/B42B: 85 03     STA $03
0C/B42D: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/B430: A5 04     LDA $04
0C/B432: 69 D9     ADC #$D9           ; 0C/85D9 (magic properties)
0C/B434: 85 44     STA $44
0C/B436: A5 05     LDA $05
0C/B438: 69 85     ADC #$85
0C/B43A: 85 45     STA $45
0C/B43C: A0 00     LDY #$00
0C/B43E: B1 44     LDA ($44),Y        ; byte 0 (magic effect)
0C/B440: 85 5E     STA $5E
0C/B442: C8        INY 
0C/B443: B1 44     LDA ($44),Y        ; byte 1 (spell %)
0C/B445: 85 46     STA $46
0C/B447: C8        INY 
0C/B448: B1 44     LDA ($44),Y        ; byte 2 (spell power)
0C/B44A: 85 47     STA $47
0C/B44C: C8        INY 
0C/B44D: B1 44     LDA ($44),Y        ; byte 3 (parameter 1)
0C/B44F: 85 48     STA $48
0C/B451: C8        INY 
0C/B452: B1 44     LDA ($44),Y        ; byte 4 (parameter 2)
0C/B454: 85 49     STA $49
0C/B456: C8        INY 
0C/B457: B1 44     LDA ($44),Y        ; byte 5 (palette id)
0C/B459: 8D B1 7C  STA $7CB1
0C/B45C: C8        INY 
0C/B45D: B1 44     LDA ($44),Y        ; byte 6 (animation id)
0C/B45F: 8D B0 7C  STA $7CB0
0C/B462: A0 26     LDY #$26
0C/B464: A2 00     LDX #$00
0C/B466: B5 46     LDA $46,X
0C/B468: 91 9F     STA ($9F),Y        ; copy to spell stats
0C/B46A: C8        INY 
0C/B46B: E8        INX 
0C/B46C: E0 04     CPX #$04
0C/B46E: D0 F6     BNE $B466
0C/B470: A5 6C     LDA $6C
0C/B472: C9 14     CMP #$14
0C/B474: B0 08     BCS $B47E
0C/B476: A0 12     LDY #$12           ; use intellect
0C/B478: 20 51 B5  JSR $B551          ; calculate mod. spell stats
0C/B47B: 4C 87 B4  JMP $B487
0C/B47E: C9 28     CMP #$28
0C/B480: B0 05     BCS $B487
0C/B482: A0 13     LDY #$13           ; use spirit
0C/B484: 20 51 B5  JSR $B551          ; calculate mod. spell stats
0C/B487: 20 76 AF  JSR $AF76          ; get target status 1
0C/B48A: 29 C0     AND #$C0
0C/B48C: F0 0D     BEQ $B49B          ; branch if not dead
0C/B48E: A5 6C     LDA $6C
0C/B490: C9 15     CMP #$15           ; life can target dead characters
0C/B492: F0 07     BEQ $B49B
0C/B494: C9 17     CMP #$17           ; esuna can target dead characters
0C/B496: F0 03     BEQ $B49B
0C/B498: 4C 73 BE  JMP $BE73          ; magic ineffective
0C/B49B: A5 A6     LDA $A6
0C/B49D: F0 12     BEQ $B4B1
0C/B49F: A0 26     LDY #$26
0C/B4A1: B1 9F     LDA ($9F),Y        ; save attacker mod. spell %
0C/B4A3: 85 70     STA $70
0C/B4A5: 4A        LSR 
0C/B4A6: 91 9F     STA ($9F),Y        ; halve spell %
0C/B4A8: C8        INY 
0C/B4A9: B1 9F     LDA ($9F),Y        ; save attacker mod. spell power
0C/B4AB: 85 71     STA $71
0C/B4AD: 4A        LSR 
0C/B4AE: 4A        LSR 
0C/B4AF: 91 9F     STA ($9F),Y
0C/B4B1: 20 76 AF  JSR $AF76          ; get target status 1
0C/B4B4: 29 C0     AND #$C0
0C/B4B6: F0 0B     BEQ $B4C3
0C/B4B8: A5 6C     LDA $6C
0C/B4BA: C9 15     CMP #$15
0C/B4BC: F0 05     BEQ $B4C3
0C/B4BE: C9 17     CMP #$17
0C/B4C0: F0 01     BEQ $B4C3
0C/B4C2: 60        RTS 
0C/B4C3: A5 6C     LDA $6C
0C/B4C5: C9 14     CMP #$14
0C/B4C7: B0 03     BCS $B4CC
0C/B4C9: 20 12 BC  JSR $BC12          ; check magic wall
0C/B4CC: A0 28     LDY #$28
0C/B4CE: B1 9F     LDA ($9F),Y
0C/B4D0: A0 17     LDY #$17
0C/B4D2: 31 A1     AND ($A1),Y
0C/B4D4: F0 03     BEQ $B4D9
0C/B4D6: 4C FB BC  JMP $BCFB          ; restore hp
0C/B4D9: A5 5E     LDA $5E
0C/B4DB: 0A        ASL 
0C/B4DC: 18        CLC 
0C/B4DD: 69 8A     ADC #$8A           ; 0C/BE8A (magic effect jump table)
0C/B4DF: 85 44     STA $44
0C/B4E1: A9 00     LDA #$00
0C/B4E3: 69 BE     ADC #$BE
0C/B4E5: 85 45     STA $45
0C/B4E7: A0 00     LDY #$00
0C/B4E9: B1 44     LDA ($44),Y
0C/B4EB: 85 46     STA $46
0C/B4ED: C8        INY 
0C/B4EE: B1 44     LDA ($44),Y
0C/B4F0: 85 47     STA $47
0C/B4F2: 20 87 BE  JSR $BE87          ; do magic effect
0C/B4F5: A0 0A     LDY #$0A
0C/B4F7: B1 9F     LDA ($9F),Y
0C/B4F9: C8        INY 
0C/B4FA: 11 9F     ORA ($9F),Y
0C/B4FC: D0 06     BNE $B504          ; branch if attacker hp is not zero
0C/B4FE: A0 08     LDY #$08
0C/B500: A9 80     LDA #$80
0C/B502: 91 9F     STA ($9F),Y        ; make attacker dead
0C/B504: A5 71     LDA $71
0C/B506: A0 27     LDY #$27
0C/B508: 91 9F     STA ($9F),Y        ; restore attacker mod. spell power
0C/B50A: 88        DEY 
0C/B50B: A5 70     LDA $70
0C/B50D: 91 9F     STA ($9F),Y        ; restore attacker mod. spell %
0C/B50F: A5 4A     LDA $4A
0C/B511: 85 00     STA $00
0C/B513: A5 4B     LDA $4B
0C/B515: 85 01     STA $01
0C/B517: A9 86     LDA #$86           ; *** bug *** should be 01869Fh = 99999
0C/B519: 85 03     STA $03
0C/B51B: A9 9F     LDA #$9F
0C/B51D: 85 02     STA $02
0C/B51F: 20 FC 8F  JSR $8FFC          ; compare (16-bit)
0C/B522: 90 08     BCC $B52C
0C/B524: A9 86     LDA #$86
0C/B526: 85 4B     STA $4B
0C/B528: A9 9F     LDA #$9F
0C/B52A: 85 4A     STA $4A
0C/B52C: A5 4A     LDA $4A
0C/B52E: 85 9A     STA $9A
0C/B530: 85 AE     STA $AE
0C/B532: A5 4B     LDA $4B
0C/B534: 85 9B     STA $9B
0C/B536: 85 AF     STA $AF
0C/B538: A0 0A     LDY #$0A
0C/B53A: B1 A1     LDA ($A1),Y        ; target's current hp
0C/B53C: C8        INY 
0C/B53D: 11 A1     ORA ($A1),Y
0C/B53F: D0 0D     BNE $B54E          ; branch if not zero
0C/B541: 20 76 AF  JSR $AF76          ; get target status 1
0C/B544: A0 2C     LDY #$2C
0C/B546: 91 A1     STA ($A1),Y        ; make target dead
0C/B548: A0 08     LDY #$08
0C/B54A: 09 80     ORA #$80
0C/B54C: 91 A1     STA ($A1),Y
0C/B54E: 4C 9A BF  JMP $BF9A          ; add dead target message to queue

; [ calculate mod. spell stats ]

; Y: spell stat offset ($12 = intellect, $13 = spirit)

0C/B551: B1 9F     LDA ($9F),Y        ; intellect or spirit
0C/B553: 85 48     STA $48
0C/B555: A0 24     LDY #$24
0C/B557: 38        SEC 
0C/B558: F1 9F     SBC ($9F),Y        ; subtract spell % penalty
0C/B55A: B0 02     BCS $B55E
0C/B55C: A9 00     LDA #$00           ; min zero
0C/B55E: 18        CLC 
0C/B55F: 65 46     ADC $46            ; add spell % from magic properties
0C/B561: A0 26     LDY #$26
0C/B563: 91 9F     STA ($9F),Y        ; set mod. spell %
0C/B565: A5 48     LDA $48
0C/B567: 4A        LSR 
0C/B568: 4A        LSR 
0C/B569: 18        CLC 
0C/B56A: 65 47     ADC $47            ; stat / 4 + spell power from magic properties
0C/B56C: A0 27     LDY #$27
0C/B56E: 91 9F     STA ($9F),Y        ; set mod. spell power
0C/B570: 60        RTS 

; magic effect $00/$01: magic damage
0C/B571: 20 7B BD  JSR $BD7B          ; calculate magic damage
0C/B574: A0 0A     LDY #$0A
0C/B576: 4C 79 B5  JMP $B579          ; subtract damage from target hp/mp

; [ subtract damage from target hp/mp ]

; Y: offset of current hp/mp ($0A = hp, $0C = mp)

0C/B579: 38        SEC 
0C/B57A: B1 A1     LDA ($A1),Y
0C/B57C: E5 4A     SBC $4A
0C/B57E: 91 A1     STA ($A1),Y
0C/B580: C8        INY 
0C/B581: B1 A1     LDA ($A1),Y
0C/B583: E5 4B     SBC $4B
0C/B585: 91 A1     STA ($A1),Y
0C/B587: B0 03     BCS $B58C
0C/B589: 20 8D B5  JSR $B58D          ; set target hp to zero
0C/B58C: 60        RTS 

; [ set target hp to zero ]

0C/B58D: A9 00     LDA #$00
0C/B58F: 91 A1     STA ($A1),Y
0C/B591: 88        DEY 
0C/B592: 91 A1     STA ($A1),Y
0C/B594: 60        RTS 

; magic effect $02: magic healing
0C/B595: A0 15     LDY #$15
0C/B597: B1 A1     LDA ($A1),Y
0C/B599: 29 80     AND #$80
0C/B59B: D0 06     BNE $B5A3          ; branch if undead
0C/B59D: 20 FB BC  JSR $BCFB          ; restore hp
0C/B5A0: 4C A6 B5  JMP $B5A6
0C/B5A3: 20 52 BD  JSR $BD52          ; do magic damage (undead)
0C/B5A6: 60        RTS 

; magic effect $03/$04: inflict status
0C/B5A7: A5 5E     LDA $5E
0C/B5A9: C9 04     CMP #$04
0C/B5AB: F0 1B     BEQ $B5C8
0C/B5AD: A9 08     LDA #$08           ; status 1
0C/B5AF: 85 5E     STA $5E
0C/B5B1: 20 E2 B5  JSR $B5E2          ; inflict status
0C/B5B4: A0 08     LDY #$08
0C/B5B6: B1 A1     LDA ($A1),Y
0C/B5B8: 29 80     AND #$80
0C/B5BA: F0 09     BEQ $B5C5
0C/B5BC: A0 00     LDY #$00
0C/B5BE: 84 A5     STY $A5
0C/B5C0: A0 0B     LDY #$0B
0C/B5C2: 20 8D B5  JSR $B58D          ; set target hp to zero
0C/B5C5: 4C CF B5  JMP $B5CF
0C/B5C8: A9 09     LDA #$09           ; status 2
0C/B5CA: 85 5E     STA $5E
0C/B5CC: 20 E2 B5  JSR $B5E2          ; inflict status
0C/B5CF: 60        RTS 

; [  ]

0C/B5D0: 38        SEC 
0C/B5D1: A5 52     LDA $52
0C/B5D3: E5 54     SBC $54
0C/B5D5: 85 52     STA $52
0C/B5D7: A5 53     LDA $53
0C/B5D9: E5 55     SBC $55
0C/B5DB: 85 53     STA $53
0C/B5DD: A5 52     LDA $52
0C/B5DF: 05 53     ORA $53
0C/B5E1: 60        RTS 

; [ inflict status ]

0C/B5E2: 20 23 BE  JSR $BE23          ; get number of magic hits
0C/B5E5: 20 D0 B5  JSR $B5D0
0C/B5E8: 90 26     BCC $B610          ; branch if less than 1 hit
0C/B5EA: F0 24     BEQ $B610
0C/B5EC: A4 5E     LDY $5E
0C/B5EE: 98        TYA 
0C/B5EF: 18        CLC 
0C/B5F0: 69 24     ADC #$24
0C/B5F2: 85 5F     STA $5F
0C/B5F4: B1 A1     LDA ($A1),Y        ; previous status 1/2
0C/B5F6: A4 5F     LDY $5F
0C/B5F8: 91 A1     STA ($A1),Y
0C/B5FA: A0 29     LDY #$29
0C/B5FC: 11 9F     ORA ($9F),Y        ; spell parameter 2
0C/B5FE: A4 5E     LDY $5E
0C/B600: 91 A1     STA ($A1),Y
0C/B602: A5 5E     LDA $5E
0C/B604: 85 56     STA $56
0C/B606: A0 29     LDY #$29
0C/B608: B1 9F     LDA ($9F),Y
0C/B60A: 20 5C BF  JSR $BF5C          ; show status inflicted message
0C/B60D: 4C 7E BE  JMP $BE7E          ; don't show damage message
0C/B610: 4C 73 BE  JMP $BE73          ; magic ineffective

; magic effect $05: slow
0C/B613: 20 23 BE  JSR $BE23          ; get number of magic hits
0C/B616: 20 D0 B5  JSR $B5D0
0C/B619: 90 2E     BCC $B649
0C/B61B: 38        SEC 
0C/B61C: A9 14     LDA #$14
0C/B61E: E5 52     SBC $52
0C/B620: 85 02     STA $02
0C/B622: A9 00     LDA #$00
0C/B624: E5 53     SBC $53
0C/B626: 85 03     STA $03
0C/B628: A0 07     LDY #$07
0C/B62A: B1 A1     LDA ($A1),Y
0C/B62C: 85 00     STA $00
0C/B62E: A9 00     LDA #$00
0C/B630: 85 01     STA $01
0C/B632: 20 FC 8F  JSR $8FFC          ; compare (16-bit)
0C/B635: 90 12     BCC $B649
0C/B637: A0 07     LDY #$07
0C/B639: A5 02     LDA $02
0C/B63B: 91 A1     STA ($A1),Y
0C/B63D: A9 3D     LDA #$3D           ; $3D: "Can hit"
0C/B63F: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B642: A9 BE     LDA #$BE           ; $3E: " less"
0C/B644: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B647: D0 03     BNE $B64C
0C/B649: 20 73 BE  JSR $BE73          ; magic ineffective
0C/B64C: 4C 7E BE  JMP $BE7E          ; don't show damage message

; magic effect $06: haste
0C/B64F: 20 E9 BD  JSR $BDE9          ; check for hit (magic)
0C/B652: 20 8D B6  JSR $B68D          ; set number of hits
0C/B655: 29 80     AND #$80
0C/B657: D0 2E     BNE $B687          ; branch if negative number of hits
0C/B659: 18        CLC 
0C/B65A: A9 14     LDA #$14           ; add 20
0C/B65C: 65 52     ADC $52
0C/B65E: 85 02     STA $02
0C/B660: A9 00     LDA #$00
0C/B662: 65 53     ADC $53
0C/B664: 85 03     STA $03
0C/B666: A0 07     LDY #$07
0C/B668: B1 A1     LDA ($A1),Y        ; current haste/slow modifier
0C/B66A: 85 00     STA $00
0C/B66C: A9 00     LDA #$00
0C/B66E: 85 01     STA $01
0C/B670: 20 FC 8F  JSR $8FFC          ; compare (16-bit)
0C/B673: B0 12     BCS $B687          ; branch if current modifier is greater
0C/B675: A0 07     LDY #$07
0C/B677: A5 02     LDA $02
0C/B679: 91 A1     STA ($A1),Y        ; set haste/slow modifier
0C/B67B: A9 3D     LDA #$3D           ; $3D: "Can hit"
0C/B67D: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B680: A9 BF     LDA #$BF           ; $3F: " more"
0C/B682: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B685: D0 03     BNE $B68A
0C/B687: 20 73 BE  JSR $BE73          ; magic ineffective
0C/B68A: 4C 7E BE  JMP $BE7E          ; don't show damage message

; [ set number of hits ]

0C/B68D: A5 48     LDA $48
0C/B68F: 85 52     STA $52
0C/B691: A5 49     LDA $49
0C/B693: 85 53     STA $53
0C/B695: 60        RTS 

; magic effect $07: fear
0C/B696: 20 23 BE  JSR $BE23          ; get number of magic hits
0C/B699: 20 D0 B5  JSR $B5D0
0C/B69C: 90 24     BCC $B6C2
0C/B69E: A5 52     LDA $52
0C/B6A0: 85 00     STA $00
0C/B6A2: A5 53     LDA $53
0C/B6A4: 85 01     STA $01
0C/B6A6: A0 27     LDY #$27
0C/B6A8: B1 9F     LDA ($9F),Y
0C/B6AA: 85 02     STA $02
0C/B6AC: A9 00     LDA #$00
0C/B6AE: 85 03     STA $03
0C/B6B0: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/B6B3: A0 14     LDY #$14
0C/B6B5: 18        CLC 
0C/B6B6: B1 A1     LDA ($A1),Y
0C/B6B8: 65 04     ADC $04
0C/B6BA: 91 A1     STA ($A1),Y
0C/B6BC: 90 07     BCC $B6C5
0C/B6BE: A9 FF     LDA #$FF
0C/B6C0: 91 A1     STA ($A1),Y
0C/B6C2: 4C 73 BE  JMP $BE73          ; magic ineffective
0C/B6C5: A9 33     LDA #$33           ; "Terrified enemy"
0C/B6C7: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B6CA: 4C 7E BE  JMP $BE7E          ; don't show damage message

; magic effect $08/$09/$0B/$0C: esuna, basuna, barrier, aura
0C/B6CD: 20 E9 BD  JSR $BDE9          ; check for hit (magic)
0C/B6D0: A5 5E     LDA $5E
0C/B6D2: C9 0A     CMP #$0A
0C/B6D4: 90 03     BCC $B6D9
0C/B6D6: 4C 2C B7  JMP $B72C
; esuna, basuna
0C/B6D9: 48        PHA 
0C/B6DA: 18        CLC 
0C/B6DB: A0 28     LDY #$28
0C/B6DD: B1 9F     LDA ($9F),Y        ; spell parameter 1
0C/B6DF: 65 48     ADC $48
0C/B6E1: 85 48     STA $48            ; add to number of hits
0C/B6E3: 68        PLA 
0C/B6E4: C9 08     CMP #$08
0C/B6E6: D0 13     BNE $B6FB
; esuna
0C/B6E8: A0 08     LDY #$08
0C/B6EA: 84 5E     STY $5E
0C/B6EC: B1 A1     LDA ($A1),Y        ; status 1
0C/B6EE: A0 2C     LDY #$2C
0C/B6F0: 84 5F     STY $5F
0C/B6F2: 91 A1     STA ($A1),Y        ; previous status 1
0C/B6F4: A0 08     LDY #$08
0C/B6F6: A6 48     LDX $48
0C/B6F8: 4C 0D B7  JMP $B70D
; basuna
0C/B6FB: A0 09     LDY #$09
0C/B6FD: 84 5E     STY $5E
0C/B6FF: B1 A1     LDA ($A1),Y        ; status 2
0C/B701: A0 2D     LDY #$2D
0C/B703: 84 5F     STY $5F
0C/B705: 91 A1     STA ($A1),Y        ; previous status 2
0C/B707: A0 09     LDY #$09
0C/B709: A6 48     LDX $48
0C/B70B: E8        INX 
0C/B70C: E8        INX 
0C/B70D: E0 08     CPX #$08
0C/B70F: 90 02     BCC $B713
0C/B711: A2 07     LDX #$07
0C/B713: B1 A1     LDA ($A1),Y
0C/B715: 20 0E 90  JSR $900E          ; clear bit
0C/B718: CA        DEX 
0C/B719: 10 FA     BPL $B715
0C/B71B: 91 A1     STA ($A1),Y
0C/B71D: A4 5E     LDY $5E
0C/B71F: B1 A1     LDA ($A1),Y
0C/B721: 85 4E     STA $4E
0C/B723: A4 5F     LDY $5F
0C/B725: B1 A1     LDA ($A1),Y
0C/B727: 85 4F     STA $4F
0C/B729: 4C 84 B7  JMP $B784          ; show status removed message
; barrier, aura
0C/B72C: 48        PHA 
0C/B72D: A9 49     LDA #$49           ; $49: "White"
0C/B72F: 85 5C     STA $5C
0C/B731: A9 D1     LDA #$D1           ; $51: " Aura"
0C/B733: 85 5D     STA $5D
0C/B735: 68        PLA 
0C/B736: C9 0C     CMP #$0C
0C/B738: F0 0D     BEQ $B747          ; branch if aura
0C/B73A: A9 40     LDA #$40           ; $40: "Ice"
0C/B73C: 85 5C     STA $5C
0C/B73E: A9 C8     LDA #$C8           ; $48: " resist!"
0C/B740: 85 5D     STA $5D
0C/B742: A0 05     LDY #$05
0C/B744: 4C 4D B7  JMP $B74D          ; show barrier/aura messages
0C/B747: A0 1C     LDY #$1C
0C/B749: 20 4D B7  JSR $B74D          ; show barrier/aura messages
0C/B74C: 60        RTS 

; [ show barrier/aura messages ]

0C/B74D: B1 A1     LDA ($A1),Y        ; strong status or monster type bonus
0C/B74F: A6 48     LDX $48
0C/B751: E0 08     CPX #$08
0C/B753: 90 02     BCC $B757
0C/B755: A2 07     LDX #$07
0C/B757: CA        DEX 
0C/B758: 30 24     BMI $B77E
0C/B75A: 86 48     STX $48
0C/B75C: 20 0A 90  JSR $900A          ; set bit
0C/B75F: CA        DEX 
0C/B760: 10 FA     BPL $B75C
0C/B762: 91 A1     STA ($A1),Y
0C/B764: A2 00     LDX #$00
0C/B766: 86 5F     STX $5F
0C/B768: A5 5C     LDA $5C
0C/B76A: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B76D: A5 5D     LDA $5D
0C/B76F: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B772: A5 48     LDA $48
0C/B774: C5 5F     CMP $5F
0C/B776: F0 09     BEQ $B781
0C/B778: E6 5F     INC $5F
0C/B77A: E6 5C     INC $5C
0C/B77C: D0 EA     BNE $B768
0C/B77E: 20 73 BE  JSR $BE73          ; magic ineffective
0C/B781: 4C 7E BE  JMP $BE7E          ; don't show damage message

; [ show status removed message ]

; $4F: status (bitmask)

0C/B784: A2 07     LDX #$07
0C/B786: A5 4F     LDA $4F
0C/B788: 20 16 90  JSR $9016          ; check bit
0C/B78B: D0 05     BNE $B792
0C/B78D: CA        DEX 
0C/B78E: 10 F8     BPL $B788
0C/B790: 30 35     BMI $B7C7
0C/B792: A5 4E     LDA $4E
0C/B794: 20 16 90  JSR $9016          ; check bit
0C/B797: F0 05     BEQ $B79E
0C/B799: CA        DEX 
0C/B79A: 10 EC     BPL $B788
0C/B79C: 30 29     BMI $B7C7
0C/B79E: 38        SEC 
0C/B79F: A5 5E     LDA $5E
0C/B7A1: E9 08     SBC #$08
0C/B7A3: 85 5E     STA $5E
0C/B7A5: 0A        ASL 
0C/B7A6: 85 5F     STA $5F
0C/B7A8: 0A        ASL 
0C/B7A9: 18        CLC 
0C/B7AA: 65 5E     ADC $5E
0C/B7AC: 65 5F     ADC $5F
0C/B7AE: 69 26     ADC #$26           ; $26: status removed messages
0C/B7B0: 85 5E     STA $5E
0C/B7B2: 8A        TXA 
0C/B7B3: 85 5F     STA $5F
0C/B7B5: 38        SEC 
0C/B7B6: A9 07     LDA #$07
0C/B7B8: E5 5F     SBC $5F
0C/B7BA: 85 5F     STA $5F
0C/B7BC: 18        CLC 
0C/B7BD: A5 5E     LDA $5E
0C/B7BF: 65 5F     ADC $5F
0C/B7C1: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B7C4: 4C 7E BE  JMP $BE7E          ; don't show damage message
0C/B7C7: 4C 73 BE  JMP $BE73          ; magic ineffective

; magic effect $0A: protect
0C/B7CA: 20 E9 BD  JSR $BDE9          ; check for hit (magic)
0C/B7CD: A0 27     LDY #$27
0C/B7CF: B1 A1     LDA ($A1),Y        ; mod. spell power
0C/B7D1: 85 00     STA $00
0C/B7D3: A9 00     LDA #$00
0C/B7D5: 85 01     STA $01
0C/B7D7: A5 48     LDA $48            ; number of hits
0C/B7D9: 85 02     STA $02
0C/B7DB: A5 49     LDA $49
0C/B7DD: 85 03     STA $03
0C/B7DF: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/B7E2: A0 02     LDY #$02
0C/B7E4: 18        CLC 
0C/B7E5: B1 A1     LDA ($A1),Y        ; add to defense
0C/B7E7: 65 04     ADC $04
0C/B7E9: 91 A1     STA ($A1),Y
0C/B7EB: 90 07     BCC $B7F4
0C/B7ED: A9 FF     LDA #$FF           ; max 255
0C/B7EF: 91 A1     STA ($A1),Y
0C/B7F1: 4C 73 BE  JMP $BE73          ; magic ineffective
0C/B7F4: A9 5C     LDA #$5C           ; $5C: "Defense"
0C/B7F6: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B7F9: A9 E6     LDA #$E6           ; $66: " up!"
0C/B7FB: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B7FE: 4C 7E BE  JMP $BE7E          ; don't show damage message

; magic effect $0D: dispel
0C/B801: 20 23 BE  JSR $BE23          ; get number of magic hits
0C/B804: A6 52     LDX $52
0C/B806: CA        DEX 
0C/B807: 10 02     BPL $B80B
0C/B809: 30 30     BMI $B83B
0C/B80B: E0 08     CPX #$08
0C/B80D: 90 02     BCC $B811
0C/B80F: A2 07     LDX #$07
0C/B811: 86 52     STX $52
0C/B813: A0 05     LDY #$05
0C/B815: B1 A1     LDA ($A1),Y
0C/B817: 20 0E 90  JSR $900E          ; clear bit
0C/B81A: CA        DEX 
0C/B81B: 10 FA     BPL $B817
0C/B81D: A2 00     LDX #$00
0C/B81F: 86 5F     STX $5F
0C/B821: A9 52     LDA #$52           ; $52: "Ice"
0C/B823: 85 5C     STA $5C
0C/B825: A5 5C     LDA $5C
0C/B827: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B82A: A9 DA     LDA #$DA           ; $5A: " Res.Down"
0C/B82C: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B82F: A5 52     LDA $52
0C/B831: C5 5F     CMP $5F
0C/B833: F0 09     BEQ $B83E
0C/B835: E6 5F     INC $5F
0C/B837: E6 5C     INC $5C
0C/B839: D0 EA     BNE $B825
0C/B83B: 20 73 BE  JSR $BE73          ; magic ineffective
0C/B83E: 4C 7E BE  JMP $BE7E          ; don't show damage message

; magic effect $0E/$0F: blink/shell
0C/B841: 20 E9 BD  JSR $BDE9          ; check for hit (magic)
0C/B844: A5 5E     LDA $5E
0C/B846: C9 0F     CMP #$0F
0C/B848: F0 06     BEQ $B850
0C/B84A: A9 00     LDA #$00
0C/B84C: 85 5E     STA $5E
0C/B84E: F0 04     BEQ $B854
0C/B850: A9 03     LDA #$03
0C/B852: 85 5E     STA $5E
0C/B854: 18        CLC 
0C/B855: A4 5E     LDY $5E
0C/B857: B1 A1     LDA ($A1),Y
0C/B859: 65 48     ADC $48
0C/B85B: 91 A1     STA ($A1),Y
0C/B85D: 90 07     BCC $B866
0C/B85F: A9 FF     LDA #$FF
0C/B861: 91 A1     STA ($A1),Y
0C/B863: 4C 73 BE  JMP $BE73          ; magic ineffective
0C/B866: A5 5E     LDA $5E
0C/B868: C9 00     CMP #$00
0C/B86A: D0 04     BNE $B870
0C/B86C: A9 34     LDA #$34
0C/B86E: D0 02     BNE $B872
0C/B870: A9 35     LDA #$35           ; $35: "M.Res up"
0C/B872: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B875: 4C 7E BE  JMP $BE7E          ; don't show damage message

; magic effect $10: life
0C/B878: A0 15     LDY #$15
0C/B87A: B1 A1     LDA ($A1),Y
0C/B87C: 29 80     AND #$80
0C/B87E: F0 03     BEQ $B883
0C/B880: 4C A7 B5  JMP $B5A7
0C/B883: 20 76 AF  JSR $AF76          ; get target status 1
0C/B886: 29 80     AND #$80
0C/B888: F0 09     BEQ $B893
0C/B88A: 20 E9 BD  JSR $BDE9          ; check for hit (magic)
0C/B88D: A5 48     LDA $48
0C/B88F: 05 49     ORA $49
0C/B891: D0 03     BNE $B896
0C/B893: 4C 73 BE  JMP $BE73          ; magic ineffective
0C/B896: 20 76 AF  JSR $AF76          ; get target status 1
0C/B899: A0 2C     LDY #$2C
0C/B89B: 91 A1     STA ($A1),Y
0C/B89D: A0 08     LDY #$08
0C/B89F: 29 7F     AND #$7F
0C/B8A1: 91 A1     STA ($A1),Y
0C/B8A3: A9 26     LDA #$26           ; $26: "Rose!"
0C/B8A5: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B8A8: 38        SEC 
0C/B8A9: A9 10     LDA #$10
0C/B8AB: E5 48     SBC $48
0C/B8AD: 85 02     STA $02
0C/B8AF: A9 00     LDA #$00
0C/B8B1: E5 49     SBC $49
0C/B8B3: 85 03     STA $03
0C/B8B5: 05 02     ORA $02
0C/B8B7: D0 02     BNE $B8BB
0C/B8B9: E6 02     INC $02
0C/B8BB: A0 0E     LDY #$0E
0C/B8BD: B1 A1     LDA ($A1),Y
0C/B8BF: 85 00     STA $00
0C/B8C1: C8        INY 
0C/B8C2: B1 A1     LDA ($A1),Y
0C/B8C4: 85 01     STA $01
0C/B8C6: 20 C3 FC  JSR $FCC3          ; divide
0C/B8C9: A0 0A     LDY #$0A
0C/B8CB: A5 04     LDA $04
0C/B8CD: 91 A1     STA ($A1),Y
0C/B8CF: 4C 7E BE  JMP $BE7E          ; don't show damage message

; magic effect $11: sap
0C/B8D2: 20 23 BE  JSR $BE23          ; get number of magic hits
0C/B8D5: 20 D0 B5  JSR $B5D0
0C/B8D8: B0 06     BCS $B8E0
0C/B8DA: A9 00     LDA #$00
0C/B8DC: 85 52     STA $52
0C/B8DE: 85 53     STA $53
0C/B8E0: 18        CLC 
0C/B8E1: A5 52     LDA $52
0C/B8E3: 69 01     ADC #$01
0C/B8E5: 85 02     STA $02
0C/B8E7: A5 53     LDA $53
0C/B8E9: 69 00     ADC #$00
0C/B8EB: 85 03     STA $03
0C/B8ED: A0 0C     LDY #$0C
0C/B8EF: B1 A1     LDA ($A1),Y
0C/B8F1: 85 00     STA $00
0C/B8F3: A9 00     LDA #$00
0C/B8F5: 85 01     STA $01
0C/B8F7: 20 C3 FC  JSR $FCC3          ; divide
0C/B8FA: A5 04     LDA $04
0C/B8FC: 91 A1     STA ($A1),Y
0C/B8FE: A9 5E     LDA #$5E           ; $5E: "MP"
0C/B900: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B903: A9 B6     LDA #$B6           ; $56: " fell"
0C/B905: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B908: 4C 7E BE  JMP $BE7E          ; don't show damage message

; magic effect $12: swap
0C/B90B: 20 23 BE  JSR $BE23          ; get number of magic hits
0C/B90E: 20 D0 B5  JSR $B5D0
0C/B911: 90 50     BCC $B963
0C/B913: F0 4E     BEQ $B963
0C/B915: A0 0A     LDY #$0A
0C/B917: 20 66 B9  JSR $B966
0C/B91A: A0 0C     LDY #$0C
0C/B91C: 20 66 B9  JSR $B966
0C/B91F: A9 0A     LDA #$0A
0C/B921: 85 5C     STA $5C
0C/B923: A9 0E     LDA #$0E
0C/B925: 85 5D     STA $5D
0C/B927: A5 9F     LDA $9F
0C/B929: 85 5E     STA $5E
0C/B92B: A5 A0     LDA $A0
0C/B92D: 85 5F     STA $5F
0C/B92F: 20 83 B9  JSR $B983          ; validate hp/mp
0C/B932: A5 A1     LDA $A1
0C/B934: 85 5E     STA $5E
0C/B936: A5 A2     LDA $A2
0C/B938: 85 5F     STA $5F
0C/B93A: 20 83 B9  JSR $B983          ; validate hp/mp
0C/B93D: A9 0C     LDA #$0C
0C/B93F: 85 5C     STA $5C
0C/B941: A9 10     LDA #$10
0C/B943: 85 5D     STA $5D
0C/B945: A5 9F     LDA $9F
0C/B947: 85 5E     STA $5E
0C/B949: A5 A0     LDA $A0
0C/B94B: 85 5F     STA $5F
0C/B94D: 20 83 B9  JSR $B983          ; validate hp/mp
0C/B950: A5 A1     LDA $A1
0C/B952: 85 5E     STA $5E
0C/B954: A5 A2     LDA $A2
0C/B956: 85 5F     STA $5F
0C/B958: 20 83 B9  JSR $B983          ; validate hp/mp
0C/B95B: A9 37     LDA #$37           ; $37: "Swapped HP/MP"
0C/B95D: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/B960: 4C 7E BE  JMP $BE7E          ; don't show damage message
0C/B963: 4C 73 BE  JMP $BE73          ; magic ineffective

; [  ]

0C/B966: B1 9F     LDA ($9F),Y
0C/B968: 85 52     STA $52
0C/B96A: C8        INY 
0C/B96B: B1 9F     LDA ($9F),Y
0C/B96D: 85 53     STA $53
0C/B96F: 88        DEY 
0C/B970: B1 A1     LDA ($A1),Y
0C/B972: 91 9F     STA ($9F),Y
0C/B974: C8        INY 
0C/B975: B1 A1     LDA ($A1),Y
0C/B977: 91 9F     STA ($9F),Y
0C/B979: A5 53     LDA $53
0C/B97B: 91 A1     STA ($A1),Y
0C/B97D: 88        DEY 
0C/B97E: A5 52     LDA $52
0C/B980: 91 A1     STA ($A1),Y
0C/B982: 60        RTS 

; [ validate hp/mp ]

;  $5C: current hp/mp offset
;  $5D: max hp/mp offset
; +$5E: pointer to battle stats

0C/B983: A4 5C     LDY $5C
0C/B985: B1 5E     LDA ($5E),Y        ; +$00: current hp/mp
0C/B987: 85 00     STA $00
0C/B989: C8        INY 
0C/B98A: B1 5E     LDA ($5E),Y
0C/B98C: 85 01     STA $01
0C/B98E: A4 5D     LDY $5D
0C/B990: B1 5E     LDA ($5E),Y        ; +$02: max hp/mp
0C/B992: 85 02     STA $02
0C/B994: C8        INY 
0C/B995: B1 5E     LDA ($5E),Y
0C/B997: 85 03     STA $03
0C/B999: 20 FC 8F  JSR $8FFC          ; compare (16-bit)
0C/B99C: 90 0B     BCC $B9A9          ; return if less than max
0C/B99E: A4 5C     LDY $5C
0C/B9A0: A5 02     LDA $02
0C/B9A2: 91 5E     STA ($5E),Y        ; set hp/mp to max
0C/B9A4: C8        INY 
0C/B9A5: A5 03     LDA $03
0C/B9A7: 91 5E     STA ($5E),Y
0C/B9A9: 60        RTS 

; magic effect $13/$14: drain/osmose
0C/B9AA: A9 0A     LDA #$0A           ; current hp
0C/B9AC: 85 5C     STA $5C
0C/B9AE: A9 0E     LDA #$0E           ; max hp
0C/B9B0: 85 5D     STA $5D
0C/B9B2: A9 5D     LDA #$5D           ; $5D: "HP"
0C/B9B4: 85 60     STA $60
0C/B9B6: A5 5E     LDA $5E
0C/B9B8: C9 13     CMP #$13
0C/B9BA: F0 0A     BEQ $B9C6          ; branch if not osmose
0C/B9BC: E6 60     INC $60            ; switch to mp damage
0C/B9BE: E6 5C     INC $5C
0C/B9C0: E6 5C     INC $5C
0C/B9C2: E6 5D     INC $5D
0C/B9C4: E6 5D     INC $5D
0C/B9C6: 20 7B BD  JSR $BD7B          ; calculate magic damage
0C/B9C9: A0 15     LDY #$15
0C/B9CB: B1 A1     LDA ($A1),Y
0C/B9CD: 29 80     AND #$80
0C/B9CF: D0 18     BNE $B9E9          ; branch if target is undead
0C/B9D1: A4 5C     LDY $5C
0C/B9D3: 20 79 B5  JSR $B579          ; subtract damage from target hp/mp
0C/B9D6: A4 5C     LDY $5C
0C/B9D8: 18        CLC 
0C/B9D9: B1 9F     LDA ($9F),Y        ; add damage to attacker hp/mp
0C/B9DB: 65 4A     ADC $4A
0C/B9DD: 91 9F     STA ($9F),Y
0C/B9DF: C8        INY 
0C/B9E0: B1 9F     LDA ($9F),Y
0C/B9E2: 65 4B     ADC $4B
0C/B9E4: 91 9F     STA ($9F),Y
0C/B9E6: 4C 1D BA  JMP $BA1D
; undead target
0C/B9E9: 06 4A     ASL $4A            ; double damage
0C/B9EB: 26 4B     ROL $4B
0C/B9ED: A4 5C     LDY $5C
0C/B9EF: 84 50     STY $50
0C/B9F1: A4 5D     LDY $5D
0C/B9F3: 84 51     STY $51
0C/B9F5: 20 1B BD  JSR $BD1B          ; restore target's hp/mp
0C/B9F8: A4 5C     LDY $5C
0C/B9FA: 38        SEC 
0C/B9FB: B1 9F     LDA ($9F),Y        ; subtract damage from attacker hp/mp
0C/B9FD: E5 4A     SBC $4A
0C/B9FF: 91 9F     STA ($9F),Y
0C/BA01: C8        INY 
0C/BA02: B1 9F     LDA ($9F),Y
0C/BA04: E5 4B     SBC $4B
0C/BA06: 91 9F     STA ($9F),Y
0C/BA08: B0 07     BCS $BA11
0C/BA0A: A9 00     LDA #$00           ; min zero
0C/BA0C: 91 9F     STA ($9F),Y
0C/BA0E: 88        DEY 
0C/BA0F: 91 9F     STA ($9F),Y
0C/BA11: A5 60     LDA $60
0C/BA13: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/BA16: A9 E8     LDA #$E8           ; $68: " drained"
0C/BA18: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/BA1B: D0 0A     BNE $BA27
0C/BA1D: A5 60     LDA $60
0C/BA1F: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/BA22: A9 E9     LDA #$E9           ; $69: " absorbed!"
0C/BA24: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/BA27: A5 9F     LDA $9F
0C/BA29: 85 5E     STA $5E
0C/BA2B: A5 A0     LDA $A0
0C/BA2D: 85 5F     STA $5F
0C/BA2F: 20 83 B9  JSR $B983          ; validate hp/mp
0C/BA32: A5 A1     LDA $A1
0C/BA34: 85 5E     STA $5E
0C/BA36: A5 A2     LDA $A2
0C/BA38: 85 5F     STA $5F
0C/BA3A: 20 83 B9  JSR $B983          ; validate hp/mp
0C/BA3D: 4C 7E BE  JMP $BE7E          ; don't show damage message

; magic effect $15: berserk
0C/BA40: 20 E9 BD  JSR $BDE9          ; check for hit (magic)
0C/BA43: A0 27     LDY #$27
0C/BA45: B1 9F     LDA ($9F),Y        ; mod. spell power
0C/BA47: 85 02     STA $02
0C/BA49: C8        INY 
0C/BA4A: B1 9F     LDA ($9F),Y        ; spell parameter 1
0C/BA4C: 85 03     STA $03
0C/BA4E: A5 48     LDA $48            ; number of hits
0C/BA50: 85 00     STA $00
0C/BA52: A5 49     LDA $49
0C/BA54: 85 01     STA $01
0C/BA56: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0C/BA59: A0 1A     LDY #$1A
0C/BA5B: 18        CLC 
0C/BA5C: B1 A1     LDA ($A1),Y        ; add to main hand attack power
0C/BA5E: 65 04     ADC $04
0C/BA60: 90 02     BCC $BA64
0C/BA62: A9 FF     LDA #$FF           ; max 255
0C/BA64: 91 A1     STA ($A1),Y
0C/BA66: A9 5B     LDA #$5B           ; $5B: "Attack"
0C/BA68: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/BA6B: A9 E6     LDA #$E6           ; $66: " up!"
0C/BA6D: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/BA70: 4C 7E BE  JMP $BE7E          ; don't show damage message

; magic effect $16: wall
0C/BA73: 20 E9 BD  JSR $BDE9          ; check for hit (magic)
0C/BA76: A0 06     LDY #$06
0C/BA78: 38        SEC 
0C/BA79: B1 A1     LDA ($A1),Y
0C/BA7B: E5 48     SBC $48
0C/BA7D: 90 03     BCC $BA82
0C/BA7F: 4C 73 BE  JMP $BE73          ; magic ineffective
0C/BA82: A5 48     LDA $48
0C/BA84: 91 A1     STA ($A1),Y
0C/BA86: A9 38     LDA #$38           ; $38: "B.Magic Wall"
0C/BA88: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/BA8B: 4C 7E BE  JMP $BE7E          ; don't show damage message

; magic effect $17: remove status
0C/BA8E: 20 E9 BD  JSR $BDE9          ; check for hit (magic)
0C/BA91: A5 48     LDA $48
0C/BA93: 05 49     ORA $49
0C/BA95: D0 03     BNE $BA9A          ; branch if nonzero hits
0C/BA97: 4C 73 BE  JMP $BE73          ; magic ineffective
0C/BA9A: 20 76 AF  JSR $AF76          ; get target status 1
0C/BA9D: A0 29     LDY #$29
0C/BA9F: 31 9F     AND ($9F),Y        ; spell parameter 2
0C/BAA1: 48        PHA 
0C/BAA2: 20 76 AF  JSR $AF76          ; get target status 1
0C/BAA5: A0 2C     LDY #$2C
0C/BAA7: 91 A1     STA ($A1),Y
0C/BAA9: 85 4F     STA $4F
0C/BAAB: A0 08     LDY #$08
0C/BAAD: 84 5E     STY $5E
0C/BAAF: 68        PLA 
0C/BAB0: 91 A1     STA ($A1),Y
0C/BAB2: 20 84 B7  JSR $B784          ; show status removed message
0C/BAB5: 4C 7E BE  JMP $BE7E          ; don't show damage message

; magic effect $18: tsunami, quake, cyclone
0C/BAB8: 20 E9 BD  JSR $BDE9          ; check for hit (magic)
0C/BABB: 18        CLC 
0C/BABC: A5 48     LDA $48
0C/BABE: 65 46     ADC $46
0C/BAC0: 85 52     STA $52
0C/BAC2: A5 49     LDA $49
0C/BAC4: 69 00     ADC #$00
0C/BAC6: 85 53     STA $53
0C/BAC8: A0 28     LDY #$28
0C/BACA: B1 9F     LDA ($9F),Y        ; parameter 1
0C/BACC: A0 15     LDY #$15
0C/BACE: 31 A1     AND ($A1),Y        ; monster type
0C/BAD0: 90 06     BCC $BAD8
0C/BAD2: A9 00     LDA #$00           ; zero hits
0C/BAD4: 85 52     STA $52
0C/BAD6: 85 53     STA $53
0C/BAD8: 20 06 BE  JSR $BE06          ; check for evade (magic)
0C/BADB: 20 06 BB  JSR $BB06
0C/BADE: A0 27     LDY #$27
0C/BAE0: B1 9F     LDA ($9F),Y        ; mod. spell power
0C/BAE2: 85 44     STA $44
0C/BAE4: A9 00     LDA #$00
0C/BAE6: 85 45     STA $45
0C/BAE8: 85 46     STA $46            ; ignore defense
0C/BAEA: 85 47     STA $47
0C/BAEC: A5 52     LDA $52
0C/BAEE: 85 48     STA $48
0C/BAF0: 20 88 BC  JSR $BC88          ; calculate damage
0C/BAF3: A0 29     LDY #$29
0C/BAF5: B1 9F     LDA ($9F),Y        ; parameter 2
0C/BAF7: A0 15     LDY #$15
0C/BAF9: 31 A1     AND ($A1),Y        ; monster type
0C/BAFB: F0 04     BEQ $BB01
0C/BAFD: 06 4A     ASL $4A            ; double damage
0C/BAFF: 26 4B     ROL $4B
0C/BB01: A0 0A     LDY #$0A
0C/BB03: 4C 79 B5  JMP $B579          ; subtract damage from target hp/mp

; [  ]

0C/BB06: A5 48     LDA $48
0C/BB08: 85 54     STA $54
0C/BB0A: A5 49     LDA $49
0C/BB0C: 85 55     STA $55
0C/BB0E: 60        RTS 

; magic effect $19: garlic
0C/BB0F: A0 15     LDY #$15
0C/BB11: B1 A1     LDA ($A1),Y
0C/BB13: 29 80     AND #$80
0C/BB15: F0 03     BEQ $BB1A          ; branch if not undead
0C/BB17: 4C 52 BD  JMP $BD52          ; do magic damage (undead)
0C/BB1A: 4C 73 BE  JMP $BE73          ; magic ineffective

; magic effect $1A/$1B: elixir
0C/BB1D: 20 FB BC  JSR $BCFB          ; restore hp
0C/BB20: 20 C6 BD  JSR $BDC6          ; restore mp
0C/BB23: 4C 7E BE  JMP $BE7E          ; don't show damage message

; magic effect $1C: ultima
0C/BB26: A9 01     LDA #$01
0C/BB28: 85 46     STA $46
0C/BB2A: A0 26     LDY #$26
0C/BB2C: B1 9F     LDA ($9F),Y
0C/BB2E: 85 44     STA $44
0C/BB30: A9 00     LDA #$00
0C/BB32: 85 45     STA $45
0C/BB34: 20 71 AF  JSR $AF71          ; get attacker status 1
0C/BB37: 29 02     AND #$02
0C/BB39: F0 04     BEQ $BB3F
0C/BB3B: 46 45     LSR $45
0C/BB3D: 66 44     ROR $44
0C/BB3F: 20 2C BC  JSR $BC2C          ; check for hit
0C/BB42: 18        CLC 
0C/BB43: A5 48     LDA $48
0C/BB45: 65 46     ADC $46
0C/BB47: 85 52     STA $52
0C/BB49: A5 49     LDA $49
0C/BB4B: 69 00     ADC #$00
0C/BB4D: 85 53     STA $53
0C/BB4F: 20 06 BE  JSR $BE06          ; check for evade (magic)
0C/BB52: 20 06 BB  JSR $BB06
0C/BB55: 38        SEC 
0C/BB56: A5 52     LDA $52
0C/BB58: E5 54     SBC $54
0C/BB5A: 85 48     STA $48
0C/BB5C: A5 53     LDA $53
0C/BB5E: E5 55     SBC $55
0C/BB60: 85 49     STA $49
0C/BB62: B0 06     BCS $BB6A
0C/BB64: A9 00     LDA #$00
0C/BB66: 85 48     STA $48
0C/BB68: 85 49     STA $49
0C/BB6A: 18        CLC 
0C/BB6B: A5 48     LDA $48
0C/BB6D: 69 01     ADC #$01
0C/BB6F: 85 48     STA $48
0C/BB71: A5 49     LDA $49
0C/BB73: 69 00     ADC #$00
0C/BB75: 85 49     STA $49
0C/BB77: A0 27     LDY #$27
0C/BB79: B1 9F     LDA ($9F),Y
0C/BB7B: 85 44     STA $44
0C/BB7D: A9 00     LDA #$00
0C/BB7F: 85 45     STA $45
0C/BB81: 85 46     STA $46
0C/BB83: 85 47     STA $47
0C/BB85: 20 88 BC  JSR $BC88          ; calculate damage
0C/BB88: A0 0A     LDY #$0A
0C/BB8A: 4C 79 B5  JMP $B579          ; subtract damage from target hp/mp

; magic effect $1D: self-destruct
0C/BB8D: A9 00     LDA #$00
0C/BB8F: 85 4A     STA $4A
0C/BB91: 85 4B     STA $4B
0C/BB93: A0 0A     LDY #$0A
0C/BB95: B1 9F     LDA ($9F),Y
0C/BB97: 85 00     STA $00
0C/BB99: C8        INY 
0C/BB9A: B1 9F     LDA ($9F),Y
0C/BB9C: 85 01     STA $01
0C/BB9E: A0 0E     LDY #$0E
0C/BBA0: B1 9F     LDA ($9F),Y
0C/BBA2: 85 02     STA $02
0C/BBA4: C8        INY 
0C/BBA5: B1 9F     LDA ($9F),Y
0C/BBA7: 85 03     STA $03
0C/BBA9: 20 FC 8F  JSR $8FFC          ; compare (16-bit)
0C/BBAC: B0 23     BCS $BBD1
0C/BBAE: A0 25     LDY #$25
0C/BBB0: B1 9F     LDA ($9F),Y
0C/BBB2: 85 48     STA $48
0C/BBB4: A0 27     LDY #$27
0C/BBB6: B1 9F     LDA ($9F),Y
0C/BBB8: 85 44     STA $44
0C/BBBA: A9 00     LDA #$00
0C/BBBC: 85 45     STA $45
0C/BBBE: 85 47     STA $47
0C/BBC0: A0 02     LDY #$02
0C/BBC2: 8C DE 7F  STY $7FDE
0C/BBC5: B1 A1     LDA ($A1),Y
0C/BBC7: 85 46     STA $46
0C/BBC9: 20 88 BC  JSR $BC88          ; calculate damage
0C/BBCC: A0 0A     LDY #$0A
0C/BBCE: 4C 79 B5  JMP $B579          ; subtract damage from target hp/mp
0C/BBD1: A9 00     LDA #$00
0C/BBD3: 8D E4 00  STA $00E4
0C/BBD6: 4C 73 BE  JMP $BE73          ; magic ineffective

; magic effect $1E: ether
0C/BBD9: 20 C6 BD  JSR $BDC6          ; restore mp
0C/BBDC: 4C 7E BE  JMP $BE7E          ; don't show damage message

; magic effect $1F: intelligence, spirit
0C/BBDF: A0 28     LDY #$28
0C/BBE1: B1 9F     LDA ($9F),Y
0C/BBE3: 48        PHA 
0C/BBE4: A0 29     LDY #$29
0C/BBE6: B1 9F     LDA ($9F),Y
0C/BBE8: 18        CLC 
0C/BBE9: 69 12     ADC #$12
0C/BBEB: A8        TAY 
0C/BBEC: 68        PLA 
0C/BBED: 91 A1     STA ($A1),Y
0C/BBEF: 98        TYA 
0C/BBF0: 18        CLC 
0C/BBF1: 69 4E     ADC #$4E           ; $4E: "Orange" ???
0C/BBF3: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/BBF6: A9 E6     LDA #$E6           ; $66: " up!"
0C/BBF8: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/BBFB: 4C 7E BE  JMP $BE7E          ; don't show damage message

; magic effect $20: imbibe
0C/BBFE: A0 01     LDY #$01
0C/BC00: B1 A1     LDA ($A1),Y        ; decrement target's evade %
0C/BC02: AA        TAX 
0C/BC03: CA        DEX 
0C/BC04: 8A        TXA 
0C/BC05: 91 A1     STA ($A1),Y
0C/BC07: 4C 40 BA  JMP $BA40

; magic effect $21: bow, boulders, meteor
0C/BC0A: 20 7B BD  JSR $BD7B          ; calculate magic damage
0C/BC0D: A0 0A     LDY #$0A
0C/BC0F: 4C 79 B5  JMP $B579          ; subtract damage from target hp/mp

; [ check magic wall ]

0C/BC12: A0 06     LDY #$06
0C/BC14: B1 A1     LDA ($A1),Y        ; wall level
0C/BC16: 38        SEC 
0C/BC17: A0 25     LDY #$25
0C/BC19: F1 9F     SBC ($9F),Y        ; subtract spell level
0C/BC1B: 90 08     BCC $BC25
0C/BC1D: A9 3A     LDA #$3A           ; $3A: "Magic blocked"
0C/BC1F: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/BC22: 68        PLA 
0C/BC23: 68        PLA 
0C/BC24: 60        RTS 
0C/BC25: A9 00     LDA #$00
0C/BC27: A0 06     LDY #$06
0C/BC29: 91 A1     STA ($A1),Y        ; set new wall level
0C/BC2B: 60        RTS 

; [ check for hit ]

; $44: hit %
; $46: number of hit attempts
; $48: number of successful hits (out)

; *** bug *** should use target status for evade checks

0C/BC2C: A9 00     LDA #$00           ; start with 0 hits
0C/BC2E: 85 48     STA $48
0C/BC30: 85 49     STA $49
0C/BC32: 20 71 AF  JSR $AF71          ; get attacker status 1
0C/BC35: 29 20     AND #$20
0C/BC37: D0 1A     BNE $BC53          ; return if toad
0C/BC39: C8        INY 
0C/BC3A: B1 9F     LDA ($9F),Y        ; status 2
0C/BC3C: 29 20     AND #$20
0C/BC3E: D0 13     BNE $BC53          ; return if mini
0C/BC40: A4 46     LDY $46
0C/BC42: A2 00     LDX #$00
0C/BC44: A9 64     LDA #$64
0C/BC46: 20 11 FD  JSR $FD11          ; random (X..A)
0C/BC49: 38        SEC 
0C/BC4A: E5 44     SBC $44
0C/BC4C: B0 02     BCS $BC50          ; check for hit
0C/BC4E: E6 48     INC $48
0C/BC50: 88        DEY 
0C/BC51: D0 EF     BNE $BC42
0C/BC53: 60        RTS 

; [  ]

; unused

0C/BC54: A9 28     LDA #$28
0C/BC56: 48        PHA 
0C/BC57: 48        PHA 
0C/BC58: A8        TAY 
0C/BC59: B1 9F     LDA ($9F),Y
0C/BC5B: A0 05     LDY #$05
0C/BC5D: 31 A1     AND ($A1),Y
0C/BC5F: F0 06     BEQ $BC67
0C/BC61: A9 00     LDA #$00
0C/BC63: 85 44     STA $44
0C/BC65: 85 45     STA $45
0C/BC67: 68        PLA 
0C/BC68: A8        TAY 
0C/BC69: B1 9F     LDA ($9F),Y
0C/BC6B: A0 17     LDY #$17
0C/BC6D: 31 A1     AND ($A1),Y
0C/BC6F: F0 06     BEQ $BC77
0C/BC71: A9 00     LDA #$00
0C/BC73: 85 44     STA $44
0C/BC75: 85 45     STA $45
0C/BC77: 68        PLA 
0C/BC78: A8        TAY 
0C/BC79: B1 9F     LDA ($9F),Y
0C/BC7B: A0 16     LDY #$16
0C/BC7D: 31 A1     AND ($A1),Y
0C/BC7F: F0 06     BEQ $BC87
0C/BC81: A9 00     LDA #$00
0C/BC83: 85 46     STA $46
0C/BC85: 85 47     STA $47
0C/BC87: 60        RTS 

; [ calculate damage ]

;  $44: attack
;  $46: defense
;  $48: number of hits
; +$4A: damage

0C/BC88: A9 00     LDA #$00
0C/BC8A: 85 49     STA $49
0C/BC8C: 85 4A     STA $4A
0C/BC8E: 85 4B     STA $4B
0C/BC90: 20 71 AF  JSR $AF71          ; get attacker status 1
0C/BC93: 29 08     AND #$08
0C/BC95: F0 04     BEQ $BC9B
0C/BC97: 46 45     LSR $45
0C/BC99: 66 44     ROR $44
0C/BC9B: B1 A1     LDA ($A1),Y
0C/BC9D: 29 08     AND #$08
0C/BC9F: F0 04     BEQ $BCA5
0C/BCA1: 46 47     LSR $47
0C/BCA3: 66 46     ROR $46
0C/BCA5: A4 48     LDY $48
; start of hit loop
0C/BCA7: A2 00     LDX #$00
0C/BCA9: A5 44     LDA $44
0C/BCAB: 20 11 FD  JSR $FD11          ; random (X..A)
0C/BCAE: 18        CLC 
0C/BCAF: 65 44     ADC $44            ; attack * (0..1)
0C/BCB1: 85 4C     STA $4C
0C/BCB3: A9 00     LDA #$00
0C/BCB5: 65 45     ADC $45
0C/BCB7: 85 4D     STA $4D
0C/BCB9: 38        SEC 
0C/BCBA: A5 4C     LDA $4C            ; subtract defense
0C/BCBC: E5 46     SBC $46
0C/BCBE: 85 4C     STA $4C
0C/BCC0: A5 4D     LDA $4D
0C/BCC2: E5 47     SBC $47
0C/BCC4: 85 4D     STA $4D
0C/BCC6: B0 06     BCS $BCCE
0C/BCC8: A9 00     LDA #$00           ; min zero
0C/BCCA: 85 4C     STA $4C
0C/BCCC: 85 4D     STA $4D
0C/BCCE: 18        CLC 
0C/BCCF: A5 4C     LDA $4C
0C/BCD1: 65 4A     ADC $4A            ; add to damage
0C/BCD3: 85 4A     STA $4A
0C/BCD5: A5 4D     LDA $4D
0C/BCD7: 65 4B     ADC $4B
0C/BCD9: 85 4B     STA $4B
0C/BCDB: A2 00     LDX #$00
0C/BCDD: A9 64     LDA #$64
0C/BCDF: 20 11 FD  JSR $FD11          ; random (X..A)
0C/BCE2: C9 05     CMP #$05
0C/BCE4: B0 11     BCS $BCF7          ; 5% chance for crit
0C/BCE6: A9 01     LDA #$01
0C/BCE8: 85 24     STA $24
0C/BCEA: 18        CLC 
0C/BCEB: A5 4A     LDA $4A            ; add attack to damage
0C/BCED: 65 44     ADC $44
0C/BCEF: 85 4A     STA $4A
0C/BCF1: A5 4B     LDA $4B
0C/BCF3: 65 45     ADC $45
0C/BCF5: 85 4B     STA $4B
0C/BCF7: 88        DEY                ; next hit
0C/BCF8: D0 AD     BNE $BCA7
0C/BCFA: 60        RTS 

; [ restore hp ]

0C/BCFB: 20 5A BD  JSR $BD5A          ; calculate restored hp/mp
0C/BCFE: A0 0A     LDY #$0A
0C/BD00: 84 50     STY $50
0C/BD02: A0 0E     LDY #$0E
0C/BD04: 84 51     STY $51
0C/BD06: 20 1B BD  JSR $BD1B          ; restore target's hp/mp
0C/BD09: A9 0B     LDA #$0B
0C/BD0B: 8D B0 7C  STA $7CB0
0C/BD0E: A9 5D     LDA #$5D           ; $5D: "HP"
0C/BD10: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/BD13: A9 EA     LDA #$EA           ; $6A: " up!"
0C/BD15: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/BD18: 4C 7E BE  JMP $BE7E          ; don't show damage message

; [ restore target's hp/mp ]

0C/BD1B: A4 50     LDY $50
0C/BD1D: 18        CLC 
0C/BD1E: B1 A1     LDA ($A1),Y
0C/BD20: 65 4A     ADC $4A
0C/BD22: 91 A1     STA ($A1),Y
0C/BD24: C8        INY 
0C/BD25: B1 A1     LDA ($A1),Y
0C/BD27: 65 4B     ADC $4B
0C/BD29: 91 A1     STA ($A1),Y
0C/BD2B: A4 50     LDY $50
0C/BD2D: B1 A1     LDA ($A1),Y
0C/BD2F: 85 00     STA $00
0C/BD31: C8        INY 
0C/BD32: B1 A1     LDA ($A1),Y
0C/BD34: 85 01     STA $01
0C/BD36: A4 51     LDY $51
0C/BD38: B1 A1     LDA ($A1),Y
0C/BD3A: 85 02     STA $02
0C/BD3C: C8        INY 
0C/BD3D: B1 A1     LDA ($A1),Y
0C/BD3F: 85 03     STA $03
0C/BD41: 20 FC 8F  JSR $8FFC          ; compare (16-bit)
0C/BD44: 90 0B     BCC $BD51
0C/BD46: A4 50     LDY $50
0C/BD48: A5 02     LDA $02
0C/BD4A: 91 A1     STA ($A1),Y
0C/BD4C: C8        INY 
0C/BD4D: A5 03     LDA $03
0C/BD4F: 91 A1     STA ($A1),Y
0C/BD51: 60        RTS 

; [ do magic damage (undead) ]

; used by healing magic and garlic when targeting undead

0C/BD52: 20 7B BD  JSR $BD7B          ; calculate magic damage
0C/BD55: A0 0A     LDY #$0A
0C/BD57: 4C 79 B5  JMP $B579          ; subtract damage from target hp/mp

; [ calculate restored hp/mp ]

0C/BD5A: 20 E9 BD  JSR $BDE9          ; check for hit (magic)
0C/BD5D: 18        CLC 
0C/BD5E: A5 46     LDA $46
0C/BD60: 65 48     ADC $48
0C/BD62: 85 48     STA $48
0C/BD64: A9 00     LDA #$00
0C/BD66: 65 49     ADC $49
0C/BD68: 85 49     STA $49
0C/BD6A: A0 27     LDY #$27
0C/BD6C: B1 9F     LDA ($9F),Y
0C/BD6E: 85 44     STA $44
0C/BD70: A9 00     LDA #$00
0C/BD72: 85 45     STA $45
0C/BD74: 85 46     STA $46
0C/BD76: 85 47     STA $47
0C/BD78: 4C 88 BC  JMP $BC88          ; calculate damage

; [ calculate magic damage ]

0C/BD7B: 20 23 BE  JSR $BE23          ; get number of magic hits
0C/BD7E: 20 D0 B5  JSR $B5D0
0C/BD81: B0 06     BCS $BD89
0C/BD83: A9 00     LDA #$00           ; min 0 hits
0C/BD85: 85 52     STA $52
0C/BD87: 85 53     STA $53
0C/BD89: A0 25     LDY #$25
0C/BD8B: B1 9F     LDA ($9F),Y        ; add spell level
0C/BD8D: 18        CLC 
0C/BD8E: 65 52     ADC $52
0C/BD90: 85 48     STA $48
0C/BD92: A9 00     LDA #$00
0C/BD94: 65 53     ADC $53
0C/BD96: 85 49     STA $49
0C/BD98: A0 27     LDY #$27
0C/BD9A: B1 9F     LDA ($9F),Y        ; mod. spell power
0C/BD9C: 85 44     STA $44
0C/BD9E: A9 00     LDA #$00
0C/BDA0: 85 45     STA $45
0C/BDA2: 85 46     STA $46
0C/BDA4: 85 47     STA $47
0C/BDA6: 20 88 BC  JSR $BC88          ; calculate damage
0C/BDA9: A0 28     LDY #$28
0C/BDAB: B1 9F     LDA ($9F),Y        ; spell parameter 1 (spell elements)
0C/BDAD: A0 16     LDY #$16
0C/BDAF: 31 A1     AND ($A1),Y        ; check against target's weak elements
0C/BDB1: F0 04     BEQ $BDB7
0C/BDB3: 06 4A     ASL $4A            ; double damage
0C/BDB5: 26 4B     ROL $4B
0C/BDB7: A0 28     LDY #$28
0C/BDB9: B1 9F     LDA ($9F),Y
0C/BDBB: A0 05     LDY #$05
0C/BDBD: 31 A1     AND ($A1),Y        ; check against target's strong elements
0C/BDBF: F0 04     BEQ $BDC5
0C/BDC1: 46 4B     LSR $4B            ; halve damage
0C/BDC3: 66 4A     ROR $4A
0C/BDC5: 60        RTS 

; [ restore mp ]

0C/BDC6: 20 5A BD  JSR $BD5A          ; calculate restored hp/mp
0C/BDC9: A0 0C     LDY #$0C
0C/BDCB: 84 50     STY $50
0C/BDCD: A0 10     LDY #$10
0C/BDCF: 84 51     STY $51
0C/BDD1: 20 1B BD  JSR $BD1B          ; restore target's hp/mp
0C/BDD4: A9 5E     LDA #$5E           ; $5E: "MP"
0C/BDD6: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/BDD9: A9 EA     LDA #$EA           ; $6A: " up!"
0C/BDDB: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/BDDE: 4C 7E BE  JMP $BE7E          ; don't show damage message

; unused magic effect (mp magic damage)
0C/BDE1: 20 7B BD  JSR $BD7B          ; calculate magic damage
0C/BDE4: A0 0C     LDY #$0C
0C/BDE6: 4C 79 B5  JMP $B579          ; subtract damage from target hp/mp

; [ check for hit (magic) ]

; $48: number of successful hits (out)

0C/BDE9: A0 25     LDY #$25
0C/BDEB: B1 9F     LDA ($9F),Y        ; spell level
0C/BDED: 85 46     STA $46
0C/BDEF: C8        INY 
0C/BDF0: B1 9F     LDA ($9F),Y        ; mod. spell %
0C/BDF2: 85 44     STA $44
0C/BDF4: A9 00     LDA #$00
0C/BDF6: 85 45     STA $45
0C/BDF8: 20 71 AF  JSR $AF71          ; get attacker status 1
0C/BDFB: 29 02     AND #$02
0C/BDFD: F0 04     BEQ $BE03          ; branch if not blind
0C/BDFF: 46 45     LSR $45            ; halve spell %
0C/BE01: 66 44     ROR $44
0C/BE03: 4C 2C BC  JMP $BC2C          ; check for hit

; [ check for evade (magic) ]

0C/BE06: A0 03     LDY #$03
0C/BE08: B1 A1     LDA ($A1),Y        ; m.evade mult.
0C/BE0A: 85 46     STA $46
0C/BE0C: C8        INY 
0C/BE0D: B1 A1     LDA ($A1),Y        ; m.evade %
0C/BE0F: 85 44     STA $44
0C/BE11: A9 00     LDA #$00
0C/BE13: 85 45     STA $45
0C/BE15: 20 76 AF  JSR $AF76          ; get target status 1
0C/BE18: 29 02     AND #$02
0C/BE1A: F0 04     BEQ $BE20          ; branch if not blind
0C/BE1C: 46 45     LSR $45            ; halve m.evade %
0C/BE1E: 66 44     ROR $44
0C/BE20: 4C 2C BC  JMP $BC2C          ; check for hit

; [ get number of magic hits ]

0C/BE23: 20 E9 BD  JSR $BDE9          ; check for hit (magic)
0C/BE26: A0 28     LDY #$28
0C/BE28: B1 9F     LDA ($9F),Y        ; spell parameter 1 (spell elements)
0C/BE2A: A0 05     LDY #$05
0C/BE2C: 31 A1     AND ($A1),Y
0C/BE2E: F0 06     BEQ $BE36          ; branch if target not strong vs. element
0C/BE30: A9 00     LDA #$00           ; zero hits
0C/BE32: 85 48     STA $48
0C/BE34: 85 49     STA $49
0C/BE36: A0 28     LDY #$28
0C/BE38: B1 9F     LDA ($9F),Y
0C/BE3A: A0 16     LDY #$16
0C/BE3C: 31 A1     AND ($A1),Y
0C/BE3E: F0 08     BEQ $BE48          ; branch if target not weal vs. element
0C/BE40: A5 46     LDA $46            ; all hits are effective
0C/BE42: 85 48     STA $48
0C/BE44: A9 00     LDA #$00
0C/BE46: 85 49     STA $49
0C/BE48: 20 8D B6  JSR $B68D          ; set number of hits
0C/BE4B: 20 06 BE  JSR $BE06          ; check for evade (magic)
0C/BE4E: A0 28     LDY #$28
0C/BE50: B1 9F     LDA ($9F),Y
0C/BE52: A0 05     LDY #$05
0C/BE54: 31 A1     AND ($A1),Y
0C/BE56: F0 08     BEQ $BE60          ; branch if target not strong vs. element
0C/BE58: A5 46     LDA $46            ; evade all hits
0C/BE5A: 85 48     STA $48
0C/BE5C: A9 00     LDA #$00
0C/BE5E: 85 49     STA $49
0C/BE60: A0 28     LDY #$28
0C/BE62: B1 9F     LDA ($9F),Y
0C/BE64: A0 16     LDY #$16
0C/BE66: 31 A1     AND ($A1),Y
0C/BE68: F0 06     BEQ $BE70          ; branch if target not weak vs. element
0C/BE6A: A9 00     LDA #$00           ; evade zero hits
0C/BE6C: 85 48     STA $48
0C/BE6E: 85 49     STA $49
0C/BE70: 4C 06 BB  JMP $BB06

; [ magic ineffective ]

0C/BE73: A5 28     LDA $28
0C/BE75: 29 BF     AND #$BF
0C/BE77: 85 28     STA $28
0C/BE79: A9 14     LDA #$14           ; $14: "Not effective."
0C/BE7B: 20 92 BF  JSR $BF92          ; add to battle message queue
; fallthrough

; [ don't show damage message ]

0C/BE7E: A9 00     LDA #$00
0C/BE80: 85 4A     STA $4A
0C/BE82: A9 80     LDA #$80
0C/BE84: 85 4B     STA $4B
0C/BE86: 60        RTS 

; [ do magic effect ]

0C/BE87: 6C 46 00  JMP ($0046)

; magic effect jump table
0C/BE8A: B571 B571 B595 B5A7 B5A7 B613 B64F B696
0C/BE9A: B6CD B6CD B7CA B6CD B6CD B801 B841 B841
0C/BEAA: B878 B8D2 B90B B9AA B9AA BA40 BA73 BA8E
0C/BEBA: BAB8 BB0F BB1D BB1D BB26 BB8D BBD9 BBDF
0C/BECA: BBFE BC0A

; [ load next battle message ]

0C/BECE: A9 00     LDA #$00
0C/BED0: 85 AA     STA $AA
0C/BED2: A9 10     LDA #$10
0C/BED4: 85 45     STA $45
0C/BED6: 85 44     STA $44
0C/BED8: A9 B2     LDA #$B2
0C/BEDA: 85 63     STA $63
0C/BEDC: A9 95     LDA #$95
0C/BEDE: 85 62     STA $62
0C/BEE0: BD BA 7F  LDA $7FBA,X        ; battle message queue
0C/BEE3: 30 59     BMI $BF3E          ; branch if continuation of previous message
0C/BEE5: C9 15     CMP #$15           ; $15: " fell!"
0C/BEE7: D0 24     BNE $BF0D
0C/BEE9: A5 E3     LDA $E3
0C/BEEB: 29 7F     AND #$7F
0C/BEED: 85 64     STA $64
0C/BEEF: A9 AC     LDA #$AC           ; 05/AC44 (monster names)
0C/BEF1: 85 63     STA $63
0C/BEF3: A9 44     LDA #$44
0C/BEF5: 85 62     STA $62
0C/BEF7: A2 05     LDX #$05
0C/BEF9: 20 8C FD  JSR $FD8C          ; load text
0C/BEFC: AE BF 7C  LDX $7CBF
0C/BEFF: 86 AA     STX $AA
0C/BF01: A9 B2     LDA #$B2           ; 05/B295 (battle text)
0C/BF03: 85 63     STA $63
0C/BF05: A9 95     LDA #$95
0C/BF07: 85 62     STA $62
0C/BF09: A9 15     LDA #$15
0C/BF0B: D0 2F     BNE $BF3C
0C/BF0D: C9 16     CMP #$16           ; $16: " collapsed…"
0C/BF0F: D0 03     BNE $BF14
0C/BF11: 48        PHA 
0C/BF12: F0 09     BEQ $BF1D
0C/BF14: C9 17     CMP #$17           ; $17: " lost."
0C/BF16: D0 24     BNE $BF3C
0C/BF18: 48        PHA 
0C/BF19: A9 00     LDA #$00
0C/BF1B: 85 E3     STA $E3
0C/BF1D: A5 9E     LDA $9E
0C/BF1F: 48        PHA 
0C/BF20: A5 E3     LDA $E3
0C/BF22: 85 9E     STA $9E
0C/BF24: 20 E1 96  JSR $96E1          ; update character/monster pointers
0C/BF27: 68        PLA 
0C/BF28: 85 9E     STA $9E
0C/BF2A: A0 02     LDY #$02
0C/BF2C: A2 00     LDX #$00
0C/BF2E: B1 7A     LDA ($7A),Y        ; copy character name
0C/BF30: 9D 47 7D  STA $7D47,X
0C/BF33: C8        INY 
0C/BF34: E8        INX 
0C/BF35: E0 06     CPX #$06
0C/BF37: D0 F5     BNE $BF2E
0C/BF39: 86 AA     STX $AA
0C/BF3B: 68        PLA 
0C/BF3C: D0 17     BNE $BF55
; continuation of previous message
0C/BF3E: 29 7F     AND #$7F
0C/BF40: 48        PHA 
0C/BF41: C6 AD     DEC $AD
0C/BF43: A6 AD     LDX $AD
0C/BF45: BD BA 7F  LDA $7FBA,X        ; battle message queue
0C/BF48: 85 64     STA $64
0C/BF4A: A2 05     LDX #$05           ; bank 05
0C/BF4C: 20 8C FD  JSR $FD8C          ; load text
0C/BF4F: AE BF 7C  LDX $7CBF
0C/BF52: 86 AA     STX $AA
0C/BF54: 68        PLA 
0C/BF55: 85 64     STA $64
0C/BF57: A2 05     LDX #$05           ; bank 05
0C/BF59: 4C 8C FD  JMP $FD8C          ; load text

; [ show status inflicted message ]

0C/BF5C: 48        PHA 
0C/BF5D: 38        SEC 
0C/BF5E: A5 56     LDA $56
0C/BF60: E9 08     SBC #$08
0C/BF62: 85 5F     STA $5F
0C/BF64: 0A        ASL 
0C/BF65: 85 5E     STA $5E
0C/BF67: 0A        ASL 
0C/BF68: 18        CLC 
0C/BF69: 65 5E     ADC $5E
0C/BF6B: 65 5F     ADC $5F
0C/BF6D: 69 19     ADC #$19           ; $19: "Collapsed" (first status message)
0C/BF6F: 85 5E     STA $5E
0C/BF71: C6 5E     DEC $5E
0C/BF73: A0 08     LDY #$08
0C/BF75: 68        PLA 
0C/BF76: F0 18     BEQ $BF90
0C/BF78: 0A        ASL 
0C/BF79: E6 5E     INC $5E
0C/BF7B: 90 0F     BCC $BF8C
0C/BF7D: 48        PHA 
0C/BF7E: A5 5E     LDA $5E
0C/BF80: C9 33     CMP #$33
0C/BF82: D0 04     BNE $BF88
0C/BF84: 68        PLA 
0C/BF85: 4C 8C BF  JMP $BF8C
0C/BF88: 20 92 BF  JSR $BF92          ; add to battle message queue
0C/BF8B: 68        PLA 
0C/BF8C: 88        DEY 
0C/BF8D: D0 E9     BNE $BF78
0C/BF8F: 60        RTS 
0C/BF90: A9 14     LDA #$14           ; $14: "Not effective."
; fallthrough

; [ add to battle message queue ]

0C/BF92: A6 AD     LDX $AD
0C/BF94: 9D BA 7F  STA $7FBA,X
0C/BF97: E6 AD     INC $AD
0C/BF99: 60        RTS 

; [ add dead target message to queue ]

0C/BF9A: AD BA 7F  LDA $7FBA
0C/BF9D: C9 14     CMP #$14
0C/BF9F: F0 1C     BEQ $BFBD          ; return if "Not effective."
0C/BFA1: A0 0A     LDY #$0A
0C/BFA3: B1 A1     LDA ($A1),Y
0C/BFA5: C8        INY 
0C/BFA6: 11 A1     ORA ($A1),Y
0C/BFA8: D0 13     BNE $BFBD          ; return if not zero hp
0C/BFAA: A0 12     LDY #$12
0C/BFAC: B1 A1     LDA ($A1),Y
0C/BFAE: D0 04     BNE $BFB4          ; branch if target is a character
0C/BFB0: A9 15     LDA #$15           ; $15: " fell!"
0C/BFB2: D0 02     BNE $BFB6
0C/BFB4: A9 16     LDA #$16           ; $16: " collapsed…"
0C/BFB6: A6 AD     LDX $AD
0C/BFB8: 9D BA 7F  STA $7FBA,X        ; add to battle message queue
0C/BFBB: E6 AD     INC $AD
0C/BFBD: 60        RTS 

; unused ???
0C/BFBE: 90 58 90 F0 90 00 FF

; list cursor positions
0C/BFC5: C0 A8 C0 B8 C0 C8 C0 D8  ; battle command select
0C/BFCD: 48 B8 48 D8 A0 B8 A0 C8  ; item select
0C/BFD5: 08 A8 08 B8 08 C8 08 D8 30 A8 30 B8 30 C8 30 D8  ; magic select
0C/BFE5: 58 A8 58 B8 58 C8 58 D8 80 A8 80 B8 80 C8 80 D8

; target select jump table for each battle command
0C/BFF5: 945A 9486 9D44 9F78

; stale data
0C/BFFD: 9F 9F 9F

; --------------------------------------------------------------------------

; [ update music ]

0D/9800: A9 00     LDA #$00           ; clear apu register update flags
0D/9802: 85 C0     STA $C0
0D/9804: 85 C1     STA $C1
0D/9806: 85 C2     STA $C2
0D/9808: A5 E5     LDA $E5
0D/980A: F0 0E     BEQ $981A          ; branch if no sound effect
0D/980C: C6 E5     DEC $E5
0D/980E: D0 0A     BNE $981A          ; branch if sound effect counter didn't expire
0D/9810: A9 30     LDA #$30           ; mute square 2 channel
0D/9812: 8D 04 40  STA $4004
0D/9815: A9 00     LDA #$00
0D/9817: 8D 1F 6F  STA $6F1F
0D/981A: A5 E0     LDA $E0            ; pending song
0D/981C: 0A        ASL 
0D/981D: 90 13     BCC $9832
0D/981F: 20 A9 98  JSR $98A9
0D/9822: A9 00     LDA #$00
0D/9824: 85 E0     STA $E0
0D/9826: 8D 1B 6F  STA $6F1B
0D/9829: 8D 1F 6F  STA $6F1F
0D/982C: 8D 23 6F  STA $6F23
0D/982F: 4C 63 98  JMP $9863
0D/9832: 0A        ASL 
0D/9833: 90 2E     BCC $9863
0D/9835: A5 E0     LDA $E0
0D/9837: 29 3F     AND #$3F
0D/9839: 85 E0     STA $E0
0D/983B: CD 25 6F  CMP $6F25
0D/983E: F0 07     BEQ $9847
0D/9840: 20 8E 98  JSR $988E
0D/9843: 20 67 98  JSR $9867
0D/9846: 60        RTS 
0D/9847: C9 09     CMP #$09
0D/9849: F0 F8     BEQ $9843
0D/984B: A9 30     LDA #$30
0D/984D: 8D 00 40  STA $4000
0D/9850: 8D 04 40  STA $4004
0D/9853: A9 80     LDA #$80
0D/9855: 8D 08 40  STA $4008
0D/9858: A9 00     LDA #$00
0D/985A: 8D 1B 6F  STA $6F1B
0D/985D: 8D 1F 6F  STA $6F1F
0D/9860: 8D 23 6F  STA $6F23
0D/9863: 20 0E 99  JSR $990E          ; update music channels
0D/9866: 60        RTS 

; [ init song ]

0D/9867: A5 E0     LDA $E0
0D/9869: 8D 25 6F  STA $6F25
0D/986C: 0A        ASL 
0D/986D: AA        TAX 
0D/986E: BD 0D 9E  LDA $9E0D,X        ; pointer to song data
0D/9871: 85 C8     STA $C8
0D/9873: BD 0E 9E  LDA $9E0E,X
0D/9876: 85 C9     STA $C9
0D/9878: A0 00     LDY #$00
0D/987A: A2 00     LDX #$00
0D/987C: B1 C8     LDA ($C8),Y        ; copy 3 script pointers
0D/987E: 95 B0     STA $B0,X
0D/9880: C8        INY 
0D/9881: E8        INX 
0D/9882: E0 06     CPX #$06
0D/9884: 90 F6     BCC $987C
0D/9886: 20 C4 98  JSR $98C4
0D/9889: A9 00     LDA #$00           ; unmute all channels
0D/988B: 85 E6     STA $E6
0D/988D: 60        RTS 

; [  ]

0D/988E: A2 00     LDX #$00
0D/9890: B5 B0     LDA $B0,X
0D/9892: 9D 26 6F  STA $6F26,X
0D/9895: E8        INX 
0D/9896: E0 12     CPX #$12
0D/9898: 90 F6     BCC $9890
0D/989A: A0 00     LDY #$00
0D/989C: B9 00 6F  LDA $6F00,Y
0D/989F: 9D 26 6F  STA $6F26,X
0D/98A2: E8        INX 
0D/98A3: C8        INY 
0D/98A4: C0 26     CPY #$26
0D/98A6: 90 F4     BCC $989C
0D/98A8: 60        RTS 

; [  ]

0D/98A9: A2 00     LDX #$00
0D/98AB: BD 26 6F  LDA $6F26,X
0D/98AE: 95 B0     STA $B0,X
0D/98B0: E8        INX 
0D/98B1: E0 12     CPX #$12
0D/98B3: 90 F6     BCC $98AB
0D/98B5: A0 00     LDY #$00
0D/98B7: BD 26 6F  LDA $6F26,X
0D/98BA: 99 00 6F  STA $6F00,Y
0D/98BD: E8        INX 
0D/98BE: C8        INY 
0D/98BF: C0 26     CPY #$26
0D/98C1: 90 F4     BCC $98B7
0D/98C3: 60        RTS 

; [  ]

0D/98C4: A2 00     LDX #$00
0D/98C6: A9 FF     LDA #$FF
0D/98C8: 95 B6     STA $B6,X
0D/98CA: E8        INX 
0D/98CB: E0 04     CPX #$04
0D/98CD: 90 F9     BCC $98C8
0D/98CF: A2 00     LDX #$00
0D/98D1: 95 BA     STA $BA,X
0D/98D3: E8        INX 
0D/98D4: E0 06     CPX #$06
0D/98D6: 90 F9     BCC $98D1
0D/98D8: A2 00     LDX #$00
0D/98DA: A9 00     LDA #$00
0D/98DC: 9D 06 6F  STA $6F06,X
0D/98DF: E8        INX 
0D/98E0: E0 04     CPX #$04
0D/98E2: 90 F8     BCC $98DC
0D/98E4: A9 0F     LDA #$0F
0D/98E6: 8D 04 6F  STA $6F04
0D/98E9: 8D 05 6F  STA $6F05
0D/98EC: A9 4B     LDA #$4B
0D/98EE: 8D 00 6F  STA $6F00
0D/98F1: A2 00     LDX #$00
0D/98F3: 8E 15 40  STX $4015
0D/98F6: BD 02 99  LDA $9902,X
0D/98F9: 9D 19 6F  STA $6F19,X
0D/98FC: E8        INX 
0D/98FD: E0 0C     CPX #$0C
0D/98FF: 90 F5     BCC $98F6
0D/9901: 60        RTS 

0D/9902: 30 08 00 00
0D/9906: 30 08 00 00
0D/990A: 80 00 00 00

; [ update music channels ]

0D/990E: AD 00 6F  LDA $6F00          ; increment tempo counter
0D/9911: 18        CLC 
0D/9912: 6D 06 6F  ADC $6F06
0D/9915: 8D 06 6F  STA $6F06
0D/9918: AD 06 6F  LDA $6F06
0D/991B: C9 4B     CMP #$4B           ; tick every time counter reaches 75
0D/991D: 90 0B     BCC $992A          ; branch if no tick
0D/991F: E9 4B     SBC #$4B
0D/9921: 8D 06 6F  STA $6F06
0D/9924: 20 31 99  JSR $9931          ; decrement tick counters
0D/9927: 4C 18 99  JMP $9918
0D/992A: 20 22 9B  JSR $9B22          ; update channel envelopes
0D/992D: 20 1F 9C  JSR $9C1F          ; update apu registers
0D/9930: 60        RTS 

; [ decrement tick counters ]

0D/9931: A9 00     LDA #$00
0D/9933: 85 C5     STA $C5
0D/9935: A5 C5     LDA $C5            ; channel id
0D/9937: A8        TAY 
0D/9938: 0A        ASL 
0D/9939: 85 C6     STA $C6            ; channel id * 2
0D/993B: AA        TAX 
0D/993C: 0A        ASL 
0D/993D: 85 C7     STA $C7            ; channel id * 4
0D/993F: B5 B0     LDA $B0,X
0D/9941: 85 C3     STA $C3            ; script pointer
0D/9943: B5 B1     LDA $B1,X
0D/9945: 85 C4     STA $C4
0D/9947: C9 FF     CMP #$FF
0D/9949: F0 1D     BEQ $9968          ; branch if channel is inactive
0D/994B: B9 07 6F  LDA $6F07,Y
0D/994E: D0 13     BNE $9963          ; branch if tick counter isn't expired
0D/9950: A0 00     LDY #$00
0D/9952: 20 71 99  JSR $9971          ; execute channel script
0D/9955: A6 C6     LDX $C6
0D/9957: 98        TYA 
0D/9958: 18        CLC 
0D/9959: 65 C3     ADC $C3            ; increment script pointer
0D/995B: 95 B0     STA $B0,X
0D/995D: A9 00     LDA #$00
0D/995F: 65 C4     ADC $C4
0D/9961: 95 B1     STA $B1,X
0D/9963: A6 C5     LDX $C5
0D/9965: DE 07 6F  DEC $6F07,X        ; decrement tick counter
0D/9968: E6 C5     INC $C5
0D/996A: A5 C5     LDA $C5
0D/996C: C9 03     CMP #$03           ; 3 channels
0D/996E: 90 C5     BCC $9935
0D/9970: 60        RTS 

; [ execute channel script ]

0D/9971: B1 C3     LDA ($C3),Y        ; song script command
0D/9973: C8        INY 
0D/9974: C9 E0     CMP #$E0
0D/9976: B0 04     BCS $997C          ; branch if not a note
0D/9978: 20 C8 99  JSR $99C8          ; play note
0D/997B: 60        RTS 
0D/997C: D0 06     BNE $9984
0D/997E: 20 4C 9A  JSR $9A4C          ; set tempo
0D/9981: 4C 71 99  JMP $9971
0D/9984: C9 F0     CMP #$F0
0D/9986: B0 06     BCS $998E
0D/9988: 20 53 9A  JSR $9A53          ; set volume
0D/998B: 4C 71 99  JMP $9971
0D/998E: C9 F6     CMP #$F6
0D/9990: B0 06     BCS $9998
0D/9992: 20 5B 9A  JSR $9A5B          ; set octave
0D/9995: 4C 71 99  JMP $9971
0D/9998: D0 06     BNE $99A0
0D/999A: 20 63 9A  JSR $9A63
0D/999D: 4C 71 99  JMP $9971
0D/99A0: C9 FC     CMP #$FC
0D/99A2: B0 06     BCS $99AA
0D/99A4: 20 82 9A  JSR $9A82
0D/99A7: 4C 71 99  JMP $9971
0D/99AA: D0 06     BNE $99B2
0D/99AC: 20 95 9A  JSR $9A95
0D/99AF: 4C 71 99  JMP $9971
0D/99B2: C9 FE     CMP #$FE
0D/99B4: B0 06     BCS $99BC
0D/99B6: 20 B1 9A  JSR $9AB1
0D/99B9: 4C 71 99  JMP $9971
0D/99BC: D0 06     BNE $99C4
0D/99BE: 20 CE 9A  JSR $9ACE
0D/99C1: 4C 71 99  JMP $9971
0D/99C4: 20 DF 9A  JSR $9ADF
0D/99C7: 60        RTS 

; [ sound command $00-$DF: play note ]

0D/99C8: 85 C8     STA $C8
0D/99CA: 29 0F     AND #$0F
0D/99CC: AA        TAX 
0D/99CD: BD FD 9C  LDA $9CFD,X
0D/99D0: A6 C5     LDX $C5
0D/99D2: 9D 07 6F  STA $6F07,X
0D/99D5: A5 C8     LDA $C8
0D/99D7: C9 D0     CMP #$D0
0D/99D9: 90 01     BCC $99DC
0D/99DB: 60        RTS 
0D/99DC: C9 C0     CMP #$C0
0D/99DE: 90 1E     BCC $99FE
0D/99E0: A9 01     LDA #$01
0D/99E2: 95 C0     STA $C0,X
0D/99E4: A6 C7     LDX $C7
0D/99E6: A9 00     LDA #$00
0D/99E8: 9D 1B 6F  STA $6F1B,X
0D/99EB: E0 08     CPX #$08
0D/99ED: F0 09     BEQ $99F8
0D/99EF: BD 19 6F  LDA $6F19,X
0D/99F2: 29 F0     AND #$F0
0D/99F4: 9D 19 6F  STA $6F19,X
0D/99F7: 60        RTS 
0D/99F8: A9 80     LDA #$80
0D/99FA: 8D 21 6F  STA $6F21
0D/99FD: 60        RTS 
0D/99FE: E0 02     CPX #$02
0D/9A00: D0 05     BNE $9A07
0D/9A02: A9 FF     LDA #$FF
0D/9A04: 8D 21 6F  STA $6F21
0D/9A07: A9 00     LDA #$00
0D/9A09: 9D 13 6F  STA $6F13,X
0D/9A0C: 9D 0A 6F  STA $6F0A,X
0D/9A0F: 9D 16 6F  STA $6F16,X
0D/9A12: 9D 0D 6F  STA $6F0D,X
0D/9A15: A9 0F     LDA #$0F
0D/9A17: 95 C0     STA $C0,X
0D/9A19: BD 01 6F  LDA $6F01,X        ; octave
0D/9A1C: 0A        ASL 
0D/9A1D: 0A        ASL 
0D/9A1E: 0A        ASL 
0D/9A1F: 85 C9     STA $C9
0D/9A21: BD 01 6F  LDA $6F01,X
0D/9A24: 0A        ASL 
0D/9A25: 0A        ASL 
0D/9A26: 65 C9     ADC $C9
0D/9A28: 85 C9     STA $C9
0D/9A2A: A5 C8     LDA $C8
0D/9A2C: 4A        LSR 
0D/9A2D: 4A        LSR 
0D/9A2E: 4A        LSR 
0D/9A2F: 4A        LSR 
0D/9A30: 18        CLC 
0D/9A31: 65 C9     ADC $C9
0D/9A33: 0A        ASL 
0D/9A34: AA        TAX 
0D/9A35: BD 6D 9C  LDA $9C6D,X
0D/9A38: 85 C8     STA $C8
0D/9A3A: BD 6E 9C  LDA $9C6E,X
0D/9A3D: 85 C9     STA $C9
0D/9A3F: A6 C7     LDX $C7
0D/9A41: A5 C8     LDA $C8
0D/9A43: 9D 1B 6F  STA $6F1B,X
0D/9A46: A5 C9     LDA $C9
0D/9A48: 9D 1C 6F  STA $6F1C,X
0D/9A4B: 60        RTS 

; [ sound command $E0: set tempo ]

0D/9A4C: B1 C3     LDA ($C3),Y
0D/9A4E: C8        INY 
0D/9A4F: 8D 00 6F  STA $6F00
0D/9A52: 60        RTS 

; [ sound command $E1-$EF: set volume ]

0D/9A53: 29 0F     AND #$0F
0D/9A55: A6 C5     LDX $C5
0D/9A57: 9D 04 6F  STA $6F04,X
0D/9A5A: 60        RTS 

; [ sound command $F0-$F5: set octave ]

0D/9A5B: 29 0F     AND #$0F
0D/9A5D: A6 C5     LDX $C5
0D/9A5F: 9D 01 6F  STA $6F01,X
0D/9A62: 60        RTS 

; [ sound command $F6: set envelope ]

0D/9A63: B1 C3     LDA ($C3),Y
0D/9A65: C8        INY 
0D/9A66: A6 C7     LDX $C7
0D/9A68: 9D 19 6F  STA $6F19,X
0D/9A6B: A6 C6     LDX $C6
0D/9A6D: B1 C3     LDA ($C3),Y
0D/9A6F: C8        INY 
0D/9A70: 95 B6     STA $B6,X
0D/9A72: B1 C3     LDA ($C3),Y        ; set volume envelope pointer
0D/9A74: C8        INY 
0D/9A75: 95 B7     STA $B7,X
0D/9A77: B1 C3     LDA ($C3),Y
0D/9A79: C8        INY 
0D/9A7A: 95 BA     STA $BA,X
0D/9A7C: B1 C3     LDA ($C3),Y        ; set pitch envelope pointer
0D/9A7E: C8        INY 
0D/9A7F: 95 BB     STA $BB,X
0D/9A81: 60        RTS 

; [ sound command $F7-$FB: loop start ]

0D/9A82: A6 C5     LDX $C5
0D/9A84: C9 F8     CMP #$F8
0D/9A86: 90 06     BCC $9A8E
0D/9A88: E9 F6     SBC #$F6
0D/9A8A: 9D 10 6F  STA $6F10,X
0D/9A8D: 60        RTS 
0D/9A8E: B1 C3     LDA ($C3),Y
0D/9A90: C8        INY 
0D/9A91: 9D 10 6F  STA $6F10,X
0D/9A94: 60        RTS 

; [ sound command $FC: loop end ]

0D/9A95: B1 C3     LDA ($C3),Y        ; get jump address
0D/9A97: C8        INY 
0D/9A98: 85 C8     STA $C8
0D/9A9A: B1 C3     LDA ($C3),Y
0D/9A9C: C8        INY 
0D/9A9D: 85 C9     STA $C9
0D/9A9F: A6 C5     LDX $C5
0D/9AA1: DE 10 6F  DEC $6F10,X        ; decrement loop counter
0D/9AA4: F0 0A     BEQ $9AB0
0D/9AA6: A5 C8     LDA $C8            ; set script pointer
0D/9AA8: 85 C3     STA $C3
0D/9AAA: A5 C9     LDA $C9
0D/9AAC: 85 C4     STA $C4
0D/9AAE: A0 00     LDY #$00
0D/9AB0: 60        RTS 

; [ sound command $FD: jump on 2nd repeat ]

0D/9AB1: B1 C3     LDA ($C3),Y        ; get jump address
0D/9AB3: C8        INY 
0D/9AB4: 85 C8     STA $C8
0D/9AB6: B1 C3     LDA ($C3),Y
0D/9AB8: C8        INY 
0D/9AB9: 85 C9     STA $C9
0D/9ABB: A6 C5     LDX $C5
0D/9ABD: BD 10 6F  LDA $6F10,X
0D/9AC0: 4A        LSR 
0D/9AC1: 90 0A     BCC $9ACD
0D/9AC3: A5 C8     LDA $C8
0D/9AC5: 85 C3     STA $C3
0D/9AC7: A5 C9     LDA $C9
0D/9AC9: 85 C4     STA $C4
0D/9ACB: A0 00     LDY #$00
0D/9ACD: 60        RTS 

; [ sound command $FE: jump ]

0D/9ACE: B1 C3     LDA ($C3),Y
0D/9AD0: C8        INY 
0D/9AD1: 85 C8     STA $C8
0D/9AD3: B1 C3     LDA ($C3),Y
0D/9AD5: C8        INY 
0D/9AD6: 85 C4     STA $C4
0D/9AD8: A5 C8     LDA $C8
0D/9ADA: 85 C3     STA $C3
0D/9ADC: A0 00     LDY #$00
0D/9ADE: 60        RTS 

; [ sound command $FF: end of script ]

0D/9ADF: A6 C6     LDX $C6
0D/9AE1: A9 FF     LDA #$FF
0D/9AE3: 95 B6     STA $B6,X          ; clear envelope pointer
0D/9AE5: 95 B7     STA $B7,X
0D/9AE7: 95 BA     STA $BA,X
0D/9AE9: 95 BB     STA $BB,X
0D/9AEB: 95 B0     STA $B0,X
0D/9AED: 95 B1     STA $B1,X
0D/9AEF: 85 C3     STA $C3
0D/9AF1: 85 C4     STA $C4
0D/9AF3: A0 00     LDY #$00
0D/9AF5: A6 C5     LDX $C5
0D/9AF7: A9 01     LDA #$01
0D/9AF9: 95 C0     STA $C0,X
0D/9AFB: A6 C7     LDX $C7
0D/9AFD: A9 00     LDA #$00
0D/9AFF: 9D 1B 6F  STA $6F1B,X
0D/9B02: E0 08     CPX #$08
0D/9B04: F0 05     BEQ $9B0B
0D/9B06: A9 F0     LDA #$F0
0D/9B08: 4C 0D 9B  JMP $9B0D
0D/9B0B: A9 00     LDA #$00
0D/9B0D: 9D 19 6F  STA $6F19,X
0D/9B10: A9 FF     LDA #$FF
0D/9B12: A2 00     LDX #$00
0D/9B14: D5 B0     CMP $B0,X
0D/9B16: D0 09     BNE $9B21
0D/9B18: E8        INX 
0D/9B19: E0 06     CPX #$06
0D/9B1B: 90 F7     BCC $9B14
0D/9B1D: A9 80     LDA #$80
0D/9B1F: 85 E0     STA $E0
0D/9B21: 60        RTS 

; [ update channel envelopes ]

0D/9B22: A9 00     LDA #$00
0D/9B24: 85 C5     STA $C5
0D/9B26: A5 C5     LDA $C5
0D/9B28: 0A        ASL 
0D/9B29: 85 C6     STA $C6
0D/9B2B: AA        TAX 
0D/9B2C: 0A        ASL 
0D/9B2D: 85 C7     STA $C7
0D/9B2F: A8        TAY 
0D/9B30: B9 1B 6F  LDA $6F1B,Y        ; low byte of frequency
0D/9B33: F0 18     BEQ $9B4D
0D/9B35: B5 B6     LDA $B6,X          ; get volume envelope pointer
0D/9B37: 85 C3     STA $C3
0D/9B39: B5 B7     LDA $B7,X
0D/9B3B: 85 C4     STA $C4
0D/9B3D: 20 56 9B  JSR $9B56
0D/9B40: A6 C6     LDX $C6
0D/9B42: B5 BA     LDA $BA,X          ; get pitch envelope pointer
0D/9B44: 85 C3     STA $C3
0D/9B46: B5 BB     LDA $BB,X
0D/9B48: 85 C4     STA $C4
0D/9B4A: 20 B6 9B  JSR $9BB6
0D/9B4D: E6 C5     INC $C5
0D/9B4F: A5 C5     LDA $C5
0D/9B51: C9 03     CMP #$03
0D/9B53: 90 D1     BCC $9B26
0D/9B55: 60        RTS 

; [ update volume envelope ]

0D/9B56: A5 C4     LDA $C4
0D/9B58: C9 FF     CMP #$FF
0D/9B5A: D0 01     BNE $9B5D
0D/9B5C: 60        RTS 
0D/9B5D: A6 C5     LDX $C5
0D/9B5F: BD 0A 6F  LDA $6F0A,X
0D/9B62: D0 4E     BNE $9BB2
0D/9B64: BC 13 6F  LDY $6F13,X
0D/9B67: B1 C3     LDA ($C3),Y
0D/9B69: 29 F0     AND #$F0
0D/9B6B: D0 14     BNE $9B81
0D/9B6D: B1 C3     LDA ($C3),Y
0D/9B6F: 29 0F     AND #$0F
0D/9B71: F0 3F     BEQ $9BB2
0D/9B73: 85 C8     STA $C8
0D/9B75: BD 13 6F  LDA $6F13,X
0D/9B78: 38        SEC 
0D/9B79: E5 C8     SBC $C8
0D/9B7B: 9D 13 6F  STA $6F13,X
0D/9B7E: 4C 64 9B  JMP $9B64
0D/9B81: 4A        LSR 
0D/9B82: 4A        LSR 
0D/9B83: 4A        LSR 
0D/9B84: 4A        LSR 
0D/9B85: 9D 0A 6F  STA $6F0A,X
0D/9B88: FE 13 6F  INC $6F13,X
0D/9B8B: BD 04 6F  LDA $6F04,X        ; volume
0D/9B8E: 0A        ASL 
0D/9B8F: 0A        ASL 
0D/9B90: 0A        ASL 
0D/9B91: 0A        ASL 
0D/9B92: 85 C8     STA $C8
0D/9B94: B1 C3     LDA ($C3),Y
0D/9B96: 29 0F     AND #$0F
0D/9B98: 05 C8     ORA $C8
0D/9B9A: A8        TAY 
0D/9B9B: B9 0D 9D  LDA $9D0D,Y        ; volume table
0D/9B9E: 85 C8     STA $C8
0D/9BA0: A4 C7     LDY $C7
0D/9BA2: B9 19 6F  LDA $6F19,Y
0D/9BA5: 29 F0     AND #$F0
0D/9BA7: 05 C8     ORA $C8
0D/9BA9: 99 19 6F  STA $6F19,Y
0D/9BAC: A9 01     LDA #$01
0D/9BAE: 15 C0     ORA $C0,X
0D/9BB0: 95 C0     STA $C0,X
0D/9BB2: DE 0A 6F  DEC $6F0A,X
0D/9BB5: 60        RTS 

; [ update pitch envelope ]

0D/9BB6: A5 C4     LDA $C4
0D/9BB8: C9 FF     CMP #$FF
0D/9BBA: D0 01     BNE $9BBD
0D/9BBC: 60        RTS 
0D/9BBD: A6 C5     LDX $C5
0D/9BBF: BD 0D 6F  LDA $6F0D,X
0D/9BC2: D0 57     BNE $9C1B
0D/9BC4: BC 16 6F  LDY $6F16,X
0D/9BC7: B1 C3     LDA ($C3),Y
0D/9BC9: 29 F0     AND #$F0
0D/9BCB: D0 14     BNE $9BE1
0D/9BCD: B1 C3     LDA ($C3),Y
0D/9BCF: 29 0F     AND #$0F
0D/9BD1: F0 48     BEQ $9C1B
0D/9BD3: 85 C8     STA $C8
0D/9BD5: BD 16 6F  LDA $6F16,X
0D/9BD8: 38        SEC 
0D/9BD9: E5 C8     SBC $C8
0D/9BDB: 9D 16 6F  STA $6F16,X
0D/9BDE: 4C C4 9B  JMP $9BC4
0D/9BE1: 4A        LSR 
0D/9BE2: 4A        LSR 
0D/9BE3: 4A        LSR 
0D/9BE4: 4A        LSR 
0D/9BE5: 9D 0D 6F  STA $6F0D,X
0D/9BE8: FE 16 6F  INC $6F16,X
0D/9BEB: B1 C3     LDA ($C3),Y
0D/9BED: 29 0F     AND #$0F
0D/9BEF: 85 C8     STA $C8
0D/9BF1: A4 C7     LDY $C7
0D/9BF3: 29 08     AND #$08
0D/9BF5: D0 0B     BNE $9C02
0D/9BF7: B9 1B 6F  LDA $6F1B,Y
0D/9BFA: 18        CLC 
0D/9BFB: 65 C8     ADC $C8
0D/9BFD: B0 1C     BCS $9C1B
0D/9BFF: 4C 12 9C  JMP $9C12
0D/9C02: A5 C8     LDA $C8
0D/9C04: 29 07     AND #$07
0D/9C06: 85 C8     STA $C8
0D/9C08: B9 1B 6F  LDA $6F1B,Y
0D/9C0B: 38        SEC 
0D/9C0C: E5 C8     SBC $C8
0D/9C0E: F0 0B     BEQ $9C1B
0D/9C10: 90 09     BCC $9C1B
0D/9C12: 99 1B 6F  STA $6F1B,Y
0D/9C15: A9 04     LDA #$04
0D/9C17: 15 C0     ORA $C0,X
0D/9C19: 95 C0     STA $C0,X
0D/9C1B: DE 0D 6F  DEC $6F0D,X
0D/9C1E: 60        RTS 

; [ update apu registers ]

0D/9C1F: AD 15 40  LDA $4015          ; enable all channels except dmc
0D/9C22: 09 0F     ORA #$0F
0D/9C24: 8D 15 40  STA $4015
0D/9C27: A5 E6     LDA $E6
0D/9C29: 85 E7     STA $E7
0D/9C2B: A2 00     LDX #$00
0D/9C2D: A0 00     LDY #$00
; beginning of channel loop
0D/9C2F: 46 E7     LSR $E7
0D/9C31: B0 30     BCS $9C63
0D/9C33: E0 01     CPX #$01
0D/9C35: D0 04     BNE $9C3B          ; branch if not square 2
0D/9C37: A5 E5     LDA $E5
0D/9C39: D0 28     BNE $9C63          ; branch if sound effect active ???
0D/9C3B: 56 C0     LSR $C0,X
0D/9C3D: 90 06     BCC $9C45          ; branch if no update required
0D/9C3F: B9 19 6F  LDA $6F19,Y
0D/9C42: 99 00 40  STA $4000,Y
0D/9C45: 56 C0     LSR $C0,X
0D/9C47: 90 06     BCC $9C4F
0D/9C49: B9 1A 6F  LDA $6F1A,Y
0D/9C4C: 99 01 40  STA $4001,Y
0D/9C4F: 56 C0     LSR $C0,X
0D/9C51: 90 06     BCC $9C59
0D/9C53: B9 1B 6F  LDA $6F1B,Y
0D/9C56: 99 02 40  STA $4002,Y
0D/9C59: 56 C0     LSR $C0,X
0D/9C5B: 90 06     BCC $9C63
0D/9C5D: B9 1C 6F  LDA $6F1C,Y
0D/9C60: 99 03 40  STA $4003,Y
0D/9C63: C8        INY 
0D/9C64: C8        INY 
0D/9C65: C8        INY 
0D/9C66: C8        INY 
0D/9C67: E8        INX 
0D/9C68: E0 03     CPX #$03           ; update 3 channels
0D/9C6A: 90 C3     BCC $9C2F
0D/9C6C: 60        RTS 

; frequency values (6*12 items, 2 bytes each)
0D/9C6D: 06AB 064D 05F3 059D 054C 0501 04B8 0474
0D/9C7D: 0434 03F7 03BE 0388 0355 0326 02F9 02CE
0D/9C8D: 02A6 0280 025C 023A 0219 01FB 01DE 01C4
0D/9C9D: 01AA 0193 017C 0167 0152 013F 012D 011C
0D/9CAD: 010C 00FD 00EF 00E1 00D5 00C9 00BE 00B3
0D/9CBD: 00A9 009F 0096 008E 0086 007E 0077 0070
0D/9CCD: 006A 0064 005E 0059 0054 004F 004B 0046
0D/9CDD: 0042 003E 003B 0038 0034 0031 002F 002C
0D/9CED: 0029 0027 0025 0023 0021 001F 001D 001B

; note durations

; $00: whole note
; $01: dotted half note
; $02: half note
; $03: dotted quarter note
; $04: half note triplet
; $05: quarter note
; $06: dotted eighth note
; $07: quarter note triplet
; $08: eighth note
; $09: dotted sixteenth note
; $0A: eighth note triplet
; $0B: sixteenth note
; $0C: sixteenth note triplet
; $0D: 32nd note
; $0E: 32nd note triplet
; $0F: 64th note triplet

0D/9CFD: 60 48 30 24 20 18 12 10 0C 09 08 06 04 03 02 01

; volume table (16 items, 16 bytes each)
0D/9D0D: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0D/9D1D: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
0D/9D2D: 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01 02
0D/9D3D: 00 00 00 00 00 01 01 01 01 01 02 02 02 02 02 03
0D/9D4D: 00 00 00 00 01 01 01 01 02 02 02 02 03 03 03 04
0D/9D5D: 00 00 00 01 01 01 02 02 02 03 03 03 04 04 04 05
0D/9D6D: 00 00 00 01 01 02 02 02 03 03 04 04 04 05 05 06
0D/9D7D: 00 00 00 01 01 02 02 03 03 04 04 05 05 06 06 07
0D/9D8D: 00 00 01 01 02 02 03 03 04 04 05 05 06 06 07 08
0D/9D9D: 00 00 01 01 02 03 03 04 04 05 06 06 07 07 08 09
0D/9DAD: 00 00 01 02 02 03 04 04 05 06 06 07 08 08 09 0A
0D/9DBD: 00 00 01 02 02 03 04 05 05 06 07 08 08 09 0A 0B
0D/9DCD: 00 00 01 02 03 04 04 05 06 07 08 08 09 0A 0B 0C
0D/9DDD: 00 00 01 02 03 04 05 06 06 07 08 09 0A 0B 0C 0D
0D/9DED: 00 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E
0D/9DFD: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F

; --------------------------------------------------------------------------

; [ draw portraits (main menu) ]

0E/8800: A2 00     LDX #$00
0E/8802: A9 14     LDA #$14
0E/8804: 85 40     STA $40
0E/8806: A9 0F     LDA #$0F
0E/8808: 85 41     STA $41
0E/880A: 20 52 88  JSR $8852          ; draw portrait
0E/880D: A2 40     LDX #$40
0E/880F: A9 84     LDA #$84
0E/8811: 85 40     STA $40
0E/8813: A9 0F     LDA #$0F
0E/8815: 85 41     STA $41
0E/8817: 20 52 88  JSR $8852          ; draw portrait
0E/881A: A2 80     LDX #$80
0E/881C: A9 24     LDA #$24
0E/881E: 85 40     STA $40
0E/8820: A9 5F     LDA #$5F
0E/8822: 85 41     STA $41
0E/8824: 20 52 88  JSR $8852          ; draw portrait
0E/8827: A2 C0     LDX #$C0
0E/8829: A9 94     LDA #$94
0E/882B: 85 40     STA $40
0E/882D: A9 5F     LDA #$5F
0E/882F: 85 41     STA $41
0E/8831: D0 1F     BNE $8852          ; draw portrait

; [ draw portrait (equip/magic menu) ]

0E/8833: A9 0F     LDA #$0F
0E/8835: 85 41     STA $41
0E/8837: A9 64     LDA #$64
0E/8839: 85 40     STA $40
0E/883B: D0 15     BNE $8852          ; draw portrait

; [ draw portrait (stats menu) ]

0E/883D: A9 14     LDA #$14
0E/883F: 85 40     STA $40
0E/8841: A9 0F     LDA #$0F
0E/8843: 85 41     STA $41
0E/8845: D0 0B     BNE $8852          ; draw portrait

; [  ]

0E/8847: A9 44     LDA #$44
0E/8849: 85 40     STA $40
0E/884B: A9 1F     LDA #$1F
0E/884D: 85 41     STA $41
0E/884F: D0 06     BNE $8857

; [ draw portrait ]

; starts at 0E/8852

0E/8851: 60        RTS 
; starts here
0E/8852: BD 35 62  LDA $6235,X
0E/8855: 30 FA     BMI $8851
0E/8857: A0 0B     LDY #$0B
0E/8859: BD 01 61  LDA $6101,X
0E/885C: 0A        ASL 
0E/885D: B0 0E     BCS $886D
0E/885F: 88        DEY 
0E/8860: 0A        ASL 
0E/8861: B0 0A     BCS $886D
0E/8863: 88        DEY 
0E/8864: 0A        ASL 
0E/8865: B0 06     BCS $886D
0E/8867: BD 00 61  LDA $6100,X
0E/886A: 29 0F     AND #$0F
0E/886C: A8        TAY 
0E/886D: B9 0B 89  LDA $890B,Y
0E/8870: 85 80     STA $80
0E/8872: BD 01 61  LDA $6101,X
0E/8875: 29 A0     AND #$A0
0E/8877: F0 0C     BEQ $8885
0E/8879: 29 80     AND #$80
0E/887B: F0 04     BEQ $8881
0E/887D: A9 3C     LDA #$3C
0E/887F: D0 0C     BNE $888D
0E/8881: A9 30     LDA #$30
0E/8883: D0 08     BNE $888D
0E/8885: 8A        TXA 
0E/8886: 0A        ASL 
0E/8887: 2A        ROL 
0E/8888: 2A        ROL 
0E/8889: AA        TAX 
0E/888A: BD 17 89  LDA $8917,X
0E/888D: 85 82     STA $82
0E/888F: A6 26     LDX $26
0E/8891: A5 40     LDA $40
0E/8893: 9D 03 02  STA $0203,X
0E/8896: 9D 0F 02  STA $020F,X
0E/8899: 9D 1B 02  STA $021B,X
0E/889C: 9D 27 02  STA $0227,X
0E/889F: 18        CLC 
0E/88A0: 69 08     ADC #$08
0E/88A2: 9D 07 02  STA $0207,X
0E/88A5: 9D 13 02  STA $0213,X
0E/88A8: 9D 1F 02  STA $021F,X
0E/88AB: 9D 2B 02  STA $022B,X
0E/88AE: 18        CLC 
0E/88AF: 69 08     ADC #$08
0E/88B1: 9D 0B 02  STA $020B,X
0E/88B4: 9D 17 02  STA $0217,X
0E/88B7: 9D 23 02  STA $0223,X
0E/88BA: 9D 2F 02  STA $022F,X
0E/88BD: A5 41     LDA $41
0E/88BF: 9D 00 02  STA $0200,X
0E/88C2: 9D 04 02  STA $0204,X
0E/88C5: 9D 08 02  STA $0208,X
0E/88C8: 18        CLC 
0E/88C9: 69 08     ADC #$08
0E/88CB: 9D 0C 02  STA $020C,X
0E/88CE: 9D 10 02  STA $0210,X
0E/88D1: 9D 14 02  STA $0214,X
0E/88D4: 18        CLC 
0E/88D5: 69 08     ADC #$08
0E/88D7: 9D 18 02  STA $0218,X
0E/88DA: 9D 1C 02  STA $021C,X
0E/88DD: 9D 20 02  STA $0220,X
0E/88E0: 18        CLC 
0E/88E1: 69 08     ADC #$08
0E/88E3: 9D 24 02  STA $0224,X
0E/88E6: 9D 28 02  STA $0228,X
0E/88E9: 9D 2C 02  STA $022C,X
0E/88EC: A0 00     LDY #$00
0E/88EE: 98        TYA 
0E/88EF: 18        CLC 
0E/88F0: 65 82     ADC $82
0E/88F2: 9D 01 02  STA $0201,X
0E/88F5: A5 80     LDA $80
0E/88F7: 9D 02 02  STA $0202,X
0E/88FA: E8        INX 
0E/88FB: E8        INX 
0E/88FC: E8        INX 
0E/88FD: E8        INX 
0E/88FE: C8        INY 
0E/88FF: C0 0C     CPY #$0C
0E/8901: 90 EB     BCC $88EE
0E/8903: A5 26     LDA $26
0E/8905: 18        CLC 
0E/8906: 69 30     ADC #$30
0E/8908: 85 26     STA $26
0E/890A: 60        RTS 

; portrait palette id
0E/890B: 02 00 01 01 01 02 00 00 01 01 03 01

0E/8917: 00 0C 18 24 30 3C 48 54 60 6C 78 84 90

; --------------------------------------------------------------------------

; [ decode character strings $20- ]

0E/8924: 48        PHA 
0E/8925: 38        SEC 
0E/8926: E9 20     SBC #$20
0E/8928: AA        TAX 
0E/8929: C9 10     CMP #$10
0E/892B: 90 15     BCC $8942
; $30-
0E/892D: E9 10     SBC #$10
0E/892F: 0A        ASL 
0E/8930: AA        TAX 
0E/8931: 18        CLC 
0E/8932: 65 67     ADC $67
0E/8934: AA        TAX 
0E/8935: BD 01 62  LDA $6201,X
0E/8938: 85 81     STA $81
0E/893A: BD 00 62  LDA $6200,X
0E/893D: 85 80     STA $80
0E/893F: 4C 53 89  JMP $8953
; $20-$2F
0E/8942: BD A5 89  LDA $89A5,X
0E/8945: 18        CLC 
0E/8946: 65 67     ADC $67
0E/8948: AA        TAX 
0E/8949: BD 00 61  LDA $6100,X
0E/894C: 85 80     STA $80
0E/894E: BD 01 61  LDA $6101,X
0E/8951: 85 81     STA $81
0E/8953: 68        PLA 
0E/8954: C9 22     CMP #$22
0E/8956: 90 21     BCC $8979
0E/8958: C9 24     CMP #$24
0E/895A: 90 20     BCC $897C
0E/895C: C9 26     CMP #$26
0E/895E: 90 1F     BCC $897F
0E/8960: C9 2D     CMP #$2D
0E/8962: 90 22     BCC $8986
0E/8964: C9 30     CMP #$30
0E/8966: 90 25     BCC $898D
0E/8968: E6 80     INC $80
0E/896A: C9 38     CMP #$38
0E/896C: 90 1F     BCC $898D
0E/896E: E9 38     SBC #$38
0E/8970: 05 67     ORA $67
0E/8972: AA        TAX 
0E/8973: BD 30 61  LDA $6130,X
0E/8976: D0 15     BNE $898D
0E/8978: 60        RTS 
0E/8979: 4C E8 89  JMP $89E8
0E/897C: 4C DD 89  JMP $89DD
; $24-$25: 
0E/897F: A9 00     LDA #$00
0E/8981: 85 81     STA $81
0E/8983: 4C DD 89  JMP $89DD
; $26-$2C: 
0E/8986: A9 00     LDA #$00
0E/8988: 85 81     STA $81
0E/898A: 4C D2 89  JMP $89D2
; $2D-
0E/898D: A5 81     LDA $81
0E/898F: 48        PHA 
0E/8990: 20 D2 89  JSR $89D2
0E/8993: A9 C2     LDA #$C2
0E/8995: 9D A0 07  STA $07A0,X
0E/8998: E6 90     INC $90
0E/899A: 68        PLA 
0E/899B: 85 80     STA $80
0E/899D: 20 9B 8B  JSR $8B9B
0E/89A0: A6 90     LDX $90
0E/89A2: 4C 24 8A  JMP $8A24

0E/89A5: 08 0A 0C 0E 18 29 20 21 22 23 24 25 00 16 2A 2C

; [  ]

0E/89B5: AD 1C 60  LDA $601C          ; gil
0E/89B8: 85 80     STA $80
0E/89BA: AD 1D 60  LDA $601D
0E/89BD: 85 81     STA $81
0E/89BF: AD 1E 60  LDA $601E
0E/89C2: 85 82     STA $82
0E/89C4: 4C FE 89  JMP $89FE

; [  ]

0E/89C7: A5 80     LDA $80
0E/89C9: 09 80     ORA #$80
0E/89CB: 85 5F     STA $5F
0E/89CD: A6 90     LDX $90
0E/89CF: 4C 2A 8A  JMP $8A2A

; [  ]

0E/89D2: 20 9B 8B  JSR $8B9B
0E/89D5: 20 65 8A  JSR $8A65
0E/89D8: A6 90     LDX $90
0E/89DA: 4C 24 8A  JMP $8A24
; $22-$23:
0E/89DD: 20 6A 8B  JSR $8B6A
0E/89E0: 20 5B 8A  JSR $8A5B
0E/89E3: A6 90     LDX $90
0E/89E5: 4C 1E 8A  JMP $8A1E
; $20-$21: 
0E/89E8: 20 39 8B  JSR $8B39
0E/89EB: 20 51 8A  JSR $8A51
0E/89EE: A6 90     LDX $90
0E/89F0: 4C 18 8A  JMP $8A18

; [  ]

0E/89F3: 20 F6 8A  JSR $8AF6
0E/89F6: A6 90     LDX $90
0E/89F8: 20 47 8A  JSR $8A47
0E/89FB: 4C 12 8A  JMP $8A12
0E/89FE: 20 70 8A  JSR $8A70
0E/8A01: 20 33 8A  JSR $8A33
0E/8A04: A6 90     LDX $90
0E/8A06: A5 59     LDA $59
0E/8A08: 9D A0 07  STA $07A0,X
0E/8A0B: E8        INX 
0E/8A0C: A5 5A     LDA $5A
0E/8A0E: 9D A0 07  STA $07A0,X
0E/8A11: E8        INX 
0E/8A12: A5 5B     LDA $5B
0E/8A14: 9D A0 07  STA $07A0,X
0E/8A17: E8        INX 
0E/8A18: A5 5C     LDA $5C
0E/8A1A: 9D A0 07  STA $07A0,X
0E/8A1D: E8        INX 
0E/8A1E: A5 5D     LDA $5D
0E/8A20: 9D A0 07  STA $07A0,X
0E/8A23: E8        INX 
0E/8A24: A5 5E     LDA $5E
0E/8A26: 9D A0 07  STA $07A0,X
0E/8A29: E8        INX 
0E/8A2A: A5 5F     LDA $5F
0E/8A2C: 9D A0 07  STA $07A0,X
0E/8A2F: E8        INX 
0E/8A30: 86 90     STX $90
0E/8A32: 60        RTS 
0E/8A33: A5 59     LDA $59
0E/8A35: C9 80     CMP #$80
0E/8A37: D0 36     BNE $8A6F
0E/8A39: A9 FF     LDA #$FF
0E/8A3B: 85 59     STA $59
0E/8A3D: A5 5A     LDA $5A
0E/8A3F: C9 80     CMP #$80
0E/8A41: D0 2C     BNE $8A6F
0E/8A43: A9 FF     LDA #$FF
0E/8A45: 85 5A     STA $5A
0E/8A47: A5 5B     LDA $5B
0E/8A49: C9 80     CMP #$80
0E/8A4B: D0 22     BNE $8A6F
0E/8A4D: A9 FF     LDA #$FF
0E/8A4F: 85 5B     STA $5B
0E/8A51: A5 5C     LDA $5C
0E/8A53: C9 80     CMP #$80
0E/8A55: D0 18     BNE $8A6F
0E/8A57: A9 FF     LDA #$FF
0E/8A59: 85 5C     STA $5C
0E/8A5B: A5 5D     LDA $5D
0E/8A5D: C9 80     CMP #$80
0E/8A5F: D0 0E     BNE $8A6F
0E/8A61: A9 FF     LDA #$FF
0E/8A63: 85 5D     STA $5D
0E/8A65: A5 5E     LDA $5E
0E/8A67: C9 80     CMP #$80
0E/8A69: D0 04     BNE $8A6F
0E/8A6B: A9 FF     LDA #$FF
0E/8A6D: 85 5E     STA $5E
0E/8A6F: 60        RTS 

; [ convert hex to decimal ]

; 7 digits
0E/8A70: A2 08     LDX #$08
0E/8A72: A5 82     LDA $82
0E/8A74: DD B2 8B  CMP $8BB2,X
0E/8A77: F0 0C     BEQ $8A85
0E/8A79: B0 1C     BCS $8A97
0E/8A7B: CA        DEX 
0E/8A7C: 10 F4     BPL $8A72
0E/8A7E: A2 80     LDX #$80
0E/8A80: 86 59     STX $59
0E/8A82: 4C B3 8A  JMP $8AB3
0E/8A85: A5 81     LDA $81
0E/8A87: DD BB 8B  CMP $8BBB,X
0E/8A8A: F0 04     BEQ $8A90
0E/8A8C: 90 ED     BCC $8A7B
0E/8A8E: B0 07     BCS $8A97
0E/8A90: A5 80     LDA $80
0E/8A92: DD C4 8B  CMP $8BC4,X
0E/8A95: 90 E4     BCC $8A7B
0E/8A97: A5 80     LDA $80
0E/8A99: 38        SEC 
0E/8A9A: FD C4 8B  SBC $8BC4,X
0E/8A9D: 85 80     STA $80
0E/8A9F: A5 81     LDA $81
0E/8AA1: FD BB 8B  SBC $8BBB,X
0E/8AA4: 85 81     STA $81
0E/8AA6: A5 82     LDA $82
0E/8AA8: FD B2 8B  SBC $8BB2,X
0E/8AAB: 85 82     STA $82
0E/8AAD: 8A        TXA 
0E/8AAE: 18        CLC 
0E/8AAF: 69 81     ADC #$81
0E/8AB1: 85 59     STA $59
; 6 digits
0E/8AB3: A2 08     LDX #$08
0E/8AB5: A5 82     LDA $82
0E/8AB7: DD CD 8B  CMP $8BCD,X
0E/8ABA: F0 0C     BEQ $8AC8
0E/8ABC: B0 1C     BCS $8ADA
0E/8ABE: CA        DEX 
0E/8ABF: 10 F4     BPL $8AB5
0E/8AC1: A2 80     LDX #$80
0E/8AC3: 86 5A     STX $5A
0E/8AC5: 4C F6 8A  JMP $8AF6
0E/8AC8: A5 81     LDA $81
0E/8ACA: DD D6 8B  CMP $8BD6,X
0E/8ACD: F0 04     BEQ $8AD3
0E/8ACF: 90 ED     BCC $8ABE
0E/8AD1: B0 07     BCS $8ADA
0E/8AD3: A5 80     LDA $80
0E/8AD5: DD DF 8B  CMP $8BDF,X
0E/8AD8: 90 E4     BCC $8ABE
0E/8ADA: A5 80     LDA $80
0E/8ADC: 38        SEC 
0E/8ADD: FD DF 8B  SBC $8BDF,X
0E/8AE0: 85 80     STA $80
0E/8AE2: A5 81     LDA $81
0E/8AE4: FD D6 8B  SBC $8BD6,X
0E/8AE7: 85 81     STA $81
0E/8AE9: A5 82     LDA $82
0E/8AEB: FD CD 8B  SBC $8BCD,X
0E/8AEE: 85 82     STA $82
0E/8AF0: 8A        TXA 
0E/8AF1: 18        CLC 
0E/8AF2: 69 81     ADC #$81
0E/8AF4: 85 5A     STA $5A
; 5 digits
0E/8AF6: A2 08     LDX #$08
0E/8AF8: A5 82     LDA $82
0E/8AFA: DD E8 8B  CMP $8BE8,X
0E/8AFD: F0 0C     BEQ $8B0B
0E/8AFF: B0 1C     BCS $8B1D
0E/8B01: CA        DEX 
0E/8B02: 10 F4     BPL $8AF8
0E/8B04: A2 80     LDX #$80
0E/8B06: 86 5B     STX $5B
0E/8B08: 4C 39 8B  JMP $8B39
0E/8B0B: A5 81     LDA $81
0E/8B0D: DD F1 8B  CMP $8BF1,X
0E/8B10: F0 04     BEQ $8B16
0E/8B12: 90 ED     BCC $8B01
0E/8B14: B0 07     BCS $8B1D
0E/8B16: A5 80     LDA $80
0E/8B18: DD FA 8B  CMP $8BFA,X
0E/8B1B: 90 E4     BCC $8B01
0E/8B1D: A5 80     LDA $80
0E/8B1F: 38        SEC 
0E/8B20: FD FA 8B  SBC $8BFA,X
0E/8B23: 85 80     STA $80
0E/8B25: A5 81     LDA $81
0E/8B27: FD F1 8B  SBC $8BF1,X
0E/8B2A: 85 81     STA $81
0E/8B2C: A5 82     LDA $82
0E/8B2E: FD E8 8B  SBC $8BE8,X
0E/8B31: 85 82     STA $82
0E/8B33: 8A        TXA 
0E/8B34: 18        CLC 
0E/8B35: 69 81     ADC #$81
0E/8B37: 85 5B     STA $5B
; 4 digits
0E/8B39: A2 08     LDX #$08
0E/8B3B: A5 81     LDA $81
0E/8B3D: DD 03 8C  CMP $8C03,X
0E/8B40: F0 0C     BEQ $8B4E
0E/8B42: B0 11     BCS $8B55
0E/8B44: CA        DEX 
0E/8B45: 10 F4     BPL $8B3B
0E/8B47: A2 80     LDX #$80
0E/8B49: 86 5C     STX $5C
0E/8B4B: 4C 6A 8B  JMP $8B6A
0E/8B4E: A5 80     LDA $80
0E/8B50: DD 0C 8C  CMP $8C0C,X
0E/8B53: 90 EF     BCC $8B44
0E/8B55: A5 80     LDA $80
0E/8B57: 38        SEC 
0E/8B58: FD 0C 8C  SBC $8C0C,X
0E/8B5B: 85 80     STA $80
0E/8B5D: A5 81     LDA $81
0E/8B5F: FD 03 8C  SBC $8C03,X
0E/8B62: 85 81     STA $81
0E/8B64: 8A        TXA 
0E/8B65: 18        CLC 
0E/8B66: 69 81     ADC #$81
0E/8B68: 85 5C     STA $5C
; 3 digits
0E/8B6A: A2 08     LDX #$08
0E/8B6C: A5 81     LDA $81
0E/8B6E: DD 15 8C  CMP $8C15,X
0E/8B71: F0 0C     BEQ $8B7F
0E/8B73: B0 11     BCS $8B86
0E/8B75: CA        DEX 
0E/8B76: 10 F4     BPL $8B6C
0E/8B78: A2 80     LDX #$80
0E/8B7A: 86 5D     STX $5D
0E/8B7C: 4C 9B 8B  JMP $8B9B
0E/8B7F: A5 80     LDA $80
0E/8B81: DD 1E 8C  CMP $8C1E,X
0E/8B84: 90 EF     BCC $8B75
0E/8B86: A5 80     LDA $80
0E/8B88: 38        SEC 
0E/8B89: FD 1E 8C  SBC $8C1E,X
0E/8B8C: 85 80     STA $80
0E/8B8E: A5 81     LDA $81
0E/8B90: FD 15 8C  SBC $8C15,X
0E/8B93: 85 81     STA $81
0E/8B95: 8A        TXA 
0E/8B96: 18        CLC 
0E/8B97: 69 81     ADC #$81
0E/8B99: 85 5D     STA $5D
; 2 digits
0E/8B9B: A2 00     LDX #$00
0E/8B9D: A5 80     LDA $80
0E/8B9F: C9 0A     CMP #$0A
0E/8BA1: 90 05     BCC $8BA8
0E/8BA3: E9 0A     SBC #$0A
0E/8BA5: E8        INX 
0E/8BA6: D0 F7     BNE $8B9F
0E/8BA8: 09 80     ORA #$80
0E/8BAA: 85 5F     STA $5F
0E/8BAC: 8A        TXA 
0E/8BAD: 09 80     ORA #$80
0E/8BAF: 85 5E     STA $5E
0E/8BB1: 60        RTS 

; 1,000,000
0E/8BB2: 0F 1E 2D 3D 4C 5B 6A 7A 89
0E/8BBB: 42 84 C6 09 4B 8D CF 12 54
0E/8BC4: 40 80 C0 00 40 80 C0 00 40
; 100,000
0E/8BCD: 01 03 04 06 07 09 0A 0C 0D
0E/8BD6: 86 0D 93 1A A1 27 AE 35 BB
0E/8BDF: A0 40 E0 80 20 C0 60 00 A0
; 10,000
0E/8BE8: 00 00 00 00 00 00 01 01 01
0E/8BF1: 27 4E 75 9C C3 EA 11 38 5F
0E/8BFA: 10 20 30 40 50 60 70 80 90
; 1000
0E/8C03: 03 07 0B 0F 13 17 1B 1F 23
0E/8C0C: E8 D0 B8 A0 88 70 58 40 28
; 100
0E/8C15: 00 00 01 01 01 02 02 03 03
0E/8C1E: 64 C8 2C 90 F4 58 BC 20 84

; --------------------------------------------------------------------------

; [ cid's airship ferry ]

0E/8C27: 20 B6 8E  JSR $8EB6          ; init player input
0E/8C2A: A9 14     LDA #$14           ; $0214: "Assistant:Cid's Airship ..."
0E/8C2C: 20 3E 96  JSR $963E
0E/8C2F: 20 47 8E  JSR $8E47
0E/8C32: B0 7B     BCS $8CAF
0E/8C34: 20 6F D1  JSR $D16F          ; close text window (keyword/item)
0E/8C37: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/8C3A: A9 1C     LDA #$1C
0E/8C3C: 20 9B 8E  JSR $8E9B          ; load shop/ferry data
0E/8C3F: 20 39 91  JSR $9139          ; open gil window
0E/8C42: A9 15     LDA #$15           ; $0215: "Go where?"
0E/8C44: 20 3E 96  JSR $963E
0E/8C47: A9 00     LDA #$00
0E/8C49: 85 A2     STA $A2
0E/8C4B: A9 01     LDA #$01
0E/8C4D: 85 A3     STA $A3
0E/8C4F: A9 00     LDA #$00
0E/8C51: 8D F0 79  STA $79F0
0E/8C54: 20 CA 95  JSR $95CA          ; wait one frame (draw cursors)
0E/8C57: A9 04     LDA #$04
0E/8C59: 20 F9 96  JSR $96F9          ; update cursor 2 position
0E/8C5C: A5 25     LDA $25
0E/8C5E: D0 4F     BNE $8CAF
0E/8C60: A5 24     LDA $24
0E/8C62: F0 F0     BEQ $8C54
0E/8C64: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/8C67: AE F0 79  LDX $79F0
0E/8C6A: BD 02 7B  LDA $7B02,X
0E/8C6D: 85 80     STA $80
0E/8C6F: BD 03 7B  LDA $7B03,X
0E/8C72: 85 81     STA $81
0E/8C74: 20 81 90  JSR $9081          ; take gil
0E/8C77: 90 0B     BCC $8C84
0E/8C79: A9 19     LDA #$19           ; $0219: "Oops!Not enough money! Come again!"
0E/8C7B: 20 3E 96  JSR $963E
0E/8C7E: 20 7B 8E  JSR $8E7B
0E/8C81: 4C 42 8C  JMP $8C42
0E/8C84: BD 00 7B  LDA $7B00,X        ; set ferry destination position
0E/8C87: 8D FC 62  STA $62FC
0E/8C8A: BD 01 7B  LDA $7B01,X
0E/8C8D: 8D FD 62  STA $62FD
0E/8C90: A9 02     LDA #$02
0E/8C92: 0D 04 60  ORA $6004
0E/8C95: 8D 04 60  STA $6004
0E/8C98: AD 3C 62  LDA $623C          ; move airship to poft at (148,58)
0E/8C9B: 8D 05 60  STA $6005
0E/8C9E: AD 3D 62  LDA $623D
0E/8CA1: 8D 06 60  STA $6006
0E/8CA4: A9 16     LDA #$16           ; $0216: "Thanks!The Airship will be waiting for you outside."
0E/8CA6: 20 3E 96  JSR $963E
0E/8CA9: 20 39 91  JSR $9139          ; open gil window
0E/8CAC: 20 7B 8E  JSR $8E7B
0E/8CAF: 4C B8 91  JMP $91B8          ; close window

; [ statue revive ]

0E/8CB2: A9 00     LDA #$00
0E/8CB4: 85 96     STA $96
0E/8CB6: 20 1E E9  JSR $E91E          ; open window
0E/8CB9: AE C1 61  LDX $61C1
0E/8CBC: AD F5 62  LDA $62F5
0E/8CBF: 10 02     BPL $8CC3
0E/8CC1: A2 00     LDX #$00
0E/8CC3: 8A        TXA 
0E/8CC4: 0D 01 61  ORA $6101
0E/8CC7: 0D 41 61  ORA $6141
0E/8CCA: 0D 81 61  ORA $6181
0E/8CCD: 30 0B     BMI $8CDA          ; branch if any characters are dead
0E/8CCF: A9 44     LDA #$44           ; $0244: "You can't use this."
0E/8CD1: 20 F2 95  JSR $95F2          ; load text (multi-page)
0E/8CD4: 20 7B 8E  JSR $8E7B
0E/8CD7: 4C B8 91  JMP $91B8          ; close window
0E/8CDA: A2 00     LDX #$00
0E/8CDC: 20 FE 8C  JSR $8CFE          ; revive dead character
0E/8CDF: A2 40     LDX #$40
0E/8CE1: 20 FE 8C  JSR $8CFE          ; revive dead character
0E/8CE4: A2 80     LDX #$80
0E/8CE6: 20 FE 8C  JSR $8CFE          ; revive dead character
0E/8CE9: A2 C0     LDX #$C0
0E/8CEB: 20 FE 8C  JSR $8CFE          ; revive dead character
0E/8CEE: A9 48     LDA #$48           ; $0248: "As you pray,a warm light..."
0E/8CF0: 20 F2 95  JSR $95F2          ; load text (multi-page)
0E/8CF3: 20 7B 8E  JSR $8E7B
0E/8CF6: AD BA 62  LDA $62BA          ; statue revive event
0E/8CF9: 85 6C     STA $6C
0E/8CFB: 4C B8 91  JMP $91B8          ; close window

; [ revive character ]

0E/8CFE: BD 35 62  LDA $6235,X
0E/8D01: 30 0F     BMI $8D12          ; return if character slot empty
0E/8D03: BD 01 61  LDA $6101,X
0E/8D06: 10 0A     BPL $8D12          ; return if character is not dead
0E/8D08: 29 7F     AND #$7F
0E/8D0A: 9D 01 61  STA $6101,X        ; remove dead status
0E/8D0D: A9 01     LDA #$01
0E/8D0F: 9D 08 61  STA $6108,X        ; set hp to 1
0E/8D12: 60        RTS 

; [ calculate inn cost ]

; inn cost = (total hp deficit + total mp deficit) / 4

0E/8D13: A9 00     LDA #$00
0E/8D15: 85 61     STA $61
0E/8D17: 85 62     STA $62
0E/8D19: A2 00     LDX #$00
0E/8D1B: 20 3A 8D  JSR $8D3A          ; get total hp deficit
0E/8D1E: 8A        TXA 
0E/8D1F: 18        CLC 
0E/8D20: 69 40     ADC #$40           ; next character
0E/8D22: AA        TAX 
0E/8D23: D0 F6     BNE $8D1B
0E/8D25: 46 62     LSR $62            ; divide by 4
0E/8D27: 66 61     ROR $61
0E/8D29: 46 62     LSR $62
0E/8D2B: 66 61     ROR $61
0E/8D2D: A2 00     LDX #$00
0E/8D2F: 20 65 8D  JSR $8D65          ; get total mp deficit
0E/8D32: 8A        TXA 
0E/8D33: 18        CLC 
0E/8D34: 69 40     ADC #$40           ; next character
0E/8D36: AA        TAX 
0E/8D37: D0 F6     BNE $8D2F
0E/8D39: 60        RTS 

; [ get total hp deficit ]

0E/8D3A: BD 35 62  LDA $6235,X
0E/8D3D: 30 25     BMI $8D64          ; return if character slot empty
0E/8D3F: BD 01 61  LDA $6101,X
0E/8D42: 29 C0     AND #$C0
0E/8D44: D0 1E     BNE $8D64          ; return if character is dead or stone
0E/8D46: BD 0A 61  LDA $610A,X
0E/8D49: 38        SEC 
0E/8D4A: FD 08 61  SBC $6108,X        ; max hp - current hp
0E/8D4D: 85 80     STA $80
0E/8D4F: BD 0B 61  LDA $610B,X
0E/8D52: FD 09 61  SBC $6109,X
0E/8D55: 85 81     STA $81
0E/8D57: A5 80     LDA $80
0E/8D59: 18        CLC 
0E/8D5A: 65 61     ADC $61
0E/8D5C: 85 61     STA $61
0E/8D5E: A5 81     LDA $81
0E/8D60: 65 62     ADC $62
0E/8D62: 85 62     STA $62
0E/8D64: 60        RTS 

; [ get total mp deficit ]

0E/8D65: BD 35 62  LDA $6235,X
0E/8D68: 30 FA     BMI $8D64          ; return if character slot empty
0E/8D6A: BD 01 61  LDA $6101,X
0E/8D6D: 29 C0     AND #$C0
0E/8D6F: D0 F3     BNE $8D64          ; return if character is dead or stone
0E/8D71: BD 0E 61  LDA $610E,X
0E/8D74: 38        SEC 
0E/8D75: FD 0C 61  SBC $610C,X        ; max mp - current mp
0E/8D78: 85 80     STA $80
0E/8D7A: BD 0F 61  LDA $610F,X
0E/8D7D: FD 0D 61  SBC $610D,X
0E/8D80: 4C 55 8D  JMP $8D55

; [ inn ]

0E/8D83: 20 13 8D  JSR $8D13          ; calculate inn cost
0E/8D86: A9 0D     LDA #$0D           ; $020D: "Welcome! It will cost \x04 gil...""
0E/8D88: 20 3E 96  JSR $963E
0E/8D8B: 20 B6 8E  JSR $8EB6          ; init player input
0E/8D8E: 20 39 91  JSR $9139          ; open gil window
0E/8D91: 20 47 8E  JSR $8E47
0E/8D94: 90 0E     BCC $8DA4
0E/8D96: A9 10     LDA #$10           ; $0210: "Please come again!"
0E/8D98: 20 3E 96  JSR $963E
0E/8D9B: 20 6F D1  JSR $D16F          ; close text window (keyword/item)
0E/8D9E: 20 7B 8E  JSR $8E7B
0E/8DA1: 4C B8 91  JMP $91B8          ; close window
0E/8DA4: A5 61     LDA $61
0E/8DA6: 85 80     STA $80
0E/8DA8: A5 62     LDA $62
0E/8DAA: 85 81     STA $81
0E/8DAC: 20 81 90  JSR $9081          ; take gil
0E/8DAF: 90 0B     BCC $8DBC
0E/8DB1: A9 0E     LDA #$0E           ; $020E: "You don't have enough gil."
0E/8DB3: 20 3E 96  JSR $963E
0E/8DB6: 20 7B 8E  JSR $8E7B
0E/8DB9: 4C 96 8D  JMP $8D96
0E/8DBC: 20 39 91  JSR $9139          ; open gil window
0E/8DBF: A9 0F     LDA #$0F           ; $020F: "Pleasant dreams…"
0E/8DC1: 20 3E 96  JSR $963E
0E/8DC4: 20 D2 8D  JSR $8DD2          ; set party hp/mp to max
0E/8DC7: 20 7B 8E  JSR $8E7B
0E/8DCA: AD BB 62  LDA $62BB          ; inn event
0E/8DCD: 85 6C     STA $6C
0E/8DCF: 4C B8 91  JMP $91B8          ; close window

; [ set party hp/mp to max ]

0E/8DD2: A2 00     LDX #$00
0E/8DD4: BD 01 61  LDA $6101,X
0E/8DD7: 29 C0     AND #$C0
0E/8DD9: D0 1D     BNE $8DF8
0E/8DDB: BD 35 62  LDA $6235,X
0E/8DDE: 30 18     BMI $8DF8
0E/8DE0: BD 0A 61  LDA $610A,X
0E/8DE3: 9D 08 61  STA $6108,X
0E/8DE6: BD 0B 61  LDA $610B,X
0E/8DE9: 9D 09 61  STA $6109,X
0E/8DEC: BD 0E 61  LDA $610E,X
0E/8DEF: 9D 0C 61  STA $610C,X
0E/8DF2: BD 0F 61  LDA $610F,X
0E/8DF5: 9D 0D 61  STA $610D,X
0E/8DF8: 8A        TXA 
0E/8DF9: 18        CLC 
0E/8DFA: 69 40     ADC #$40
0E/8DFC: AA        TAX 
0E/8DFD: D0 D5     BNE $8DD4
0E/8DFF: 60        RTS 

; [ ship ferry ]

0E/8E00: AD 0C 60  LDA $600C
0E/8E03: 29 01     AND #$01           ; poft or paloom
0E/8E05: 18        CLC 
0E/8E06: 69 11     ADC #$11           ; $0211: "You need a ride? 32 gil will take you to Poft!"
0E/8E08: 20 3E 96  JSR $963E
0E/8E0B: A9 1E     LDA #$1E
0E/8E0D: 20 9B 8E  JSR $8E9B          ; load shop/ferry data
0E/8E10: 20 B6 8E  JSR $8EB6          ; init player input
0E/8E13: 20 39 91  JSR $9139          ; open gil window
0E/8E16: 20 47 8E  JSR $8E47
0E/8E19: B0 29     BCS $8E44
0E/8E1B: AD 00 7B  LDA $7B00          ; gil cost (from 0E/86FD)
0E/8E1E: 85 80     STA $80
0E/8E20: AD 01 7B  LDA $7B01
0E/8E23: 85 81     STA $81
0E/8E25: 20 81 90  JSR $9081          ; take gil
0E/8E28: B0 0C     BCS $8E36          ; branch if not enough gil
0E/8E2A: AD 0C 60  LDA $600C
0E/8E2D: 09 02     ORA #$02
0E/8E2F: 8D 0C 60  STA $600C
0E/8E32: A9 13     LDA #$13           ; $0213: "Done!Just board the ship ..."
0E/8E34: D0 02     BNE $8E38
0E/8E36: A9 19     LDA #$19           ; $0219: "Oops!Not enough money! Come again!"
0E/8E38: 20 3E 96  JSR $963E
0E/8E3B: 20 6F D1  JSR $D16F          ; close text window (keyword/item)
0E/8E3E: 20 39 91  JSR $9139          ; open gil window
0E/8E41: 20 7B 8E  JSR $8E7B
0E/8E44: 4C B8 91  JMP $91B8          ; close window

; [  ]

0E/8E47: A9 00     LDA #$00
0E/8E49: 85 24     STA $24
0E/8E4B: 85 25     STA $25
0E/8E4D: A9 01     LDA #$01
0E/8E4F: 85 96     STA $96
0E/8E51: 20 1E E9  JSR $E91E          ; open window
0E/8E54: A9 18     LDA #$18
0E/8E56: 20 F2 95  JSR $95F2          ; load text (multi-page)
0E/8E59: A9 00     LDA #$00
0E/8E5B: 8D F0 78  STA $78F0
0E/8E5E: A9 01     LDA #$01
0E/8E60: 85 A2     STA $A2
0E/8E62: 20 CA 95  JSR $95CA          ; wait one frame (draw cursors)
0E/8E65: A9 04     LDA #$04
0E/8E67: 20 C5 96  JSR $96C5          ; get cursor 1 position
0E/8E6A: A5 25     LDA $25
0E/8E6C: D0 0B     BNE $8E79
0E/8E6E: A5 24     LDA $24
0E/8E70: F0 F0     BEQ $8E62
0E/8E72: AD F0 78  LDA $78F0
0E/8E75: D0 02     BNE $8E79
0E/8E77: 18        CLC 
0E/8E78: 60        RTS 
0E/8E79: 38        SEC 
0E/8E7A: 60        RTS 

; [  ]

0E/8E7B: 20 E3 95  JSR $95E3
0E/8E7E: A9 00     LDA #$00
0E/8E80: 85 A2     STA $A2
0E/8E82: 85 A3     STA $A3
0E/8E84: 85 A4     STA $A4
0E/8E86: 20 CA 95  JSR $95CA          ; wait one frame (draw cursors)
0E/8E89: 20 A9 DB  JSR $DBA9          ; read joypad registers
0E/8E8C: A5 20     LDA $20
0E/8E8E: D0 F6     BNE $8E86
0E/8E90: 20 CA 95  JSR $95CA          ; wait one frame (draw cursors)
0E/8E93: 20 A9 DB  JSR $DBA9          ; read joypad registers
0E/8E96: A5 20     LDA $20
0E/8E98: F0 F6     BEQ $8E90
0E/8E9A: 60        RTS 

; [ load shop/ferry data ]

; A: shop/ferry id

; shops are 8 bytes each, airship ferry is 16 bytes, ship ferry is 2 bytes

0E/8E9B: 0A        ASL 
0E/8E9C: 0A        ASL 
0E/8E9D: 0A        ASL 
0E/8E9E: 18        CLC 
0E/8E9F: 6D 80 83  ADC $8380
0E/8EA2: 85 80     STA $80
0E/8EA4: AD 81 83  LDA $8381
0E/8EA7: 69 00     ADC #$00
0E/8EA9: 85 81     STA $81
0E/8EAB: A0 0F     LDY #$0F           ; copy 16 bytes
0E/8EAD: B1 80     LDA ($80),Y
0E/8EAF: 99 00 7B  STA $7B00,Y
0E/8EB2: 88        DEY 
0E/8EB3: 10 F8     BPL $8EAD
0E/8EB5: 60        RTS 

; [ init player input ]

; used for shops, menus, prophecy, etc.

0E/8EB6: A9 00     LDA #$00
0E/8EB8: 85 24     STA $24
0E/8EBA: 85 25     STA $25
0E/8EBC: 85 47     STA $47
0E/8EBE: 85 A3     STA $A3
0E/8EC0: 85 A4     STA $A4
0E/8EC2: 20 A9 DB  JSR $DBA9          ; read joypad registers
0E/8EC5: A5 20     LDA $20
0E/8EC7: 29 0F     AND #$0F
0E/8EC9: 85 A1     STA $A1
0E/8ECB: A9 0E     LDA #$0E
0E/8ECD: 85 57     STA $57
0E/8ECF: 60        RTS 

; [ shop window ]

; A: shop id

0E/8ED0: C9 E0     CMP #$E0
0E/8ED2: 90 01     BCC $8ED5
0E/8ED4: 60        RTS 
0E/8ED5: C9 DC     CMP #$DC
0E/8ED7: 90 16     BCC $8EEF
0E/8ED9: D0 03     BNE $8EDE
0E/8EDB: 4C 00 8E  JMP $8E00          ; $DC: ship ferry
0E/8EDE: C9 DD     CMP #$DD
0E/8EE0: D0 03     BNE $8EE5
0E/8EE2: 4C 27 8C  JMP $8C27          ; $DD: cid's airship ferry
0E/8EE5: C9 DE     CMP #$DE
0E/8EE7: D0 03     BNE $8EEC
0E/8EE9: 4C 83 8D  JMP $8D83          ; $DE: inn
0E/8EEC: 4C B2 8C  JMP $8CB2          ; $DF: statue revive
; $C0-$DB: normal shop
0E/8EEF: A9 05     LDA #$05           ; $0205: "What can I do for you?"
0E/8EF1: 20 3E 96  JSR $963E
0E/8EF4: A5 A0     LDA $A0            ; npc id
0E/8EF6: 29 1F     AND #$1F
0E/8EF8: 20 9B 8E  JSR $8E9B          ; load shop/ferry data
0E/8EFB: 20 FD 90  JSR $90FD          ; load shop item list text
0E/8EFE: 20 B6 8E  JSR $8EB6          ; init player input
0E/8F01: 20 39 91  JSR $9139          ; open gil window
0E/8F04: A9 01     LDA #$01           ; buy/sell/exit window
0E/8F06: 85 96     STA $96
0E/8F08: 20 1E E9  JSR $E91E          ; open window
0E/8F0B: A9 17     LDA #$17           ; $0217: "Buy Sell Exit"
0E/8F0D: 20 F2 95  JSR $95F2          ; load text (multi-page)
0E/8F10: A9 01     LDA #$01
0E/8F12: 85 A2     STA $A2
0E/8F14: 20 CA 95  JSR $95CA          ; wait one frame (draw cursors)
0E/8F17: A9 04     LDA #$04
0E/8F19: 20 C5 96  JSR $96C5          ; get cursor 1 position
0E/8F1C: A5 25     LDA $25
0E/8F1E: D0 1C     BNE $8F3C
0E/8F20: A5 24     LDA $24
0E/8F22: F0 F0     BEQ $8F14
0E/8F24: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/8F27: AD F0 78  LDA $78F0
0E/8F2A: D0 06     BNE $8F32
0E/8F2C: 20 3F 8F  JSR $8F3F          ; shop menu (buy)
0E/8F2F: 4C FE 8E  JMP $8EFE
0E/8F32: C9 04     CMP #$04
0E/8F34: D0 06     BNE $8F3C
0E/8F36: 20 98 8F  JSR $8F98          ; shop menu (sell)
0E/8F39: 4C FE 8E  JMP $8EFE
0E/8F3C: 4C B8 91  JMP $91B8          ; close window

; [ shop menu (buy) ]

0E/8F3F: 20 B5 90  JSR $90B5          ; find first empty inventory slot
0E/8F42: 90 06     BCC $8F4A          ; branch if inventory is not full
0E/8F44: A9 08     LDA #$08           ; $0208: "You're carrying too much."
0E/8F46: 20 3E 96  JSR $963E
0E/8F49: 60        RTS 
0E/8F4A: A9 01     LDA #$01
0E/8F4C: 85 A3     STA $A3
0E/8F4E: 20 D6 90  JSR $90D6
0E/8F51: A9 00     LDA #$00
0E/8F53: 8D F0 79  STA $79F0
; start of frame loop
0E/8F56: 20 CA 95  JSR $95CA          ; wait one frame (draw cursors)
0E/8F59: A9 04     LDA #$04
0E/8F5B: 20 F9 96  JSR $96F9          ; update cursor 2 position
0E/8F5E: A5 25     LDA $25
0E/8F60: D0 30     BNE $8F92          ; branch if B button is pressed
0E/8F62: A5 24     LDA $24
0E/8F64: F0 F0     BEQ $8F56          ; branch if A button is not pressed
0E/8F66: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/8F69: AD F0 79  LDA $79F0
0E/8F6C: 4A        LSR 
0E/8F6D: AA        TAX 
0E/8F6E: BD 01 7B  LDA $7B01,X        ; item price
0E/8F71: 20 67 90  JSR $9067          ; get item purchase price
0E/8F74: 20 81 90  JSR $9081          ; take gil
0E/8F77: 90 06     BCC $8F7F
0E/8F79: A9 07     LDA #$07           ; $0207: "You don't have enough gil."
0E/8F7B: 20 3E 96  JSR $963E
0E/8F7E: 60        RTS 
0E/8F7F: AD F0 79  LDA $79F0
0E/8F82: 4A        LSR 
0E/8F83: A8        TAY 
0E/8F84: B9 00 7B  LDA $7B00,Y        ; item id
0E/8F87: A8        TAY 
0E/8F88: 20 C4 90  JSR $90C4          ; shift inventory so first slot is empty
0E/8F8B: 98        TYA 
0E/8F8C: 9D 60 60  STA $6060,X        ; put item in first slot
0E/8F8F: 20 67 95  JSR $9567          ; show item select window
0E/8F92: A9 09     LDA #$09           ; $0209: "Thank you! Anything else?"
0E/8F94: 4C 3E 96  JMP $963E
; unused
0E/8F97: 60        RTS 

; [ shop menu (sell) ]

0E/8F98: A9 01     LDA #$01
0E/8F9A: 85 A4     STA $A4
0E/8F9C: 20 67 95  JSR $9567          ; show item select window
0E/8F9F: 20 EB 94  JSR $94EB          ; save dialogue window variables
0E/8FA2: A9 00     LDA #$00
0E/8FA4: 8D F0 7A  STA $7AF0
0E/8FA7: A9 0A     LDA #$0A           ; $020A: "What will you sell?"
0E/8FA9: 20 3E 96  JSR $963E
0E/8FAC: A9 00     LDA #$00
0E/8FAE: 85 A3     STA $A3
0E/8FB0: 85 24     STA $24
0E/8FB2: 85 25     STA $25
; start of frame loop (item select)
0E/8FB4: 20 CA 95  JSR $95CA          ; wait one frame (draw cursors)
0E/8FB7: A9 08     LDA #$08
0E/8FB9: 20 2D 97  JSR $972D          ; update cursor 3 position
0E/8FBC: A5 25     LDA $25
0E/8FBE: D0 7A     BNE $903A          ; branch if B button is pressed
0E/8FC0: A5 24     LDA $24
0E/8FC2: F0 F0     BEQ $8FB4          ; branch if A button is not pressed
0E/8FC4: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/8FC7: AE F0 7A  LDX $7AF0
0E/8FCA: BD 03 7A  LDA $7A03,X
0E/8FCD: AA        TAX 
0E/8FCE: BD 60 60  LDA $6060,X
0E/8FD1: C9 10     CMP #$10
0E/8FD3: B0 08     BCS $8FDD          ; branch if not a key item
0E/8FD5: A9 0B     LDA #$0B           ; $020B: "I can't take that. Anything else?"
0E/8FD7: 20 3E 96  JSR $963E
0E/8FDA: 4C B4 8F  JMP $8FB4
0E/8FDD: 20 44 90  JSR $9044          ; get item sell price
0E/8FE0: A9 01     LDA #$01
0E/8FE2: 85 A3     STA $A3
0E/8FE4: A9 00     LDA #$00
0E/8FE6: 8D F0 79  STA $79F0
0E/8FE9: A9 0C     LDA #$0C           ; $020C: "I'll give you \x04 Gil for that.OK? Yes No"
0E/8FEB: 20 3E 96  JSR $963E
; start of frame loop (yes/no)
0E/8FEE: 20 CA 95  JSR $95CA          ; wait one frame (draw cursors)
0E/8FF1: A9 04     LDA #$04
0E/8FF3: 20 F9 96  JSR $96F9          ; update cursor 2 position
0E/8FF6: A5 25     LDA $25
0E/8FF8: D0 AD     BNE $8FA7          ; branch if B button is pressed
0E/8FFA: A5 24     LDA $24
0E/8FFC: F0 F0     BEQ $8FEE          ; branch if A button is not pressed
0E/8FFE: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/9001: AD F0 79  LDA $79F0
0E/9004: D0 A1     BNE $8FA7
0E/9006: A5 61     LDA $61
0E/9008: 85 80     STA $80
0E/900A: A5 62     LDA $62
0E/900C: 85 81     STA $81
0E/900E: 20 CF EF  JSR $EFCF          ; give gil
0E/9011: AE F0 7A  LDX $7AF0
0E/9014: BD 03 7A  LDA $7A03,X
0E/9017: AA        TAX 
0E/9018: A9 00     LDA #$00
0E/901A: 9D 60 60  STA $6060,X
0E/901D: 20 39 91  JSR $9139          ; open gil window
0E/9020: 20 23 95  JSR $9523          ; restore dialogue window variables
0E/9023: A5 1C     LDA $1C
0E/9025: 85 3E     STA $3E
0E/9027: A5 1D     LDA $1D
0E/9029: 85 3F     STA $3F
0E/902B: 20 AC E7  JSR $E7AC
0E/902E: A9 09     LDA #$09           ; $0209: "Thank you! Anything else?"
0E/9030: 20 3E 96  JSR $963E
0E/9033: A9 00     LDA #$00
0E/9035: 85 A3     STA $A3
0E/9037: 4C B4 8F  JMP $8FB4
; exit sell menu
0E/903A: A9 09     LDA #$09           ; $0209: "Thank you! Anything else?"
0E/903C: 20 3E 96  JSR $963E
0E/903F: A9 00     LDA #$00
0E/9041: 85 A3     STA $A3
0E/9043: 60        RTS 

; [ get item sell price ]

; $00-$BF are sell prices corresponding to item id

0E/9044: 0A        ASL 
0E/9045: AA        TAX 
0E/9046: B0 0B     BCS $9053
0E/9048: BD 00 80  LDA $8000,X        ; 0E/8000 (item prices)
0E/904B: 85 61     STA $61
0E/904D: BD 01 80  LDA $8001,X
0E/9050: 85 62     STA $62
0E/9052: 60        RTS 
0E/9053: BD 00 81  LDA $8100,X
0E/9056: 85 61     STA $61
0E/9058: BD 01 81  LDA $8101,X
0E/905B: 85 62     STA $62
0E/905D: 60        RTS 

; [ cursor sound effect (confirm) ]

0E/905E: A9 00     LDA #$00
0E/9060: 85 24     STA $24
0E/9062: 85 25     STA $25
0E/9064: 4C 2E DB  JMP $DB2E          ; cursor sound effect (confirm)

; [ get item purchase price ]

; $E0-$FF are purchase prices, index is from shop data

0E/9067: 0A        ASL 
0E/9068: AA        TAX 
0E/9069: B0 0B     BCS $9076
0E/906B: BD 00 80  LDA $8000,X        ; 0E/8000 (item prices)
0E/906E: 85 80     STA $80
0E/9070: BD 01 80  LDA $8001,X
0E/9073: 85 81     STA $81
0E/9075: 60        RTS 
0E/9076: BD 00 81  LDA $8100,X
0E/9079: 85 80     STA $80
0E/907B: BD 01 81  LDA $8101,X
0E/907E: 85 81     STA $81
0E/9080: 60        RTS 

; [ take gil ]

; +$80: gil amount
; set carry if not enough gil

0E/9081: AD 1E 60  LDA $601E
0E/9084: D0 14     BNE $909A
0E/9086: AD 1D 60  LDA $601D
0E/9089: C5 81     CMP $81
0E/908B: 90 0B     BCC $9098
0E/908D: F0 02     BEQ $9091
0E/908F: B0 09     BCS $909A
0E/9091: AD 1C 60  LDA $601C          ; gil
0E/9094: C5 80     CMP $80
0E/9096: B0 02     BCS $909A
0E/9098: 38        SEC 
0E/9099: 60        RTS 
0E/909A: AD 1C 60  LDA $601C
0E/909D: 38        SEC 
0E/909E: E5 80     SBC $80
0E/90A0: 8D 1C 60  STA $601C
0E/90A3: AD 1D 60  LDA $601D
0E/90A6: E5 81     SBC $81
0E/90A8: 8D 1D 60  STA $601D
0E/90AB: AD 1E 60  LDA $601E
0E/90AE: E9 00     SBC #$00
0E/90B0: 8D 1E 60  STA $601E
0E/90B3: 18        CLC 
0E/90B4: 60        RTS 

; [ find first empty inventory slot ]

; X: empty slot offset (out)
; set carry if inventory is full

0E/90B5: A2 00     LDX #$00
0E/90B7: BD 60 60  LDA $6060,X        ; inventory
0E/90BA: D0 02     BNE $90BE
0E/90BC: 18        CLC 
0E/90BD: 60        RTS 
0E/90BE: E8        INX 
0E/90BF: E0 20     CPX #$20
0E/90C1: 90 F4     BCC $90B7
0E/90C3: 60        RTS 

; [ shift inventory so first slot is empty ]

0E/90C4: 20 B5 90  JSR $90B5          ; find first empty inventory slot
0E/90C7: E0 00     CPX #$00
0E/90C9: F0 0A     BEQ $90D5
0E/90CB: CA        DEX 
0E/90CC: BD 60 60  LDA $6060,X
0E/90CF: 9D 61 60  STA $6061,X
0E/90D2: 4C C7 90  JMP $90C7
0E/90D5: 60        RTS 

; [  ]

0E/90D6: A9 06     LDA #$06           ; $0206: "What would you like?"
0E/90D8: 20 3E 96  JSR $963E
0E/90DB: A5 38     LDA $38
0E/90DD: 18        CLC 
0E/90DE: 69 0C     ADC #$0C
0E/90E0: 29 3F     AND #$3F
0E/90E2: 85 38     STA $38
0E/90E4: A5 97     LDA $97
0E/90E6: 18        CLC 
0E/90E7: 69 0C     ADC #$0C
0E/90E9: 85 97     STA $97
0E/90EB: A5 3C     LDA $3C
0E/90ED: 38        SEC 
0E/90EE: E9 0C     SBC #$0C
0E/90F0: 85 3C     STA $3C
0E/90F2: A9 20     LDA #$20
0E/90F4: 85 3E     STA $3E
0E/90F6: A9 7B     LDA #$7B
0E/90F8: 85 3F     STA $3F
0E/90FA: 4C AC E7  JMP $E7AC

; [ load shop item list text ]

0E/90FD: A0 00     LDY #$00
0E/90FF: A2 00     LDX #$00
0E/9101: B9 15 91  LDA $9115,Y
0E/9104: C9 FF     CMP #$FF
0E/9106: D0 04     BNE $910C
0E/9108: BD 00 7B  LDA $7B00,X        ; shop data
0E/910B: E8        INX 
0E/910C: 99 20 7B  STA $7B20,Y        ; text buffer
0E/910F: C8        INY 
0E/9110: C0 24     CPY #$24
0E/9112: 90 ED     BCC $9101
0E/9114: 60        RTS 

; shop item list text string (replace $FF's with shop data)
0E/9115: 16 00 18 FF 14 09 19 FF 01 16 00 18 FF 14 09 19
0E/9125: FF 01 16 00 18 FF 14 09 19 FF 01 16 00 18 FF 14
0E/9135: 09 19 FF 00

; [ open gil window ]

0E/9139: A9 03     LDA #$03           ; gil window
0E/913B: 85 96     STA $96
0E/913D: 20 1E E9  JSR $E91E          ; open window
0E/9140: A9 1C     LDA #$1C           ; $021C: "\x05 Gil"
0E/9142: 4C F2 95  JMP $95F2          ; load text (multi-page)

; [ npc dialogue ]

0E/9145: A9 00     LDA #$00
0E/9147: 8D F0 78  STA $78F0          ; clear cursor positions
0E/914A: 8D F0 79  STA $79F0
0E/914D: 8D F0 7A  STA $7AF0
0E/9150: 8D F1 79  STA $79F1
0E/9153: A9 0E     LDA #$0E
0E/9155: 85 57     STA $57
0E/9157: A5 A0     LDA $A0            ; npc id
0E/9159: C9 C0     CMP #$C0
0E/915B: 90 03     BCC $9160          ; branch if not a shop
0E/915D: 4C D0 8E  JMP $8ED0          ; shop window
0E/9160: 20 CA E8  JSR $E8CA          ; open npc dialogue window
0E/9163: AD F1 79  LDA $79F1
0E/9166: 85 9F     STA $9F
0E/9168: A5 92     LDA $92
0E/916A: 85 9D     STA $9D
0E/916C: A5 9F     LDA $9F
0E/916E: F0 04     BEQ $9174
0E/9170: A9 49     LDA #$49           ; play song $09
0E/9172: 85 E0     STA $E0
0E/9174: 20 B6 8E  JSR $8EB6          ; init player input
0E/9177: A9 01     LDA #$01           ; dialogue choice window
0E/9179: 85 96     STA $96
0E/917B: 20 1E E9  JSR $E91E          ; open window
0E/917E: A9 1A     LDA #$1A
0E/9180: 20 F2 95  JSR $95F2          ; load text (multi-page)
0E/9183: A9 01     LDA #$01
0E/9185: 85 A2     STA $A2
; frame loop
0E/9187: 20 CA 95  JSR $95CA          ; wait one frame (draw cursors)
0E/918A: A9 04     LDA #$04
0E/918C: 20 C5 96  JSR $96C5          ; get cursor 1 position
0E/918F: A5 25     LDA $25
0E/9191: D0 25     BNE $91B8          ; branch if B button is pressed
0E/9193: A5 24     LDA $24
0E/9195: F0 F0     BEQ $9187          ; branch if A button is not pressed
0E/9197: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/919A: BA        TSX 
0E/919B: 86 04     STX $04
0E/919D: AD F0 78  LDA $78F0          ; cursor position
; ask
0E/91A0: D0 06     BNE $91A8
0E/91A2: 20 04 92  JSR $9204          ; keyword select window
0E/91A5: 4C 74 91  JMP $9174
; learn
0E/91A8: C9 04     CMP #$04
0E/91AA: D0 06     BNE $91B2
0E/91AC: 20 3B 93  JSR $933B          ; learn keyword window
0E/91AF: 4C 74 91  JMP $9174
; item
0E/91B2: 20 81 93  JSR $9381
0E/91B5: 4C 74 91  JMP $9174
; close window
0E/91B8: 20 2E DB  JSR $DB2E          ; cursor sound effect (confirm)
0E/91BB: 20 E3 95  JSR $95E3
0E/91BE: 20 00 FE  JSR $FE00          ; wait for vblank
0E/91C1: A9 02     LDA #$02
0E/91C3: 8D 14 40  STA $4014
0E/91C6: 20 4F C7  JSR $C74F          ; update sound
0E/91C9: 20 64 D1  JSR $D164          ; close text window (dialogue)
0E/91CC: 20 6F D1  JSR $D16F          ; close text window (keyword/item)
0E/91CF: A9 00     LDA #$00
0E/91D1: 85 24     STA $24
0E/91D3: 85 25     STA $25
0E/91D5: 85 22     STA $22
0E/91D7: 85 23     STA $23
0E/91D9: 85 47     STA $47
0E/91DB: 60        RTS 

; [  ]

0E/91DC: 20 A9 DB  JSR $DBA9          ; read joypad registers
0E/91DF: A5 20     LDA $20
0E/91E1: 85 03     STA $03
0E/91E3: 20 A9 DB  JSR $DBA9          ; read joypad registers
0E/91E6: 20 CA 95  JSR $95CA          ; wait one frame (draw cursors)
0E/91E9: A5 20     LDA $20
0E/91EB: C5 03     CMP $03
0E/91ED: F0 F4     BEQ $91E3
0E/91EF: 85 03     STA $03
0E/91F1: 20 A9 DB  JSR $DBA9          ; read joypad registers
0E/91F4: 20 CA 95  JSR $95CA          ; wait one frame (draw cursors)
0E/91F7: A5 20     LDA $20
0E/91F9: C5 03     CMP $03
0E/91FB: F0 F4     BEQ $91F1
0E/91FD: A6 04     LDX $04
0E/91FF: 9A        TXS 
0E/9200: 4C B8 91  JMP $91B8

; [ keyword select window ]

; starts at 0E/9204

0E/9203: 60        RTS 
; starts here
0E/9204: A9 01     LDA #$01
0E/9206: 85 A4     STA $A4
0E/9208: 20 5B 95  JSR $955B          ; show keyword select window
0E/920B: 20 EB 94  JSR $94EB          ; save dialogue window variables
0E/920E: A9 00     LDA #$00
0E/9210: 8D F0 7A  STA $7AF0
0E/9213: 20 CA 95  JSR $95CA          ; wait one frame (draw cursors)
0E/9216: A9 08     LDA #$08
0E/9218: 20 2D 97  JSR $972D          ; update cursor 3 position
0E/921B: A5 25     LDA $25
0E/921D: D0 E4     BNE $9203
0E/921F: A5 24     LDA $24
0E/9221: F0 F0     BEQ $9213
0E/9223: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/9226: AE F0 7A  LDX $7AF0          ; cursor position
0E/9229: BD 03 7A  LDA $7A03,X        ; keyword slot
0E/922C: AA        TAX 
0E/922D: BD 80 60  LDA $6080,X        ; keyword id
0E/9230: F0 03     BEQ $9235
0E/9232: 38        SEC 
0E/9233: E9 F0     SBC #$F0
0E/9235: AA        TAX 
0E/9236: BD 20 7B  LDA $7B20,X        ; npc's response to keyword
0E/9239: D0 08     BNE $9243          ; branch if npc has a valid response
0E/923B: A9 43     LDA #$43           ; $0243: "?"
0E/923D: 20 3E 96  JSR $963E
0E/9240: 4C 03 92  JMP $9203
0E/9243: 86 08     STX $08
0E/9245: 20 14 96  JSR $9614
0E/9248: AD F1 79  LDA $79F1
0E/924B: F0 04     BEQ $9251
0E/924D: A9 49     LDA #$49           ; play song $09
0E/924F: 85 E0     STA $E0
0E/9251: A5 A0     LDA $A0            ; A = npc id
0E/9253: A6 08     LDX $08            ; X = keyword id
; npc $01: 
0E/9255: C9 01     CMP #$01
0E/9257: D0 0C     BNE $9265
0E/9259: E0 02     CPX #$02           ; mythril
0E/925B: D0 19     BNE $9276
0E/925D: A0 50     LDY #$50
0E/925F: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/9262: 4C 03 92  JMP $9203
; npc $12
0E/9265: C9 12     CMP #$12
0E/9267: D0 14     BNE $927D
0E/9269: E0 0C     CPX #$0C
0E/926B: F0 0C     BEQ $9279
0E/926D: E0 0D     CPX #$0D
0E/926F: D0 05     BNE $9276
0E/9271: A0 5B     LDY #$5B
0E/9273: 20 07 99  JSR $9907          ; hide npc
0E/9276: 4C 03 92  JMP $9203
0E/9279: A0 5A     LDY #$5A
0E/927B: D0 F6     BNE $9273
; npc $13: josef (salamand)
0E/927D: C9 13     CMP #$13
0E/927F: D0 17     BNE $9298
0E/9281: E0 06     CPX #$06           ; Goddess's Bell
0E/9283: D0 F1     BNE $9276
0E/9285: A0 13     LDY #$13
0E/9287: 20 07 99  JSR $9907          ; hide npc
0E/928A: A9 05     LDA #$05           ; josef
0E/928C: 85 61     STA $61
0E/928E: 20 18 C0  JSR $C018          ; load guest character properties
0E/9291: A9 4A     LDA #$4A           ; play song $0A
0E/9293: 85 E0     STA $E0
0E/9295: 4C 03 92  JMP $9203
; npc $25
0E/9298: C9 25     CMP #$25
0E/929A: D0 17     BNE $92B3
0E/929C: E0 0B     CPX #$0B
0E/929E: D0 D6     BNE $9276
0E/92A0: AD 1B 60  LDA $601B
0E/92A3: 29 02     AND #$02
0E/92A5: F0 CF     BEQ $9276          ; branch if player doesn't have ring
0E/92A7: A9 47     LDA #$47           ; play song $07
0E/92A9: 85 E0     STA $E0
0E/92AB: A9 0A     LDA #$0A           ; item $0A: WyvernEgg
0E/92AD: 20 73 95  JSR $9573          ; add item to inventory (unique)
0E/92B0: 4C 03 92  JMP $9203
; npc $2E
0E/92B3: C9 2E     CMP #$2E
0E/92B5: D0 09     BNE $92C0
0E/92B7: E0 0F     CPX #$0F
0E/92B9: D0 BB     BNE $9276
0E/92BB: A0 2E     LDY #$2E
0E/92BD: 4C 73 92  JMP $9273
; npc $30
0E/92C0: C9 30     CMP #$30
0E/92C2: D0 09     BNE $92CD
0E/92C4: E0 01     CPX #$01
0E/92C6: D0 AE     BNE $9276
0E/92C8: A0 30     LDY #$30
0E/92CA: 4C 73 92  JMP $9273
; npc $31: scott
0E/92CD: C9 31     CMP #$31
0E/92CF: D0 13     BNE $92E4
0E/92D1: E0 01     CPX #$01           ; said keyword $01: wild rose
0E/92D3: D0 63     BNE $9338
0E/92D5: A9 01     LDA #$01           ; item $01: Ring
0E/92D7: 20 73 95  JSR $9573          ; add item to inventory (unique)
0E/92DA: A0 31     LDY #$31           ; scott
0E/92DC: 20 07 99  JSR $9907          ; hide npc
0E/92DF: A0 10     LDY #$10           ; paul (altair)
0E/92E1: 4C 73 92  JMP $9273
; npc $32: dreadnought guard
0E/92E4: C9 32     CMP #$32
0E/92E6: D0 15     BNE $92FD
0E/92E8: E0 01     CPX #$01           ; Wild Rose
0E/92EA: D0 4C     BNE $9338
0E/92EC: AD 03 7B  LDA $7B03          ; battle $6E
0E/92EF: 85 6A     STA $6A
0E/92F1: A9 20     LDA #$20
0E/92F3: 85 44     STA $44
0E/92F5: A0 32     LDY #$32           ; npc $32 (dreadnought guard)
0E/92F7: 20 07 99  JSR $9907          ; hide npc
0E/92FA: 4C DC 91  JMP $91DC
; npc $35
0E/92FD: C9 35     CMP #$35
0E/92FF: D0 15     BNE $9316
0E/9301: E0 03     CPX #$03
0E/9303: D0 33     BNE $9338
0E/9305: A0 23     LDY #$23
0E/9307: 20 9E 98  JSR $989E          ; check event switch
0E/930A: F0 2C     BEQ $9338
0E/930C: A0 1B     LDY #$1B
0E/930E: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/9311: A0 35     LDY #$35
0E/9313: 4C 73 92  JMP $9273
; npc $58: deist npc 4
0E/9316: C9 58     CMP #$58
0E/9318: D0 1E     BNE $9338
0E/931A: E0 0A     CPX #$0A           ; Dragoon
0E/931C: D0 1A     BNE $9338
0E/931E: AD 1B 60  LDA $601B
0E/9321: 29 02     AND #$02
0E/9323: F0 13     BEQ $9338          ; branch if player doesn't have pendant
0E/9325: A9 5F     LDA #$5F           ; item $5F: Excalibr
0E/9327: 20 73 95  JSR $9573          ; add item to inventory (unique)
0E/932A: A9 47     LDA #$47           ; play song $07
0E/932C: 85 E0     STA $E0
0E/932E: A0 57     LDY #$57
0E/9330: 20 07 99  JSR $9907          ; hide npc
0E/9333: A0 58     LDY #$58
0E/9335: 4C 73 92  JMP $9273
0E/9338: 4C 03 92  JMP $9203          ; return

; [ learn keyword window ]

0E/933B: A5 9F     LDA $9F
0E/933D: D0 06     BNE $9345
0E/933F: A9 3F     LDA #$3F           ; $023F: "Nothing to learn."
0E/9341: 20 3E 96  JSR $963E
0E/9344: 60        RTS 
0E/9345: A9 00     LDA #$00
0E/9347: 8D F0 79  STA $79F0
0E/934A: AD F1 79  LDA $79F1
0E/934D: D0 05     BNE $9354
0E/934F: A5 9D     LDA $9D
0E/9351: 20 14 96  JSR $9614
0E/9354: A9 01     LDA #$01
0E/9356: 85 A3     STA $A3
0E/9358: 20 CA 95  JSR $95CA          ; wait one frame (draw cursors)
0E/935B: A9 04     LDA #$04
0E/935D: 20 F9 96  JSR $96F9          ; update cursor 2 position
0E/9360: A5 25     LDA $25
0E/9362: D0 1B     BNE $937F
0E/9364: A5 24     LDA $24
0E/9366: F0 F0     BEQ $9358
0E/9368: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/936B: AE F0 79  LDX $79F0
0E/936E: BD 03 79  LDA $7903,X
0E/9371: 20 97 95  JSR $9597          ; learn keyword
0E/9374: 20 5B 95  JSR $955B          ; show keyword select window
0E/9377: A9 04     LDA #$04
0E/9379: 8D F0 78  STA $78F0
0E/937C: 4C 58 93  JMP $9358
0E/937F: 60        RTS 

; [ item select window ]

; starts at 0E/9381

0E/9380: 60        RTS 
; starts here
0E/9381: A9 01     LDA #$01
0E/9383: 85 A4     STA $A4
0E/9385: 20 67 95  JSR $9567          ; show item select window
0E/9388: 20 EB 94  JSR $94EB          ; save dialogue window variables
0E/938B: A9 00     LDA #$00
0E/938D: 8D F0 7A  STA $7AF0
0E/9390: 20 CA 95  JSR $95CA          ; wait one frame (draw cursors)
0E/9393: A9 08     LDA #$08
0E/9395: 20 2D 97  JSR $972D          ; update cursor 3 position
0E/9398: A5 25     LDA $25
0E/939A: D0 E4     BNE $9380          ; return if B button pressed
0E/939C: A5 24     LDA $24
0E/939E: F0 F0     BEQ $9390          ; branch if A button is not pressed
0E/93A0: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/93A3: AE F0 7A  LDX $7AF0
0E/93A6: BD 03 7A  LDA $7A03,X        ; item slot
0E/93A9: AA        TAX 
0E/93AA: BD 60 60  LDA $6060,X        ; item id
0E/93AD: AA        TAX 
0E/93AE: C9 10     CMP #$10
0E/93B0: B0 05     BCS $93B7
0E/93B2: BD 30 7B  LDA $7B30,X        ; npc's response to this item
0E/93B5: D0 08     BNE $93BF          ; branch if npc has a valid response
0E/93B7: A9 44     LDA #$44           ; $0244: "You can't use this."
0E/93B9: 20 3E 96  JSR $963E
0E/93BC: 4C 80 93  JMP $9380
0E/93BF: 86 08     STX $08
0E/93C1: 20 14 96  JSR $9614
0E/93C4: AD F1 79  LDA $79F1
0E/93C7: F0 04     BEQ $93CD
0E/93C9: A9 49     LDA #$49           ; play song $09
0E/93CB: 85 E0     STA $E0
0E/93CD: A5 A0     LDA $A0            ; A = npc id
0E/93CF: A6 08     LDX $08            ; X = key item id
; npc $19: ricard (leviathan)
0E/93D1: C9 19     CMP #$19
0E/93D3: D0 17     BNE $93EC
0E/93D5: E0 0D     CPX #$0D           ; CrystlRod
0E/93D7: D0 10     BNE $93E9
0E/93D9: A9 08     LDA #$08           ; ricard
0E/93DB: 85 61     STA $61
0E/93DD: 20 18 C0  JSR $C018          ; load guest character properties
0E/93E0: A9 4A     LDA #$4A           ; play song $0A
0E/93E2: 85 E0     STA $E0
0E/93E4: A0 19     LDY #$19
0E/93E6: 4C F6 93  JMP $93F6
0E/93E9: 4C 80 93  JMP $9380
; npc $32: dreadnought guard
0E/93EC: C9 32     CMP #$32
0E/93EE: D0 0C     BNE $93FC
0E/93F0: E0 03     CPX #$03           ; Pass
0E/93F2: D0 F5     BNE $93E9
0E/93F4: A0 32     LDY #$32
0E/93F6: 20 07 99  JSR $9907          ; hide npc
0E/93F9: 4C 80 93  JMP $9380
; npc $34: tobul
0E/93FC: C9 34     CMP #$34
0E/93FE: D0 3D     BNE $943D
0E/9400: E0 04     CPX #$04           ; Mythril
0E/9402: D0 E5     BNE $93E9
0E/9404: A9 04     LDA #$04           ; item $04: Mythril
0E/9406: 20 8C 95  JSR $958C          ; remove item from inventory
0E/9409: A9 47     LDA #$47           ; play song $07
0E/940B: 85 E0     STA $E0
0E/940D: AD 1A 60  LDA $601A          ; remove mythril
0E/9410: 29 EF     AND #$EF
0E/9412: 8D 1A 60  STA $601A
0E/9415: A0 C3     LDY #$C3           ; altair mythril weapon shop
0E/9417: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/941A: A0 C4     LDY #$C4           ; altair mythril armor shop
0E/941C: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/941F: A0 CA     LDY #$CA           ; unknown mythril weapon shop
0E/9421: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/9424: A0 23     LDY #$23           ; borghen (bafsk)
0E/9426: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/9429: A0 67     LDY #$67           ; child (rebel base)
0E/942B: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/942E: A0 68     LDY #$68           ; old man (rebel base)
0E/9430: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/9433: A0 69     LDY #$69           ; rebel (rebel base)
0E/9435: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/9438: A0 1A     LDY #$1A           ; dark knight (bafsk)
0E/943A: 4C F6 93  JMP $93F6
; npc $38: sunfire holder
0E/943D: C9 38     CMP #$38
0E/943F: D0 1D     BNE $945E
0E/9441: E0 07     CPX #$07           ; Egil'sTorch
0E/9443: D0 A4     BNE $93E9
0E/9445: A9 08     LDA #$08           ; item $08: Sunfire
0E/9447: 20 73 95  JSR $9573          ; add item to inventory (unique)
0E/944A: A0 01     LDY #$01           ; hilda (altair throne room)
0E/944C: 20 07 99  JSR $9907          ; hide npc
0E/944F: A0 DD     LDY #$DD           ; clear event switch $605B.5
0E/9451: 20 07 99  JSR $9907          ; hide npc
0E/9454: A0 07     LDY #$07           ; cid (poft)
0E/9456: 20 07 99  JSR $9907          ; hide npc
0E/9459: A0 38     LDY #$38           ; sunfire holder
0E/945B: 4C F6 93  JMP $93F6
; npc $39: dreadnought core
0E/945E: C9 39     CMP #$39
0E/9460: D0 0A     BNE $946C
0E/9462: E0 08     CPX #$08           ; Sunfire
0E/9464: D0 83     BNE $93E9
0E/9466: AD 03 7B  LDA $7B03          ; do event $09: sunfire destroys dreadnought
0E/9469: 4C B3 94  JMP $94B3
; npc $3B: life spring
0E/946C: C9 3B     CMP #$3B
0E/946E: D0 1A     BNE $948A
0E/9470: E0 0A     CPX #$0A           ; WyvernEgg
0E/9472: D0 66     BNE $94DA
0E/9474: A9 0A     LDA #$0A           ; item $0A: WyvernEgg
0E/9476: 20 8C 95  JSR $958C          ; remove item from inventory
0E/9479: A9 47     LDA #$47           ; play song $07
0E/947B: 85 E0     STA $E0
0E/947D: AD 1B 60  LDA $601B          ; remove wyvern egg
0E/9480: 29 FB     AND #$FB
0E/9482: 8D 1B 60  STA $601B
0E/9485: A0 25     LDY #$25
0E/9487: 4C F6 93  JMP $93F6
; npc $40: doppelganger
0E/948A: C9 40     CMP #$40
0E/948C: D0 09     BNE $9497
0E/948E: E0 0C     CPX #$0C           ; BlackMask
0E/9490: D0 48     BNE $94DA
0E/9492: A0 40     LDY #$40
0E/9494: 4C F6 93  JMP $93F6
; npc $46: fynn castle mirror
0E/9497: C9 46     CMP #$46
0E/9499: D0 1D     BNE $94B8
0E/949B: E0 09     CPX #$09           ; Pendant
0E/949D: D0 3B     BNE $94DA
0E/949F: A0 45     LDY #$45           ; center orb (mysidian tower)
0E/94A1: 20 9E 98  JSR $989E          ; check event switch
0E/94A4: D0 34     BNE $94DA
0E/94A6: A9 0E     LDA #$0E           ; item $0E: Wyvern
0E/94A8: 20 73 95  JSR $9573          ; add item to inventory (unique)
0E/94AB: A0 46     LDY #$46           ; fynn castle mirror
0E/94AD: 20 07 99  JSR $9907          ; hide npc
0E/94B0: AD 05 7B  LDA $7B05          ; do event $0E: wyvern hatches
0E/94B3: 85 6C     STA $6C
0E/94B5: 4C DC 91  JMP $91DC
; npc $54: kashuan keep door
0E/94B8: C9 54     CMP #$54
0E/94BA: D0 0D     BNE $94C9
0E/94BC: E0 06     CPX #$06           ; \bellGoddess's
0E/94BE: D0 1A     BNE $94DA
0E/94C0: A9 47     LDA #$47           ; play song $07
0E/94C2: 85 E0     STA $E0
0E/94C4: A0 54     LDY #$54
0E/94C6: 4C F6 93  JMP $93F6
; npc $59: mysidian statue
0E/94C9: C9 59     CMP #$59
0E/94CB: D0 0D     BNE $94DA
0E/94CD: E0 0B     CPX #$0B           ; WhiteMask
0E/94CF: D0 09     BNE $94DA
0E/94D1: A9 47     LDA #$47           ; play song $07
0E/94D3: 85 E0     STA $E0
0E/94D5: A0 59     LDY #$59
0E/94D7: 20 07 99  JSR $9907          ; hide npc
0E/94DA: 4C 80 93  JMP $9380          ; return

; [  ]

; unused ???

0E/94DD: 20 23 95  JSR $9523          ; restore dialogue window variables
0E/94E0: A5 1C     LDA $1C
0E/94E2: 85 3E     STA $3E
0E/94E4: A5 1D     LDA $1D
0E/94E6: 85 3F     STA $3F
0E/94E8: 4C AC E7  JMP $E7AC

; [ save dialogue window variables ]

0E/94EB: A5 38     LDA $38
0E/94ED: 8D F8 7A  STA $7AF8
0E/94F0: A5 39     LDA $39
0E/94F2: 8D F9 7A  STA $7AF9
0E/94F5: A5 97     LDA $97
0E/94F7: 8D FA 7A  STA $7AFA
0E/94FA: A5 98     LDA $98
0E/94FC: 8D FB 7A  STA $7AFB
0E/94FF: A5 3C     LDA $3C
0E/9501: 8D FC 7A  STA $7AFC
0E/9504: A5 3D     LDA $3D
0E/9506: 8D FD 7A  STA $7AFD
0E/9509: A5 93     LDA $93
0E/950B: 8D F7 7A  STA $7AF7
0E/950E: A5 1C     LDA $1C
0E/9510: 8D FE 7A  STA $7AFE
0E/9513: A5 1D     LDA $1D
0E/9515: 8D FF 7A  STA $7AFF
0E/9518: A5 3E     LDA $3E
0E/951A: 8D F4 7A  STA $7AF4
0E/951D: A5 3F     LDA $3F
0E/951F: 8D F5 7A  STA $7AF5
0E/9522: 60        RTS 

; [ restore dialogue window variables ]

0E/9523: AD F8 7A  LDA $7AF8
0E/9526: 85 38     STA $38
0E/9528: AD F9 7A  LDA $7AF9
0E/952B: 85 39     STA $39
0E/952D: AD FA 7A  LDA $7AFA
0E/9530: 85 97     STA $97
0E/9532: AD FB 7A  LDA $7AFB
0E/9535: 85 98     STA $98
0E/9537: AD FC 7A  LDA $7AFC
0E/953A: 85 3C     STA $3C
0E/953C: AD FD 7A  LDA $7AFD
0E/953F: 85 3D     STA $3D
0E/9541: AD F7 7A  LDA $7AF7
0E/9544: 85 93     STA $93
0E/9546: AD FE 7A  LDA $7AFE
0E/9549: 85 1C     STA $1C
0E/954B: AD FF 7A  LDA $7AFF
0E/954E: 85 1D     STA $1D
0E/9550: AD F4 7A  LDA $7AF4
0E/9553: 85 3E     STA $3E
0E/9555: AD F5 7A  LDA $7AF5
0E/9558: 85 3F     STA $3F
0E/955A: 60        RTS 

; [ show keyword select window ]

0E/955B: A9 02     LDA #$02
0E/955D: 85 96     STA $96
0E/955F: 20 1E E9  JSR $E91E          ; open window
0E/9562: A9 41     LDA #$41
0E/9564: 4C 03 96  JMP $9603

; [ show item select select window ]

0E/9567: A9 02     LDA #$02
0E/9569: 85 96     STA $96
0E/956B: 20 1E E9  JSR $E91E          ; open window
0E/956E: A9 42     LDA #$42
0E/9570: 4C 03 96  JMP $9603

; [ add item to inventory (unique) ]

0E/9573: 20 7C 95  JSR $957C          ; find item in inventory
0E/9576: B0 03     BCS $957B          ; return if found
0E/9578: 4C 73 98  JMP $9873          ; add item to inventory
0E/957B: 60        RTS 

; [ find item in inventory ]

; return carry set if found

0E/957C: A2 00     LDX #$00
0E/957E: DD 60 60  CMP $6060,X
0E/9581: F0 07     BEQ $958A
0E/9583: E8        INX 
0E/9584: E0 20     CPX #$20
0E/9586: 90 F6     BCC $957E
0E/9588: 18        CLC 
0E/9589: 60        RTS 
0E/958A: 38        SEC 
0E/958B: 60        RTS 

; [ remove item from inventory ]

0E/958C: 20 7C 95  JSR $957C          ; find item in inventory
0E/958F: 90 05     BCC $9596
0E/9591: A9 00     LDA #$00
0E/9593: 9D 60 60  STA $6060,X
0E/9596: 60        RTS 

; [ learn keyword ]

; A: keyword id

0E/9597: 85 80     STA $80
0E/9599: A2 0F     LDX #$0F
0E/959B: DD 80 60  CMP $6080,X
0E/959E: F0 18     BEQ $95B8
0E/95A0: CA        DEX 
0E/95A1: 10 F8     BPL $959B
0E/95A3: A2 0E     LDX #$0E
0E/95A5: BD 80 60  LDA $6080,X
0E/95A8: 9D 81 60  STA $6081,X
0E/95AB: CA        DEX 
0E/95AC: 10 F7     BPL $95A5
0E/95AE: A5 80     LDA $80
0E/95B0: 8D 80 60  STA $6080
0E/95B3: A9 49     LDA #$49           ; play song $09
0E/95B5: 85 E0     STA $E0
0E/95B7: 60        RTS 
0E/95B8: CA        DEX 
0E/95B9: 30 0E     BMI $95C9
0E/95BB: BD 80 60  LDA $6080,X
0E/95BE: 9D 81 60  STA $6081,X
0E/95C1: CA        DEX 
0E/95C2: 10 F7     BPL $95BB
0E/95C4: A5 80     LDA $80
0E/95C6: 8D 80 60  STA $6080
0E/95C9: 60        RTS 

; [ wait one frame (draw cursors) ]

; used for dialogue with cursors

0E/95CA: 20 00 FE  JSR $FE00          ; wait for vblank
0E/95CD: A9 02     LDA #$02
0E/95CF: 8D 14 40  STA $4014          ; copy oam data to ppu
0E/95D2: E6 F0     INC $F0
0E/95D4: 20 4F C7  JSR $C74F          ; update sound
0E/95D7: 20 E3 95  JSR $95E3
0E/95DA: 20 52 96  JSR $9652          ; draw cursor sprite 1
0E/95DD: 20 63 96  JSR $9663          ; draw cursor sprite 2
0E/95E0: 4C 74 96  JMP $9674          ; draw cursor sprite 3

; [  ]

0E/95E3: A2 2F     LDX #$2F
0E/95E5: A9 F0     LDA #$F0
0E/95E7: 9D 10 02  STA $0210,X        ; hide sprites 0-11
0E/95EA: CA        DEX 
0E/95EB: 10 FA     BPL $95E7
0E/95ED: A9 10     LDA #$10
0E/95EF: 85 26     STA $26
0E/95F1: 60        RTS 

; [ load text (multi-page) ]

0E/95F2: 85 92     STA $92
0E/95F4: A9 0A     LDA #$0A           ; 0A/8400
0E/95F6: 85 93     STA $93
0E/95F8: A9 00     LDA #$00
0E/95FA: 85 94     STA $94
0E/95FC: A9 84     LDA #$84
0E/95FE: 85 95     STA $95
0E/9600: 4C 54 EA  JMP $EA54          ; load text (multi-page)

; [ load text (single-page) ]

0E/9603: 85 92     STA $92
0E/9605: A9 0A     LDA #$0A           ; 0A/8400
0E/9607: 85 93     STA $93
0E/9609: A9 00     LDA #$00
0E/960B: 85 94     STA $94
0E/960D: A9 84     LDA #$84
0E/960F: 85 95     STA $95
0E/9611: 4C 8C EA  JMP $EA8C          ; load text (single-page)

; [  ]

0E/9614: 48        PHA 
0E/9615: 20 64 D1  JSR $D164          ; close text window (dialogue)
0E/9618: A9 00     LDA #$00
0E/961A: 85 96     STA $96
0E/961C: 20 1E E9  JSR $E91E          ; open window
0E/961F: A9 00     LDA #$00
0E/9621: 8D F1 79  STA $79F1
0E/9624: 68        PLA 
0E/9625: 85 92     STA $92
0E/9627: A9 00     LDA #$00           ; 0A/8000
0E/9629: 85 94     STA $94
0E/962B: A9 80     LDA #$80
0E/962D: 85 95     STA $95
0E/962F: A5 A0     LDA $A0
0E/9631: A2 06     LDX #$06
0E/9633: C9 60     CMP #$60
0E/9635: 90 02     BCC $9639
0E/9637: A2 0A     LDX #$0A
0E/9639: 86 93     STX $93
0E/963B: 4C 54 EA  JMP $EA54          ; load text (multi-page)

; [ display menu message ??? ]

0E/963E: 48        PHA 
0E/963F: 20 64 D1  JSR $D164          ; close text window (dialogue)
0E/9642: A9 00     LDA #$00
0E/9644: 85 96     STA $96
0E/9646: 20 1E E9  JSR $E91E          ; open window
0E/9649: A9 00     LDA #$00
0E/964B: 8D F1 79  STA $79F1
0E/964E: 68        PLA 
0E/964F: 4C F2 95  JMP $95F2          ; load text (multi-page)

; [ draw cursor sprite 1 ]

0E/9652: A5 A2     LDA $A2
0E/9654: D0 01     BNE $9657
0E/9656: 60        RTS 
0E/9657: AC F0 78  LDY $78F0
0E/965A: BE 00 78  LDX $7800,Y
0E/965D: B9 01 78  LDA $7801,Y
0E/9660: 4C 82 96  JMP $9682

; [ draw cursor sprite 2 ]

0E/9663: A5 A3     LDA $A3
0E/9665: D0 01     BNE $9668
0E/9667: 60        RTS 
0E/9668: AC F0 79  LDY $79F0
0E/966B: BE 00 79  LDX $7900,Y
0E/966E: B9 01 79  LDA $7901,Y
0E/9671: 4C 82 96  JMP $9682

; [ draw cursor sprite 3 ]

0E/9674: A5 A4     LDA $A4
0E/9676: D0 01     BNE $9679
0E/9678: 60        RTS 
0E/9679: AC F0 7A  LDY $7AF0
0E/967C: BE 00 7A  LDX $7A00,Y
0E/967F: B9 01 7A  LDA $7A01,Y
0E/9682: 0A        ASL 
0E/9683: 0A        ASL 
0E/9684: 0A        ASL 
0E/9685: 85 41     STA $41
0E/9687: 8A        TXA 
0E/9688: 0A        ASL 
0E/9689: 0A        ASL 
0E/968A: 0A        ASL 
0E/968B: 85 40     STA $40
0E/968D: 0A        ASL 
0E/968E: 0A        ASL 
0E/968F: 0A        ASL 
0E/9690: 4C A1 DE  JMP $DEA1          ; draw cursor sprite

; [ get cursor movement direction ]

0E/9693: 20 5C DB  JSR $DB5C          ; update joypad input
0E/9696: A5 20     LDA $20
0E/9698: 29 0F     AND #$0F
0E/969A: F0 0C     BEQ $96A8
0E/969C: C5 A1     CMP $A1
0E/969E: F0 0F     BEQ $96AF
0E/96A0: 85 A1     STA $A1
0E/96A2: 20 45 DB  JSR $DB45          ; cursor sound effect (move)
0E/96A5: A5 A1     LDA $A1
0E/96A7: 60        RTS 
0E/96A8: A9 00     LDA #$00
0E/96AA: 85 47     STA $47
0E/96AC: 85 A1     STA $A1
0E/96AE: 60        RTS 
0E/96AF: A5 47     LDA $47
0E/96B1: 18        CLC 
0E/96B2: 69 01     ADC #$01
0E/96B4: 85 47     STA $47
0E/96B6: C9 10     CMP #$10
0E/96B8: 90 08     BCC $96C2
0E/96BA: 29 03     AND #$03
0E/96BC: D0 04     BNE $96C2
0E/96BE: A9 00     LDA #$00
0E/96C0: 85 A1     STA $A1
0E/96C2: A9 00     LDA #$00
0E/96C4: 60        RTS 

; [ get cursor 1 position ]

; A: up/down increment

0E/96C5: 85 06     STA $06
0E/96C7: 20 93 96  JSR $9693          ; get cursor movement direction
0E/96CA: 29 0F     AND #$0F
0E/96CC: F0 1A     BEQ $96E8
0E/96CE: C9 04     CMP #$04
0E/96D0: B0 04     BCS $96D6
0E/96D2: A2 04     LDX #$04
0E/96D4: 86 06     STX $06
0E/96D6: 29 05     AND #$05
0E/96D8: D0 0F     BNE $96E9
0E/96DA: AD F0 78  LDA $78F0
0E/96DD: 38        SEC 
0E/96DE: E5 06     SBC $06
0E/96E0: B0 03     BCS $96E5
0E/96E2: 6D F1 78  ADC $78F1
0E/96E5: 8D F0 78  STA $78F0
0E/96E8: 60        RTS 
0E/96E9: AD F0 78  LDA $78F0
0E/96EC: 18        CLC 
0E/96ED: 65 06     ADC $06
0E/96EF: CD F1 78  CMP $78F1
0E/96F2: 90 F1     BCC $96E5
0E/96F4: ED F1 78  SBC $78F1
0E/96F7: B0 EC     BCS $96E5

; [ update cursor 2 position ]

; A: up/down increment

0E/96F9: 85 06     STA $06
0E/96FB: 20 93 96  JSR $9693          ; get cursor movement direction
0E/96FE: 29 0F     AND #$0F
0E/9700: F0 1A     BEQ $971C
0E/9702: C9 04     CMP #$04
0E/9704: B0 04     BCS $970A
0E/9706: A2 04     LDX #$04
0E/9708: 86 06     STX $06
0E/970A: 29 05     AND #$05
0E/970C: D0 0F     BNE $971D
0E/970E: AD F0 79  LDA $79F0
0E/9711: 38        SEC 
0E/9712: E5 06     SBC $06
0E/9714: B0 03     BCS $9719
0E/9716: 6D F1 79  ADC $79F1
0E/9719: 8D F0 79  STA $79F0
0E/971C: 60        RTS 
0E/971D: AD F0 79  LDA $79F0
0E/9720: 18        CLC 
0E/9721: 65 06     ADC $06
0E/9723: CD F1 79  CMP $79F1
0E/9726: 90 F1     BCC $9719
0E/9728: ED F1 79  SBC $79F1
0E/972B: B0 EC     BCS $9719

; [ update cursor 3 position ]

; A: up/down increment

0E/972D: 85 05     STA $05
0E/972F: 85 06     STA $06
0E/9731: 20 93 96  JSR $9693          ; get cursor movement direction
0E/9734: 29 0F     AND #$0F
0E/9736: F0 28     BEQ $9760
0E/9738: C9 04     CMP #$04
0E/973A: B0 04     BCS $9740
0E/973C: A2 04     LDX #$04
0E/973E: 86 06     STX $06
0E/9740: 29 05     AND #$05
0E/9742: D0 1D     BNE $9761
0E/9744: AD F0 7A  LDA $7AF0
0E/9747: 38        SEC 
0E/9748: E5 06     SBC $06
0E/974A: B0 11     BCS $975D
0E/974C: 65 05     ADC $05
0E/974E: 85 05     STA $05
0E/9750: 20 23 95  JSR $9523          ; restore dialogue window variables
0E/9753: 20 B6 E7  JSR $E7B6
0E/9756: B0 22     BCS $977A
0E/9758: 20 EB 94  JSR $94EB          ; save dialogue window variables
0E/975B: A5 05     LDA $05
0E/975D: 8D F0 7A  STA $7AF0
0E/9760: 60        RTS 
0E/9761: AD F0 7A  LDA $7AF0
0E/9764: 18        CLC 
0E/9765: 65 06     ADC $06
0E/9767: B0 05     BCS $976E
0E/9769: CD F1 7A  CMP $7AF1
0E/976C: 90 EF     BCC $975D
0E/976E: E5 05     SBC $05
0E/9770: 85 05     STA $05
0E/9772: 20 23 95  JSR $9523          ; restore dialogue window variables
0E/9775: 20 97 E7  JSR $E797
0E/9778: 90 07     BCC $9781
0E/977A: A9 00     LDA #$00
0E/977C: 85 47     STA $47
0E/977E: 4C 67 DE  JMP $DE67          ; play error sound effect
0E/9781: 20 EB 94  JSR $94EB          ; save dialogue window variables
0E/9784: A5 05     LDA $05
0E/9786: CD F1 7A  CMP $7AF1
0E/9789: 90 D2     BCC $975D
0E/978B: AD F1 7A  LDA $7AF1
0E/978E: 38        SEC 
0E/978F: E9 04     SBC #$04
0E/9791: 4C 5D 97  JMP $975D

; --------------------------------------------------------------------------

; [ check npc script ]

; returns npc dialogue id

0E/9794: A9 06     LDA #$06           ; 06/8000 (pointers to text 1)
0E/9796: 85 93     STA $93
0E/9798: A9 00     LDA #$00
0E/979A: 85 94     STA $94
0E/979C: A9 80     LDA #$80
0E/979E: 85 95     STA $95
0E/97A0: BD 00 75  LDA $7500,X        ; npc id
0E/97A3: 85 A0     STA $A0
0E/97A5: C9 C0     CMP #$C0
0E/97A7: B0 55     BCS $97FE          ; return if a shop
0E/97A9: C9 60     CMP #$60
0E/97AB: 90 04     BCC $97B1
0E/97AD: A2 0A     LDX #$0A           ; 0A/8000 (pointers to text 2)
0E/97AF: 86 93     STX $93
0E/97B1: 0A        ASL 
0E/97B2: AA        TAX 
0E/97B3: B0 0B     BCS $97C0
0E/97B5: BD 00 82  LDA $8200,X        ; pointer to npc script
0E/97B8: 85 84     STA $84
0E/97BA: BD 01 82  LDA $8201,X
0E/97BD: 4C C8 97  JMP $97C8
0E/97C0: BD 00 83  LDA $8300,X
0E/97C3: 85 84     STA $84
0E/97C5: BD 01 83  LDA $8301,X
0E/97C8: 85 85     STA $85
0E/97CA: A0 17     LDY #$17
0E/97CC: B1 84     LDA ($84),Y        ; copy npc script to buffer (24 bytes)
0E/97CE: 99 00 7B  STA $7B00,Y
0E/97D1: 88        DEY 
0E/97D2: 10 F8     BPL $97CC
0E/97D4: A0 1F     LDY #$1F
0E/97D6: A9 00     LDA #$00
0E/97D8: 99 20 7B  STA $7B20,Y        ; clear 2nd part of buffer
0E/97DB: 88        DEY 
0E/97DC: 10 FA     BPL $97D8
0E/97DE: A5 A0     LDA $A0            ; npc id
0E/97E0: 0A        ASL 
0E/97E1: A8        TAY 
0E/97E2: 90 0D     BCC $97F1
0E/97E4: B9 23 9A  LDA $9A23,Y        ; npc script jump table
0E/97E7: 85 86     STA $86
0E/97E9: B9 24 9A  LDA $9A24,Y
0E/97EC: 85 87     STA $87
0E/97EE: 6C 86 00  JMP ($0086)
0E/97F1: B9 23 99  LDA $9923,Y        ; npc script jump table
0E/97F4: 85 86     STA $86
0E/97F6: B9 24 99  LDA $9924,Y
0E/97F9: 85 87     STA $87
0E/97FB: 6C 86 00  JMP ($0086)
0E/97FE: 60        RTS 

; [  ]

0E/97FF: A2 3F     LDX #$3F
0E/9801: BD C0 61  LDA $61C0,X
0E/9804: 9D 90 60  STA $6090,X
0E/9807: CA        DEX 
0E/9808: 10 F7     BPL $9801
0E/980A: A2 2F     LDX #$2F
0E/980C: BD C0 62  LDA $62C0,X
0E/980F: 9D D0 60  STA $60D0,X
0E/9812: CA        DEX 
0E/9813: 10 F7     BPL $980C
0E/9815: A2 05     LDX #$05
0E/9817: BD F0 62  LDA $62F0,X
0E/981A: 9D F6 62  STA $62F6,X
0E/981D: CA        DEX 
0E/981E: 10 F7     BPL $9817
0E/9820: 60        RTS 

; [  ]

0E/9821: A2 3F     LDX #$3F
0E/9823: BD C0 61  LDA $61C0,X
0E/9826: 48        PHA 
0E/9827: BD 90 60  LDA $6090,X
0E/982A: 9D C0 61  STA $61C0,X
0E/982D: 68        PLA 
0E/982E: 9D 90 60  STA $6090,X
0E/9831: CA        DEX 
0E/9832: 10 EF     BPL $9823
0E/9834: A2 2F     LDX #$2F
0E/9836: BD C0 62  LDA $62C0,X
0E/9839: 48        PHA 
0E/983A: BD D0 60  LDA $60D0,X
0E/983D: 9D C0 62  STA $62C0,X
0E/9840: 68        PLA 
0E/9841: 9D D0 60  STA $60D0,X
0E/9844: CA        DEX 
0E/9845: 10 EF     BPL $9836
0E/9847: A2 05     LDX #$05
0E/9849: BD F0 62  LDA $62F0,X
0E/984C: 48        PHA 
0E/984D: BD F6 62  LDA $62F6,X
0E/9850: 9D F0 62  STA $62F0,X
0E/9853: 68        PLA 
0E/9854: 9D F6 62  STA $62F6,X
0E/9857: CA        DEX 
0E/9858: 10 EF     BPL $9849
0E/985A: A9 00     LDA #$00
0E/985C: 8D F5 62  STA $62F5
0E/985F: 8D C1 61  STA $61C1
0E/9862: 60        RTS 

; [ find first empty inventory slot ]

0E/9863: A0 00     LDY #$00
0E/9865: B9 60 60  LDA $6060,Y
0E/9868: F0 07     BEQ $9871
0E/986A: C8        INY 
0E/986B: C0 20     CPY #$20
0E/986D: 90 F6     BCC $9865
0E/986F: 38        SEC 
0E/9870: 60        RTS 
0E/9871: 18        CLC 
0E/9872: 60        RTS 

; [ add item to inventory ]

; return carry set if inventory is full

0E/9873: 85 80     STA $80
0E/9875: 20 63 98  JSR $9863          ; find first empty inventory slot
0E/9878: B0 0A     BCS $9884          ; inventory is full
0E/987A: A5 80     LDA $80
0E/987C: 99 60 60  STA $6060,Y
0E/987F: C9 10     CMP #$10
0E/9881: 90 02     BCC $9885          ; branch if key item
0E/9883: 18        CLC 
0E/9884: 60        RTS 
0E/9885: A8        TAY 
0E/9886: B9 00 A4  LDA $A400,Y
0E/9889: 85 81     STA $81
0E/988B: B9 00 A5  LDA $A500,Y
0E/988E: A8        TAY 
0E/988F: B9 1A 60  LDA $601A,Y        ; set key item switch
0E/9892: 05 81     ORA $81
0E/9894: 99 1A 60  STA $601A,Y
0E/9897: A9 47     LDA #$47           ; play song $07
0E/9899: 85 E0     STA $E0
0E/989B: 18        CLC 
0E/989C: 60        RTS 
; unused
0E/989D: 60        RTS 

; [ check event switch ]

0E/989E: 84 81     STY $81
0E/98A0: B9 00 A4  LDA $A400,Y
0E/98A3: 85 80     STA $80
0E/98A5: B9 00 A5  LDA $A500,Y
0E/98A8: A8        TAY 
0E/98A9: B9 40 60  LDA $6040,Y
0E/98AC: A4 81     LDY $81
0E/98AE: 25 80     AND $80
0E/98B0: 60        RTS 

; [ set event switch ]

0E/98B1: 84 80     STY $80
0E/98B3: B9 00 A4  LDA $A400,Y
0E/98B6: 85 81     STA $81
0E/98B8: B9 00 A5  LDA $A500,Y
0E/98BB: A8        TAY 
0E/98BC: B9 40 60  LDA $6040,Y
0E/98BF: 05 81     ORA $81
0E/98C1: 99 40 60  STA $6040,Y
0E/98C4: A4 80     LDY $80
0E/98C6: 60        RTS 

; [ set event switch and show npc ]

0E/98C7: 20 B1 98  JSR $98B1          ; set event switch
0E/98CA: A0 00     LDY #$00
0E/98CC: A5 80     LDA $80
0E/98CE: D9 0A 75  CMP $750A,Y
0E/98D1: F0 0A     BEQ $98DD
0E/98D3: 98        TYA 
0E/98D4: 18        CLC 
0E/98D5: 69 10     ADC #$10
0E/98D7: A8        TAY 
0E/98D8: C9 C0     CMP #$C0
0E/98DA: 90 F0     BCC $98CC
0E/98DC: 60        RTS 
0E/98DD: 99 00 75  STA $7500,Y        ; show npc
0E/98E0: 60        RTS 

; [ set battle id ]

0E/98E1: 85 6A     STA $6A
0E/98E3: A9 20     LDA #$20
0E/98E5: 85 44     STA $44
0E/98E7: 60        RTS 

; [ set entrance id ]

; unused

0E/98E8: 85 45     STA $45
0E/98EA: A9 80     LDA #$80
0E/98EC: 85 44     STA $44
0E/98EE: 60        RTS 

; [ toggle event switch ]

0E/98EF: 84 80     STY $80
0E/98F1: B9 00 A4  LDA $A400,Y
0E/98F4: 85 81     STA $81
0E/98F6: B9 00 A5  LDA $A500,Y
0E/98F9: A8        TAY 
0E/98FA: A5 81     LDA $81
0E/98FC: 49 FF     EOR #$FF
0E/98FE: 39 40 60  AND $6040,Y
0E/9901: 99 40 60  STA $6040,Y
0E/9904: A4 80     LDY $80
0E/9906: 60        RTS 

; [ hide npc ]

; Y: npc id

0E/9907: 20 EF 98  JSR $98EF          ; toggle event switch
0E/990A: A0 00     LDY #$00
0E/990C: A5 80     LDA $80
0E/990E: D9 00 75  CMP $7500,Y
0E/9911: F0 0A     BEQ $991D
0E/9913: 98        TYA 
0E/9914: 18        CLC 
0E/9915: 69 10     ADC #$10
0E/9917: A8        TAY 
0E/9918: C9 F0     CMP #$F0
0E/991A: 90 F0     BCC $990C
0E/991C: 60        RTS 
0E/991D: A9 00     LDA #$00
0E/991F: 99 00 75  STA $7500,Y
0E/9922: 60        RTS 

; npc script jump table (by npc id)
0E/9923: 9AA3 9AA4 9B55 9B59 9B76 9B8B 9C30 9C3F  ; $00
0E/9933: 9C82 9CB2 9CDF 9CE8 9D15 9D29 9D60 9D64
0E/9943: 9DCE 9DD8 9E13 9E55 9E9A 9EA8 9B55 9EDD  ; $10
0E/9953: 9EED 9F1E 9F40 9F44 9F56 9F5A 9C30 9C30
0E/9963: 9F6B 9B55 9FB4 9B55 9C30 9FCE A009 A017  ; $20
0E/9973: 9F44 9B55 9C30 A024 9B55 9B55 A041 9C30
0E/9983: A04B A055 A068 A078 A07C A09D A0C4 9B55  ; $30
0E/9993: A0D8 A0EB A100 A118 A12D 9F44 9F4D A137
0E/99A2: A195 A1AF A1B3 A1B7 A1BB A1ED A201 9B55  ; $40
0E/99B3: 9C30 9C30 9C30 9C30 9C30 A225 A23A 9B55
0E/99C3: 9B55 9B55 9B55 9B55 A280 A28A A292 A29F  ; $50
0E/99D3: A29F A2F4 9B55 9B55 9F62 9B55 A2FE A12D
0E/99E3: A308 A308 A308 A308 A308 A308 A308 A308  ; $60
0E/99F3: A308 A308 A308 A308 A308 A308 A308 A308
0E/9A03: A308 A308 A308 A308 A308 A308 A308 A308  ; $70
0E/9A13: A308 A308 A308 A308 A308 A308 A308 A308
0E/9A23: A37A A37A A37E A37E A37E A37E A37E A37E  ; $80
0E/9A33: A398 A398 A398 A398 A398 A398 A398 A398
0E/9A43: A3C4 A3C4 A3C8 A3C8 A3C8 A3C8 A3C8 A3C8  ; $90
0E/9A53: A3C4 A3C4 A3C8 A3C8 A3C8 A3C8 A3C8 A3C8
0E/9A63: A3C4 A3C4 A3C8 A3C8 A3C8 A3C8 A3C8 A3C8  ; $A0
0E/9A73: A3C4 A3C4 A3ED A3ED A3ED A3ED A3ED A3ED
0E/9A83: A3ED A3ED A3ED A3ED A3ED A3ED A3ED A3ED  ; $B0
0E/9A93: A3F1 A3F1 A3F1 A3F1 A3F1 A3F1 A3F1 A3F1

; npc $00: no effect
0E/9AA3: 60        RTS 
; npc $01: hilda (altair throne room)
0E/9AA4: A0 50     LDY #$50
0E/9AA6: 20 9E 98  JSR $989E          ; check event switch
0E/9AA9: D0 16     BNE $9AC1
0E/9AAB: AD 01 7B  LDA $7B01          ; $02: "Hilda:The Wild Rose is the insignia..."
0E/9AAE: 8D 21 7B  STA $7B21          ; response to keyword 1 (Wild Rose)
0E/9AB1: AD 02 7B  LDA $7B02          ; $03: "Hilda:That Ring…It's Scott's!Is..."
0E/9AB4: 8D 31 7B  STA $7B31          ; response to key item 1 (Ring)
0E/9AB7: AD 14 7B  LDA $7B14          ; $04: "We lost Fynn because the Empire..."
0E/9ABA: 8D 22 7B  STA $7B22          ; response to keyword 2 (mythril)
0E/9ABD: AD 00 7B  LDA $7B00          ; $01: "Hilda:The password is (Wild Rose)."
0E/9AC0: 60        RTS 
0E/9AC1: A0 08     LDY #$08
0E/9AC3: 20 9E 98  JSR $989E          ; check event switch
0E/9AC6: F0 04     BEQ $9ACC
0E/9AC8: AD 03 7B  LDA $7B03          ; $05: "Minwu is a virtuous white wizard..."
0E/9ACB: 60        RTS 
0E/9ACC: A0 C3     LDY #$C3
0E/9ACE: 20 9E 98  JSR $989E          ; check event switch
0E/9AD1: D0 1C     BNE $9AEF
0E/9AD3: AD 05 7B  LDA $7B05          ; $12: "Please find that Mythril as soon as possible."
0E/9AD6: 8D 22 7B  STA $7B22          ; response to keyword 2 (mythril)
0E/9AD9: AD 06 7B  LDA $7B06          ; $07: "The Empire is using the people of Bafsk..."
0E/9ADC: 8D 23 7B  STA $7B23          ; response to keyword 3 (mythril)
0E/9ADF: AD 07 7B  LDA $7B07          ; $09: "You've found the Mythril! Please hand..."
0E/9AE2: 8D 34 7B  STA $7B34          ; response to key item 4 (mythril)
0E/9AE5: AD 08 7B  LDA $7B08          ; $08: "A man named Cid,former leader of Fynn's ..."
0E/9AE8: 8D 25 7B  STA $7B25          ; response to keyword 5 (Airship)
0E/9AEB: AD 04 7B  LDA $7B04          ; $06: "The Empire also suffered heavy losses..."
0E/9AEE: 60        RTS 
0E/9AEF: A0 51     LDY #$51
0E/9AF1: 20 9E 98  JSR $989E          ; check event switch
0E/9AF4: D0 0A     BNE $9B00
0E/9AF6: AD 0A 7B  LDA $7B0A          ; $0B: "We have a man in Bafsk. He's found a way..."
0E/9AF9: 8D 23 7B  STA $7B23          ; response to keyword 3 (Dreadnought)
0E/9AFC: AD 09 7B  LDA $7B09          ; $0A: "The Dreadnought's construction is..."
0E/9AFF: 60        RTS 
0E/9B00: A0 09     LDY #$09
0E/9B02: 20 9E 98  JSR $989E          ; check event switch
0E/9B05: D0 17     BNE $9B1E
0E/9B07: 20 08 F3  JSR $F308          ; check if any main characters are alive
0E/9B0A: 90 04     BCC $9B10
0E/9B0C: AD 0B 7B  LDA $7B0B          ; $FD: "Firion,Maria,or Guy must be alive to advance."
0E/9B0F: 60        RTS 
0E/9B10: A9 80     LDA #$80
0E/9B12: 8D F5 62  STA $62F5
0E/9B15: A0 09     LDY #$09
0E/9B17: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/9B1A: AD 0C 7B  LDA $7B0C          ; $0C: "Hilda:Many were hurt by the Dreadnought's attack."
0E/9B1D: 60        RTS 
0E/9B1E: A0 13     LDY #$13
0E/9B20: 20 9E 98  JSR $989E          ; check event switch
0E/9B23: F0 16     BEQ $9B3B
0E/9B25: AD 0E 7B  LDA $7B0E          ; $0E
0E/9B28: 8D 23 7B  STA $7B23
0E/9B2B: AD 0F 7B  LDA $7B0F          ; $0F
0E/9B2E: 8D 26 7B  STA $7B26
0E/9B31: AD 10 7B  LDA $7B10          ; $10
0E/9B34: 8D 27 7B  STA $7B27
0E/9B37: AD 0D 7B  LDA $7B0D          ; $0D
0E/9B3A: 60        RTS 
0E/9B3B: A0 2B     LDY #$2B
0E/9B3D: 20 9E 98  JSR $989E          ; check event switch
0E/9B40: F0 04     BEQ $9B46
0E/9B42: AD 11 7B  LDA $7B11          ; $11
0E/9B45: 60        RTS 
0E/9B46: A0 0C     LDY #$0C
0E/9B48: 20 9E 98  JSR $989E          ; check event switch
0E/9B4B: F0 04     BEQ $9B51
0E/9B4D: AD 12 7B  LDA $7B12          ; $13
0E/9B50: 60        RTS 
0E/9B51: AD 13 7B  LDA $7B13          ; $14
0E/9B54: 60        RTS 
; generic npc (dialogue)
0E/9B55: AD 00 7B  LDA $7B00
0E/9B58: 60        RTS 
; npc $03: hilda (altair hilda's room)
0E/9B59: A0 25     LDY #$25
0E/9B5B: 20 9E 98  JSR $989E          ; check event switch
0E/9B5E: F0 04     BEQ $9B64
0E/9B60: AD 00 7B  LDA $7B00
0E/9B63: 60        RTS 
0E/9B64: 20 08 F3  JSR $F308          ; check if any main characters are alive
0E/9B67: 90 04     BCC $9B6D
0E/9B69: AD 03 7B  LDA $7B03
0E/9B6C: 60        RTS 
0E/9B6D: AD 02 7B  LDA $7B02
0E/9B70: 85 6C     STA $6C
0E/9B72: AD 01 7B  LDA $7B01
0E/9B75: 60        RTS 
; npc $04: hilda (camp)
0E/9B76: A0 17     LDY #$17
0E/9B78: 20 9E 98  JSR $989E          ; check event switch
0E/9B7B: F0 0A     BEQ $9B87
0E/9B7D: AD 01 7B  LDA $7B01
0E/9B80: 8D 21 7B  STA $7B21          ; response to keyword 1 (wild rose)
0E/9B83: AD 00 7B  LDA $7B00
0E/9B86: 60        RTS 
0E/9B87: AD 02 7B  LDA $7B02
0E/9B8A: 60        RTS 
; npc $05: hilda (fynn throne room)
0E/9B8B: AD 1B 60  LDA $601B
0E/9B8E: 29 08     AND #$08
0E/9B90: D0 28     BNE $9BBA          ; branch if player has white mask
0E/9B92: AD 01 7B  LDA $7B01
0E/9B95: 8D 28 7B  STA $7B28
0E/9B98: AD 02 7B  LDA $7B02
0E/9B9B: 8D 29 7B  STA $7B29
0E/9B9E: AD 03 7B  LDA $7B03
0E/9BA1: 8D 2A 7B  STA $7B2A
0E/9BA4: AD 04 7B  LDA $7B04
0E/9BA7: 8D 2B 7B  STA $7B2B
0E/9BAA: AD 05 7B  LDA $7B05
0E/9BAD: 8D 2E 7B  STA $7B2E
0E/9BB0: AD 06 7B  LDA $7B06
0E/9BB3: 8D 2F 7B  STA $7B2F
0E/9BB6: AD 00 7B  LDA $7B00
0E/9BB9: 60        RTS 
0E/9BBA: AD 1B 60  LDA $601B
0E/9BBD: 29 20     AND #$20
0E/9BBF: D0 04     BNE $9BC5          ; branch if player has crystal rod
0E/9BC1: AD 07 7B  LDA $7B07
0E/9BC4: 60        RTS 
0E/9BC5: A0 19     LDY #$19
0E/9BC7: 20 9E 98  JSR $989E          ; check event switch
0E/9BCA: F0 04     BEQ $9BD0
0E/9BCC: AD 08 7B  LDA $7B08
0E/9BCF: 60        RTS 
0E/9BD0: A0 45     LDY #$45
0E/9BD2: 20 9E 98  JSR $989E          ; check event switch
0E/9BD5: F0 10     BEQ $9BE7
0E/9BD7: AD 0A 7B  LDA $7B0A
0E/9BDA: 8D 2A 7B  STA $7B2A
0E/9BDD: AD 0B 7B  LDA $7B0B
0E/9BE0: 8D 2B 7B  STA $7B2B
0E/9BE3: AD 09 7B  LDA $7B09
0E/9BE6: 60        RTS 
0E/9BE7: A0 46     LDY #$46
0E/9BE9: 20 9E 98  JSR $989E          ; check event switch
0E/9BEC: F0 10     BEQ $9BFE
0E/9BEE: AD 0D 7B  LDA $7B0D
0E/9BF1: 8D 2B 7B  STA $7B2B
0E/9BF4: AD 0E 7B  LDA $7B0E
0E/9BF7: 8D 2C 7B  STA $7B2C
0E/9BFA: AD 0C 7B  LDA $7B0C
0E/9BFD: 60        RTS 
0E/9BFE: A0 29     LDY #$29
0E/9C00: 20 9E 98  JSR $989E          ; check event switch
0E/9C03: F0 10     BEQ $9C15
0E/9C05: AD 10 7B  LDA $7B10
0E/9C08: 8D 2B 7B  STA $7B2B
0E/9C0B: AD 11 7B  LDA $7B11
0E/9C0E: 8D 2C 7B  STA $7B2C
0E/9C11: AD 0F 7B  LDA $7B0F
0E/9C14: 60        RTS 
0E/9C15: A0 1D     LDY #$1D
0E/9C17: 20 9E 98  JSR $989E          ; check event switch
0E/9C1A: F0 0A     BEQ $9C26
0E/9C1C: AD 13 7B  LDA $7B13
0E/9C1F: 8D 24 7B  STA $7B24
0E/9C22: AD 12 7B  LDA $7B12
0E/9C25: 60        RTS 
0E/9C26: AD 15 7B  LDA $7B15
0E/9C29: 8D 2D 7B  STA $7B2D
0E/9C2C: AD 14 7B  LDA $7B14
0E/9C2F: 60        RTS 
; generic npc (battle)
0E/9C30: A4 A0     LDY $A0
0E/9C32: 20 07 99  JSR $9907          ; hide npc
0E/9C35: AD 01 7B  LDA $7B01
0E/9C38: 20 E1 98  JSR $98E1          ; set battle id
0E/9C3B: AD 00 7B  LDA $7B00
0E/9C3E: 60        RTS 
; npc $07: cid (poft)
0E/9C3F: A0 51     LDY #$51
0E/9C41: 20 9E 98  JSR $989E          ; check event switch
0E/9C44: D0 10     BNE $9C56
0E/9C46: AD 01 7B  LDA $7B01
0E/9C49: 8D 23 7B  STA $7B23
0E/9C4C: AD 02 7B  LDA $7B02
0E/9C4F: 8D 25 7B  STA $7B25
0E/9C52: AD 00 7B  LDA $7B00
0E/9C55: 60        RTS 
0E/9C56: A0 01     LDY #$01
0E/9C58: 20 9E 98  JSR $989E          ; check event switch
0E/9C5B: F0 16     BEQ $9C73
0E/9C5D: AD 04 7B  LDA $7B04
0E/9C60: 8D 23 7B  STA $7B23
0E/9C63: AD 05 7B  LDA $7B05
0E/9C66: 8D 25 7B  STA $7B25
0E/9C69: AD 06 7B  LDA $7B06
0E/9C6C: 8D 27 7B  STA $7B27
0E/9C6F: AD 03 7B  LDA $7B03
0E/9C72: 60        RTS 
0E/9C73: A0 39     LDY #$39
0E/9C75: 20 9E 98  JSR $989E          ; check event switch
0E/9C78: F0 04     BEQ $9C7E
0E/9C7A: AD 07 7B  LDA $7B07
0E/9C7D: 60        RTS 
0E/9C7E: AD 08 7B  LDA $7B08
0E/9C81: 60        RTS 
; npc $08: minwu (altair throne room)
0E/9C82: A0 50     LDY #$50           ; $604A.0
0E/9C84: 20 9E 98  JSR $989E          ; check event switch
0E/9C87: D0 0A     BNE $9C93
0E/9C89: AD 01 7B  LDA $7B01          ; $32: "Ah!You know the password..."
0E/9C8C: 8D 21 7B  STA $7B21          ; response to keyword 1 (wild rose)
0E/9C8F: AD 00 7B  LDA $7B00          ; $31: "Minwu:Proceed to Fynn..."
0E/9C92: 60        RTS 
0E/9C93: A9 02     LDA #$02           ; item $02: Canoe
0E/9C95: 20 73 98  JSR $9873          ; add item to inventory
0E/9C98: B0 14     BCS $9CAE          ; branch if inventory is full
0E/9C9A: A0 08     LDY #$08
0E/9C9C: 20 07 99  JSR $9907          ; hide npc
0E/9C9F: A9 04     LDA #$04           ; minwu
0E/9CA1: 85 61     STA $61
0E/9CA3: 20 18 C0  JSR $C018          ; load guest character properties
0E/9CA6: A9 4A     LDA #$4A           ; play song $0A
0E/9CA8: 85 E0     STA $E0
0E/9CAA: AD 03 7B  LDA $7B03          ; $33: "Minwu:Take my canoe and..."
0E/9CAD: 60        RTS 
0E/9CAE: AD 02 7B  LDA $7B02          ; $FC: "Can't hold any more."
0E/9CB1: 60        RTS 
; npc $09: minwu (altair king's room)
0E/9CB2: A0 01     LDY #$01
0E/9CB4: 20 9E 98  JSR $989E          ; check event switch
0E/9CB7: F0 1C     BEQ $9CD5
0E/9CB9: AD 01 7B  LDA $7B01
0E/9CBC: 8D 23 7B  STA $7B23
0E/9CBF: AD 02 7B  LDA $7B02
0E/9CC2: 8D 25 7B  STA $7B25
0E/9CC5: AD 03 7B  LDA $7B03
0E/9CC8: 8D 26 7B  STA $7B26
0E/9CCB: AD 04 7B  LDA $7B04
0E/9CCE: 8D 27 7B  STA $7B27
0E/9CD1: AD 00 7B  LDA $7B00
0E/9CD4: 60        RTS 
0E/9CD5: AD 06 7B  LDA $7B06
0E/9CD8: 8D 23 7B  STA $7B23
0E/9CDB: AD 05 7B  LDA $7B05
0E/9CDE: 60        RTS 
; npc $0A: minwu (sealed tower)
0E/9CDF: AD 01 7B  LDA $7B01
0E/9CE2: 85 6C     STA $6C
0E/9CE4: AD 00 7B  LDA $7B00
0E/9CE7: 60        RTS 
; npc $0B: gordon (altair exterior)
0E/9CE8: A0 C3     LDY #$C3
0E/9CEA: 20 9E 98  JSR $989E          ; check event switch
0E/9CED: D0 1C     BNE $9D0B
0E/9CEF: AD 01 7B  LDA $7B01
0E/9CF2: 8D 21 7B  STA $7B21          ; response to keyword 1 (wild rose)
0E/9CF5: AD 02 7B  LDA $7B02
0E/9CF8: 8D 22 7B  STA $7B22          ; response to keyword 2 (mythril)
0E/9CFB: AD 03 7B  LDA $7B03
0E/9CFE: 8D 23 7B  STA $7B23
0E/9D01: AD 05 7B  LDA $7B05
0E/9D04: 8D 31 7B  STA $7B31
0E/9D07: AD 00 7B  LDA $7B00
0E/9D0A: 60        RTS 
0E/9D0B: AD 06 7B  LDA $7B06
0E/9D0E: 8D 23 7B  STA $7B23
0E/9D11: AD 04 7B  LDA $7B04
0E/9D14: 60        RTS 
; npc $0C: gordon (kashuan keep)
0E/9D15: A0 0C     LDY #$0C
0E/9D17: 20 07 99  JSR $9907          ; hide npc
0E/9D1A: A9 06     LDA #$06           ; gordon
0E/9D1C: 85 61     STA $61
0E/9D1E: 20 18 C0  JSR $C018          ; load guest character properties
0E/9D21: A9 4A     LDA #$4A           ; play song $0A
0E/9D23: 85 E0     STA $E0
0E/9D25: AD 00 7B  LDA $7B00
0E/9D28: 60        RTS 
; npc $0D: gordon (altair throne room)
0E/9D29: A0 25     LDY #$25
0E/9D2B: 20 9E 98  JSR $989E          ; check event switch
0E/9D2E: F0 1B     BEQ $9D4B
0E/9D30: AD 1B 60  LDA $601B
0E/9D33: 29 04     AND #$04
0E/9D35: D0 10     BNE $9D47          ; branch if player has wyvern egg
0E/9D37: AD 01 7B  LDA $7B01
0E/9D3A: 8D 2A 7B  STA $7B2A
0E/9D3D: AD 02 7B  LDA $7B02
0E/9D40: 8D 2B 7B  STA $7B2B
0E/9D43: AD 00 7B  LDA $7B00
0E/9D46: 60        RTS 
0E/9D47: AD 03 7B  LDA $7B03
0E/9D4A: 60        RTS 
0E/9D4B: A0 03     LDY #$03
0E/9D4D: 20 9E 98  JSR $989E          ; check event switch
0E/9D50: F0 04     BEQ $9D56
0E/9D52: AD 04 7B  LDA $7B04
0E/9D55: 60        RTS 
0E/9D56: AD 06 7B  LDA $7B06
0E/9D59: 8D 2B 7B  STA $7B2B
0E/9D5C: AD 05 7B  LDA $7B05
0E/9D5F: 60        RTS 
; npc $0E: gordon (camp)
0E/9D60: AD 00 7B  LDA $7B00
0E/9D63: 60        RTS 
; npc $0F: gordon (fynn throne room)
0E/9D64: AD 1B 60  LDA $601B
0E/9D67: 29 08     AND #$08
0E/9D69: D0 16     BNE $9D81          ; branch if player has white mask
0E/9D6B: AD 01 7B  LDA $7B01
0E/9D6E: 8D 28 7B  STA $7B28
0E/9D71: AD 02 7B  LDA $7B02
0E/9D74: 8D 29 7B  STA $7B29
0E/9D77: AD 03 7B  LDA $7B03
0E/9D7A: 8D 2F 7B  STA $7B2F
0E/9D7D: AD 00 7B  LDA $7B00
0E/9D80: 60        RTS 
0E/9D81: A0 19     LDY #$19
0E/9D83: 20 9E 98  JSR $989E          ; check event switch
0E/9D86: F0 04     BEQ $9D8C
0E/9D88: AD 04 7B  LDA $7B04
0E/9D8B: 60        RTS 
0E/9D8C: A0 45     LDY #$45
0E/9D8E: 20 9E 98  JSR $989E          ; check event switch
0E/9D91: F0 04     BEQ $9D97
0E/9D93: AD 05 7B  LDA $7B05
0E/9D96: 60        RTS 
0E/9D97: A0 46     LDY #$46
0E/9D99: 20 9E 98  JSR $989E          ; check event switch
0E/9D9C: F0 0A     BEQ $9DA8
0E/9D9E: AD 07 7B  LDA $7B07
0E/9DA1: 8D 2C 7B  STA $7B2C
0E/9DA4: AD 06 7B  LDA $7B06
0E/9DA7: 60        RTS 
0E/9DA8: A0 29     LDY #$29
0E/9DAA: 20 9E 98  JSR $989E          ; check event switch
0E/9DAD: F0 04     BEQ $9DB3
0E/9DAF: AD 08 7B  LDA $7B08
0E/9DB2: 60        RTS 
0E/9DB3: A0 1D     LDY #$1D
0E/9DB5: 20 9E 98  JSR $989E          ; check event switch
0E/9DB8: F0 0A     BEQ $9DC4
0E/9DBA: AD 0A 7B  LDA $7B0A
0E/9DBD: 8D 24 7B  STA $7B24
0E/9DC0: AD 09 7B  LDA $7B09
0E/9DC3: 60        RTS 
0E/9DC4: AD 0C 7B  LDA $7B0C
0E/9DC7: 8D 2D 7B  STA $7B2D
0E/9DCA: AD 0B 7B  LDA $7B0B
0E/9DCD: 60        RTS 
; npc $10: paul (altair)
0E/9DCE: AD 01 7B  LDA $7B01
0E/9DD1: 8D 21 7B  STA $7B21          ; response to keyword 1 (wild rose)
0E/9DD4: AD 00 7B  LDA $7B00
0E/9DD7: 60        RTS 
; npc $11: paul (semitt falls)
0E/9DD8: A0 33     LDY #$33
0E/9DDA: 20 07 99  JSR $9907          ; hide npc
0E/9DDD: A0 33     LDY #$33
0E/9DDF: 20 07 99  JSR $9907          ; hide npc
0E/9DE2: A0 33     LDY #$33
0E/9DE4: 20 07 99  JSR $9907          ; hide npc
0E/9DE7: A0 33     LDY #$33
0E/9DE9: 20 07 99  JSR $9907          ; hide npc
0E/9DEC: A0 11     LDY #$11
0E/9DEE: 20 07 99  JSR $9907          ; hide npc
0E/9DF1: A0 21     LDY #$21
0E/9DF3: 20 07 99  JSR $9907          ; hide npc
0E/9DF6: A0 22     LDY #$22
0E/9DF8: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/9DFB: A0 84     LDY #$84
0E/9DFD: 20 B1 98  JSR $98B1          ; set event switch
0E/9E00: A0 85     LDY #$85
0E/9E02: 20 B1 98  JSR $98B1          ; set event switch
0E/9E05: A0 86     LDY #$86
0E/9E07: 20 B1 98  JSR $98B1          ; set event switch
0E/9E0A: A0 87     LDY #$87
0E/9E0C: 20 B1 98  JSR $98B1          ; set event switch
0E/9E0F: AD 00 7B  LDA $7B00
0E/9E12: 60        RTS 
; npc $12: paul (fynn)
0E/9E13: A0 41     LDY #$41
0E/9E15: 20 9E 98  JSR $989E          ; check event switch
0E/9E18: F0 0A     BEQ $9E24
0E/9E1A: AD 07 7B  LDA $7B07
0E/9E1D: 8D 2F 7B  STA $7B2F
0E/9E20: AD 00 7B  LDA $7B00
0E/9E23: 60        RTS 
0E/9E24: A0 29     LDY #$29
0E/9E26: 20 9E 98  JSR $989E          ; check event switch
0E/9E29: F0 0A     BEQ $9E35
0E/9E2B: AD 02 7B  LDA $7B02
0E/9E2E: 8D 2C 7B  STA $7B2C
0E/9E31: AD 01 7B  LDA $7B01
0E/9E34: 60        RTS 
0E/9E35: A0 26     LDY #$26
0E/9E37: 20 9E 98  JSR $989E          ; check event switch
0E/9E3A: F0 04     BEQ $9E40
0E/9E3C: AD 03 7B  LDA $7B03
0E/9E3F: 60        RTS 
0E/9E40: A0 1D     LDY #$1D
0E/9E42: 20 9E 98  JSR $989E          ; check event switch
0E/9E45: F0 0A     BEQ $9E51
0E/9E47: AD 05 7B  LDA $7B05
0E/9E4A: 8D 24 7B  STA $7B24
0E/9E4D: AD 04 7B  LDA $7B04
0E/9E50: 60        RTS 
0E/9E51: AD 06 7B  LDA $7B06
0E/9E54: 60        RTS 
; npc $13: josef
0E/9E55: A0 21     LDY #$21
0E/9E57: 20 9E 98  JSR $989E          ; check event switch
0E/9E5A: F0 1C     BEQ $9E78
0E/9E5C: AD 01 7B  LDA $7B01
0E/9E5F: 8D 21 7B  STA $7B21          ; response to keyword 1 (wild rose)
0E/9E62: AD 02 7B  LDA $7B02
0E/9E65: 8D 22 7B  STA $7B22          ; response to keyword 2 (mythril)
0E/9E68: AD 03 7B  LDA $7B03
0E/9E6B: 8D 23 7B  STA $7B23
0E/9E6E: AD 04 7B  LDA $7B04
0E/9E71: 8D 25 7B  STA $7B25
0E/9E74: AD 00 7B  LDA $7B00
0E/9E77: 60        RTS 
0E/9E78: AD 06 7B  LDA $7B06
0E/9E7B: 8D 22 7B  STA $7B22          ; response to keyword 2 (mythril)
0E/9E7E: AD 07 7B  LDA $7B07
0E/9E81: 8D 23 7B  STA $7B23
0E/9E84: AD 08 7B  LDA $7B08
0E/9E87: 8D 25 7B  STA $7B25
0E/9E8A: AD 09 7B  LDA $7B09
0E/9E8D: 8D 34 7B  STA $7B34          ; response to key item 4 (mythril)
0E/9E90: AD 0A 7B  LDA $7B0A
0E/9E93: 8D 26 7B  STA $7B26
0E/9E96: AD 05 7B  LDA $7B05
0E/9E99: 60        RTS 
; npc $14: 
0E/9E9A: A0 14     LDY #$14
0E/9E9C: 20 07 99  JSR $9907          ; hide npc
0E/9E9F: A9 01     LDA #$01
0E/9EA1: 8D 00 60  STA $6000
0E/9EA4: AD 00 7B  LDA $7B00
0E/9EA7: 60        RTS 
; npc $15: 
0E/9EA8: AD 01 7B  LDA $7B01
0E/9EAB: 60        RTS 
; unused (was leila, altair ???)
0E/9EAC: A0 52     LDY #$52
0E/9EAE: 20 9E 98  JSR $989E          ; check event switch
0E/9EB1: F0 0F     BEQ $9EC2
0E/9EB3: A0 52     LDY #$52
0E/9EB5: 20 EF 98  JSR $98EF
0E/9EB8: AD 01 7B  LDA $7B01
0E/9EBB: 20 E1 98  JSR $98E1          ; set battle id
0E/9EBE: AD 00 7B  LDA $7B00
0E/9EC1: 60        RTS 
0E/9EC2: A0 15     LDY #$15
0E/9EC4: 20 07 99  JSR $9907          ; hide npc
0E/9EC7: 20 FF 97  JSR $97FF
0E/9ECA: A9 07     LDA #$07           ; leila
0E/9ECC: 85 61     STA $61
0E/9ECE: 20 18 C0  JSR $C018          ; load guest character properties
0E/9ED1: A9 4A     LDA #$4A           ; play song $0A
0E/9ED3: 85 E0     STA $E0
0E/9ED5: A9 40     LDA #$40
0E/9ED7: 85 44     STA $44
0E/9ED9: AD 02 7B  LDA $7B02
0E/9EDC: 60        RTS 
; npc $17: leila (fynn castle 1f)
0E/9EDD: A0 17     LDY #$17
0E/9EDF: 20 07 99  JSR $9907          ; hide npc
0E/9EE2: 20 21 98  JSR $9821
0E/9EE5: A9 4A     LDA #$4A           ; play song $0A
0E/9EE7: 85 E0     STA $E0
0E/9EE9: AD 00 7B  LDA $7B00
0E/9EEC: 60        RTS 
; npc $18: leila (fynn throne room)
0E/9EED: A0 45     LDY #$45
0E/9EEF: 20 9E 98  JSR $989E          ; check event switch
0E/9EF2: F0 04     BEQ $9EF8
0E/9EF4: AD 00 7B  LDA $7B00
0E/9EF7: 60        RTS 
0E/9EF8: A0 29     LDY #$29
0E/9EFA: 20 9E 98  JSR $989E          ; check event switch
0E/9EFD: F0 04     BEQ $9F03
0E/9EFF: AD 01 7B  LDA $7B01
0E/9F02: 60        RTS 
0E/9F03: A0 1D     LDY #$1D
0E/9F05: 20 9E 98  JSR $989E          ; check event switch
0E/9F08: F0 0A     BEQ $9F14
0E/9F0A: AD 03 7B  LDA $7B03
0E/9F0D: 8D 24 7B  STA $7B24
0E/9F10: AD 02 7B  LDA $7B02
0E/9F13: 60        RTS 
0E/9F14: AD 05 7B  LDA $7B05
0E/9F17: 8D 2D 7B  STA $7B2D
0E/9F1A: AD 04 7B  LDA $7B04
0E/9F1D: 60        RTS 
; npc $19: ricard (leviathan)
0E/9F1E: AD 01 7B  LDA $7B01
0E/9F21: 8D 28 7B  STA $7B28
0E/9F24: AD 02 7B  LDA $7B02
0E/9F27: 8D 29 7B  STA $7B29
0E/9F2A: AD 03 7B  LDA $7B03
0E/9F2D: 8D 2B 7B  STA $7B2B
0E/9F30: AD 04 7B  LDA $7B04
0E/9F33: 8D 2A 7B  STA $7B2A
0E/9F36: AD 05 7B  LDA $7B05
0E/9F39: 8D 3D 7B  STA $7B3D
0E/9F3C: AD 00 7B  LDA $7B00
0E/9F3F: 60        RTS 
; npc $1A: dark knight (bafsk)
0E/9F40: AD 00 7B  LDA $7B00
0E/9F43: 60        RTS 
; generic npc (do event)
0E/9F44: AD 01 7B  LDA $7B01
0E/9F47: 85 6C     STA $6C
0E/9F49: AD 00 7B  LDA $7B00
0E/9F4C: 60        RTS 
; npc $3E: 
0E/9F4D: 20 08 F3  JSR $F308          ; check if any main characters are alive
0E/9F50: 90 F2     BCC $9F44
0E/9F52: AD 02 7B  LDA $7B02
0E/9F55: 60        RTS 
; npc $1C: 
0E/9F56: AD 00 7B  LDA $7B00
0E/9F59: 60        RTS 
; npc $1D: dark knight (palamecia)
0E/9F5A: 20 08 F3  JSR $F308          ; check if any main characters are alive
0E/9F5D: B0 F3     BCS $9F52
0E/9F5F: 4C 44 9F  JMP $9F44
; hide current npc
0E/9F62: A4 A0     LDY $A0
0E/9F64: 20 07 99  JSR $9907          ; hide npc
0E/9F67: AD 00 7B  LDA $7B00
0E/9F6A: 60        RTS 
; npc $20: king (altair)
0E/9F6B: A0 50     LDY #$50
0E/9F6D: 20 9E 98  JSR $989E          ; check event switch
0E/9F70: D0 04     BNE $9F76
0E/9F72: AD 00 7B  LDA $7B00
0E/9F75: 60        RTS 
0E/9F76: A0 09     LDY #$09
0E/9F78: 20 9E 98  JSR $989E          ; check event switch
0E/9F7B: D0 16     BNE $9F93
0E/9F7D: AD 02 7B  LDA $7B02
0E/9F80: 8D 21 7B  STA $7B21          ; response to keyword 1 (wild rose)
0E/9F83: AD 03 7B  LDA $7B03
0E/9F86: 8D 22 7B  STA $7B22          ; response to keyword 2 (mythril)
0E/9F89: AD 04 7B  LDA $7B04
0E/9F8C: 8D 23 7B  STA $7B23
0E/9F8F: AD 01 7B  LDA $7B01
0E/9F92: 60        RTS 
0E/9F93: A0 01     LDY #$01
0E/9F95: 20 9E 98  JSR $989E          ; check event switch
0E/9F98: F0 16     BEQ $9FB0
0E/9F9A: AD 06 7B  LDA $7B06
0E/9F9D: 8D 25 7B  STA $7B25
0E/9FA0: AD 07 7B  LDA $7B07
0E/9FA3: 8D 26 7B  STA $7B26
0E/9FA6: AD 08 7B  LDA $7B08
0E/9FA9: 8D 27 7B  STA $7B27
0E/9FAC: AD 05 7B  LDA $7B05
0E/9FAF: 60        RTS 
0E/9FB0: AD 09 7B  LDA $7B09
0E/9FB3: 60        RTS 
; npc $22: nelly (salamand)
0E/9FB4: A0 13     LDY #$13
0E/9FB6: 20 9E 98  JSR $989E          ; check event switch
0E/9FB9: F0 04     BEQ $9FBF
0E/9FBB: AD 00 7B  LDA $7B00
0E/9FBE: 60        RTS 
0E/9FBF: A0 37     LDY #$37
0E/9FC1: 20 9E 98  JSR $989E          ; check event switch
0E/9FC4: D0 04     BNE $9FCA
0E/9FC6: AD 01 7B  LDA $7B01
0E/9FC9: 60        RTS 
0E/9FCA: AD 02 7B  LDA $7B02
0E/9FCD: 60        RTS 
; npc $25: wyvern (deist)
0E/9FCE: A9 02     LDA #$02
0E/9FD0: 2D 1B 60  AND $601B
0E/9FD3: D0 10     BNE $9FE5
0E/9FD5: AD 01 7B  LDA $7B01
0E/9FD8: 8D 2A 7B  STA $7B2A
0E/9FDB: AD 02 7B  LDA $7B02
0E/9FDE: 8D 2B 7B  STA $7B2B
0E/9FE1: AD 00 7B  LDA $7B00
0E/9FE4: 60        RTS 
0E/9FE5: A9 04     LDA #$04
0E/9FE7: 2D 1B 60  AND $601B
0E/9FEA: F0 04     BEQ $9FF0
0E/9FEC: AD 07 7B  LDA $7B07
0E/9FEF: 60        RTS 
0E/9FF0: 20 63 98  JSR $9863          ; find first empty inventory slot
0E/9FF3: 90 04     BCC $9FF9
0E/9FF5: AD 03 7B  LDA $7B03
0E/9FF8: 60        RTS 
0E/9FF9: AD 05 7B  LDA $7B05
0E/9FFC: 8D 2A 7B  STA $7B2A
0E/9FFF: AD 06 7B  LDA $7B06
0E/A002: 8D 2B 7B  STA $7B2B
0E/A005: AD 04 7B  LDA $7B04
0E/A008: 60        RTS 
; npc $26: cid (paul's house)
0E/A009: A9 04     LDA #$04
0E/A00B: 8D 04 60  STA $6004
0E/A00E: AD 01 7B  LDA $7B01
0E/A011: 85 6C     STA $6C
0E/A013: AD 00 7B  LDA $7B00
0E/A016: 60        RTS 
; npc $27: cid (dreadnought)
0E/A017: A0 1C     LDY #$1C
0E/A019: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/A01C: A0 02     LDY #$02
0E/A01E: 20 07 99  JSR $9907          ; hide npc
0E/A021: 4C 62 9F  JMP $9F62          ; hide current npc
; npc $2B: goddess bell sign
0E/A024: A9 06     LDA #$06
0E/A026: 20 73 98  JSR $9873          ; add item to inventory
0E/A029: 90 04     BCC $A02F
0E/A02B: AD 00 7B  LDA $7B00
0E/A02E: 60        RTS 
0E/A02F: A0 24     LDY #$24
0E/A031: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/A034: A0 2B     LDY #$2B
0E/A036: 20 07 99  JSR $9907          ; hide npc
0E/A039: A9 47     LDA #$47           ; play song $07
0E/A03B: 85 E0     STA $E0
0E/A03D: AD 01 7B  LDA $7B01
0E/A040: 60        RTS 
; npc $2E: fynn throne room secret passage
0E/A041: AD 01 7B  LDA $7B01
0E/A044: 8D 2F 7B  STA $7B2F
0E/A047: AD 00 7B  LDA $7B00
0E/A04A: 60        RTS 
; npc $30: 
0E/A04B: AD 01 7B  LDA $7B01
0E/A04E: 8D 21 7B  STA $7B21          ; response to keyword 1 (wild rose)
0E/A051: AD 00 7B  LDA $7B00
0E/A054: 60        RTS 
; npc $31: scott
0E/A055: 20 63 98  JSR $9863          ; find first empty inventory slot
0E/A058: 90 04     BCC $A05E
0E/A05A: AD 00 7B  LDA $7B00
0E/A05D: 60        RTS 
0E/A05E: AD 02 7B  LDA $7B02
0E/A061: 8D 21 7B  STA $7B21          ; response to keyword 1 (wild rose)
0E/A064: AD 01 7B  LDA $7B01
0E/A067: 60        RTS 
; npc $32: dreadnought guard
0E/A068: AD 01 7B  LDA $7B01          ; $CC: "Welcome aboard."
0E/A06B: 8D 33 7B  STA $7B33          ; response to key item 3 (Pass)
0E/A06E: AD 02 7B  LDA $7B02          ; $CD: "Rebel curs!"
0E/A071: 8D 21 7B  STA $7B21          ; response to keyword 1 (wild rose)
0E/A074: AD 00 7B  LDA $7B00          ; $CB: "Guard:What do you want?"
0E/A077: 60        RTS 
; npc $33: 
0E/A078: AD 00 7B  LDA $7B00          ; $E8: "Slave:Help!"
0E/A07B: 60        RTS 
; npc $34: tobul the blacksmith
0E/A07C: A0 C3     LDY #$C3
0E/A07E: 20 9E 98  JSR $989E          ; check event switch
0E/A081: D0 16     BNE $A099
0E/A083: AD 01 7B  LDA $7B01          ; $9F: "Or am I? I'm Tobul,the best blacksmith around!""
0E/A086: 8D 21 7B  STA $7B21          ; response to keyword 1 (wild rose)
0E/A089: AD 02 7B  LDA $7B02          ; $A0: "If I had some Mythril,I could make finer equipment."
0E/A08C: 8D 22 7B  STA $7B22          ; response to keyword 2 (mythril)
0E/A08F: AD 03 7B  LDA $7B03          ; $A1: "That's Mythril!I'll start making new equipment!"
0E/A092: 8D 34 7B  STA $7B34          ; response to key item 4 (mythril)
0E/A095: AD 00 7B  LDA $7B00          ; $9E: "Tobul:I'm just a batty old man…"
0E/A098: 60        RTS 
0E/A099: AD 04 7B  LDA $7B04          ; $A2: "No time to talk. There's work to be done!"
0E/A09C: 60        RTS 
; npc $35: rebel spy (bafsk)
0E/A09D: A0 23     LDY #$23
0E/A09F: 20 9E 98  JSR $989E          ; check event switch
0E/A0A2: D0 10     BNE $A0B4
0E/A0A4: AD 01 7B  LDA $7B01          ; $C7: "Fools!If the Dark Knight sees ..."
0E/A0A7: 8D 21 7B  STA $7B21          ; response to keyword 1 (wild rose)
0E/A0AA: AD 02 7B  LDA $7B02          ; $C7: "Fools!If the Dark Knight sees ..."
0E/A0AD: 8D 23 7B  STA $7B23          ; response to keyword 3 (dreadnought)
0E/A0B0: AD 00 7B  LDA $7B00          ; $C7: "Fools!If the Dark Knight sees ..."
0E/A0B3: 60        RTS 
0E/A0B4: AD 04 7B  LDA $7B04          ; $C9: "You're one of us! I had to keep ..."
0E/A0B7: 8D 21 7B  STA $7B21          ; response to keyword 1 (wild rose)
0E/A0BA: AD 05 7B  LDA $7B05          ; $CA: "So you want to destroy the Dreadnought..."
0E/A0BD: 8D 23 7B  STA $7B23          ; response to keyword 3 (dreadnought)
0E/A0C0: AD 03 7B  LDA $7B03          ; $C8: "We can goof off more with lazy Borghen ..."
0E/A0C3: 60        RTS 
; npc $36: 
0E/A0C4: A0 13     LDY #$13
0E/A0C6: 20 9E 98  JSR $989E          ; check event switch
0E/A0C9: F0 04     BEQ $A0CF
0E/A0CB: AD 00 7B  LDA $7B00
0E/A0CE: 60        RTS 
0E/A0CF: A0 36     LDY #$36
0E/A0D1: 20 07 99  JSR $9907          ; hide npc
0E/A0D4: AD 01 7B  LDA $7B01
0E/A0D7: 60        RTS 
; npc $38: sunfire holder
0E/A0D8: 20 63 98  JSR $9863          ; find first empty inventory slot
0E/A0DB: 90 04     BCC $A0E1
0E/A0DD: AD 00 7B  LDA $7B00
0E/A0E0: 60        RTS 
0E/A0E1: AD 02 7B  LDA $7B02
0E/A0E4: 8D 37 7B  STA $7B37
0E/A0E7: AD 01 7B  LDA $7B01
0E/A0EA: 60        RTS 
; npc $39: 
0E/A0EB: A0 02     LDY #$02
0E/A0ED: 20 9E 98  JSR $989E          ; check event switch
0E/A0F0: F0 04     BEQ $A0F6
0E/A0F2: AD 00 7B  LDA $7B00
0E/A0F5: 60        RTS 
0E/A0F6: AD 02 7B  LDA $7B02
0E/A0F9: 8D 38 7B  STA $7B38
0E/A0FC: AD 01 7B  LDA $7B01
0E/A0FF: 60        RTS 
; npc $3A: 
0E/A100: A9 09     LDA #$09
0E/A102: 20 73 98  JSR $9873          ; add item to inventory
0E/A105: 90 04     BCC $A10B
0E/A107: AD 00 7B  LDA $7B00
0E/A10A: 60        RTS 
0E/A10B: A0 3A     LDY #$3A
0E/A10D: 20 07 99  JSR $9907          ; hide npc
0E/A110: A9 47     LDA #$47           ; play song $07
0E/A112: 85 E0     STA $E0
0E/A114: AD 01 7B  LDA $7B01
0E/A117: 60        RTS 
; npc $3B: 
0E/A118: A0 25     LDY #$25
0E/A11A: 20 9E 98  JSR $989E          ; check event switch
0E/A11D: F0 0A     BEQ $A129
0E/A11F: AD 01 7B  LDA $7B01
0E/A122: 8D 3A 7B  STA $7B3A
0E/A125: AD 00 7B  LDA $7B00
0E/A128: 60        RTS 
0E/A129: AD 02 7B  LDA $7B02
0E/A12C: 60        RTS 
; npc $3C,$5F: dreadnought captains, imperial guards (fynn)
0E/A12D: AD 01 7B  LDA $7B01
0E/A130: 20 E1 98  JSR $98E1          ; set battle id
0E/A133: AD 00 7B  LDA $7B00
0E/A136: 60        RTS 
; npc $3F: gottos
0E/A137: A0 3F     LDY #$3F
0E/A139: 20 07 99  JSR $9907          ; hide npc
0E/A13C: AD 12 60  LDA $6012
0E/A13F: 49 11     EOR #$11
0E/A141: 8D 12 60  STA $6012
0E/A144: A0 5F     LDY #$5F
0E/A146: 20 EF 98  JSR $98EF
0E/A149: A0 05     LDY #$05
0E/A14B: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/A14E: A0 0F     LDY #$0F
0E/A150: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/A153: A0 12     LDY #$12
0E/A155: 20 B1 98  JSR $98B1          ; set event switch
0E/A158: A0 92     LDY #$92
0E/A15A: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/A15D: A0 93     LDY #$93
0E/A15F: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/A162: A0 94     LDY #$94
0E/A164: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/A167: A0 95     LDY #$95
0E/A169: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/A16C: AD 52 60  LDA $6052
0E/A16F: 09 C0     ORA #$C0
0E/A171: 8D 52 60  STA $6052
0E/A174: A9 FF     LDA #$FF
0E/A176: 8D 53 60  STA $6053
0E/A179: 8D 54 60  STA $6054
0E/A17C: AD 55 60  LDA $6055
0E/A17F: 09 03     ORA #$03
0E/A181: 8D 55 60  STA $6055
0E/A184: AD 5A 60  LDA $605A
0E/A187: 09 0E     ORA #$0E
0E/A189: 8D 5A 60  STA $605A
0E/A18C: AD 01 7B  LDA $7B01
0E/A18F: 85 6C     STA $6C
0E/A191: AD 00 7B  LDA $7B00
0E/A194: 60        RTS 
; npc $40: doppelganger
0E/A195: A0 59     LDY #$59
0E/A197: 20 9E 98  JSR $989E          ; check event switch
0E/A19A: F0 09     BEQ $A1A5
0E/A19C: AD 01 7B  LDA $7B01
0E/A19F: 85 6C     STA $6C
0E/A1A1: AD 00 7B  LDA $7B00
0E/A1A4: 60        RTS 
0E/A1A5: AD 03 7B  LDA $7B03
0E/A1A8: 8D 3C 7B  STA $7B3C
0E/A1AB: AD 02 7B  LDA $7B02
0E/A1AE: 60        RTS 
; npc $41: mysidian orb 1
0E/A1AF: A9 10     LDA #$10
0E/A1B1: D0 0A     BNE $A1BD
; npc $42: mysidian orb 2
0E/A1B3: A9 11     LDA #$11
0E/A1B5: D0 06     BNE $A1BD
; npc $43: mysidian orb 3
0E/A1B7: A9 14     LDA #$14
0E/A1B9: D0 02     BNE $A1BD
; npc $44: mysidian orb 4
0E/A1BB: A9 13     LDA #$13
0E/A1BD: 85 80     STA $80
0E/A1BF: A5 F0     LDA $F0
0E/A1C1: 29 C0     AND #$C0
0E/A1C3: 05 80     ORA $80
0E/A1C5: AA        TAX 
0E/A1C6: BD 00 61  LDA $6100,X
0E/A1C9: 18        CLC 
0E/A1CA: 69 0A     ADC #$0A
0E/A1CC: C9 64     CMP #$64
0E/A1CE: 90 02     BCC $A1D2
0E/A1D0: A9 63     LDA #$63
0E/A1D2: 9D 00 61  STA $6100,X
0E/A1D5: BD 10 61  LDA $6110,X
0E/A1D8: 18        CLC 
0E/A1D9: 69 0A     ADC #$0A
0E/A1DB: C9 64     CMP #$64
0E/A1DD: 90 02     BCC $A1E1
0E/A1DF: A9 63     LDA #$63
0E/A1E1: 9D 10 61  STA $6110,X
0E/A1E4: A4 A0     LDY $A0
0E/A1E6: 20 07 99  JSR $9907          ; hide npc
0E/A1E9: AD 00 7B  LDA $7B00
0E/A1EC: 60        RTS 
; npc $45: mysidian orb 5
0E/A1ED: A9 BF     LDA #$BF
0E/A1EF: 20 73 98  JSR $9873          ; add item to inventory
0E/A1F2: 90 04     BCC $A1F8
0E/A1F4: AD 00 7B  LDA $7B00
0E/A1F7: 60        RTS 
0E/A1F8: AD 02 7B  LDA $7B02
0E/A1FB: 85 6C     STA $6C
0E/A1FD: AD 01 7B  LDA $7B01
0E/A200: 60        RTS 
; npc $46: fynn castle mirror
0E/A201: A0 45     LDY #$45
0E/A203: 20 9E 98  JSR $989E          ; check event switch
0E/A206: F0 0A     BEQ $A212
0E/A208: AD 01 7B  LDA $7B01
0E/A20B: 8D 39 7B  STA $7B39
0E/A20E: AD 00 7B  LDA $7B00
0E/A211: 60        RTS 
0E/A212: 20 63 98  JSR $9863          ; find first empty inventory slot
0E/A215: 90 04     BCC $A21B
0E/A217: AD 02 7B  LDA $7B02
0E/A21A: 60        RTS 
0E/A21B: AD 04 7B  LDA $7B04
0E/A21E: 8D 39 7B  STA $7B39
0E/A221: AD 03 7B  LDA $7B03
0E/A224: 60        RTS 
; npc $4D: chocobo
0E/A225: A9 01     LDA #$01           ; set chocobo status
0E/A227: 8D 08 60  STA $6008
0E/A22A: AD 3E 62  LDA $623E          ; set chocobo position
0E/A22D: 8D 09 60  STA $6009
0E/A230: AD 3F 62  LDA $623F
0E/A233: 8D 0A 60  STA $600A
0E/A236: AD 00 7B  LDA $7B00          ; $EE: "You caught a Chocobo!"
0E/A239: 60        RTS 
; npc $4E: mysidia bookshelf
0E/A23A: AD 01 7B  LDA $7B01
0E/A23D: 8D 22 7B  STA $7B22          ; response to keyword 2 (mythril)
0E/A240: AD 02 7B  LDA $7B02
0E/A243: 8D 24 7B  STA $7B24
0E/A246: AD 03 7B  LDA $7B03
0E/A249: 8D 25 7B  STA $7B25
0E/A24C: AD 04 7B  LDA $7B04
0E/A24F: 8D 26 7B  STA $7B26
0E/A252: AD 05 7B  LDA $7B05
0E/A255: 8D 27 7B  STA $7B27
0E/A258: AD 06 7B  LDA $7B06
0E/A25B: 8D 28 7B  STA $7B28
0E/A25E: AD 07 7B  LDA $7B07
0E/A261: 8D 29 7B  STA $7B29
0E/A264: AD 08 7B  LDA $7B08
0E/A267: 8D 2A 7B  STA $7B2A
0E/A26A: AD 09 7B  LDA $7B09
0E/A26D: 8D 2B 7B  STA $7B2B
0E/A270: AD 0A 7B  LDA $7B0A
0E/A273: 8D 2E 7B  STA $7B2E
0E/A276: AD 0B 7B  LDA $7B0B
0E/A279: 8D 2D 7B  STA $7B2D
0E/A27C: AD 00 7B  LDA $7B00
0E/A27F: 60        RTS 
; npc $54: kashuan keep door
0E/A280: AD 01 7B  LDA $7B01
0E/A283: 8D 36 7B  STA $7B36
0E/A286: AD 00 7B  LDA $7B00
0E/A289: 60        RTS 
; npc $55: deist npc 1
0E/A28A: A0 56     LDY #$56
0E/A28C: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/A28F: 4C 62 9F  JMP $9F62          ; hide current npc
; npc $56: 
0E/A292: A0 57     LDY #$57
0E/A294: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/A297: A0 58     LDY #$58
0E/A299: 20 C7 98  JSR $98C7          ; set event switch and show npc
0E/A29C: 4C 62 9F  JMP $9F62          ; hide current npc
; npc $57,$58: dragoon child/mother (deist 2F)
0E/A29F: AD 1B 60  LDA $601B
0E/A2A2: 29 02     AND #$02
0E/A2A4: D0 10     BNE $A2B6
0E/A2A6: AD 01 7B  LDA $7B01
0E/A2A9: 8D 2A 7B  STA $7B2A
0E/A2AC: AD 02 7B  LDA $7B02
0E/A2AF: 8D 2B 7B  STA $7B2B
0E/A2B2: AD 00 7B  LDA $7B00
0E/A2B5: 60        RTS 
0E/A2B6: A0 25     LDY #$25
0E/A2B8: 20 9E 98  JSR $989E          ; check event switch
0E/A2BB: F0 04     BEQ $A2C1
0E/A2BD: AD 03 7B  LDA $7B03
0E/A2C0: 60        RTS 
0E/A2C1: A0 19     LDY #$19
0E/A2C3: 20 9E 98  JSR $989E          ; check event switch
0E/A2C6: F0 04     BEQ $A2CC
0E/A2C8: AD 04 7B  LDA $7B04
0E/A2CB: 60        RTS 
0E/A2CC: A0 1D     LDY #$1D
0E/A2CE: 20 9E 98  JSR $989E          ; check event switch
0E/A2D1: F0 04     BEQ $A2D7
0E/A2D3: AD 05 7B  LDA $7B05
0E/A2D6: 60        RTS 
0E/A2D7: A5 A0     LDA $A0
0E/A2D9: C9 58     CMP #$58
0E/A2DB: F0 04     BEQ $A2E1
0E/A2DD: AD 06 7B  LDA $7B06
0E/A2E0: 60        RTS 
0E/A2E1: 20 63 98  JSR $9863          ; find first empty inventory slot
0E/A2E4: 90 04     BCC $A2EA
0E/A2E6: AD 06 7B  LDA $7B06
0E/A2E9: 60        RTS 
0E/A2EA: AD 08 7B  LDA $7B08
0E/A2ED: 8D 2A 7B  STA $7B2A
0E/A2F0: AD 07 7B  LDA $7B07
0E/A2F3: 60        RTS 
; npc $59: 
0E/A2F4: AD 01 7B  LDA $7B01
0E/A2F7: 8D 3B 7B  STA $7B3B
0E/A2FA: AD 00 7B  LDA $7B00
0E/A2FD: 60        RTS 
; npc $5E: 
0E/A2FE: AD 01 7B  LDA $7B01
0E/A301: 8D 26 7B  STA $7B26
0E/A304: AD 00 7B  LDA $7B00
0E/A307: 60        RTS 
; npc $60-$7F
0E/A308: A0 50     LDY #$50
0E/A30A: 20 9E 98  JSR $989E          ; check event switch
0E/A30D: D0 04     BNE $A313
0E/A30F: AD 00 7B  LDA $7B00
0E/A312: 60        RTS 
0E/A313: A0 C3     LDY #$C3
0E/A315: 20 9E 98  JSR $989E          ; check event switch
0E/A318: D0 04     BNE $A31E
0E/A31A: AD 01 7B  LDA $7B01
0E/A31D: 60        RTS 
0E/A31E: A0 51     LDY #$51
0E/A320: 20 9E 98  JSR $989E          ; check event switch
0E/A323: D0 04     BNE $A329
0E/A325: AD 02 7B  LDA $7B02
0E/A328: 60        RTS 
0E/A329: A0 38     LDY #$38
0E/A32B: 20 9E 98  JSR $989E          ; check event switch
0E/A32E: F0 04     BEQ $A334
0E/A330: AD 03 7B  LDA $7B03
0E/A333: 60        RTS 
0E/A334: A0 39     LDY #$39
0E/A336: 20 9E 98  JSR $989E          ; check event switch
0E/A339: F0 04     BEQ $A33F
0E/A33B: AD 04 7B  LDA $7B04
0E/A33E: 60        RTS 
0E/A33F: A0 20     LDY #$20
0E/A341: 20 9E 98  JSR $989E          ; check event switch
0E/A344: F0 04     BEQ $A34A
0E/A346: AD 05 7B  LDA $7B05
0E/A349: 60        RTS 
0E/A34A: A0 25     LDY #$25
0E/A34C: 20 9E 98  JSR $989E          ; check event switch
0E/A34F: F0 04     BEQ $A355
0E/A351: AD 06 7B  LDA $7B06
0E/A354: 60        RTS 
0E/A355: A0 03     LDY #$03
0E/A357: 20 9E 98  JSR $989E          ; check event switch
0E/A35A: F0 04     BEQ $A360
0E/A35C: AD 07 7B  LDA $7B07
0E/A35F: 60        RTS 
0E/A360: A0 04     LDY #$04
0E/A362: 20 9E 98  JSR $989E          ; check event switch
0E/A365: D0 04     BNE $A36B
0E/A367: AD 08 7B  LDA $7B08
0E/A36A: 60        RTS 
0E/A36B: A0 05     LDY #$05
0E/A36D: 20 9E 98  JSR $989E          ; check event switch
0E/A370: D0 04     BNE $A376
0E/A372: AD 09 7B  LDA $7B09
0E/A375: 60        RTS 
0E/A376: AD 0A 7B  LDA $7B0A
0E/A379: 60        RTS 
; npc $80,$81: 
0E/A37A: AD 00 7B  LDA $7B00
0E/A37D: 60        RTS 
; npc $82-$87: salamand npcs
0E/A37E: A0 33     LDY #$33
0E/A380: 20 9E 98  JSR $989E          ; check event switch
0E/A383: F0 04     BEQ $A389
0E/A385: AD 00 7B  LDA $7B00
0E/A388: 60        RTS 
0E/A389: A0 2B     LDY #$2B
0E/A38B: 20 9E 98  JSR $989E          ; check event switch
0E/A38E: F0 04     BEQ $A394
0E/A390: AD 01 7B  LDA $7B01
0E/A393: 60        RTS 
0E/A394: AD 02 7B  LDA $7B02
0E/A397: 60        RTS 
; npc $88-$8F: bafsk npcs
0E/A398: A0 1A     LDY #$1A
0E/A39A: 20 9E 98  JSR $989E          ; check event switch
0E/A39D: F0 04     BEQ $A3A3
0E/A39F: AD 00 7B  LDA $7B00
0E/A3A2: 60        RTS 
0E/A3A3: A0 23     LDY #$23
0E/A3A5: 20 9E 98  JSR $989E          ; check event switch
0E/A3A8: F0 04     BEQ $A3AE
0E/A3AA: AD 01 7B  LDA $7B01
0E/A3AD: 60        RTS 
0E/A3AE: A0 51     LDY #$51
0E/A3B0: 20 9E 98  JSR $989E          ; check event switch
0E/A3B3: F0 0B     BEQ $A3C0
0E/A3B5: A0 39     LDY #$39
0E/A3B7: 20 9E 98  JSR $989E          ; check event switch
0E/A3BA: F0 04     BEQ $A3C0
0E/A3BC: AD 02 7B  LDA $7B02
0E/A3BF: 60        RTS 
0E/A3C0: AD 03 7B  LDA $7B03
0E/A3C3: 60        RTS 
; generic npc (dialogue)
0E/A3C4: AD 00 7B  LDA $7B00
0E/A3C7: 60        RTS 
; generic npc
0E/A3C8: A0 41     LDY #$41
0E/A3CA: 20 9E 98  JSR $989E          ; check event switch
0E/A3CD: F0 04     BEQ $A3D3
0E/A3CF: AD 00 7B  LDA $7B00
0E/A3D2: 60        RTS 
0E/A3D3: A0 29     LDY #$29
0E/A3D5: 20 9E 98  JSR $989E          ; check event switch
0E/A3D8: F0 04     BEQ $A3DE
0E/A3DA: AD 01 7B  LDA $7B01
0E/A3DD: 60        RTS 
0E/A3DE: A0 1D     LDY #$1D
0E/A3E0: 20 9E 98  JSR $989E          ; check event switch
0E/A3E3: F0 04     BEQ $A3E9
0E/A3E5: AD 02 7B  LDA $7B02
0E/A3E8: 60        RTS 
0E/A3E9: AD 03 7B  LDA $7B03
0E/A3EC: 60        RTS 
; generic npc (dialogue)
0E/A3ED: AD 00 7B  LDA $7B00
0E/A3F0: 60        RTS 
; generic npc
0E/A3F1: A0 41     LDY #$41
0E/A3F3: 20 9E 98  JSR $989E          ; check event switch
0E/A3F6: F0 04     BEQ $A3FC
0E/A3F8: AD 00 7B  LDA $7B00
0E/A3FB: 60        RTS 
0E/A3FC: AD 01 7B  LDA $7B01
0E/A3FF: 60        RTS 

; bit mask for switches
0E/A400: 01 02 04 08 10 20 40 80
0E/A408: 01 02 04 08 10 20 40 80
0E/A410: 01 02 04 08 10 20 40 80
0E/A418: 01 02 04 08 10 20 40 80
0E/A420: 01 02 04 08 10 20 40 80
0E/A428: 01 02 04 08 10 20 40 80
0E/A430: 01 02 04 08 10 20 40 80
0E/A438: 01 02 04 08 10 20 40 80
0E/A440: 01 02 04 08 10 20 40 80
0E/A448: 01 02 04 08 10 20 40 80
0E/A450: 01 02 04 08 10 20 40 80
0E/A458: 01 02 04 08 10 20 40 80
0E/A460: 01 02 04 08 10 20 40 80
0E/A468: 01 02 04 08 10 20 40 80
0E/A470: 01 02 04 08 10 20 40 80
0E/A478: 01 02 04 08 10 20 40 80
0E/A480: 01 02 04 08 10 20 40 80
0E/A488: 01 02 04 08 10 20 40 80
0E/A490: 01 02 04 08 10 20 40 80
0E/A498: 01 02 04 08 10 20 40 80
0E/A4A0: 01 02 04 08 10 20 40 80
0E/A4A8: 01 02 04 08 10 20 40 80
0E/A4B0: 01 02 04 08 10 20 40 80
0E/A4B8: 01 02 04 08 10 20 40 80
0E/A4C0: 01 02 04 08 10 20 40 80
0E/A4C8: 01 02 04 08 10 20 40 80
0E/A4D0: 01 02 04 08 10 20 40 80
0E/A4D8: 01 02 04 08 10 20 40 80
0E/A4E0: 01 02 04 08 10 20 40 80
0E/A4E8: 01 02 04 08 10 20 40 80
0E/A4F0: 01 02 04 08 10 20 40 80
0E/A4F8: 01 02 04 08 10 20 40 80

; byte offset for switches
0E/A500: 00 00 00 00 00 00 00 00
0E/A508: 01 01 01 01 01 01 01 01
0E/A510: 02 02 02 02 02 02 02 02
0E/A518: 03 03 03 03 03 03 03 03
0E/A520: 04 04 04 04 04 04 04 04
0E/A528: 05 05 05 05 05 05 05 05
0E/A530: 06 06 06 06 06 06 06 06
0E/A538: 07 07 07 07 07 07 07 07
0E/A540: 08 08 08 08 08 08 08 08
0E/A548: 09 09 09 09 09 09 09 09
0E/A550: 0A 0A 0A 0A 0A 0A 0A 0A
0E/A558: 0B 0B 0B 0B 0B 0B 0B 0B
0E/A560: 0C 0C 0C 0C 0C 0C 0C 0C
0E/A568: 0D 0D 0D 0D 0D 0D 0D 0D
0E/A570: 0E 0E 0E 0E 0E 0E 0E 0E
0E/A578: 0F 0F 0F 0F 0F 0F 0F 0F
0E/A580: 10 10 10 10 10 10 10 10
0E/A588: 11 11 11 11 11 11 11 11
0E/A590: 12 12 12 12 12 12 12 12
0E/A598: 13 13 13 13 13 13 13 13
0E/A5A0: 14 14 14 14 14 14 14 14
0E/A5A8: 15 15 15 15 15 15 15 15
0E/A5B0: 16 16 16 16 16 16 16 16
0E/A5B8: 17 17 17 17 17 17 17 17
0E/A5C0: 18 18 18 18 18 18 18 18
0E/A5C8: 19 19 19 19 19 19 19 19
0E/A5D0: 1A 1A 1A 1A 1A 1A 1A 1A
0E/A5D8: 1B 1B 1B 1B 1B 1B 1B 1B
0E/A5E0: 1C 1C 1C 1C 1C 1C 1C 1C
0E/A5E8: 1D 1D 1D 1D 1D 1D 1D 1D
0E/A5F0: 1E 1E 1E 1E 1E 1E 1E 1E
0E/A5F8: 1F 1F 1F 1F 1F 1F 1F 1F

; --------------------------------------------------------------------------

; [ check if character can be cured ]

; clear carry if can be cured

0E/A600: BD 01 61  LDA $6101,X
0E/A603: 29 C0     AND #$C0
0E/A605: D0 12     BNE $A619          ; can't cure if dead or stone
0E/A607: BD 09 61  LDA $6109,X
0E/A60A: DD 0B 61  CMP $610B,X
0E/A60D: 90 08     BCC $A617
0E/A60F: BD 08 61  LDA $6108,X
0E/A612: DD 0A 61  CMP $610A,X
0E/A615: B0 02     BCS $A619          ; can't cure if at full hp
0E/A617: 18        CLC 
0E/A618: 60        RTS 
0E/A619: 38        SEC 
0E/A61A: 60        RTS 

; [  ]

0E/A61B: AD F0 79  LDA $79F0
0E/A61E: 18        CLC 
0E/A61F: 69 04     ADC #$04
0E/A621: CD F1 79  CMP $79F1
0E/A624: B0 43     BCS $A669
0E/A626: A6 6E     LDX $6E
0E/A628: 20 00 A6  JSR $A600
0E/A62B: 90 05     BCC $A632
0E/A62D: 20 67 DE  JSR $DE67          ; play error sound effect
0E/A630: 38        SEC 
0E/A631: 60        RTS 
0E/A632: A9 28     LDA #$28
0E/A634: 85 87     STA $87
0E/A636: A6 6E     LDX $6E
0E/A638: BD 35 62  LDA $6235,X
0E/A63B: 30 2A     BMI $A667
0E/A63D: BD 01 61  LDA $6101,X
0E/A640: 29 C0     AND #$C0
0E/A642: D0 23     BNE $A667
0E/A644: A5 87     LDA $87
0E/A646: 20 A3 A7  JSR $A7A3          ; A += (0..A)
0E/A649: 85 80     STA $80
0E/A64B: A5 08     LDA $08
0E/A64D: 0A        ASL 
0E/A64E: 05 0A     ORA $0A
0E/A650: AA        TAX 
0E/A651: BD 10 62  LDA $6210,X
0E/A654: 18        CLC 
0E/A655: 69 01     ADC #$01
0E/A657: 85 81     STA $81
0E/A659: 20 B3 A7  JSR $A7B3          ; multiply (8-bit)
0E/A65C: A5 82     LDA $82
0E/A65E: 85 80     STA $80
0E/A660: A5 83     LDA $83
0E/A662: 85 81     STA $81
0E/A664: 20 1F A9  JSR $A91F
0E/A667: 18        CLC 
0E/A668: 60        RTS 
0E/A669: A2 00     LDX #$00
0E/A66B: 20 00 A6  JSR $A600
0E/A66E: 90 1F     BCC $A68F
0E/A670: A2 40     LDX #$40
0E/A672: 20 00 A6  JSR $A600
0E/A675: 90 18     BCC $A68F
0E/A677: A2 80     LDX #$80
0E/A679: 20 00 A6  JSR $A600
0E/A67C: 90 11     BCC $A68F
0E/A67E: AD F5 62  LDA $62F5
0E/A681: 30 07     BMI $A68A
0E/A683: A2 C0     LDX #$C0
0E/A685: 20 00 A6  JSR $A600
0E/A688: 90 05     BCC $A68F
0E/A68A: 20 67 DE  JSR $DE67          ; play error sound effect
0E/A68D: 38        SEC 
0E/A68E: 60        RTS 
0E/A68F: A9 00     LDA #$00
0E/A691: 85 6E     STA $6E
0E/A693: A9 0A     LDA #$0A
0E/A695: 85 87     STA $87
0E/A697: 20 36 A6  JSR $A636
0E/A69A: A5 6E     LDA $6E
0E/A69C: 18        CLC 
0E/A69D: 69 40     ADC #$40
0E/A69F: 85 6E     STA $6E
0E/A6A1: D0 F0     BNE $A693
0E/A6A3: 18        CLC 
0E/A6A4: 60        RTS 

; [  ]

0E/A6A5: A9 80     LDA #$80
0E/A6A7: 85 87     STA $87
0E/A6A9: AD F0 79  LDA $79F0
0E/A6AC: 18        CLC 
0E/A6AD: 69 04     ADC #$04
0E/A6AF: CD F1 79  CMP $79F1
0E/A6B2: B0 08     BCS $A6BC
0E/A6B4: 20 34 A7  JSR $A734
0E/A6B7: 20 0E A8  JSR $A80E
0E/A6BA: 18        CLC 
0E/A6BB: 60        RTS 
0E/A6BC: 20 5B A7  JSR $A75B
0E/A6BF: A9 00     LDA #$00
0E/A6C1: 20 D0 A6  JSR $A6D0
0E/A6C4: A9 40     LDA #$40
0E/A6C6: 20 D0 A6  JSR $A6D0
0E/A6C9: A9 80     LDA #$80
0E/A6CB: 20 D0 A6  JSR $A6D0
0E/A6CE: A9 C0     LDA #$C0
0E/A6D0: 85 6E     STA $6E
0E/A6D2: AA        TAX 
0E/A6D3: BD 35 62  LDA $6235,X
0E/A6D6: 30 1A     BMI $A6F2
0E/A6D8: BD 01 61  LDA $6101,X
0E/A6DB: 25 87     AND $87
0E/A6DD: F0 13     BEQ $A6F2
0E/A6DF: A5 87     LDA $87
0E/A6E1: 49 FF     EOR #$FF
0E/A6E3: 3D 01 61  AND $6101,X
0E/A6E6: 9D 01 61  STA $6101,X
0E/A6E9: 20 0E A8  JSR $A80E
0E/A6EC: 5E 09 61  LSR $6109,X
0E/A6EF: 7E 08 61  ROR $6108,X
0E/A6F2: 18        CLC 
0E/A6F3: 60        RTS 
0E/A6F4: A5 08     LDA $08
0E/A6F6: 0A        ASL 
0E/A6F7: 05 0A     ORA $0A
0E/A6F9: AA        TAX 
0E/A6FA: BD 10 62  LDA $6210,X
0E/A6FD: AA        TAX 
0E/A6FE: E8        INX 
0E/A6FF: AD F0 79  LDA $79F0
0E/A702: 18        CLC 
0E/A703: 69 04     ADC #$04
0E/A705: CD F1 79  CMP $79F1
0E/A708: B0 0B     BCS $A715
0E/A70A: E8        INX 
0E/A70B: BD 22 A7  LDA $A722,X
0E/A70E: 85 87     STA $87
0E/A710: 20 34 A7  JSR $A734
0E/A713: 18        CLC 
0E/A714: 60        RTS 
0E/A715: BD 22 A7  LDA $A722,X
0E/A718: 85 87     STA $87
0E/A71A: 20 5B A7  JSR $A75B
0E/A71D: 20 7F A7  JSR $A77F
0E/A720: 18        CLC 
0E/A721: 60        RTS 

0E/A722: 00 02 06 0E
0E/A726: 1E 3E 7E
0E/A729: FE FE FE
0E/A72C: FE FE FE
0E/A72F: FE FE FE
0E/A732: FE FE

; [  ]

0E/A734: A6 6E     LDX $6E
0E/A736: BD 01 61  LDA $6101,X
0E/A739: 25 87     AND $87
0E/A73B: D0 07     BNE $A744
0E/A73D: 20 67 DE  JSR $DE67          ; play error sound effect
0E/A740: 68        PLA 
0E/A741: 68        PLA 
0E/A742: 38        SEC 
0E/A743: 60        RTS 
0E/A744: A5 87     LDA $87
0E/A746: 3D 01 61  AND $6101,X
0E/A749: 10 05     BPL $A750
0E/A74B: A9 01     LDA #$01
0E/A74D: 9D 08 61  STA $6108,X
0E/A750: A5 87     LDA $87
0E/A752: 49 FF     EOR #$FF
0E/A754: 3D 01 61  AND $6101,X
0E/A757: 9D 01 61  STA $6101,X
0E/A75A: 60        RTS 

; [  ]

0E/A75B: AD 01 61  LDA $6101
0E/A75E: 0D 41 61  ORA $6141
0E/A761: 0D 81 61  ORA $6181
0E/A764: AE F5 62  LDX $62F5
0E/A767: 30 03     BMI $A76C
0E/A769: 0D C1 61  ORA $61C1
0E/A76C: 25 87     AND $87
0E/A76E: D0 06     BNE $A776
0E/A770: 20 67 DE  JSR $DE67          ; play error sound effect
0E/A773: 68        PLA 
0E/A774: 68        PLA 
0E/A775: 38        SEC 
0E/A776: 60        RTS 

; [  ]

0E/A777: BD 01 61  LDA $6101,X
0E/A77A: 25 87     AND $87
0E/A77C: D0 C6     BNE $A744
0E/A77E: 60        RTS 

; [  ]

0E/A77F: A2 00     LDX #$00
0E/A781: 20 77 A7  JSR $A777
0E/A784: A2 40     LDX #$40
0E/A786: 20 77 A7  JSR $A777
0E/A789: A2 80     LDX #$80
0E/A78B: 20 77 A7  JSR $A777
0E/A78E: A2 C0     LDX #$C0
0E/A790: AD F5 62  LDA $62F5
0E/A793: 10 E2     BPL $A777
0E/A795: 60        RTS 

; [ A = (0..A) ]

0E/A796: 85 80     STA $80
0E/A798: 20 AD C5  JSR $C5AD          ; get random number
0E/A79B: 85 81     STA $81
0E/A79D: 20 B3 A7  JSR $A7B3          ; multiply (8-bit)
0E/A7A0: A5 83     LDA $83
0E/A7A2: 60        RTS 

; [ A += (0..A) ]

0E/A7A3: A8        TAY 
0E/A7A4: 85 80     STA $80
0E/A7A6: 20 AD C5  JSR $C5AD          ; get random number
0E/A7A9: 85 81     STA $81
0E/A7AB: 20 B3 A7  JSR $A7B3          ; multiply (8-bit)
0E/A7AE: 98        TYA 
0E/A7AF: 18        CLC 
0E/A7B0: 65 83     ADC $83
0E/A7B2: 60        RTS 

; [ multiply (8-bit) ]

; +$82 = $80 * $81

0E/A7B3: A9 00     LDA #$00
0E/A7B5: 85 82     STA $82
0E/A7B7: 85 83     STA $83
0E/A7B9: 85 84     STA $84
0E/A7BB: 46 80     LSR $80
0E/A7BD: 90 0D     BCC $A7CC
0E/A7BF: A5 82     LDA $82
0E/A7C1: 18        CLC 
0E/A7C2: 65 81     ADC $81
0E/A7C4: 85 82     STA $82
0E/A7C6: A5 83     LDA $83
0E/A7C8: 65 84     ADC $84
0E/A7CA: 85 83     STA $83
0E/A7CC: 06 81     ASL $81
0E/A7CE: 26 84     ROL $84
0E/A7D0: A5 80     LDA $80
0E/A7D2: D0 E7     BNE $A7BB
0E/A7D4: 60        RTS 

; [  ]

0E/A7D5: A9 00     LDA #$00
0E/A7D7: 85 82     STA $82
0E/A7D9: 85 83     STA $83
0E/A7DB: A9 00     LDA #$00
0E/A7DD: A2 08     LDX #$08
0E/A7DF: 06 82     ASL $82
0E/A7E1: 26 83     ROL $83
0E/A7E3: 06 81     ASL $81
0E/A7E5: 2A        ROL 
0E/A7E6: C5 84     CMP $84
0E/A7E8: 90 08     BCC $A7F2
0E/A7EA: E5 84     SBC $84
0E/A7EC: E6 82     INC $82
0E/A7EE: D0 02     BNE $A7F2
0E/A7F0: E6 83     INC $83
0E/A7F2: CA        DEX 
0E/A7F3: D0 EA     BNE $A7DF
0E/A7F5: A2 08     LDX #$08
0E/A7F7: 06 82     ASL $82
0E/A7F9: 26 83     ROL $83
0E/A7FB: 06 80     ASL $80
0E/A7FD: 2A        ROL 
0E/A7FE: C5 84     CMP $84
0E/A800: 90 08     BCC $A80A
0E/A802: E5 84     SBC $84
0E/A804: E6 82     INC $82
0E/A806: D0 02     BNE $A80A
0E/A808: E6 83     INC $83
0E/A80A: CA        DEX 
0E/A80B: D0 EA     BNE $A7F7
0E/A80D: 60        RTS 

; [  ]

0E/A80E: A6 6E     LDX $6E
0E/A810: A5 08     LDA $08
0E/A812: 0A        ASL 
0E/A813: 05 0A     ORA $0A
0E/A815: A8        TAY 
0E/A816: B9 10 62  LDA $6210,Y
0E/A819: 49 0F     EOR #$0F
0E/A81B: 18        CLC 
0E/A81C: 69 01     ADC #$01
0E/A81E: 85 84     STA $84
0E/A820: BD 0A 61  LDA $610A,X
0E/A823: 85 80     STA $80
0E/A825: BD 0B 61  LDA $610B,X
0E/A828: 85 81     STA $81
0E/A82A: 20 D5 A7  JSR $A7D5
0E/A82D: A6 6E     LDX $6E
0E/A82F: A5 82     LDA $82
0E/A831: 9D 08 61  STA $6108,X
0E/A834: A5 83     LDA $83
0E/A836: 9D 09 61  STA $6109,X
0E/A839: 60        RTS 

; [  ]

0E/A83A: A6 6E     LDX $6E
0E/A83C: A5 08     LDA $08
0E/A83E: 0A        ASL 
0E/A83F: 05 0A     ORA $0A
0E/A841: A8        TAY 
0E/A842: B9 10 62  LDA $6210,Y
0E/A845: 49 0F     EOR #$0F
0E/A847: 18        CLC 
0E/A848: 69 01     ADC #$01
0E/A84A: 85 84     STA $84
0E/A84C: BD 08 61  LDA $6108,X
0E/A84F: 85 80     STA $80
0E/A851: BD 09 61  LDA $6109,X
0E/A854: 85 81     STA $81
0E/A856: 20 D5 A7  JSR $A7D5
0E/A859: A5 82     LDA $82
0E/A85B: 05 83     ORA $83
0E/A85D: D0 02     BNE $A861
0E/A85F: E6 82     INC $82
0E/A861: A6 6E     LDX $6E
0E/A863: A5 82     LDA $82
0E/A865: 9D 08 61  STA $6108,X
0E/A868: A5 83     LDA $83
0E/A86A: 9D 09 61  STA $6109,X
0E/A86D: 60        RTS 

; [  ]

0E/A86E: 20 AE AA  JSR $AAAE
0E/A871: A5 80     LDA $80
0E/A873: C5 81     CMP $81
0E/A875: F0 2F     BEQ $A8A6
0E/A877: A5 81     LDA $81
0E/A879: C9 20     CMP #$20
0E/A87B: D0 15     BNE $A892
0E/A87D: A6 80     LDX $80
0E/A87F: BD 60 60  LDA $6060,X
0E/A882: C9 10     CMP #$10
0E/A884: B0 05     BCS $A88B
0E/A886: 20 67 DE  JSR $DE67          ; play error sound effect
0E/A889: 18        CLC 
0E/A88A: 60        RTS 
0E/A88B: A9 00     LDA #$00
0E/A88D: 9D 60 60  STA $6060,X
0E/A890: 18        CLC 
0E/A891: 60        RTS 
0E/A892: A6 80     LDX $80
0E/A894: BD 60 60  LDA $6060,X
0E/A897: 48        PHA 
0E/A898: A4 81     LDY $81
0E/A89A: B9 60 60  LDA $6060,Y
0E/A89D: 9D 60 60  STA $6060,X
0E/A8A0: 68        PLA 
0E/A8A1: 99 60 60  STA $6060,Y
0E/A8A4: 18        CLC 
0E/A8A5: 60        RTS 
0E/A8A6: AA        TAX 
0E/A8A7: BD 60 60  LDA $6060,X
0E/A8AA: C9 10     CMP #$10
0E/A8AC: 90 D8     BCC $A886
0E/A8AE: C9 1C     CMP #$1C
0E/A8B0: 90 0B     BCC $A8BD
0E/A8B2: C9 98     CMP #$98
0E/A8B4: 90 D0     BCC $A886
0E/A8B6: C9 C0     CMP #$C0
0E/A8B8: B0 CC     BCS $A886
0E/A8BA: 4C 4F AA  JMP $AA4F
0E/A8BD: 86 0A     STX $0A
0E/A8BF: 38        SEC 
0E/A8C0: E9 10     SBC #$10
0E/A8C2: 85 08     STA $08
0E/A8C4: C9 0B     CMP #$0B
0E/A8C6: D0 05     BNE $A8CD
0E/A8C8: A5 2D     LDA $2D
0E/A8CA: 4A        LSR 
0E/A8CB: B0 B9     BCS $A886
0E/A8CD: A5 08     LDA $08
0E/A8CF: 18        CLC 
0E/A8D0: 69 2B     ADC #$2B
0E/A8D2: 20 01 A9  JSR $A901
0E/A8D5: A5 08     LDA $08
0E/A8D7: C9 0B     CMP #$0B
0E/A8D9: F0 05     BEQ $A8E0
0E/A8DB: 20 5E AE  JSR $AE5E
0E/A8DE: B0 1F     BCS $A8FF
0E/A8E0: 20 AA A9  JSR $A9AA
0E/A8E3: B0 F6     BCS $A8DB
0E/A8E5: 20 96 B3  JSR $B396
0E/A8E8: A5 08     LDA $08
0E/A8EA: C9 0B     CMP #$0B
0E/A8EC: F0 03     BEQ $A8F1
0E/A8EE: 20 60 EE  JSR $EE60
0E/A8F1: A9 42     LDA #$42           ; play song $02
0E/A8F3: 85 E0     STA $E0
0E/A8F5: 20 C6 AD  JSR $ADC6
0E/A8F8: A6 0A     LDX $0A
0E/A8FA: A9 00     LDA #$00
0E/A8FC: 9D 60 60  STA $6060,X
0E/A8FF: 38        SEC 
0E/A900: 60        RTS 
0E/A901: 48        PHA 
0E/A902: A9 00     LDA #$00
0E/A904: 85 A2     STA $A2
0E/A906: 20 80 B3  JSR $B380          ; close menu
0E/A909: 20 96 B3  JSR $B396
0E/A90C: A2 10     LDX #$10
0E/A90E: 20 86 B4  JSR $B486
0E/A911: 68        PLA 
0E/A912: 20 DF B3  JSR $B3DF          ; load menu text
0E/A915: A9 00     LDA #$00
0E/A917: 8D F0 79  STA $79F0
0E/A91A: 60        RTS 
0E/A91B: A9 00     LDA #$00
0E/A91D: 85 81     STA $81
0E/A91F: A5 80     LDA $80
0E/A921: A6 6E     LDX $6E
0E/A923: 18        CLC 
0E/A924: 7D 08 61  ADC $6108,X
0E/A927: 9D 08 61  STA $6108,X
0E/A92A: BD 09 61  LDA $6109,X
0E/A92D: 65 81     ADC $81
0E/A92F: 9D 09 61  STA $6109,X
0E/A932: BD 09 61  LDA $6109,X
0E/A935: DD 0B 61  CMP $610B,X
0E/A938: 90 19     BCC $A953
0E/A93A: F0 02     BEQ $A93E
0E/A93C: B0 08     BCS $A946
0E/A93E: BD 08 61  LDA $6108,X
0E/A941: DD 0A 61  CMP $610A,X
0E/A944: 90 0D     BCC $A953
0E/A946: BD 0A 61  LDA $610A,X
0E/A949: 9D 08 61  STA $6108,X
0E/A94C: BD 0B 61  LDA $610B,X
0E/A94F: 9D 09 61  STA $6109,X
0E/A952: 18        CLC 
0E/A953: 60        RTS 
0E/A954: A6 6E     LDX $6E
0E/A956: 18        CLC 
0E/A957: 7D 0C 61  ADC $610C,X
0E/A95A: 9D 0C 61  STA $610C,X
0E/A95D: BD 0D 61  LDA $610D,X
0E/A960: 69 00     ADC #$00
0E/A962: 9D 0D 61  STA $610D,X
0E/A965: BD 0D 61  LDA $610D,X
0E/A968: DD 0F 61  CMP $610F,X
0E/A96B: 90 19     BCC $A986
0E/A96D: F0 02     BEQ $A971
0E/A96F: B0 08     BCS $A979
0E/A971: BD 0C 61  LDA $610C,X
0E/A974: DD 0E 61  CMP $610E,X
0E/A977: 90 0D     BCC $A986
0E/A979: BD 0E 61  LDA $610E,X
0E/A97C: 9D 0C 61  STA $610C,X
0E/A97F: BD 0F 61  LDA $610F,X
0E/A982: 9D 0D 61  STA $610D,X
0E/A985: 18        CLC 
0E/A986: 60        RTS 
0E/A987: 85 80     STA $80
0E/A989: 3D 01 61  AND $6101,X
0E/A98C: D0 05     BNE $A993
0E/A98E: 20 67 DE  JSR $DE67          ; play error sound effect
0E/A991: 38        SEC 
0E/A992: 60        RTS 
0E/A993: A5 80     LDA $80
0E/A995: 49 FF     EOR #$FF
0E/A997: 3D 01 61  AND $6101,X
0E/A99A: 9D 01 61  STA $6101,X
0E/A99D: A5 80     LDA $80
0E/A99F: 29 80     AND #$80
0E/A9A1: F0 05     BEQ $A9A8
0E/A9A3: A9 01     LDA #$01
0E/A9A5: 9D 08 61  STA $6108,X
0E/A9A8: 18        CLC 
0E/A9A9: 60        RTS 
0E/A9AA: A6 6E     LDX $6E
0E/A9AC: A5 08     LDA $08
0E/A9AE: D0 11     BNE $A9C1
0E/A9B0: BD 01 61  LDA $6101,X
0E/A9B3: 29 C0     AND #$C0
0E/A9B5: D0 D7     BNE $A98E
0E/A9B7: A9 1E     LDA #$1E
0E/A9B9: 20 A3 A7  JSR $A7A3          ; A += (0..A)
0E/A9BC: 85 80     STA $80
0E/A9BE: 4C 1B A9  JMP $A91B
0E/A9C1: C9 01     CMP #$01
0E/A9C3: D0 04     BNE $A9C9
0E/A9C5: A9 04     LDA #$04
0E/A9C7: D0 BE     BNE $A987
0E/A9C9: C9 02     CMP #$02
0E/A9CB: D0 04     BNE $A9D1
0E/A9CD: A9 40     LDA #$40
0E/A9CF: D0 B6     BNE $A987
0E/A9D1: C9 03     CMP #$03
0E/A9D3: D0 04     BNE $A9D9
0E/A9D5: A9 08     LDA #$08
0E/A9D7: D0 AE     BNE $A987
0E/A9D9: C9 04     CMP #$04
0E/A9DB: D0 04     BNE $A9E1
0E/A9DD: A9 20     LDA #$20
0E/A9DF: D0 A6     BNE $A987
0E/A9E1: C9 05     CMP #$05
0E/A9E3: D0 04     BNE $A9E9
0E/A9E5: A9 10     LDA #$10
0E/A9E7: D0 9E     BNE $A987
0E/A9E9: C9 06     CMP #$06
0E/A9EB: D0 04     BNE $A9F1
0E/A9ED: A9 02     LDA #$02
0E/A9EF: D0 96     BNE $A987
0E/A9F1: C9 07     CMP #$07
0E/A9F3: D0 04     BNE $A9F9
0E/A9F5: A9 80     LDA #$80
0E/A9F7: D0 8E     BNE $A987
0E/A9F9: C9 08     CMP #$08
0E/A9FB: D0 0D     BNE $AA0A
0E/A9FD: BD 01 61  LDA $6101,X
0E/AA00: 29 C0     AND #$C0
0E/AA02: D0 46     BNE $AA4A
0E/AA04: 20 79 A9  JSR $A979
0E/AA07: 4C 46 A9  JMP $A946
0E/AA0A: C9 09     CMP #$09
0E/AA0C: D0 0F     BNE $AA1D
0E/AA0E: BD 01 61  LDA $6101,X
0E/AA11: 29 C0     AND #$C0
0E/AA13: D0 35     BNE $AA4A
0E/AA15: A9 14     LDA #$14
0E/AA17: 20 A3 A7  JSR $A7A3          ; A += (0..A)
0E/AA1A: 4C 54 A9  JMP $A954
0E/AA1D: C9 0A     CMP #$0A
0E/AA1F: D0 11     BNE $AA32
0E/AA21: BD 01 61  LDA $6101,X
0E/AA24: 29 C0     AND #$C0
0E/AA26: D0 22     BNE $AA4A
0E/AA28: A9 64     LDA #$64
0E/AA2A: 20 A3 A7  JSR $A7A3          ; A += (0..A)
0E/AA2D: 85 80     STA $80
0E/AA2F: 4C 1B A9  JMP $A91B
0E/AA32: A2 00     LDX #$00
0E/AA34: BD 01 61  LDA $6101,X
0E/AA37: 29 C0     AND #$C0
0E/AA39: D0 06     BNE $AA41
0E/AA3B: 20 79 A9  JSR $A979
0E/AA3E: 20 46 A9  JSR $A946
0E/AA41: 8A        TXA 
0E/AA42: 18        CLC 
0E/AA43: 69 40     ADC #$40
0E/AA45: AA        TAX 
0E/AA46: D0 EC     BNE $AA34
0E/AA48: 18        CLC 
0E/AA49: 60        RTS 
0E/AA4A: 20 67 DE  JSR $DE67          ; play error sound effect
0E/AA4D: 38        SEC 
0E/AA4E: 60        RTS 
0E/AA4F: 38        SEC 
0E/AA50: E9 98     SBC #$98
0E/AA52: 85 08     STA $08
0E/AA54: 18        CLC 
0E/AA55: 69 C0     ADC #$C0
0E/AA57: 85 09     STA $09
0E/AA59: 86 0A     STX $0A
0E/AA5B: A9 3C     LDA #$3C
0E/AA5D: 20 01 A9  JSR $A901
0E/AA60: 20 5E AE  JSR $AE5E
0E/AA63: B0 47     BCS $AAAC
0E/AA65: A6 6E     LDX $6E
0E/AA67: BD 01 61  LDA $6101,X
0E/AA6A: 29 F0     AND #$F0
0E/AA6C: F0 05     BEQ $AA73
0E/AA6E: A9 4D     LDA #$4D
0E/AA70: 4C 7C AA  JMP $AA7C
0E/AA73: A5 09     LDA $09
0E/AA75: 20 BD AA  JSR $AABD
0E/AA78: 90 12     BCC $AA8C
0E/AA7A: A9 3D     LDA #$3D
0E/AA7C: 20 C3 AD  JSR $ADC3
0E/AA7F: A2 10     LDX #$10
0E/AA81: 20 86 B4  JSR $B486
0E/AA84: A9 3C     LDA #$3C
0E/AA86: 20 DF B3  JSR $B3DF          ; load menu text
0E/AA89: 4C 60 AA  JMP $AA60
0E/AA8C: 20 CE AA  JSR $AACE
0E/AA8F: 90 05     BCC $AA96
0E/AA91: A9 3E     LDA #$3E
0E/AA93: 4C 7C AA  JMP $AA7C
0E/AA96: A9 42     LDA #$42           ; play song $02
0E/AA98: 85 E0     STA $E0
0E/AA9A: A5 09     LDA $09
0E/AA9C: 9D 30 61  STA $6130,X
0E/AA9F: A9 00     LDA #$00
0E/AAA1: A6 0A     LDX $0A
0E/AAA3: 9D 60 60  STA $6060,X
0E/AAA6: 20 4A AF  JSR $AF4A
0E/AAA9: 20 E9 AD  JSR $ADE9
0E/AAAC: 38        SEC 
0E/AAAD: 60        RTS 
0E/AAAE: AD F0 78  LDA $78F0
0E/AAB1: 4A        LSR 
0E/AAB2: 4A        LSR 
0E/AAB3: 85 80     STA $80
0E/AAB5: AD F0 79  LDA $79F0
0E/AAB8: 4A        LSR 
0E/AAB9: 4A        LSR 
0E/AABA: 85 81     STA $81
0E/AABC: 60        RTS 
0E/AABD: A6 6E     LDX $6E
0E/AABF: A0 10     LDY #$10
0E/AAC1: DD 30 61  CMP $6130,X
0E/AAC4: F0 06     BEQ $AACC
0E/AAC6: E8        INX 
0E/AAC7: 88        DEY 
0E/AAC8: D0 F7     BNE $AAC1
0E/AACA: 18        CLC 
0E/AACB: 60        RTS 
0E/AACC: 38        SEC 
0E/AACD: 60        RTS 
0E/AACE: A6 6E     LDX $6E
0E/AAD0: A0 10     LDY #$10
0E/AAD2: BD 30 61  LDA $6130,X
0E/AAD5: F0 06     BEQ $AADD
0E/AAD7: E8        INX 
0E/AAD8: 88        DEY 
0E/AAD9: D0 F7     BNE $AAD2
0E/AADB: 38        SEC 
0E/AADC: 60        RTS 
0E/AADD: 18        CLC 
0E/AADE: 60        RTS 
0E/AADF: 20 AE AA  JSR $AAAE
0E/AAE2: A5 80     LDA $80
0E/AAE4: C5 81     CMP $81
0E/AAE6: F0 62     BEQ $AB4A
0E/AAE8: A5 81     LDA $81
0E/AAEA: C9 10     CMP #$10
0E/AAEC: 90 1A     BCC $AB08
0E/AAEE: A5 6E     LDA $6E
0E/AAF0: 05 80     ORA $80
0E/AAF2: AA        TAX 
0E/AAF3: A9 00     LDA #$00
0E/AAF5: 9D 30 61  STA $6130,X
0E/AAF8: A5 80     LDA $80
0E/AAFA: 0A        ASL 
0E/AAFB: 05 6E     ORA $6E
0E/AAFD: AA        TAX 
0E/AAFE: A9 00     LDA #$00
0E/AB00: 9D 10 62  STA $6210,X
0E/AB03: 9D 11 62  STA $6211,X
0E/AB06: 18        CLC 
0E/AB07: 60        RTS 
0E/AB08: A5 6E     LDA $6E
0E/AB0A: 05 80     ORA $80
0E/AB0C: AA        TAX 
0E/AB0D: A5 6E     LDA $6E
0E/AB0F: 05 81     ORA $81
0E/AB11: A8        TAY 
0E/AB12: BD 30 61  LDA $6130,X
0E/AB15: 48        PHA 
0E/AB16: B9 30 61  LDA $6130,Y
0E/AB19: 9D 30 61  STA $6130,X
0E/AB1C: 68        PLA 
0E/AB1D: 99 30 61  STA $6130,Y
0E/AB20: A5 80     LDA $80
0E/AB22: 0A        ASL 
0E/AB23: 05 6E     ORA $6E
0E/AB25: AA        TAX 
0E/AB26: A5 81     LDA $81
0E/AB28: 0A        ASL 
0E/AB29: 05 6E     ORA $6E
0E/AB2B: A8        TAY 
0E/AB2C: BD 10 62  LDA $6210,X
0E/AB2F: 48        PHA 
0E/AB30: B9 10 62  LDA $6210,Y
0E/AB33: 9D 10 62  STA $6210,X
0E/AB36: 68        PLA 
0E/AB37: 99 10 62  STA $6210,Y
0E/AB3A: BD 11 62  LDA $6211,X
0E/AB3D: 48        PHA 
0E/AB3E: B9 11 62  LDA $6211,Y
0E/AB41: 9D 11 62  STA $6211,X
0E/AB44: 68        PLA 
0E/AB45: 99 11 62  STA $6211,Y
0E/AB48: 18        CLC 
0E/AB49: 60        RTS 
0E/AB4A: A5 6E     LDA $6E
0E/AB4C: 05 80     ORA $80
0E/AB4E: AA        TAX 
0E/AB4F: BD 30 61  LDA $6130,X
0E/AB52: F0 1C     BEQ $AB70
0E/AB54: 85 82     STA $82
0E/AB56: A6 6E     LDX $6E
0E/AB58: A5 80     LDA $80
0E/AB5A: 0A        ASL 
0E/AB5B: 05 6E     ORA $6E
0E/AB5D: A8        TAY 
0E/AB5E: B9 10 62  LDA $6210,Y
0E/AB61: 18        CLC 
0E/AB62: 69 01     ADC #$01
0E/AB64: DD 0C 61  CMP $610C,X
0E/AB67: 90 0C     BCC $AB75
0E/AB69: F0 0A     BEQ $AB75
0E/AB6B: BD 0D 61  LDA $610D,X
0E/AB6E: D0 05     BNE $AB75
0E/AB70: 20 67 DE  JSR $DE67          ; play error sound effect
0E/AB73: 18        CLC 
0E/AB74: 60        RTS 
0E/AB75: A5 82     LDA $82
0E/AB77: C9 D0     CMP #$D0
0E/AB79: D0 1F     BNE $AB9A
0E/AB7B: A5 2D     LDA $2D
0E/AB7D: 4A        LSR 
0E/AB7E: 90 F0     BCC $AB70
0E/AB80: A5 19     LDA $19
0E/AB82: F0 57     BEQ $ABDB
0E/AB84: A9 47     LDA #$47
0E/AB86: 20 B6 AD  JSR $ADB6
0E/AB89: 20 E9 AD  JSR $ADE9
0E/AB8C: 20 60 EE  JSR $EE60
0E/AB8F: A2 0B     LDX #$0B
0E/AB91: 20 86 B4  JSR $B486
0E/AB94: A9 01     LDA #$01
0E/AB96: 85 A2     STA $A2
0E/AB98: 18        CLC 
0E/AB99: 60        RTS 
0E/AB9A: C9 D4     CMP #$D4
0E/AB9C: D0 03     BNE $ABA1
0E/AB9E: 4C 16 AC  JMP $AC16
0E/ABA1: C9 D5     CMP #$D5
0E/ABA3: D0 03     BNE $ABA8
0E/ABA5: 4C 2F AC  JMP $AC2F
0E/ABA8: C9 D7     CMP #$D7
0E/ABAA: D0 03     BNE $ABAF
0E/ABAC: 4C 43 AC  JMP $AC43
0E/ABAF: C9 E6     CMP #$E6
0E/ABB1: D0 BD     BNE $AB70
0E/ABB3: A5 2D     LDA $2D
0E/ABB5: 4A        LSR 
0E/ABB6: 90 B8     BCC $AB70
0E/ABB8: A5 19     LDA $19
0E/ABBA: D0 C8     BNE $AB84
0E/ABBC: 20 6B AC  JSR $AC6B
0E/ABBF: 20 85 AC  JSR $AC85
0E/ABC2: A9 3B     LDA #$3B
0E/ABC4: 20 B6 AD  JSR $ADB6
0E/ABC7: 20 E9 AD  JSR $ADE9
0E/ABCA: 20 3A A8  JSR $A83A
0E/ABCD: 20 80 B3  JSR $B380          ; close menu
0E/ABD0: A9 00     LDA #$00
0E/ABD2: 8D 01 20  STA $2001
0E/ABD5: 8D 15 40  STA $4015
0E/ABD8: 4C B8 C0  JMP $C0B8          ; world map main
0E/ABDB: A5 80     LDA $80
0E/ABDD: 0A        ASL 
0E/ABDE: 05 6E     ORA $6E
0E/ABE0: A8        TAY 
0E/ABE1: B9 10 62  LDA $6210,Y
0E/ABE4: 48        PHA 
0E/ABE5: 20 85 AC  JSR $AC85
0E/ABE8: 68        PLA 
0E/ABE9: A8        TAY 
0E/ABEA: BA        TSX 
0E/ABEB: 8A        TXA 
0E/ABEC: 18        CLC 
0E/ABED: 69 08     ADC #$08
0E/ABEF: C9 FB     CMP #$FB
0E/ABF1: B0 0D     BCS $AC00
0E/ABF3: 88        DEY 
0E/ABF4: 30 0A     BMI $AC00
0E/ABF6: 18        CLC 
0E/ABF7: 69 05     ADC #$05
0E/ABF9: C9 FB     CMP #$FB
0E/ABFB: B0 03     BCS $AC00
0E/ABFD: 88        DEY 
0E/ABFE: 10 F6     BPL $ABF6
0E/AC00: AA        TAX 
0E/AC01: 9A        TXS 
0E/AC02: A9 37     LDA #$37
0E/AC04: 20 B6 AD  JSR $ADB6
0E/AC07: 20 E9 AD  JSR $ADE9
0E/AC0A: 20 80 B3  JSR $B380          ; close menu
0E/AC0D: A9 00     LDA #$00
0E/AC0F: 8D 01 20  STA $2001
0E/AC12: 8D 15 40  STA $4015
0E/AC15: 60        RTS 
0E/AC16: 20 6B AC  JSR $AC6B
0E/AC19: A9 38     LDA #$38
0E/AC1B: 20 01 A9  JSR $A901
0E/AC1E: 20 08 AE  JSR $AE08
0E/AC21: B0 07     BCS $AC2A
0E/AC23: 20 1B A6  JSR $A61B
0E/AC26: 90 2F     BCC $AC57
0E/AC28: B0 F4     BCS $AC1E
0E/AC2A: 20 78 AC  JSR $AC78
0E/AC2D: 38        SEC 
0E/AC2E: 60        RTS 
0E/AC2F: 20 6B AC  JSR $AC6B
0E/AC32: A9 39     LDA #$39
0E/AC34: 20 01 A9  JSR $A901
0E/AC37: 20 08 AE  JSR $AE08
0E/AC3A: B0 EE     BCS $AC2A
0E/AC3C: 20 A5 A6  JSR $A6A5
0E/AC3F: 90 16     BCC $AC57
0E/AC41: B0 F4     BCS $AC37
0E/AC43: 20 6B AC  JSR $AC6B
0E/AC46: A9 3A     LDA #$3A
0E/AC48: 20 01 A9  JSR $A901
0E/AC4B: 20 08 AE  JSR $AE08
0E/AC4E: B0 DA     BCS $AC2A
0E/AC50: 20 F4 A6  JSR $A6F4
0E/AC53: 90 02     BCC $AC57
0E/AC55: B0 F4     BCS $AC4B
0E/AC57: 20 78 AC  JSR $AC78
0E/AC5A: 20 85 AC  JSR $AC85
0E/AC5D: 20 60 EE  JSR $EE60
0E/AC60: 20 96 B3  JSR $B396
0E/AC63: 20 C6 AD  JSR $ADC6
0E/AC66: 20 78 AC  JSR $AC78
0E/AC69: 38        SEC 
0E/AC6A: 60        RTS 

; [  ]

0E/AC6B: A5 80     LDA $80
0E/AC6D: 85 08     STA $08
0E/AC6F: A5 9E     LDA $9E
0E/AC71: 85 09     STA $09
0E/AC73: A5 6E     LDA $6E
0E/AC75: 85 0A     STA $0A
0E/AC77: 60        RTS 

; [  ]

0E/AC78: A5 08     LDA $08
0E/AC7A: 85 80     STA $80
0E/AC7C: A5 09     LDA $09
0E/AC7E: 85 9E     STA $9E
0E/AC80: A5 0A     LDA $0A
0E/AC82: 85 6E     STA $6E
0E/AC84: 60        RTS 

; [  ]

0E/AC85: A9 42     LDA #$42           ; play song $02
0E/AC87: 85 E0     STA $E0
0E/AC89: A6 6E     LDX $6E
0E/AC8B: A5 80     LDA $80
0E/AC8D: 0A        ASL 
0E/AC8E: 05 6E     ORA $6E
0E/AC90: A8        TAY 
0E/AC91: BD 0C 61  LDA $610C,X
0E/AC94: 18        CLC 
0E/AC95: F9 10 62  SBC $6210,Y
0E/AC98: 9D 0C 61  STA $610C,X
0E/AC9B: BD 0D 61  LDA $610D,X
0E/AC9E: E9 00     SBC #$00
0E/ACA0: 9D 0D 61  STA $610D,X
0E/ACA3: B9 11 62  LDA $6211,Y
0E/ACA6: 18        CLC 
0E/ACA7: 69 02     ADC #$02
0E/ACA9: C9 64     CMP #$64
0E/ACAB: B0 04     BCS $ACB1
0E/ACAD: 99 11 62  STA $6211,Y
0E/ACB0: 60        RTS 
0E/ACB1: B9 10 62  LDA $6210,Y
0E/ACB4: 18        CLC 
0E/ACB5: 69 01     ADC #$01
0E/ACB7: C9 10     CMP #$10
0E/ACB9: B0 08     BCS $ACC3
0E/ACBB: 99 10 62  STA $6210,Y
0E/ACBE: A9 00     LDA #$00
0E/ACC0: 99 11 62  STA $6211,Y
0E/ACC3: 60        RTS 

; --------------------------------------------------------------------------

; [ main menu ]

0E/ACC4: A9 00     LDA #$00
0E/ACC6: 8D 01 20  STA $2001
0E/ACC9: 8D F0 78  STA $78F0
0E/ACCC: 8D F0 79  STA $79F0
0E/ACCF: 8D F0 7A  STA $7AF0
0E/ACD2: 20 91 E4  JSR $E491          ; load menu graphics
0E/ACD5: 20 21 F3  JSR $F321          ; clear ppu name table
0E/ACD8: 20 6E C4  JSR $C46E          ; clear oam data
0E/ACDB: 20 00 FE  JSR $FE00          ; wait for vblank
0E/ACDE: A9 02     LDA #$02
0E/ACE0: 8D 14 40  STA $4014
0E/ACE3: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0E/ACE6: A9 88     LDA #$88
0E/ACE8: 85 FD     STA $FD
0E/ACEA: 85 FF     STA $FF
0E/ACEC: 8D 00 20  STA $2000
0E/ACEF: A9 00     LDA #$00
0E/ACF1: 8D 05 20  STA $2005
0E/ACF4: 8D 05 20  STA $2005
0E/ACF7: A9 1E     LDA #$1E
0E/ACF9: 8D 01 20  STA $2001
0E/ACFC: A9 0E     LDA #$0E
0E/ACFE: 85 57     STA $57
0E/AD00: A9 01     LDA #$01
0E/AD02: 85 37     STA $37
0E/AD04: A9 00     LDA #$00
0E/AD06: 85 A3     STA $A3
0E/AD08: 85 A4     STA $A4
0E/AD0A: 20 96 B3  JSR $B396
0E/AD0D: 20 A2 AD  JSR $ADA2
0E/AD10: 20 B6 8E  JSR $8EB6          ; init player input
0E/AD13: A9 01     LDA #$01
0E/AD15: 85 A2     STA $A2
0E/AD17: 20 01 B4  JSR $B401          ; wait for vblank (update cursors)
0E/AD1A: 20 00 88  JSR $8800          ; draw portraits
0E/AD1D: A9 04     LDA #$04
0E/AD1F: 20 C5 96  JSR $96C5          ; get cursor 1 position
0E/AD22: A5 25     LDA $25
0E/AD24: D0 66     BNE $AD8C          ; branch if B button pressed
0E/AD26: A5 24     LDA $24
0E/AD28: F0 ED     BEQ $AD17          ; branch if A button is not pressed
0E/AD2A: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AD2D: AD F0 78  LDA $78F0          ; cursor position
; item
0E/AD30: D0 06     BNE $AD38
0E/AD32: 20 C5 AE  JSR $AEC5          ; item menu
0E/AD35: 4C 00 AD  JMP $AD00
; magic
0E/AD38: C9 04     CMP #$04
0E/AD3A: D0 0B     BNE $AD47
0E/AD3C: 20 59 AE  JSR $AE59          ; character select
0E/AD3F: B0 D6     BCS $AD17
0E/AD41: 20 93 AF  JSR $AF93          ; magic menu
0E/AD44: 4C 00 AD  JMP $AD00
; equip
0E/AD47: C9 08     CMP #$08
0E/AD49: D0 0B     BNE $AD56
0E/AD4B: 20 59 AE  JSR $AE59          ; character select
0E/AD4E: B0 C7     BCS $AD17
0E/AD50: 20 15 B0  JSR $B015          ; equip menu
0E/AD53: 4C 00 AD  JMP $AD00
; stats
0E/AD56: C9 0C     CMP #$0C
0E/AD58: D0 0B     BNE $AD65
0E/AD5A: 20 59 AE  JSR $AE59          ; character select
0E/AD5D: B0 B8     BCS $AD17
0E/AD5F: 20 B1 B1  JSR $B1B1          ; stats menu
0E/AD62: 4C 00 AD  JMP $AD00
; save
0E/AD65: A5 2D     LDA $2D
0E/AD67: 4A        LSR 
0E/AD68: 90 0F     BCC $AD79          ; branch if on the world map
0E/AD6A: A9 40     LDA #$40
0E/AD6C: 20 C3 AD  JSR $ADC3
0E/AD6F: A9 01     LDA #$01
0E/AD71: 85 A2     STA $A2
0E/AD73: 20 A2 AD  JSR $ADA2
0E/AD76: 4C 17 AD  JMP $AD17
0E/AD79: 20 D7 B1  JSR $B1D7          ; save menu
0E/AD7C: 20 60 EE  JSR $EE60
0E/AD7F: 20 B6 8E  JSR $8EB6          ; init player input
0E/AD82: 20 A2 AD  JSR $ADA2
0E/AD85: A9 01     LDA #$01
0E/AD87: 85 A2     STA $A2
0E/AD89: 4C 17 AD  JMP $AD17
; close menu
0E/AD8C: 20 80 B3  JSR $B380          ; close menu
0E/AD8F: A9 00     LDA #$00
0E/AD91: 8D 01 20  STA $2001
0E/AD94: 8D 15 40  STA $4015
0E/AD97: 85 24     STA $24
0E/AD99: 85 25     STA $25
0E/AD9B: 85 22     STA $22
0E/AD9D: 85 23     STA $23
0E/AD9F: 85 47     STA $47
0E/ADA1: 60        RTS 

; [  ]

0E/ADA2: A2 05     LDX #$05
0E/ADA4: 20 86 B4  JSR $B486
0E/ADA7: A9 1C     LDA #$1C
0E/ADA9: 20 DF B3  JSR $B3DF          ; load menu text
0E/ADAC: A2 04     LDX #$04
0E/ADAE: 20 86 B4  JSR $B486
0E/ADB1: A9 1B     LDA #$1B
0E/ADB3: 4C DF B3  JMP $B3DF          ; load menu text

; [  ]

0E/ADB6: 48        PHA 
0E/ADB7: 20 60 EE  JSR $EE60
0E/ADBA: A2 10     LDX #$10
0E/ADBC: 20 86 B4  JSR $B486
0E/ADBF: 68        PLA 
0E/ADC0: 4C DF B3  JMP $B3DF          ; load menu text

; [  ]

0E/ADC3: 20 B6 AD  JSR $ADB6
0E/ADC6: A9 00     LDA #$00
0E/ADC8: 85 A2     STA $A2
0E/ADCA: 85 A3     STA $A3
0E/ADCC: 85 A4     STA $A4
0E/ADCE: A9 00     LDA #$00
0E/ADD0: 85 24     STA $24
0E/ADD2: 85 25     STA $25
0E/ADD4: 20 01 B4  JSR $B401          ; wait for vblank (update cursors)
0E/ADD7: 20 00 88  JSR $8800          ; draw portraits
0E/ADDA: 20 5C DB  JSR $DB5C          ; update joypad input
0E/ADDD: A5 24     LDA $24
0E/ADDF: 05 25     ORA $25
0E/ADE1: F0 F1     BEQ $ADD4
0E/ADE3: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/ADE6: 4C 60 EE  JMP $EE60

; [  ]

0E/ADE9: A9 00     LDA #$00
0E/ADEB: 85 A2     STA $A2
0E/ADED: 85 A3     STA $A3
0E/ADEF: 85 A4     STA $A4
0E/ADF1: 85 24     STA $24
0E/ADF3: 85 25     STA $25
0E/ADF5: 20 01 B4  JSR $B401          ; wait for vblank (update cursors)
0E/ADF8: 20 6A B3  JSR $B36A
0E/ADFB: 20 5C DB  JSR $DB5C          ; update joypad input
0E/ADFE: A5 24     LDA $24
0E/AE00: 05 25     ORA $25
0E/AE02: F0 F1     BEQ $ADF5
0E/AE04: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AE07: 60        RTS 
0E/AE08: A9 00     LDA #$00
0E/AE0A: 8D F0 79  STA $79F0
0E/AE0D: A2 0F     LDX #$0F
0E/AE0F: BD AA AE  LDA $AEAA,X
0E/AE12: 9D 00 79  STA $7900,X
0E/AE15: CA        DEX 
0E/AE16: 10 F7     BPL $AE0F
0E/AE18: A9 14     LDA #$14
0E/AE1A: AE F5 62  LDX $62F5
0E/AE1D: 10 02     BPL $AE21
0E/AE1F: A9 10     LDA #$10
0E/AE21: 8D F1 79  STA $79F1
0E/AE24: A9 01     LDA #$01
0E/AE26: 85 A3     STA $A3
0E/AE28: 20 18 B4  JSR $B418
0E/AE2B: 20 00 88  JSR $8800          ; draw portraits
0E/AE2E: A9 08     LDA #$08
0E/AE30: 20 F9 96  JSR $96F9          ; update cursor 2 position
0E/AE33: A5 25     LDA $25
0E/AE35: D0 19     BNE $AE50
0E/AE37: A5 24     LDA $24
0E/AE39: F0 ED     BEQ $AE28
0E/AE3B: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AE3E: AD F0 79  LDA $79F0
0E/AE41: 4A        LSR 
0E/AE42: 4A        LSR 
0E/AE43: 09 10     ORA #$10
0E/AE45: 85 9E     STA $9E
0E/AE47: 4A        LSR 
0E/AE48: 6A        ROR 
0E/AE49: 6A        ROR 
0E/AE4A: 29 C0     AND #$C0
0E/AE4C: 85 6E     STA $6E
0E/AE4E: 18        CLC 
0E/AE4F: 60        RTS 
0E/AE50: A9 00     LDA #$00
0E/AE52: 85 A3     STA $A3
0E/AE54: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AE57: 38        SEC 
0E/AE58: 60        RTS 

; [ character select (main menu) ]

0E/AE59: A9 00     LDA #$00
0E/AE5B: 8D F0 79  STA $79F0
0E/AE5E: A2 0F     LDX #$0F
0E/AE60: BD AA AE  LDA $AEAA,X
0E/AE63: 9D 00 79  STA $7900,X
0E/AE66: CA        DEX 
0E/AE67: 10 F7     BPL $AE60
0E/AE69: A9 10     LDA #$10
0E/AE6B: AE F5 62  LDX $62F5
0E/AE6E: 10 02     BPL $AE72
0E/AE70: A9 0C     LDA #$0C
0E/AE72: 8D F1 79  STA $79F1
0E/AE75: A9 01     LDA #$01
0E/AE77: 85 A3     STA $A3
0E/AE79: 20 01 B4  JSR $B401          ; wait for vblank (update cursors)
0E/AE7C: 20 00 88  JSR $8800          ; draw portraits
0E/AE7F: A9 08     LDA #$08
0E/AE81: 20 F9 96  JSR $96F9          ; update cursor 2 position
0E/AE84: A5 25     LDA $25
0E/AE86: D0 19     BNE $AEA1
0E/AE88: A5 24     LDA $24
0E/AE8A: F0 ED     BEQ $AE79
0E/AE8C: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AE8F: AD F0 79  LDA $79F0
0E/AE92: 4A        LSR 
0E/AE93: 4A        LSR 
0E/AE94: 09 10     ORA #$10
0E/AE96: 85 9E     STA $9E
0E/AE98: 4A        LSR 
0E/AE99: 6A        ROR 
0E/AE9A: 6A        ROR 
0E/AE9B: 29 C0     AND #$C0
0E/AE9D: 85 6E     STA $6E
0E/AE9F: 18        CLC 
0E/AEA0: 60        RTS 
0E/AEA1: A9 00     LDA #$00
0E/AEA3: 85 A3     STA $A3
0E/AEA5: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AEA8: 38        SEC 
0E/AEA9: 60        RTS 

0E/AEAA: 06 03 00 00
0E/AEAE: 14 03 00 00
0E/AEB2: 08 0D 00 00
0E/AEB6: 16 0D 00 00

; [ item menu ]

; starts at 0E/AEC5

; close menu
0E/AEBA: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AEBD: A9 00     LDA #$00
0E/AEBF: 8D F0 78  STA $78F0
0E/AEC2: 4C 80 B3  JMP $B380          ; close menu
; starts here
0E/AEC5: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AEC8: 20 80 B3  JSR $B380          ; close menu
0E/AECB: A9 00     LDA #$00
0E/AECD: 85 A3     STA $A3
0E/AECF: 85 A4     STA $A4
0E/AED1: A9 01     LDA #$01
0E/AED3: 85 A2     STA $A2
0E/AED5: A9 00     LDA #$00
0E/AED7: 8D F0 7A  STA $7AF0
0E/AEDA: A2 07     LDX #$07
0E/AEDC: 20 86 B4  JSR $B486
0E/AEDF: A9 25     LDA #$25
0E/AEE1: 20 DF B3  JSR $B3DF          ; load menu text
0E/AEE4: A2 06     LDX #$06
0E/AEE6: 20 86 B4  JSR $B486
0E/AEE9: A9 1F     LDA #$1F
0E/AEEB: 20 DF B3  JSR $B3DF          ; load menu text
0E/AEEE: 20 14 B3  JSR $B314
0E/AEF1: 20 3F B3  JSR $B33F
0E/AEF4: 20 01 B4  JSR $B401          ; wait for vblank (update cursors)
0E/AEF7: A9 0C     LDA #$0C
0E/AEF9: 20 C5 96  JSR $96C5          ; get cursor 1 position
0E/AEFC: A5 25     LDA $25
0E/AEFE: D0 BA     BNE $AEBA
0E/AF00: A5 24     LDA $24
0E/AF02: F0 F0     BEQ $AEF4
0E/AF04: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AF07: A9 01     LDA #$01
0E/AF09: 85 A3     STA $A3
0E/AF0B: AD F0 78  LDA $78F0
0E/AF0E: 8D F0 79  STA $79F0
0E/AF11: 20 01 B4  JSR $B401          ; wait for vblank (update cursors)
0E/AF14: A9 0C     LDA #$0C
0E/AF16: 20 F9 96  JSR $96F9          ; update cursor 2 position
0E/AF19: A5 25     LDA $25
0E/AF1B: F0 0A     BEQ $AF27
0E/AF1D: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AF20: A9 00     LDA #$00
0E/AF22: 85 A3     STA $A3
0E/AF24: 4C F4 AE  JMP $AEF4
0E/AF27: A5 24     LDA $24
0E/AF29: F0 E6     BEQ $AF11
0E/AF2B: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AF2E: A9 00     LDA #$00
0E/AF30: 85 A3     STA $A3
0E/AF32: 20 6E A8  JSR $A86E
0E/AF35: B0 8E     BCS $AEC5
0E/AF37: A2 07     LDX #$07
0E/AF39: 20 51 B4  JSR $B451
0E/AF3C: A9 25     LDA #$25
0E/AF3E: 20 DF B3  JSR $B3DF          ; load menu text
0E/AF41: 20 3F B3  JSR $B33F
0E/AF44: 20 14 B3  JSR $B314
0E/AF47: 4C F4 AE  JMP $AEF4

; [  ]

0E/AF4A: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AF4D: 20 80 B3  JSR $B380          ; close menu
0E/AF50: A9 00     LDA #$00
0E/AF52: 85 A3     STA $A3
0E/AF54: 85 A4     STA $A4
0E/AF56: A9 01     LDA #$01
0E/AF58: 85 A2     STA $A2
0E/AF5A: A9 00     LDA #$00
0E/AF5C: 8D F0 7A  STA $7AF0
0E/AF5F: A2 08     LDX #$08
0E/AF61: 20 86 B4  JSR $B486
0E/AF64: A9 20     LDA #$20
0E/AF66: 20 CD B3  JSR $B3CD
0E/AF69: A2 09     LDX #$09
0E/AF6B: 20 86 B4  JSR $B486
0E/AF6E: A9 1D     LDA #$1D
0E/AF70: 20 DF B3  JSR $B3DF          ; load menu text
0E/AF73: A2 0A     LDX #$0A
0E/AF75: 20 86 B4  JSR $B486
0E/AF78: A9 21     LDA #$21
0E/AF7A: 20 CD B3  JSR $B3CD
0E/AF7D: A2 0B     LDX #$0B
0E/AF7F: 20 86 B4  JSR $B486
0E/AF82: A9 26     LDA #$26
0E/AF84: 20 CD B3  JSR $B3CD
0E/AF87: 60        RTS 

; [ magic menu ]

; subroutine starts at 0E/AF93

; close menu
0E/AF88: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AF8B: A9 04     LDA #$04
0E/AF8D: 8D F0 78  STA $78F0
0E/AF90: 4C 80 B3  JMP $B380          ; close menu
; starts here
0E/AF93: 20 4A AF  JSR $AF4A
0E/AF96: 20 14 B3  JSR $B314
0E/AF99: 20 3F B3  JSR $B33F
0E/AF9C: A9 00     LDA #$00
0E/AF9E: 8D F0 78  STA $78F0
0E/AFA1: 20 01 B4  JSR $B401          ; wait for vblank (update cursors)
0E/AFA4: 20 6A B3  JSR $B36A
0E/AFA7: A9 08     LDA #$08
0E/AFA9: 20 C5 96  JSR $96C5          ; get cursor 1 position
0E/AFAC: A5 25     LDA $25
0E/AFAE: D0 D8     BNE $AF88
0E/AFB0: A5 24     LDA $24
0E/AFB2: F0 ED     BEQ $AFA1
0E/AFB4: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AFB7: A9 01     LDA #$01
0E/AFB9: 85 A3     STA $A3
0E/AFBB: AD F0 78  LDA $78F0
0E/AFBE: 8D F0 79  STA $79F0
0E/AFC1: 20 01 B4  JSR $B401          ; wait for vblank (update cursors)
0E/AFC4: 20 6A B3  JSR $B36A
0E/AFC7: A9 08     LDA #$08
0E/AFC9: 20 F9 96  JSR $96F9          ; update cursor 2 position
0E/AFCC: A5 25     LDA $25
0E/AFCE: F0 0A     BEQ $AFDA
0E/AFD0: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AFD3: A9 00     LDA #$00
0E/AFD5: 85 A3     STA $A3
0E/AFD7: 4C A1 AF  JMP $AFA1
0E/AFDA: A5 24     LDA $24
0E/AFDC: F0 E3     BEQ $AFC1
0E/AFDE: A6 6E     LDX $6E
0E/AFE0: BD 01 61  LDA $6101,X
0E/AFE3: 29 D0     AND #$D0
0E/AFE5: F0 06     BEQ $AFED
0E/AFE7: 20 67 DE  JSR $DE67          ; play error sound effect
0E/AFEA: 4C D0 AF  JMP $AFD0
0E/AFED: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/AFF0: A9 00     LDA #$00
0E/AFF2: 85 A3     STA $A3
0E/AFF4: 20 DF AA  JSR $AADF
0E/AFF7: 90 03     BCC $AFFC
0E/AFF9: 4C 93 AF  JMP $AF93
0E/AFFC: A2 0B     LDX #$0B
0E/AFFE: 20 51 B4  JSR $B451
0E/B001: A9 26     LDA #$26
0E/B003: 20 CD B3  JSR $B3CD
0E/B006: 20 3F B3  JSR $B33F
0E/B009: 20 14 B3  JSR $B314
0E/B00C: 4C A1 AF  JMP $AFA1

; [ equip menu ]

; subroutine starts at 0E/B015

0E/B00F: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/B012: 4C 80 B3  JMP $B380          ; close menu
; starts here
0E/B015: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/B018: 20 80 B3  JSR $B380          ; close menu
0E/B01B: A9 00     LDA #$00
0E/B01D: 85 A4     STA $A4
0E/B01F: 85 A2     STA $A2
0E/B021: A9 01     LDA #$01
0E/B023: 85 A3     STA $A3
0E/B025: A9 00     LDA #$00
0E/B027: 8D F0 7A  STA $7AF0
0E/B02A: 8D F0 79  STA $79F0
0E/B02D: A2 08     LDX #$08
0E/B02F: 20 86 B4  JSR $B486
0E/B032: A9 22     LDA #$22
0E/B034: 20 CD B3  JSR $B3CD
0E/B037: A2 09     LDX #$09
0E/B039: 20 86 B4  JSR $B486
0E/B03C: A9 1D     LDA #$1D
0E/B03E: 20 DF B3  JSR $B3DF          ; load menu text
0E/B041: A2 0A     LDX #$0A
0E/B043: 20 86 B4  JSR $B486
0E/B046: A9 23     LDA #$23
0E/B048: 20 CD B3  JSR $B3CD
0E/B04B: A2 0C     LDX #$0C
0E/B04D: 20 86 B4  JSR $B486
0E/B050: A9 24     LDA #$24
0E/B052: 20 CD B3  JSR $B3CD
0E/B055: A2 0D     LDX #$0D
0E/B057: 20 86 B4  JSR $B486
0E/B05A: A9 25     LDA #$25
0E/B05C: 20 F0 B3  JSR $B3F0          ; load menu text
0E/B05F: 20 EB 94  JSR $94EB          ; save dialogue window variables
0E/B062: 20 01 B4  JSR $B401          ; wait for vblank (update cursors)
0E/B065: 20 6A B3  JSR $B36A
0E/B068: A9 04     LDA #$04
0E/B06A: 20 F9 96  JSR $96F9          ; update cursor 2 position
0E/B06D: A5 25     LDA $25
0E/B06F: D0 9E     BNE $B00F
0E/B071: A5 24     LDA $24
0E/B073: F0 ED     BEQ $B062
0E/B075: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/B078: A9 01     LDA #$01
0E/B07A: 85 A4     STA $A4
0E/B07C: 20 01 B4  JSR $B401          ; wait for vblank (update cursors)
0E/B07F: 20 6A B3  JSR $B36A
0E/B082: A9 0C     LDA #$0C
0E/B084: 20 2D 97  JSR $972D          ; update cursor 3 position
0E/B087: A5 25     LDA $25
0E/B089: F0 0A     BEQ $B095
0E/B08B: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/B08E: A9 00     LDA #$00
0E/B090: 85 A4     STA $A4
0E/B092: 4C 62 B0  JMP $B062
0E/B095: A5 24     LDA $24
0E/B097: F0 E3     BEQ $B07C
0E/B099: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/B09C: 20 CB B0  JSR $B0CB
0E/B09F: A5 9E     LDA $9E
0E/B0A1: 29 03     AND #$03
0E/B0A3: 20 03 FA  JSR $FA03          ; update character equipment
0E/B0A6: A2 0A     LDX #$0A
0E/B0A8: 20 51 B4  JSR $B451
0E/B0AB: A9 23     LDA #$23
0E/B0AD: 20 CD B3  JSR $B3CD
0E/B0B0: A2 0C     LDX #$0C
0E/B0B2: 20 51 B4  JSR $B451
0E/B0B5: A9 24     LDA #$24
0E/B0B7: 20 CD B3  JSR $B3CD
0E/B0BA: 20 23 95  JSR $9523          ; restore dialogue window variables
0E/B0BD: A5 1C     LDA $1C
0E/B0BF: 85 3E     STA $3E
0E/B0C1: A5 1D     LDA $1D
0E/B0C3: 85 3F     STA $3F
0E/B0C5: 20 AC E7  JSR $E7AC
0E/B0C8: 4C 7C B0  JMP $B07C
0E/B0CB: AE F0 7A  LDX $7AF0
0E/B0CE: BD 02 7A  LDA $7A02,X
0E/B0D1: C9 0F     CMP #$0F
0E/B0D3: D0 2C     BNE $B101
0E/B0D5: A9 00     LDA #$00
0E/B0D7: 85 80     STA $80
0E/B0D9: AD F0 79  LDA $79F0
0E/B0DC: 4A        LSR 
0E/B0DD: 4A        LSR 
0E/B0DE: AA        TAX 
0E/B0DF: A5 6E     LDA $6E
0E/B0E1: 1D 99 B1  ORA $B199,X
0E/B0E4: AA        TAX 
0E/B0E5: BD 00 61  LDA $6100,X
0E/B0E8: C9 10     CMP #$10
0E/B0EA: B0 03     BCS $B0EF
0E/B0EC: 4C 67 DE  JMP $DE67          ; play error sound effect
0E/B0EF: AD F0 79  LDA $79F0
0E/B0F2: 4A        LSR 
0E/B0F3: 4A        LSR 
0E/B0F4: AA        TAX 
0E/B0F5: A5 6E     LDA $6E
0E/B0F7: 1D 99 B1  ORA $B199,X
0E/B0FA: AA        TAX 
0E/B0FB: A5 80     LDA $80
0E/B0FD: 9D 00 61  STA $6100,X
0E/B100: 60        RTS 
0E/B101: BD 03 7A  LDA $7A03,X
0E/B104: AA        TAX 
0E/B105: 85 82     STA $82
0E/B107: BD 60 60  LDA $6060,X
0E/B10A: 85 80     STA $80
0E/B10C: F0 1E     BEQ $B12C
0E/B10E: AD F0 79  LDA $79F0
0E/B111: 4A        LSR 
0E/B112: 4A        LSR 
0E/B113: AA        TAX 
0E/B114: C9 05     CMP #$05
0E/B116: B0 2E     BCS $B146
0E/B118: A5 80     LDA $80
0E/B11A: DD A1 B1  CMP $B1A1,X
0E/B11D: 90 24     BCC $B143
0E/B11F: DD A9 B1  CMP $B1A9,X
0E/B122: B0 1F     BCS $B143
0E/B124: E0 00     CPX #$00
0E/B126: F0 38     BEQ $B160
0E/B128: E0 03     CPX #$03
0E/B12A: F0 34     BEQ $B160
0E/B12C: AD F0 79  LDA $79F0
0E/B12F: 4A        LSR 
0E/B130: 4A        LSR 
0E/B131: AA        TAX 
0E/B132: A5 6E     LDA $6E
0E/B134: 1D 99 B1  ORA $B199,X
0E/B137: AA        TAX 
0E/B138: BD 00 61  LDA $6100,X
0E/B13B: A6 82     LDX $82
0E/B13D: 9D 60 60  STA $6060,X
0E/B140: 4C EF B0  JMP $B0EF
0E/B143: 4C 67 DE  JMP $DE67          ; play error sound effect
0E/B146: A5 80     LDA $80
0E/B148: C9 0E     CMP #$0E
0E/B14A: 90 F7     BCC $B143
0E/B14C: C9 30     CMP #$30
0E/B14E: 90 DC     BCC $B12C
0E/B150: F0 F1     BEQ $B143
0E/B152: C9 70     CMP #$70
0E/B154: 90 D6     BCC $B12C
0E/B156: C9 98     CMP #$98
0E/B158: 90 E9     BCC $B143
0E/B15A: C9 C0     CMP #$C0
0E/B15C: B0 E5     BCS $B143
0E/B15E: 90 CC     BCC $B12C
0E/B160: A4 6E     LDY $6E
0E/B162: E0 00     CPX #$00
0E/B164: D0 0D     BNE $B173
0E/B166: B9 1C 61  LDA $611C,Y
0E/B169: 85 10     STA $10
0E/B16B: B9 1D 61  LDA $611D,Y
0E/B16E: 85 11     STA $11
0E/B170: 4C 7D B1  JMP $B17D
0E/B173: B9 1D 61  LDA $611D,Y
0E/B176: 85 10     STA $10
0E/B178: B9 1C 61  LDA $611C,Y
0E/B17B: 85 11     STA $11
0E/B17D: A5 10     LDA $10
0E/B17F: 05 11     ORA $11
0E/B181: F0 A9     BEQ $B12C
0E/B183: A5 11     LDA $11
0E/B185: F0 A5     BEQ $B12C
0E/B187: C9 68     CMP #$68
0E/B189: B0 0B     BCS $B196
0E/B18B: A5 80     LDA $80
0E/B18D: C9 68     CMP #$68
0E/B18F: B0 05     BCS $B196
0E/B191: 4C 2C B1  JMP $B12C
0E/B194: A5 10     LDA $10
0E/B196: 4C 43 B1  JMP $B143

0E/B199: 1C 19 1B 1D 1A 1E 1F 00
0E/B1A1: 31 70 8E 31 7A 00 00 00
0E/B1A9: 70 7A 98 70 8E 00 00 00

; [ stats menu ]

0E/B1B1: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/B1B4: 20 80 B3  JSR $B380          ; close menu
0E/B1B7: A9 00     LDA #$00
0E/B1B9: 85 A2     STA $A2
0E/B1BB: 85 A3     STA $A3
0E/B1BD: 20 6F B3  JSR $B36F
0E/B1C0: 20 01 B4  JSR $B401          ; wait for vblank (update cursors)
0E/B1C3: A6 6E     LDX $6E
0E/B1C5: 20 3D 88  JSR $883D
0E/B1C8: 20 5C DB  JSR $DB5C          ; update joypad input
0E/B1CB: A5 24     LDA $24
0E/B1CD: 05 25     ORA $25
0E/B1CF: F0 EF     BEQ $B1C0
0E/B1D1: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/B1D4: 4C 80 B3  JMP $B380          ; close menu

; [ save menu ]

0E/B1D7: 20 8F DA  JSR $DA8F
0E/B1DA: A9 00     LDA #$00
0E/B1DC: 85 A2     STA $A2
0E/B1DE: A9 01     LDA #$01
0E/B1E0: 85 A3     STA $A3
0E/B1E2: A9 00     LDA #$00
0E/B1E4: 8D F0 79  STA $79F0
0E/B1E7: 20 60 EE  JSR $EE60
0E/B1EA: A2 10     LDX #$10
0E/B1EC: 20 86 B4  JSR $B486
0E/B1EF: A9 29     LDA #$29
0E/B1F1: 20 DF B3  JSR $B3DF          ; load menu text
0E/B1F4: 20 01 B4  JSR $B401          ; wait for vblank (update cursors)
0E/B1F7: 20 00 88  JSR $8800          ; draw portraits
0E/B1FA: A9 04     LDA #$04
0E/B1FC: 20 F9 96  JSR $96F9          ; update cursor 2 position
0E/B1FF: A5 25     LDA $25
0E/B201: F0 04     BEQ $B207          ; branch if B is button not pressed
0E/B203: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/B206: 60        RTS 
0E/B207: A5 24     LDA $24
0E/B209: F0 E9     BEQ $B1F4
0E/B20B: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/B20E: AD F0 79  LDA $79F0          ; cursor position
0E/B211: 4A        LSR 
0E/B212: 4A        LSR 
0E/B213: 29 03     AND #$03
0E/B215: 48        PHA 
0E/B216: 20 C1 DA  JSR $DAC1
0E/B219: 68        PLA 
0E/B21A: B0 46     BCS $B262
0E/B21C: 48        PHA 
0E/B21D: 20 C3 B2  JSR $B2C3
0E/B220: 20 80 B3  JSR $B380          ; close menu
0E/B223: 20 F1 B2  JSR $B2F1          ; reload menu sprite graphics
0E/B226: 20 96 B3  JSR $B396
0E/B229: A2 10     LDX #$10
0E/B22B: 20 86 B4  JSR $B486
0E/B22E: A9 28     LDA #$28
0E/B230: 20 DF B3  JSR $B3DF          ; load menu text
0E/B233: A9 00     LDA #$00
0E/B235: 8D F0 79  STA $79F0
0E/B238: 20 01 B4  JSR $B401          ; wait for vblank (update cursors)
0E/B23B: 20 00 88  JSR $8800          ; draw portraits
0E/B23E: A9 04     LDA #$04
0E/B240: 20 F9 96  JSR $96F9          ; update cursor 2 position
0E/B243: A5 25     LDA $25
0E/B245: D0 6C     BNE $B2B3
0E/B247: A5 24     LDA $24
0E/B249: F0 ED     BEQ $B238
0E/B24B: AD F0 79  LDA $79F0
0E/B24E: D0 63     BNE $B2B3
0E/B250: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/B253: 68        PLA 
0E/B254: 48        PHA 
0E/B255: 20 C3 B2  JSR $B2C3
0E/B258: 20 80 B3  JSR $B380          ; close menu
0E/B25B: 20 F1 B2  JSR $B2F1          ; reload menu sprite graphics
0E/B25E: 20 96 B3  JSR $B396
0E/B261: 68        PLA 
0E/B262: 85 80     STA $80
0E/B264: 0A        ASL 
0E/B265: 18        CLC 
0E/B266: 65 80     ADC $80
0E/B268: 69 63     ADC #$63
0E/B26A: 85 81     STA $81
0E/B26C: A9 00     LDA #$00
0E/B26E: 85 80     STA $80
0E/B270: 85 82     STA $82
0E/B272: A9 60     LDA #$60
0E/B274: 85 83     STA $83
0E/B276: A0 00     LDY #$00
0E/B278: A2 03     LDX #$03
0E/B27A: B1 82     LDA ($82),Y
0E/B27C: 91 80     STA ($80),Y
0E/B27E: C8        INY 
0E/B27F: D0 F9     BNE $B27A
0E/B281: E6 81     INC $81
0E/B283: E6 83     INC $83
0E/B285: CA        DEX 
0E/B286: D0 F2     BNE $B27A
0E/B288: 20 60 EE  JSR $EE60
0E/B28B: A2 10     LDX #$10
0E/B28D: 20 86 B4  JSR $B486
0E/B290: A9 2A     LDA #$2A
0E/B292: 20 DF B3  JSR $B3DF          ; load menu text
0E/B295: A9 00     LDA #$00
0E/B297: 85 A2     STA $A2
0E/B299: 85 A3     STA $A3
0E/B29B: A9 00     LDA #$00
0E/B29D: 85 24     STA $24
0E/B29F: 85 25     STA $25
0E/B2A1: 20 01 B4  JSR $B401          ; wait for vblank (update cursors)
0E/B2A4: 20 00 88  JSR $8800          ; draw portraits
0E/B2A7: 20 5C DB  JSR $DB5C          ; update joypad input
0E/B2AA: A5 25     LDA $25
0E/B2AC: 05 24     ORA $24
0E/B2AE: F0 F1     BEQ $B2A1
0E/B2B0: 4C 5E 90  JMP $905E          ; cursor sound effect (confirm)
0E/B2B3: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/B2B6: 68        PLA 
0E/B2B7: 20 C3 B2  JSR $B2C3          ; copy to save slot
0E/B2BA: 20 80 B3  JSR $B380          ; close menu
0E/B2BD: 20 F1 B2  JSR $B2F1          ; reload menu sprite graphics
0E/B2C0: 4C 96 B3  JMP $B396

; [ copy to save slot ]

0E/B2C3: 85 80     STA $80            ; get pointer to save slot
0E/B2C5: 0A        ASL 
0E/B2C6: 18        CLC 
0E/B2C7: 65 80     ADC $80
0E/B2C9: 69 63     ADC #$63           ; $6300
0E/B2CB: 85 81     STA $81
0E/B2CD: A9 00     LDA #$00
0E/B2CF: 85 80     STA $80
0E/B2D1: 85 82     STA $82
0E/B2D3: A9 60     LDA #$60
0E/B2D5: 85 83     STA $83
0E/B2D7: A0 00     LDY #$00
0E/B2D9: B1 80     LDA ($80),Y        ; copy 784 bytes
0E/B2DB: AA        TAX 
0E/B2DC: B1 82     LDA ($82),Y
0E/B2DE: 91 80     STA ($80),Y
0E/B2E0: 8A        TXA 
0E/B2E1: 91 82     STA ($82),Y
0E/B2E3: C8        INY 
0E/B2E4: D0 F3     BNE $B2D9
0E/B2E6: E6 81     INC $81
0E/B2E8: E6 83     INC $83
0E/B2EA: A5 83     LDA $83
0E/B2EC: C9 63     CMP #$63
0E/B2EE: 90 E9     BCC $B2D9
0E/B2F0: 60        RTS 

; [ reload menu sprite graphics ]

0E/B2F1: A9 00     LDA #$00
0E/B2F3: 8D 01 20  STA $2001
0E/B2F6: 20 FA E6  JSR $E6FA          ; load menu sprite graphics
0E/B2F9: 20 00 FE  JSR $FE00          ; wait for vblank
0E/B2FC: A5 FF     LDA $FF
0E/B2FE: 8D 00 20  STA $2000
0E/B301: A9 00     LDA #$00
0E/B303: 8D 05 20  STA $2005
0E/B306: 8D 05 20  STA $2005
0E/B309: A9 1E     LDA #$1E
0E/B30B: 8D 01 20  STA $2001
0E/B30E: A9 02     LDA #$02
0E/B310: 8D 14 40  STA $4014
0E/B313: 60        RTS 

; [  ]

0E/B314: A2 80     LDX #$80
0E/B316: BD 00 7A  LDA $7A00,X
0E/B319: 18        CLC 
0E/B31A: 69 01     ADC #$01
0E/B31C: 9D 00 79  STA $7900,X
0E/B31F: BD 01 7A  LDA $7A01,X
0E/B322: 9D 01 79  STA $7901,X
0E/B325: BD 02 7A  LDA $7A02,X
0E/B328: 9D 02 79  STA $7902,X
0E/B32B: BD 03 7A  LDA $7A03,X
0E/B32E: 9D 03 79  STA $7903,X
0E/B331: 8A        TXA 
0E/B332: 38        SEC 
0E/B333: E9 04     SBC #$04
0E/B335: AA        TAX 
0E/B336: B0 DE     BCS $B316
0E/B338: AD F1 7A  LDA $7AF1
0E/B33B: 8D F1 79  STA $79F1
0E/B33E: 60        RTS 

; [  ]

0E/B33F: A2 80     LDX #$80
0E/B341: BD 00 7A  LDA $7A00,X
0E/B344: 9D 00 78  STA $7800,X
0E/B347: BD 01 7A  LDA $7A01,X
0E/B34A: 9D 01 78  STA $7801,X
0E/B34D: BD 02 7A  LDA $7A02,X
0E/B350: 9D 02 78  STA $7802,X
0E/B353: BD 03 7A  LDA $7A03,X
0E/B356: 9D 03 78  STA $7803,X
0E/B359: 8A        TXA 
0E/B35A: 38        SEC 
0E/B35B: E9 04     SBC #$04
0E/B35D: AA        TAX 
0E/B35E: B0 E1     BCS $B341
0E/B360: AD F1 7A  LDA $7AF1
0E/B363: 38        SEC 
0E/B364: E9 04     SBC #$04
0E/B366: 8D F1 78  STA $78F1
0E/B369: 60        RTS 

; [  ]

0E/B36A: A6 6E     LDX $6E
0E/B36C: 4C 33 88  JMP $8833          ; draw portrait

; [  ]

0E/B36F: A2 0F     LDX #$0F
0E/B371: A9 27     LDA #$27
0E/B373: 20 C8 B3  JSR $B3C8
0E/B376: A2 0E     LDX #$0E
0E/B378: 20 86 B4  JSR $B486
0E/B37B: A9 1D     LDA #$1D
0E/B37D: 4C DF B3  JMP $B3DF          ; load menu text

; [ close menu ]

0E/B380: 20 6E C4  JSR $C46E          ; clear oam data
0E/B383: 20 00 FE  JSR $FE00          ; wait for vblank
0E/B386: A9 02     LDA #$02
0E/B388: 8D 14 40  STA $4014          ; copy oam data to ppu
0E/B38B: A9 00     LDA #$00
0E/B38D: 8D 05 20  STA $2005
0E/B390: 8D 05 20  STA $2005
0E/B393: 4C 64 EE  JMP $EE64

; [  ]

0E/B396: A2 00     LDX #$00
0E/B398: A0 10     LDY #$10
0E/B39A: 84 9E     STY $9E
0E/B39C: A9 1E     LDA #$1E
0E/B39E: 20 C8 B3  JSR $B3C8
0E/B3A1: A2 01     LDX #$01
0E/B3A3: A0 11     LDY #$11
0E/B3A5: 84 9E     STY $9E
0E/B3A7: A9 1E     LDA #$1E
0E/B3A9: 20 C8 B3  JSR $B3C8
0E/B3AC: A2 02     LDX #$02
0E/B3AE: A0 12     LDY #$12
0E/B3B0: 84 9E     STY $9E
0E/B3B2: A9 1E     LDA #$1E
0E/B3B4: 20 C8 B3  JSR $B3C8
0E/B3B7: AD F5 62  LDA $62F5
0E/B3BA: 30 0B     BMI $B3C7          ; branch if no 4th character
0E/B3BC: A2 03     LDX #$03
0E/B3BE: A0 13     LDY #$13
0E/B3C0: 84 9E     STY $9E
0E/B3C2: A9 1E     LDA #$1E
0E/B3C4: 4C C8 B3  JMP $B3C8
0E/B3C7: 60        RTS 

; [  ]

0E/B3C8: 48        PHA 
0E/B3C9: 20 86 B4  JSR $B486
0E/B3CC: 68        PLA 
0E/B3CD: 20 F1 DA  JSR $DAF1
0E/B3D0: A9 0A     LDA #$0A
0E/B3D2: 85 93     STA $93
0E/B3D4: A9 00     LDA #$00
0E/B3D6: 85 3E     STA $3E
0E/B3D8: A9 7B     LDA #$7B
0E/B3DA: 85 3F     STA $3F
0E/B3DC: 4C AC E7  JMP $E7AC

; --------------------------------------------------------------------------

; [ load menu text (multi-page) ]

0E/B3DF: 85 92     STA $92
0E/B3E1: A9 84     LDA #$84           ; 0A/8400
0E/B3E3: 85 95     STA $95
0E/B3E5: A9 00     LDA #$00
0E/B3E7: 85 94     STA $94
0E/B3E9: A9 0A     LDA #$0A
0E/B3EB: 85 93     STA $93
0E/B3ED: 4C 54 EA  JMP $EA54          ; load text (multi-page)

; [ load menu text (single-page) ]

0E/B3F0: 85 92     STA $92
0E/B3F2: A9 84     LDA #$84           ; 0A/8400
0E/B3F4: 85 95     STA $95
0E/B3F6: A9 00     LDA #$00
0E/B3F8: 85 94     STA $94
0E/B3FA: A9 0A     LDA #$0A
0E/B3FC: 85 93     STA $93
0E/B3FE: 4C 8C EA  JMP $EA8C          ; load text (single-page)

; [ wait for vblank (update cursors) ]

0E/B401: 20 00 FE  JSR $FE00          ; wait for vblank
0E/B404: A9 02     LDA #$02
0E/B406: 8D 14 40  STA $4014          ; copy oam data to ppu
0E/B409: 20 4F C7  JSR $C74F          ; update sound
0E/B40C: 20 6E C4  JSR $C46E          ; clear oam data
0E/B40F: 20 52 96  JSR $9652          ; draw cursor sprite 1
0E/B412: 20 63 96  JSR $9663          ; draw cursor sprite 2
0E/B415: 4C 74 96  JMP $9674          ; draw cursor sprite 3

; [  ]

0E/B418: AD F0 79  LDA $79F0
0E/B41B: 18        CLC 
0E/B41C: 69 04     ADC #$04
0E/B41E: CD F1 79  CMP $79F1
0E/B421: D0 DE     BNE $B401
0E/B423: 20 00 FE  JSR $FE00          ; wait for vblank
0E/B426: A9 02     LDA #$02
0E/B428: 8D 14 40  STA $4014
0E/B42B: 20 4F C7  JSR $C74F          ; update sound
0E/B42E: 20 6E C4  JSR $C46E
0E/B431: E6 F0     INC $F0
0E/B433: A5 F0     LDA $F0
0E/B435: 29 03     AND #$03
0E/B437: 0A        ASL 
0E/B438: 0A        ASL 
0E/B439: 8D F0 79  STA $79F0
0E/B43C: 18        CLC 
0E/B43D: 69 04     ADC #$04
0E/B43F: CD F1 79  CMP $79F1
0E/B442: F0 03     BEQ $B447
0E/B444: 20 63 96  JSR $9663
0E/B447: AD F1 79  LDA $79F1
0E/B44A: 38        SEC 
0E/B44B: E9 04     SBC #$04
0E/B44D: 8D F0 79  STA $79F0
0E/B450: 60        RTS 

; [  ]

0E/B451: 20 67 B4  JSR $B467          ; load menu window position
0E/B454: E6 38     INC $38
0E/B456: E6 39     INC $39
0E/B458: A5 3C     LDA $3C
0E/B45A: 38        SEC 
0E/B45B: E9 02     SBC #$02
0E/B45D: 85 3C     STA $3C
0E/B45F: A5 3D     LDA $3D
0E/B461: 38        SEC 
0E/B462: E9 02     SBC #$02
0E/B464: 85 3D     STA $3D
0E/B466: 60        RTS 

; [ load menu window position ]

0E/B467: BD 8C B4  LDA $B48C,X        ; x position
0E/B46A: 85 38     STA $38
0E/B46C: 38        SEC 
0E/B46D: E9 01     SBC #$01
0E/B46F: 85 97     STA $97
0E/B471: BD A5 B4  LDA $B4A5,X        ; y position
0E/B474: 85 39     STA $39
0E/B476: 18        CLC 
0E/B477: 69 02     ADC #$02
0E/B479: 85 98     STA $98
0E/B47B: BD BE B4  LDA $B4BE,X        ; width
0E/B47E: 85 3C     STA $3C
0E/B480: BD D7 B4  LDA $B4D7,X        ; height
0E/B483: 85 3D     STA $3D
0E/B485: 60        RTS 

; [ open menu window ]

0E/B486: 20 67 B4  JSR $B467          ; load menu window position
0E/B489: 4C 1E E9  JMP $E91E          ; open window

; menu window x positions
0E/B48C: 01 0F 03 11 01 06 01 01 01 0B 10 02 01 01 01 02
0E/B49C: 01 04 04 04 04 04 07 04 01

; menu window y positions
0E/B4A5: 01 01 0B 0B 15 19 01 04 01 01 01 07 07 13 01 02
0E/B4B5: 15 02 07 0C 11 17 03 0B 01

; menu window widths
0E/B4BE: 0E 0E 0E 0E 1E 0D 08 1E 0B 06 0F 1C 1E 1E 06 1D
0E/B4CE: 1E 18 18 18 18 18 12 18 1E

; menu window heights
0E/B4D7: 0A 0A 0A 0A 04 04 04 18 06 06 06 14 0C 0A 06 1A
0E/B4E7: 08 06 06 06 06 04 06 0E 1C

0E/B4F0: 10 13 11 12

; --------------------------------------------------------------------------

; [  ]

0E/B4F4: 20 80 B3  JSR $B380          ; close menu
0E/B4F7: 20 B6 8E  JSR $8EB6          ; init player input
0E/B4FA: A9 00     LDA #$00
0E/B4FC: 8D F0 7A  STA $7AF0
0E/B4FF: A2 17     LDX #$17
0E/B501: 20 86 B4  JSR $B486
0E/B504: A9 46     LDA #$46
0E/B506: 20 F0 B3  JSR $B3F0          ; load menu text
0E/B509: 20 EB 94  JSR $94EB          ; save dialogue window variables
0E/B50C: A9 01     LDA #$01
0E/B50E: 85 A4     STA $A4
0E/B510: A2 16     LDX #$16
0E/B512: 20 86 B4  JSR $B486
0E/B515: A9 00     LDA #$00
0E/B517: 85 07     STA $07
0E/B519: 85 08     STA $08
0E/B51B: 20 3B B5  JSR $B53B
0E/B51E: 90 0E     BCC $B52E
0E/B520: A5 07     LDA $07
0E/B522: C9 01     CMP #$01
0E/B524: 90 F5     BCC $B51B
0E/B526: 38        SEC 
0E/B527: E9 01     SBC #$01
0E/B529: 85 07     STA $07
0E/B52B: 4C 1B B5  JMP $B51B
0E/B52E: A5 07     LDA $07
0E/B530: 18        CLC 
0E/B531: 69 01     ADC #$01
0E/B533: 85 07     STA $07
0E/B535: C9 04     CMP #$04
0E/B537: 90 E2     BCC $B51B
0E/B539: 18        CLC 
0E/B53A: 60        RTS 

; [  ]

0E/B53B: A6 07     LDX $07
0E/B53D: BD F0 B4  LDA $B4F0,X
0E/B540: 85 9E     STA $9E
0E/B542: 29 03     AND #$03
0E/B544: 4A        LSR 
0E/B545: 6A        ROR 
0E/B546: 6A        ROR 
0E/B547: 85 6E     STA $6E
0E/B549: 20 09 B6  JSR $B609
0E/B54C: 20 00 FE  JSR $FE00          ; wait for vblank
0E/B54F: A9 02     LDA #$02
0E/B551: 8D 14 40  STA $4014
0E/B554: 20 6E C4  JSR $C46E
0E/B557: 20 4F C7  JSR $C74F          ; update sound
0E/B55A: 20 74 96  JSR $9674
0E/B55D: A6 6E     LDX $6E
0E/B55F: 20 47 88  JSR $8847
0E/B562: 20 16 B6  JSR $B616
0E/B565: A9 28     LDA #$28
0E/B567: 20 2D 97  JSR $972D          ; update cursor 3 position
0E/B56A: A5 25     LDA $25
0E/B56C: F0 12     BEQ $B580
0E/B56E: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/B571: A5 08     LDA $08
0E/B573: 38        SEC 
0E/B574: E9 01     SBC #$01
0E/B576: 85 08     STA $08
0E/B578: 10 D2     BPL $B54C
0E/B57A: A9 05     LDA #$05
0E/B57C: 85 08     STA $08
0E/B57E: 38        SEC 
0E/B57F: 60        RTS 
0E/B580: A5 24     LDA $24
0E/B582: F0 C8     BEQ $B54C
0E/B584: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/B587: A5 08     LDA $08
0E/B589: C9 06     CMP #$06
0E/B58B: 90 06     BCC $B593
0E/B58D: A9 00     LDA #$00
0E/B58F: 85 08     STA $08
0E/B591: 18        CLC 
0E/B592: 60        RTS 
0E/B593: A5 08     LDA $08
0E/B595: 05 6E     ORA $6E
0E/B597: A8        TAY 
0E/B598: AE F0 7A  LDX $7AF0
0E/B59B: BD 02 7A  LDA $7A02,X
0E/B59E: 99 02 61  STA $6102,Y
0E/B5A1: E6 08     INC $08
0E/B5A3: 20 09 B6  JSR $B609
0E/B5A6: A5 08     LDA $08
0E/B5A8: C9 06     CMP #$06
0E/B5AA: B0 03     BCS $B5AF
0E/B5AC: 4C 4C B5  JMP $B54C
0E/B5AF: A5 07     LDA $07
0E/B5B1: F0 F9     BEQ $B5AC
0E/B5B3: C9 01     CMP #$01
0E/B5B5: F0 12     BEQ $B5C9
0E/B5B7: C9 02     CMP #$02
0E/B5B9: F0 07     BEQ $B5C2
0E/B5BB: A4 6E     LDY $6E
0E/B5BD: A2 40     LDX #$40
0E/B5BF: 20 D3 B5  JSR $B5D3
0E/B5C2: A4 6E     LDY $6E
0E/B5C4: A2 C0     LDX #$C0
0E/B5C6: 20 D3 B5  JSR $B5D3
0E/B5C9: A4 6E     LDY $6E
0E/B5CB: A2 00     LDX #$00
0E/B5CD: 20 D3 B5  JSR $B5D3
0E/B5D0: 4C 4C B5  JMP $B54C
0E/B5D3: B9 02 61  LDA $6102,Y
0E/B5D6: DD 02 61  CMP $6102,X
0E/B5D9: D0 2D     BNE $B608
0E/B5DB: B9 03 61  LDA $6103,Y
0E/B5DE: DD 03 61  CMP $6103,X
0E/B5E1: D0 25     BNE $B608
0E/B5E3: B9 04 61  LDA $6104,Y
0E/B5E6: DD 04 61  CMP $6104,X
0E/B5E9: D0 1D     BNE $B608
0E/B5EB: B9 05 61  LDA $6105,Y
0E/B5EE: DD 05 61  CMP $6105,X
0E/B5F1: D0 15     BNE $B608
0E/B5F3: B9 06 61  LDA $6106,Y
0E/B5F6: DD 06 61  CMP $6106,X
0E/B5F9: D0 0D     BNE $B608
0E/B5FB: B9 07 61  LDA $6107,Y
0E/B5FE: DD 07 61  CMP $6107,X
0E/B601: D0 05     BNE $B608
0E/B603: C6 08     DEC $08
0E/B605: 20 67 DE  JSR $DE67          ; play error sound effect
0E/B608: 60        RTS 

; [  ]

0E/B609: A2 16     LDX #$16
0E/B60B: 20 51 B4  JSR $B451
0E/B60E: A9 45     LDA #$45
0E/B610: 20 F1 DA  JSR $DAF1
0E/B613: 4C 81 B8  JMP $B881
0E/B616: E6 F0     INC $F0
0E/B618: A5 08     LDA $08
0E/B61A: C9 06     CMP #$06
0E/B61C: 90 01     BCC $B61F
0E/B61E: 60        RTS 
0E/B61F: A5 F0     LDA $F0
0E/B621: 29 08     AND #$08
0E/B623: D0 F9     BNE $B61E
0E/B625: A6 26     LDX $26
0E/B627: A9 27     LDA #$27
0E/B629: 9D 00 02  STA $0200,X
0E/B62C: A9 48     LDA #$48
0E/B62E: 9D 01 02  STA $0201,X
0E/B631: A9 03     LDA #$03
0E/B633: 9D 02 02  STA $0202,X
0E/B636: A5 08     LDA $08
0E/B638: 0A        ASL 
0E/B639: 0A        ASL 
0E/B63A: 0A        ASL 
0E/B63B: 18        CLC 
0E/B63C: 69 78     ADC #$78
0E/B63E: 9D 03 02  STA $0203,X
0E/B641: 60        RTS 

; [ game load menu ]

0E/B642: A9 00     LDA #$00
0E/B644: 8D 01 20  STA $2001
0E/B647: 8D 15 40  STA $4015
0E/B64A: A9 05     LDA #$05
0E/B64C: 85 08     STA $08
0E/B64E: 20 B0 FF  JSR $FFB0          ; init sram
0E/B651: A9 08     LDA #$08
0E/B653: 8D C0 61  STA $61C0
0E/B656: 20 91 E4  JSR $E491          ; load menu graphics
0E/B659: 20 06 B9  JSR $B906
0E/B65C: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0E/B65F: A9 1E     LDA #$1E
0E/B661: 8D 01 20  STA $2001
0E/B664: A9 00     LDA #$00
0E/B666: 20 C1 DA  JSR $DAC1
0E/B669: 85 88     STA $88
0E/B66B: A9 01     LDA #$01
0E/B66D: 20 C1 DA  JSR $DAC1
0E/B670: 85 89     STA $89
0E/B672: A9 02     LDA #$02
0E/B674: 20 C1 DA  JSR $DAC1
0E/B677: 85 8A     STA $8A
0E/B679: A9 03     LDA #$03
0E/B67B: 20 C1 DA  JSR $DAC1
0E/B67E: 85 8B     STA $8B
0E/B680: A9 00     LDA #$00
0E/B682: 8D F0 78  STA $78F0
0E/B685: 8D F0 79  STA $79F0
0E/B688: 8D F0 7A  STA $7AF0
0E/B68B: 20 FC B7  JSR $B7FC
0E/B68E: A9 10     LDA #$10
0E/B690: 85 9E     STA $9E
0E/B692: 20 EC B7  JSR $B7EC
0E/B695: A5 9E     LDA $9E
0E/B697: 18        CLC 
0E/B698: 69 01     ADC #$01
0E/B69A: 85 9E     STA $9E
0E/B69C: C9 14     CMP #$14
0E/B69E: 90 F2     BCC $B692
0E/B6A0: 20 E2 B7  JSR $B7E2
0E/B6A3: 20 B4 B7  JSR $B7B4
0E/B6A6: A5 FF     LDA $FF
0E/B6A8: 8D 00 20  STA $2000
0E/B6AB: 20 00 FE  JSR $FE00          ; wait for vblank
0E/B6AE: A9 02     LDA #$02
0E/B6B0: 8D 14 40  STA $4014
0E/B6B3: 20 6E C4  JSR $C46E
0E/B6B6: 20 4F C7  JSR $C74F          ; update sound
0E/B6B9: 20 52 96  JSR $9652
0E/B6BC: 20 2D B7  JSR $B72D
0E/B6BF: A5 24     LDA $24
0E/B6C1: F0 E8     BEQ $B6AB
0E/B6C3: 20 5E 90  JSR $905E          ; cursor sound effect (confirm)
0E/B6C6: AD F0 78  LDA $78F0
0E/B6C9: C9 10     CMP #$10
0E/B6CB: B0 43     BCS $B710
0E/B6CD: 4A        LSR 
0E/B6CE: 4A        LSR 
0E/B6CF: 85 80     STA $80
0E/B6D1: A8        TAY 
0E/B6D2: 4A        LSR 
0E/B6D3: 6A        ROR 
0E/B6D4: 6A        ROR 
0E/B6D5: AA        TAX 
0E/B6D6: BD 10 61  LDA $6110,X
0E/B6D9: AA        TAX 
0E/B6DA: B9 88 00  LDA $0088,Y
0E/B6DD: D0 31     BNE $B710
0E/B6DF: A5 80     LDA $80
0E/B6E1: 0A        ASL 
0E/B6E2: 18        CLC 
0E/B6E3: 65 80     ADC $80
0E/B6E5: 69 63     ADC #$63
0E/B6E7: 85 81     STA $81
0E/B6E9: A9 00     LDA #$00
0E/B6EB: 85 80     STA $80
0E/B6ED: A0 00     LDY #$00
0E/B6EF: B1 80     LDA ($80),Y
0E/B6F1: 99 00 60  STA $6000,Y
0E/B6F4: C8        INY 
0E/B6F5: D0 F8     BNE $B6EF
0E/B6F7: E6 81     INC $81
0E/B6F9: B1 80     LDA ($80),Y
0E/B6FB: 99 00 61  STA $6100,Y
0E/B6FE: C8        INY 
0E/B6FF: D0 F8     BNE $B6F9
0E/B701: E6 81     INC $81
0E/B703: B1 80     LDA ($80),Y
0E/B705: 99 00 62  STA $6200,Y
0E/B708: C8        INY 
0E/B709: D0 F8     BNE $B703
0E/B70B: 8E 1F 60  STX $601F
0E/B70E: 38        SEC 
0E/B70F: 60        RTS 
0E/B710: 20 B0 FF  JSR $FFB0          ; init sram
0E/B713: A9 08     LDA #$08
0E/B715: 8D C0 61  STA $61C0
0E/B718: A5 08     LDA $08
0E/B71A: 8D 1F 60  STA $601F
0E/B71D: 20 F4 B4  JSR $B4F4
0E/B720: A2 05     LDX #$05
0E/B722: BD C2 61  LDA $61C2,X
0E/B725: 9D 76 62  STA $6276,X
0E/B728: CA        DEX 
0E/B729: 10 F7     BPL $B722
0E/B72B: 18        CLC 
0E/B72C: 60        RTS 

; [  ]

0E/B72D: 20 93 96  JSR $9693          ; get cursor movement direction
0E/B730: 29 0F     AND #$0F
0E/B732: F0 26     BEQ $B75A
0E/B734: C9 04     CMP #$04
0E/B736: 90 23     BCC $B75B
0E/B738: C9 08     CMP #$08
0E/B73A: B0 0E     BCS $B74A
0E/B73C: AD F0 78  LDA $78F0
0E/B73F: 18        CLC 
0E/B740: 69 04     ADC #$04
0E/B742: C9 14     CMP #$14
0E/B744: 90 0E     BCC $B754
0E/B746: A9 00     LDA #$00
0E/B748: F0 0A     BEQ $B754
0E/B74A: AD F0 78  LDA $78F0
0E/B74D: 38        SEC 
0E/B74E: E9 04     SBC #$04
0E/B750: B0 02     BCS $B754
0E/B752: A9 10     LDA #$10
0E/B754: 8D F0 78  STA $78F0
0E/B757: 4C A4 B7  JMP $B7A4
0E/B75A: 60        RTS 
0E/B75B: C9 02     CMP #$02
0E/B75D: B0 0F     BCS $B76E
0E/B75F: AD F0 78  LDA $78F0
0E/B762: C9 10     CMP #$10
0E/B764: B0 17     BCS $B77D
0E/B766: 0A        ASL 
0E/B767: 0A        ASL 
0E/B768: 0A        ASL 
0E/B769: 0A        ASL 
0E/B76A: AA        TAX 
0E/B76B: 4C 91 B7  JMP $B791
0E/B76E: AD F0 78  LDA $78F0
0E/B771: C9 10     CMP #$10
0E/B773: B0 10     BCS $B785
0E/B775: 0A        ASL 
0E/B776: 0A        ASL 
0E/B777: 0A        ASL 
0E/B778: 0A        ASL 
0E/B779: AA        TAX 
0E/B77A: 4C 99 B7  JMP $B799
0E/B77D: A5 08     LDA $08
0E/B77F: 18        CLC 
0E/B780: 69 01     ADC #$01
0E/B782: 4C 8A B7  JMP $B78A
0E/B785: A5 08     LDA $08
0E/B787: 38        SEC 
0E/B788: E9 01     SBC #$01
0E/B78A: 29 07     AND #$07
0E/B78C: 85 08     STA $08
0E/B78E: 4C A4 B7  JMP $B7A4
0E/B791: BD 10 61  LDA $6110,X
0E/B794: 18        CLC 
0E/B795: 69 01     ADC #$01
0E/B797: D0 06     BNE $B79F
0E/B799: BD 10 61  LDA $6110,X
0E/B79C: 38        SEC 
0E/B79D: E9 01     SBC #$01
0E/B79F: 29 07     AND #$07
0E/B7A1: 9D 10 61  STA $6110,X
0E/B7A4: AD F0 78  LDA $78F0
0E/B7A7: C9 10     CMP #$10
0E/B7A9: B0 37     BCS $B7E2
0E/B7AB: 4A        LSR 
0E/B7AC: 4A        LSR 
0E/B7AD: 09 10     ORA #$10
0E/B7AF: 85 9E     STA $9E
0E/B7B1: 4C EC B7  JMP $B7EC

; [  ]

0E/B7B4: A2 18     LDX #$18
0E/B7B6: BD CE B7  LDA $B7CE,X
0E/B7B9: 9D 00 78  STA $7800,X
0E/B7BC: CA        DEX 
0E/B7BD: 10 F7     BPL $B7B6
0E/B7BF: A9 00     LDA #$00
0E/B7C1: 8D F0 78  STA $78F0
0E/B7C4: A9 14     LDA #$14
0E/B7C6: 8D F1 78  STA $78F1
0E/B7C9: A9 01     LDA #$01
0E/B7CB: 85 A2     STA $A2
0E/B7CD: 60        RTS 

; ??? menu cursor data
0E/B7CE: 02 04 00 00
0E/B7D2: 02 09 00 00
0E/B7D6: 02 0E 00 00
0E/B7DA: 02 13 00 00
0E/B7DE: 02 19 00 00

; [  ]

0E/B7E2: A2 15     LDX #$15
0E/B7E4: 20 86 B4  JSR $B486
0E/B7E7: A9 4B     LDA #$4B
0E/B7E9: 4C 7A B8  JMP $B87A
0E/B7EC: A5 9E     LDA $9E
0E/B7EE: 29 03     AND #$03
0E/B7F0: 18        CLC 
0E/B7F1: 69 11     ADC #$11
0E/B7F3: AA        TAX 
0E/B7F4: 20 86 B4  JSR $B486
0E/B7F7: A9 4A     LDA #$4A
0E/B7F9: 4C 45 B8  JMP $B845
0E/B7FC: A9 00     LDA #$00
0E/B7FE: 85 8C     STA $8C
0E/B800: 20 0F B8  JSR $B80F
0E/B803: A5 8C     LDA $8C
0E/B805: 18        CLC 
0E/B806: 69 01     ADC #$01
0E/B808: 85 8C     STA $8C
0E/B80A: C9 04     CMP #$04
0E/B80C: 90 F2     BCC $B800
0E/B80E: 60        RTS 

; [  ]

0E/B80F: A5 8C     LDA $8C
0E/B811: 85 80     STA $80
0E/B813: 0A        ASL 
0E/B814: 18        CLC 
0E/B815: 65 80     ADC $80
0E/B817: 69 63     ADC #$63
0E/B819: 85 81     STA $81
0E/B81B: A9 00     LDA #$00
0E/B81D: 85 80     STA $80
0E/B81F: A6 8C     LDX $8C
0E/B821: B5 88     LDA $88,X
0E/B823: F0 01     BEQ $B826
0E/B825: 60        RTS 
0E/B826: A0 1F     LDY #$1F
0E/B828: B1 80     LDA ($80),Y
0E/B82A: 48        PHA 
0E/B82B: E6 81     INC $81
0E/B82D: A5 8C     LDA $8C
0E/B82F: 4A        LSR 
0E/B830: 6A        ROR 
0E/B831: 6A        ROR 
0E/B832: AA        TAX 
0E/B833: A0 00     LDY #$00
0E/B835: B1 80     LDA ($80),Y
0E/B837: 9D 00 61  STA $6100,X
0E/B83A: C8        INY 
0E/B83B: E8        INX 
0E/B83C: C0 10     CPY #$10
0E/B83E: 90 F5     BCC $B835
0E/B840: 68        PLA 
0E/B841: 9D 00 61  STA $6100,X
0E/B844: 60        RTS 

; [  ]

0E/B845: 20 F1 DA  JSR $DAF1
0E/B848: A5 9E     LDA $9E
0E/B84A: 29 03     AND #$03
0E/B84C: 18        CLC 
0E/B84D: 69 01     ADC #$01
0E/B84F: 09 80     ORA #$80
0E/B851: 8D 00 7B  STA $7B00
0E/B854: A5 9E     LDA $9E
0E/B856: 4A        LSR 
0E/B857: 6A        ROR 
0E/B858: 6A        ROR 
0E/B859: 29 C0     AND #$C0
0E/B85B: AA        TAX 
0E/B85C: BD 10 61  LDA $6110,X
0E/B85F: 85 61     STA $61
0E/B861: A5 9E     LDA $9E
0E/B863: 29 03     AND #$03
0E/B865: AA        TAX 
0E/B866: B5 88     LDA $88,X
0E/B868: F0 17     BEQ $B881
0E/B86A: A9 01     LDA #$01
0E/B86C: 8D 01 7B  STA $7B01
0E/B86F: 8D 02 7B  STA $7B02
0E/B872: A9 00     LDA #$00
0E/B874: 8D 03 7B  STA $7B03
0E/B877: 4C 81 B8  JMP $B881

; [  ]

0E/B87A: 20 F1 DA  JSR $DAF1
0E/B87D: A5 08     LDA $08
0E/B87F: 85 61     STA $61
0E/B881: A9 0A     LDA #$0A
0E/B883: 85 93     STA $93
0E/B885: A9 00     LDA #$00
0E/B887: 85 3E     STA $3E
0E/B889: A9 7B     LDA #$7B
0E/B88B: 85 3F     STA $3F
0E/B88D: 4C AC E7  JMP $E7AC

; --------------------------------------------------------------------------

; [ prophecy ]

0E/B890: A9 00     LDA #$00
0E/B892: 8D 01 20  STA $2001
0E/B895: A2 1F     LDX #$1F
0E/B897: A9 0F     LDA #$0F
0E/B899: 9D C0 03  STA $03C0,X
0E/B89C: CA        DEX 
0E/B89D: 10 FA     BPL $B899
0E/B89F: 20 91 E4  JSR $E491          ; load menu graphics
0E/B8A2: 20 06 B9  JSR $B906
0E/B8A5: AD 02 20  LDA $2002
0E/B8A8: A9 20     LDA #$20
0E/B8AA: 8D 06 20  STA $2006
0E/B8AD: A9 00     LDA #$00
0E/B8AF: 8D 06 20  STA $2006
0E/B8B2: A2 F0     LDX #$F0
0E/B8B4: A9 FF     LDA #$FF
0E/B8B6: 8D 07 20  STA $2007
0E/B8B9: 8D 07 20  STA $2007
0E/B8BC: 8D 07 20  STA $2007
0E/B8BF: 8D 07 20  STA $2007
0E/B8C2: CA        DEX 
0E/B8C3: D0 F1     BNE $B8B6
0E/B8C5: A2 40     LDX #$40
0E/B8C7: A9 55     LDA #$55
0E/B8C9: 8D 07 20  STA $2007
0E/B8CC: CA        DEX 
0E/B8CD: D0 FA     BNE $B8C9
0E/B8CF: A9 02     LDA #$02
0E/B8D1: 8D C6 03  STA $03C6
0E/B8D4: 8D C7 03  STA $03C7
0E/B8D7: 8D CA 03  STA $03CA
0E/B8DA: 8D CB 03  STA $03CB
0E/B8DD: 20 00 FE  JSR $FE00          ; wait for vblank
0E/B8E0: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0E/B8E3: A9 00     LDA #$00
0E/B8E5: 8D 05 20  STA $2005
0E/B8E8: 8D 05 20  STA $2005
0E/B8EB: A9 0A     LDA #$0A
0E/B8ED: 8D 01 20  STA $2001
0E/B8F0: A2 18     LDX #$18
0E/B8F2: 20 51 B4  JSR $B451
0E/B8F5: A9 49     LDA #$49
0E/B8F7: 20 F0 B3  JSR $B3F0          ; load menu text
0E/B8FA: 20 32 B9  JSR $B932
0E/B8FD: A9 00     LDA #$00
0E/B8FF: 8D 15 40  STA $4015
0E/B902: 8D 01 20  STA $2001
0E/B905: 60        RTS 

; [  ]

0E/B906: A9 41     LDA #$41           ; play song $01
0E/B908: 85 E0     STA $E0
0E/B90A: 20 21 F3  JSR $F321          ; clear ppu name table
0E/B90D: A9 88     LDA #$88
0E/B90F: 85 FF     STA $FF
0E/B911: 8D 00 20  STA $2000
0E/B914: A9 01     LDA #$01
0E/B916: 85 37     STA $37
0E/B918: 20 B6 8E  JSR $8EB6          ; init player input
0E/B91B: A9 00     LDA #$00
0E/B91D: 85 A2     STA $A2
0E/B91F: 85 A3     STA $A3
0E/B921: 85 A4     STA $A4
0E/B923: 20 6E C4  JSR $C46E
0E/B926: 20 00 FE  JSR $FE00          ; wait for vblank
0E/B929: 20 00 FE  JSR $FE00          ; wait for vblank
0E/B92C: A9 02     LDA #$02
0E/B92E: 8D 14 40  STA $4014
0E/B931: 60        RTS 

; [  ]

0E/B932: A9 C0     LDA #$C0
0E/B934: 85 62     STA $62
0E/B936: 20 4A B9  JSR $B94A
0E/B939: A5 62     LDA $62
0E/B93B: 18        CLC 
0E/B93C: 69 08     ADC #$08
0E/B93E: 85 62     STA $62
0E/B940: C9 F8     CMP #$F8
0E/B942: 90 F2     BCC $B936
0E/B944: 20 B0 B9  JSR $B9B0
0E/B947: 4C 44 B9  JMP $B944

; [  ]

0E/B94A: A9 5A     LDA #$5A
0E/B94C: 85 63     STA $63
0E/B94E: 20 65 B9  JSR $B965
0E/B951: A5 62     LDA $62
0E/B953: C9 E8     CMP #$E8
0E/B955: F0 07     BEQ $B95E
0E/B957: A9 AF     LDA #$AF
0E/B959: 85 63     STA $63
0E/B95B: 20 65 B9  JSR $B965
0E/B95E: A9 FF     LDA #$FF
0E/B960: 85 63     STA $63
0E/B962: 4C B0 B9  JMP $B9B0

; [  ]

0E/B965: A9 00     LDA #$00
0E/B967: 85 64     STA $64
0E/B969: A5 64     LDA $64
0E/B96B: 8D CB 03  STA $03CB
0E/B96E: 20 B0 B9  JSR $B9B0
0E/B971: E6 F0     INC $F0
0E/B973: A5 F0     LDA $F0
0E/B975: 29 0F     AND #$0F
0E/B977: D0 0C     BNE $B985
0E/B979: A5 64     LDA $64
0E/B97B: 18        CLC 
0E/B97C: 69 10     ADC #$10
0E/B97E: 85 64     STA $64
0E/B980: C9 40     CMP #$40
0E/B982: 90 E5     BCC $B969
0E/B984: 60        RTS 
0E/B985: 4A        LSR 
0E/B986: 90 E1     BCC $B969
0E/B988: AD CB 03  LDA $03CB
0E/B98B: 38        SEC 
0E/B98C: E9 10     SBC #$10
0E/B98E: 10 02     BPL $B992
0E/B990: A9 01     LDA #$01
0E/B992: 8D CB 03  STA $03CB
0E/B995: 4C 6E B9  JMP $B96E

; [  ]

0E/B998: AD 02 20  LDA $2002
0E/B99B: A9 23     LDA #$23
0E/B99D: 8D 06 20  STA $2006
0E/B9A0: A5 62     LDA $62
0E/B9A2: 8D 06 20  STA $2006
0E/B9A5: A2 08     LDX #$08
0E/B9A7: A5 63     LDA $63
0E/B9A9: 8D 07 20  STA $2007
0E/B9AC: CA        DEX 
0E/B9AD: D0 FA     BNE $B9A9
0E/B9AF: 60        RTS 

; [  ]

0E/B9B0: 20 00 FE  JSR $FE00          ; wait for vblank
0E/B9B3: 20 98 B9  JSR $B998
0E/B9B6: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0E/B9B9: A5 FF     LDA $FF
0E/B9BB: 8D 00 20  STA $2000
0E/B9BE: A9 00     LDA #$00
0E/B9C0: 8D 05 20  STA $2005
0E/B9C3: 8D 05 20  STA $2005
0E/B9C6: 85 24     STA $24
0E/B9C8: 85 25     STA $25
0E/B9CA: A9 0E     LDA #$0E
0E/B9CC: 85 57     STA $57
0E/B9CE: 20 4F C7  JSR $C74F          ; update sound
0E/B9D1: 20 A2 DB  JSR $DBA2          ; update joypad input
0E/B9D4: A5 24     LDA $24
0E/B9D6: 05 25     ORA $25
0E/B9D8: D0 01     BNE $B9DB          ; branch if A or B button pressed
0E/B9DA: 60        RTS 
0E/B9DB: 68        PLA 
0E/B9DC: 68        PLA 
0E/B9DD: 60        RTS 

; --------------------------------------------------------------------------

; [ end credits ]

0E/B9DE: A9 0F     LDA #$0F
0E/B9E0: 8D C1 03  STA $03C1
0E/B9E3: A9 0E     LDA #$0E
0E/B9E5: 85 57     STA $57
0E/B9E7: A9 00     LDA #$00
0E/B9E9: 8D 00 70  STA $7000
0E/B9EC: 20 E0 BA  JSR $BAE0
0E/B9EF: 20 FA BB  JSR $BBFA
0E/B9F2: 20 17 BA  JSR $BA17
0E/B9F5: EE 00 70  INC $7000
0E/B9F8: 20 2F BC  JSR $BC2F
0E/B9FB: 20 E0 BA  JSR $BAE0
0E/B9FE: 20 17 BA  JSR $BA17
0E/BA01: 20 FE BB  JSR $BBFE
0E/BA04: 20 2F BC  JSR $BC2F
0E/BA07: EE 00 70  INC $7000
0E/BA0A: AD 00 70  LDA $7000
0E/BA0D: C9 12     CMP #$12
0E/BA0F: 90 DB     BCC $B9EC
0E/BA11: 20 17 BA  JSR $BA17
0E/BA14: 4C E2 BB  JMP $BBE2

; [  ]

0E/BA17: A9 E0     LDA #$E0
0E/BA19: 20 1E BA  JSR $BA1E
0E/BA1C: A9 E0     LDA #$E0
0E/BA1E: 48        PHA 
0E/BA1F: 20 00 FE  JSR $FE00          ; wait for vblank
0E/BA22: A9 0E     LDA #$0E
0E/BA24: 85 57     STA $57
0E/BA26: 20 4F C7  JSR $C74F          ; update sound
0E/BA29: 68        PLA 
0E/BA2A: 38        SEC 
0E/BA2B: E9 01     SBC #$01
0E/BA2D: D0 EF     BNE $BA1E
0E/BA2F: 60        RTS 

; [ draw "THE END" ]

0E/BA30: 20 6E C4  JSR $C46E
0E/BA33: 20 68 BC  JSR $BC68
0E/BA36: 20 00 FE  JSR $FE00          ; wait for vblank
0E/BA39: A9 02     LDA #$02
0E/BA3B: 8D 14 40  STA $4014
0E/BA3E: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0E/BA41: 2C 02 20  BIT $2002
0E/BA44: A9 22     LDA #$22
0E/BA46: 8D 06 20  STA $2006
0E/BA49: A9 52     LDA #$52
0E/BA4B: 8D 06 20  STA $2006
0E/BA4E: A2 00     LDX #$00
0E/BA50: BD 64 BA  LDA $BA64,X
0E/BA53: 8D 07 20  STA $2007
0E/BA56: E8        INX 
0E/BA57: E0 07     CPX #$07
0E/BA59: 90 F5     BCC $BA50
0E/BA5B: A9 00     LDA #$00
0E/BA5D: 8D 05 20  STA $2005
0E/BA60: 8D 05 20  STA $2005
0E/BA63: 60        RTS 

; "THE END"
0E/BA64: 14 08 05 00 05 0E 04

0E/BA6B: AD 00 70  LDA $7000
0E/BA6E: 4A        LSR 
0E/BA6F: AA        TAX 
0E/BA70: A9 4C     LDA #$4C
0E/BA72: 85 40     STA $40
0E/BA74: A9 4A     LDA #$4A
0E/BA76: 85 41     STA $41
0E/BA78: BD 9D BA  LDA $BA9D,X
0E/BA7B: 85 80     STA $80
0E/BA7D: BD A6 BA  LDA $BAA6,X
0E/BA80: 85 82     STA $82
0E/BA82: 20 8F 88  JSR $888F
0E/BA85: A5 26     LDA $26
0E/BA87: 38        SEC 
0E/BA88: E9 30     SBC #$30
0E/BA8A: AA        TAX 
0E/BA8B: A0 0C     LDY #$0C
0E/BA8D: BD 02 02  LDA $0202,X
0E/BA90: 09 20     ORA #$20
0E/BA92: 9D 02 02  STA $0202,X
0E/BA95: E8        INX 
0E/BA96: E8        INX 
0E/BA97: E8        INX 
0E/BA98: E8        INX 
0E/BA99: 88        DEY 
0E/BA9A: D0 F1     BNE $BA8D
0E/BA9C: 60        RTS 

0E/BA9D: 02 00 01 01 01 02 00 00 01
0E/BAA6: 00 0C 18 24 30 3C 48 54 60

; [  ]

0E/BAAF: A9 01     LDA #$01
0E/BAB1: 85 37     STA $37
0E/BAB3: A9 04     LDA #$04
0E/BAB5: 85 38     STA $38
0E/BAB7: 38        SEC 
0E/BAB8: E9 01     SBC #$01
0E/BABA: 85 97     STA $97
0E/BABC: A9 04     LDA #$04
0E/BABE: 85 39     STA $39
0E/BAC0: 18        CLC 
0E/BAC1: 69 02     ADC #$02
0E/BAC3: 85 98     STA $98
0E/BAC5: A9 18     LDA #$18
0E/BAC7: 85 3C     STA $3C
0E/BAC9: A9 18     LDA #$18
0E/BACB: 85 3D     STA $3D
0E/BACD: A9 04     LDA #$04
0E/BACF: 85 93     STA $93
0E/BAD1: A9 00     LDA #$00
0E/BAD3: 85 3E     STA $3E
0E/BAD5: A9 BC     LDA #$BC           ; 0E/BC00 (epilogue text)
0E/BAD7: 85 3F     STA $3F
0E/BAD9: A9 0E     LDA #$0E
0E/BADB: 85 57     STA $57
0E/BADD: 4C AC EA  JMP $EAAC          ; load next line of text

; [  ]

0E/BAE0: A9 0F     LDA #$0F
0E/BAE2: 8D C1 03  STA $03C1
0E/BAE5: 20 00 FE  JSR $FE00          ; wait for vblank
0E/BAE8: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0E/BAEB: 20 4F C7  JSR $C74F          ; update sound
0E/BAEE: 20 2A BB  JSR $BB2A
0E/BAF1: A9 00     LDA #$00
0E/BAF3: 85 F0     STA $F0
0E/BAF5: 20 00 FE  JSR $FE00          ; wait for vblank
0E/BAF8: A9 02     LDA #$02
0E/BAFA: 8D 14 40  STA $4014
0E/BAFD: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0E/BB00: 20 4F C7  JSR $C74F          ; update sound
0E/BB03: E6 F0     INC $F0
0E/BB05: A5 F0     LDA $F0
0E/BB07: 29 03     AND #$03
0E/BB09: D0 EA     BNE $BAF5
0E/BB0B: AD C1 03  LDA $03C1
0E/BB0E: C9 0F     CMP #$0F
0E/BB10: D0 08     BNE $BB1A
0E/BB12: A9 00     LDA #$00
0E/BB14: 8D C1 03  STA $03C1
0E/BB17: 4C F5 BA  JMP $BAF5
0E/BB1A: 18        CLC 
0E/BB1B: 69 10     ADC #$10
0E/BB1D: 29 30     AND #$30
0E/BB1F: 8D C1 03  STA $03C1
0E/BB22: D0 D1     BNE $BAF5
0E/BB24: A9 30     LDA #$30
0E/BB26: 8D C1 03  STA $03C1
0E/BB29: 60        RTS 
0E/BB2A: A9 4A     LDA #$4A
0E/BB2C: 85 54     STA $54
0E/BB2E: A9 22     LDA #$22
0E/BB30: 85 55     STA $55
0E/BB32: AD 00 70  LDA $7000
0E/BB35: 0A        ASL 
0E/BB36: AA        TAX 
0E/BB37: BD 00 BE  LDA $BE00,X        ; pointers to end credits text
0E/BB3A: 85 3E     STA $3E
0E/BB3C: BD 01 BE  LDA $BE01,X
0E/BB3F: 85 3F     STA $3F
0E/BB41: 20 00 FE  JSR $FE00          ; wait for vblank
0E/BB44: 2C 02 20  BIT $2002
0E/BB47: A5 55     LDA $55
0E/BB49: 8D 06 20  STA $2006
0E/BB4C: A5 54     LDA $54
0E/BB4E: 8D 06 20  STA $2006
0E/BB51: A0 00     LDY #$00
0E/BB53: A2 0F     LDX #$0F
0E/BB55: B1 3E     LDA ($3E),Y
0E/BB57: F0 0A     BEQ $BB63
0E/BB59: C9 FF     CMP #$FF
0E/BB5B: F0 19     BEQ $BB76
0E/BB5D: 8D 07 20  STA $2007
0E/BB60: C8        INY 
0E/BB61: D0 F2     BNE $BB55
0E/BB63: 20 92 BB  JSR $BB92
0E/BB66: A9 00     LDA #$00
0E/BB68: 8D 05 20  STA $2005
0E/BB6B: 8D 05 20  STA $2005
0E/BB6E: A9 0E     LDA #$0E
0E/BB70: 85 57     STA $57
0E/BB72: 4C 4F C7  JMP $C74F          ; update sound
0E/BB75: 60        RTS 
0E/BB76: 20 92 BB  JSR $BB92
0E/BB79: A5 54     LDA $54
0E/BB7B: 18        CLC 
0E/BB7C: 69 40     ADC #$40
0E/BB7E: 85 54     STA $54
0E/BB80: A5 55     LDA $55
0E/BB82: 69 00     ADC #$00
0E/BB84: 85 55     STA $55
0E/BB86: 8D 06 20  STA $2006
0E/BB89: A5 54     LDA $54
0E/BB8B: 8D 06 20  STA $2006
0E/BB8E: C8        INY 
0E/BB8F: 4C 55 BB  JMP $BB55

; [  ]

0E/BB92: A9 00     LDA #$00
0E/BB94: E0 80     CPX #$80
0E/BB96: B0 08     BCS $BBA0
0E/BB98: 8D 07 20  STA $2007
0E/BB9B: CA        DEX 
0E/BB9C: 10 FA     BPL $BB98
0E/BB9E: A2 0F     LDX #$0F
0E/BBA0: 60        RTS 

; [  ]

0E/BBA1: A9 00     LDA #$00
0E/BBA3: 85 54     STA $54
0E/BBA5: A9 22     LDA #$22
0E/BBA7: 85 55     STA $55
0E/BBA9: 20 00 FE  JSR $FE00          ; wait for vblank
0E/BBAC: 2C 02 20  BIT $2002
0E/BBAF: A5 55     LDA $55
0E/BBB1: 8D 06 20  STA $2006
0E/BBB4: A5 54     LDA $54
0E/BBB6: 8D 06 20  STA $2006
0E/BBB9: A2 20     LDX #$20
0E/BBBB: A9 00     LDA #$00
0E/BBBD: 8D 07 20  STA $2007
0E/BBC0: CA        DEX 
0E/BBC1: D0 FA     BNE $BBBD
0E/BBC3: 8D 05 20  STA $2005
0E/BBC6: 8D 05 20  STA $2005
0E/BBC9: A9 0E     LDA #$0E
0E/BBCB: 85 57     STA $57
0E/BBCD: 20 4F C7  JSR $C74F          ; update sound
0E/BBD0: A5 54     LDA $54
0E/BBD2: 18        CLC 
0E/BBD3: 69 20     ADC #$20
0E/BBD5: 85 54     STA $54
0E/BBD7: A5 55     LDA $55
0E/BBD9: 69 00     ADC #$00
0E/BBDB: 85 55     STA $55
0E/BBDD: C9 23     CMP #$23
0E/BBDF: 90 C8     BCC $BBA9
0E/BBE1: 60        RTS 

; [  ]

0E/BBE2: A9 30     LDA #$30
0E/BBE4: 8D C1 03  STA $03C1
0E/BBE7: 20 A1 BB  JSR $BBA1
0E/BBEA: 20 30 BA  JSR $BA30          ; draw "THE END"
0E/BBED: 20 00 FE  JSR $FE00          ; wait for vblank
0E/BBF0: A9 0E     LDA #$0E
0E/BBF2: 85 57     STA $57
0E/BBF4: 20 4F C7  JSR $C74F          ; update sound
0E/BBF7: 4C ED BB  JMP $BBED

; [  ]

0E/BBFA: A9 00     LDA #$00
0E/BBFC: F0 02     BEQ $BC00
; $20
0E/BBFE: A9 01     LDA #$01
0E/BC00: 85 10     STA $10
0E/BC02: A9 00     LDA #$00
0E/BC04: 85 F0     STA $F0
0E/BC06: 20 6E C4  JSR $C46E
0E/BC09: A5 F0     LDA $F0
0E/BC0B: 4A        LSR 
0E/BC0C: 45 10     EOR $10
0E/BC0E: 29 01     AND #$01
0E/BC10: F0 03     BEQ $BC15
0E/BC12: 20 6B BA  JSR $BA6B
0E/BC15: 20 68 BC  JSR $BC68
0E/BC18: 20 00 FE  JSR $FE00          ; wait for vblank
0E/BC1B: A9 02     LDA #$02
0E/BC1D: 8D 14 40  STA $4014
0E/BC20: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0E/BC23: 20 4F C7  JSR $C74F          ; update sound
0E/BC26: E6 F0     INC $F0
0E/BC28: A5 F0     LDA $F0
0E/BC2A: C9 20     CMP #$20
0E/BC2C: 90 D8     BCC $BC06
0E/BC2E: 60        RTS 
0E/BC2F: A9 00     LDA #$00
0E/BC31: 85 F0     STA $F0
0E/BC33: AD C1 03  LDA $03C1
0E/BC36: C9 F0     CMP #$F0
0E/BC38: D0 05     BNE $BC3F
0E/BC3A: A9 0F     LDA #$0F
0E/BC3C: 8D C1 03  STA $03C1
0E/BC3F: 20 00 FE  JSR $FE00          ; wait for vblank
0E/BC42: A9 02     LDA #$02
0E/BC44: 8D 14 40  STA $4014
0E/BC47: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0E/BC4A: 20 4F C7  JSR $C74F          ; update sound
0E/BC4D: E6 F0     INC $F0
0E/BC4F: A5 F0     LDA $F0
0E/BC51: 29 03     AND #$03
0E/BC53: D0 DE     BNE $BC33
0E/BC55: AD C1 03  LDA $03C1
0E/BC58: 38        SEC 
0E/BC59: E9 10     SBC #$10
0E/BC5B: 8D C1 03  STA $03C1
0E/BC5E: C9 FF     CMP #$FF
0E/BC60: D0 D1     BNE $BC33
0E/BC62: A9 0F     LDA #$0F
0E/BC64: 8D C1 03  STA $03C1
0E/BC67: 60        RTS 

; [  ]

0E/BC68: A6 26     LDX $26
0E/BC6A: A0 00     LDY #$00
0E/BC6C: B9 7B BC  LDA $BC7B,Y
0E/BC6F: 9D 00 02  STA $0200,X
0E/BC72: E8        INX 
0E/BC73: C8        INY 
0E/BC74: C0 2C     CPY #$2C
0E/BC76: D0 F4     BNE $BC6C
0E/BC78: 86 26     STX $26
0E/BC7A: 60        RTS 

; portrait sprite data (end credits)
0E/BC7B: 57 8A 23 48
0E/BC7F: 57 8B 23 50
0E/BC83: 57 8C 23 58
0E/BC87: 5F 8D 23 48
0E/BC8B: 5F 8E 23 50
0E/BC8F: 5F 8F 23 58
0E/BC93: 5F 90 23 60
0E/BC97: 67 91 23 48
0E/BC9B: 67 92 23 50
0E/BC9F: 67 93 23 58
0E/BCA3: 67 94 23 60

; [  ]

0E/BCA7: 2C 02 20  BIT $2002
0E/BCAA: A9 20     LDA #$20
0E/BCAC: 8D 06 20  STA $2006
0E/BCAF: A9 00     LDA #$00
0E/BCB1: 8D 06 20  STA $2006
0E/BCB4: A2 00     LDX #$00
0E/BCB6: A9 00     LDA #$00
0E/BCB8: 8D 07 20  STA $2007
0E/BCBB: 8D 07 20  STA $2007
0E/BCBE: 8D 07 20  STA $2007
0E/BCC1: 8D 07 20  STA $2007
0E/BCC4: E8        INX 
0E/BCC5: D0 F1     BNE $BCB8
0E/BCC7: 2C 02 20  BIT $2002
0E/BCCA: A9 08     LDA #$08
0E/BCCC: 85 80     STA $80
0E/BCCE: A9 21     LDA #$21
0E/BCD0: 85 81     STA $81
0E/BCD2: A9 08     LDA #$08
0E/BCD4: 85 82     STA $82
0E/BCD6: A2 06     LDX #$06
0E/BCD8: A0 00     LDY #$00
0E/BCDA: A5 81     LDA $81
0E/BCDC: 8D 06 20  STA $2006
0E/BCDF: A5 80     LDA $80
0E/BCE1: 8D 06 20  STA $2006
0E/BCE4: B9 29 BD  LDA $BD29,Y
0E/BCE7: 8D 07 20  STA $2007
0E/BCEA: C8        INY 
0E/BCEB: CA        DEX 
0E/BCEC: D0 F6     BNE $BCE4
0E/BCEE: A2 06     LDX #$06
0E/BCF0: A5 80     LDA $80
0E/BCF2: 18        CLC 
0E/BCF3: 69 20     ADC #$20
0E/BCF5: 85 80     STA $80
0E/BCF7: A5 81     LDA $81
0E/BCF9: 69 00     ADC #$00
0E/BCFB: 85 81     STA $81
0E/BCFD: C6 82     DEC $82
0E/BCFF: D0 D9     BNE $BCDA
0E/BD01: A9 23     LDA #$23
0E/BD03: 8D 06 20  STA $2006
0E/BD06: A9 D0     LDA #$D0
0E/BD08: 8D 06 20  STA $2006
0E/BD0B: A2 00     LDX #$00
0E/BD0D: BD 19 BD  LDA $BD19,X
0E/BD10: 8D 07 20  STA $2007
0E/BD13: E8        INX 
0E/BD14: E0 10     CPX #$10
0E/BD16: 90 F5     BCC $BD0D
0E/BD18: 60        RTS 

; ??? attributes
0E/BD19: 00 00 FF 33 00 00 00 00 00 00 AF 23 00 00 00 00

0E/BD29: 3E 23 24 25 26 3E 27 28 29 2A 2B 2C 2D 28 28 28
0E/BD39: 28 2E 2F 28 28 28 28 30 31 32 28 28 28 33 3E 34
0E/BD49: 35 36 37 3E 3E 38 39 3A 3B 3E 3E 3E 3C 3D 3E 3E

; [  ]

0E/BD59: A9 21     LDA #$21
0E/BD5B: 85 81     STA $81
0E/BD5D: A9 08     LDA #$08
0E/BD5F: 85 82     STA $82
0E/BD61: A2 06     LDX #$06
0E/BD63: A0 00     LDY #$00
0E/BD65: A5 81     LDA $81
0E/BD67: 8D 06 20  STA $2006
0E/BD6A: A5 80     LDA $80
0E/BD6C: 8D 06 20  STA $2006
0E/BD6F: B9 B4 BD  LDA $BDB4,Y
0E/BD72: 8D 07 20  STA $2007
0E/BD75: C8        INY 
0E/BD76: CA        DEX 
0E/BD77: D0 EC     BNE $BD65
0E/BD79: A2 06     LDX #$06
0E/BD7B: A5 80     LDA $80
0E/BD7D: 18        CLC 
0E/BD7E: 69 20     ADC #$20
0E/BD80: 85 80     STA $80
0E/BD82: A5 81     LDA $81
0E/BD84: 69 00     ADC #$00
0E/BD86: 85 81     STA $81
0E/BD88: C6 82     DEC $82
0E/BD8A: D0 D9     BNE $BD65
0E/BD8C: A9 23     LDA #$23
0E/BD8E: 8D 06 20  STA $2006
0E/BD91: A9 10     LDA #$10
0E/BD93: 8D 06 20  STA $2006
0E/BD96: A2 10     LDX #$10
0E/BD98: BD A4 BD  LDA $BDA4,X
0E/BD9B: 8D 07 20  STA $2007
0E/BD9E: E8        INX 
0E/BD9F: E0 10     CPX #$10
0E/BDA1: 90 F5     BCC $BD98
0E/BDA3: 60        RTS 

; ??? attributes
0E/BDA4: FF FF FF FF 00 00 00 00 FA FA FA FA 00 00 00 00

; 
0E/BDB4: 00 23 24 25 26 00 27 28 29 2A 2B 2C 2D 28 28 28
0E/BDC4: 28 2E 2F 28 28 28 28 30 31 32 28 28 28 33 00 24
0E/BDD4: 35 36 37 00 00 38 39 3A 3B 00 00 00 3C 3D 00 00
0E/BDE4: 3A 3B 00 00 00 3C 3D 00 00

; stale code (now at 0E/B7E4)
0E/BDED: -- 9D BA  JSR $BA9D
0E/BDEF: A9 4B     LDA #$4B
0E/BDF1: 4C 82 BE  JMP $BE82
0E/BDF4: A5 9E     LDA $9E
0E/BDF6: 29 03     AND #$03
0E/BDF8: 18        CLC 
0E/BDF9: 69 11     ADC #$11
0E/BDFB: AA        TAX 
0E/BDFC: 20 9D BA  JSR $BA9D
0E/BDFF: 01 

; pointers to end credits text
0E/BE00: BE24 BE3B BE52 BE74 BE92 BEAF BECA BEDF
0E/BE10: BEFA BF13 BF2A BF47 BF66 BF87 BFA6 BFBC
0E/BE20: BFD9 BFF5

; end credits text

; "PROGRAM\n NASIR GEBELLI"
0E/BE24: 10 12 0F 07 12 01 0D FF 18 0E 01 13 09 12 18 07
0E/BE34: 05 02 05 0C 0C 09 00

; "SCENARIO\n KENJI TERADA"
0E/BE3B: 13 03 05 0E 01 12 09 0F FF 18 0B 05 0E 0A 09 18
0E/BE4B: 14 05 12 01 04 01 00

; "CHARACTER DESIGN\n YOSHITAKA AMANO"
0E/BE52: 03 08 01 12 01 03 14 05 12 18 04 05 13 09 07 0E
0E/BE62: FF 18 19 0F 13 08 09 14 01 0B 01 18 01 0D 01 0E
0E/BE72: 0F 00

; "GAME DESIGN\n HIROMICHI TANAKA"
0E/BE74: 07 01 0D 05 18 04 05 13 09 07 0E FF 18 08 09 12
0E/BE84: 0F 0D 09 03 08 09 18 14 01 0E 01 0B 01 00

; "GAME DESIGN\n AKITOSHI KAWAZU"
0E/BE92: 07 01 0D 05 18 04 05 13 09 07 0E FF 18 01 0B 09
0E/BEA2: 14 0F 13 08 09 18 0B 01 17 01 1A 15 00

; "GAME DESIGN\n KOUICHI ISHII"
0E/BEAF: 07 01 0D 05 18 04 05 13 09 07 0E FF 18 0B 0F 15
0E/BEBF: 09 03 08 09 18 09 13 08 09 09 00

; "PROGRAM\n NAOKI OKABE"
0E/BECA: 10 12 0F 07 12 01 0D FF 18 0E 01 0F 0B 09 18 0F
0E/BEDA: 0B 01 02 05 00

; "PROGRAM\n KATSUHISA HIGUCHI"
0E/BEDF: 10 12 0F 07 12 01 0D FF 18 0B 01 14 13 15 08 09
0E/BEEF: 13 01 18 08 09 07 15 03 08 09 00

; "GRAPHICS\n KAZUKO SHIBUYA"
0E/BEFA: 07 12 01 10 08 09 03 13 FF 18 0B 01 1A 15 0B 0F
0E/BF0A: 18 13 08 09 02 15 19 01 00

; "GRAPHICS\n RYOKO TANAKA"
0E/BF13: 07 12 01 10 08 09 03 13 FF 18 12 19 0F 0B 0F 18
0E/BF23: 14 01 0E 01 0B 01 00

; "MUSIC COMPOSE\n NOBUO UEMATSU"
0E/BF2A: 0D 15 13 09 03 18 03 0F 0D 10 0F 13 05 FF 18 0E
0E/BF3A: 0F 02 15 0F 18 15 05 0D 01 14 13 15 00

; "SOUND DESIGN\n MASANORI HOSHINO"
0E/BF47: 13 0F 15 0E 04 18 04 05 13 09 07 0E FF 18 0D 01
0E/BF57: 13 01 0E 0F 12 09 18 08 0F 13 08 09 0E 0F 00

; "PROGRAM ASSIST\n HIROSHI NAKAMURA"
0E/BF66: 10 12 0F 07 12 01 0D 18 01 13 13 09 13 14 FF 18
0E/BF76: 08 09 12 0F 13 08 09 18 0E 01 0B 01 0D 15 12 01
0E/BF86: 00

; "PROGRAM ASSIST\n TAKEYOSHI ITOH"
0E/BF87: 10 12 0F 07 12 01 0D 18 01 13 13 09 13 14 FF 18
0E/BF97: 14 01 0B 05 19 0F 13 08 09 18 09 14 0F 08 00

; "THANKS TO\n S.KAJITANI"
0E/BFA6: 14 08 01 0E 0B 13 18 14 0F FF 18 13 1C 0B 01 0A
0E/BFB6: 09 14 01 0E 09 00

; "DIRECTOR\n HIRONOBU SAKAGUCHI"
0E/BFBC: 04 09 12 05 03 14 05 12 FF 18 08 09 12 0F 0E 0F
0E/BFCC: 02 15 18 13 01 0B 01 07 15 03 08 09 00

; "PRODUCER\n MASAFUMI MIYAMOTO"
0E/BFD9: 10 12 0F 04 15 03 05 12 FF 18 0D 01 13 01 06 15
0E/BFE9: 0D 09 18 0D 09 19 01 0D 0F 14 0F 00

; "\n(C)SQUARE"
0E/BFF5: FF 1D 03 1F 13 11 15 01 12 05 00

; --------------------------------------------------------------------------

0F/C000: 4C 25 C0  JMP $C025          ; program start
0F/C003: 4C E3 DC  JMP $DCE3          ; filter map bg palette
0F/C006: 4C 4D F3  JMP $F34D          ; end credits
0F/C009: 4C 4F C7  JMP $C74F          ; update sound
0F/C00C: 4C A2 DB  JMP $DBA2          ; update joypad input
0F/C00F: 4C 30 DC  JMP $DC30          ; copy color palettes to ppu
0F/C012: 4C 18 C0  JMP $C018          ; load guest character properties
0F/C015: 4C C8 F2  JMP $F2C8          ; validate character rows

; [ load guest character properties ]

0F/C018: A9 00     LDA #$00
0F/C01A: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C01D: 20 0C 9C  JSR $9C0C          ; 00/9C0C (load guest character properties)
0F/C020: A9 0E     LDA #$0E
0F/C022: 4C 03 FE  JMP $FE03          ; switch prg bank

; [ program start ]

0F/C025: A9 00     LDA #$00
0F/C027: 8D 01 20  STA $2001
0F/C02A: 85 FE     STA $FE
0F/C02C: A9 88     LDA #$88
0F/C02E: 85 FF     STA $FF
0F/C030: 85 FD     STA $FD
0F/C032: 8D 00 20  STA $2000
0F/C035: A2 FF     LDX #$FF
0F/C037: 8E 25 6F  STX $6F25
0F/C03A: 9A        TXS 
0F/C03B: A9 00     LDA #$00
0F/C03D: 20 A0 C4  JSR $C4A0
0F/C040: 20 86 C4  JSR $C486
0F/C043: 20 6E C4  JSR $C46E
0F/C046: 20 00 FE  JSR $FE00          ; wait for vblank
0F/C049: A9 02     LDA #$02
0F/C04B: 8D 14 40  STA $4014
0F/C04E: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0F/C051: A5 FA     LDA $FA
0F/C053: C9 77     CMP #$77
0F/C055: F0 0F     BEQ $C066          ; branch if not a hard reset
0F/C057: A9 77     LDA #$77
0F/C059: 85 FA     STA $FA
0F/C05B: 20 76 F4  JSR $F476          ; splash screen
0F/C05E: A9 0E     LDA #$0E
0F/C060: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C063: 20 90 B8  JSR $B890          ; 0E/B890 (prophecy)
0F/C066: A9 0E     LDA #$0E
0F/C068: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C06B: 20 42 B6  JSR $B642          ; 0E/B642 (game load menu)
0F/C06E: 08        PHP 
0F/C06F: 20 86 C4  JSR $C486
0F/C072: AD 10 60  LDA $6010          ; set world map position
0F/C075: 85 27     STA $27
0F/C077: AD 11 60  LDA $6011
0F/C07A: 85 28     STA $28
0F/C07C: AD 18 60  LDA $6018          ; set vehicle
0F/C07F: 85 46     STA $46
0F/C081: 85 42     STA $42
0F/C083: 28        PLP 
0F/C084: B0 32     BCS $C0B8          ; branch if not a new game
0F/C086: A9 08     LDA #$08
0F/C088: 8D C0 61  STA $61C0
0F/C08B: A2 00     LDX #$00
0F/C08D: A9 7F     LDA #$7F
0F/C08F: 20 00 FA  JSR $FA00          ; execute battle
0F/C092: A9 80     LDA #$80
0F/C094: 8D F5 62  STA $62F5
0F/C097: A2 00     LDX #$00
0F/C099: A9 00     LDA #$00
0F/C09B: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C09E: BD 00 B4  LDA $B400,X
0F/C0A1: 38        SEC 
0F/C0A2: E9 07     SBC #$07
0F/C0A4: 29 3F     AND #$3F
0F/C0A6: 85 29     STA $29            ; x position
0F/C0A8: BD 40 B4  LDA $B440,X
0F/C0AB: 38        SEC 
0F/C0AC: E9 07     SBC #$07
0F/C0AE: 85 2A     STA $2A            ; y position
0F/C0B0: BD 80 B4  LDA $B480,X
0F/C0B3: 85 48     STA $48            ; map id
0F/C0B5: 20 41 CA  JSR $CA41          ; map main
; fallthrough

; [ world map main ]

0F/C0B8: A9 00     LDA #$00
0F/C0BA: 8D 15 40  STA $4015
0F/C0BD: 20 32 C8  JSR $C832          ; load world map
0F/C0C0: 20 F0 D7  JSR $D7F0          ; screen wipe in
0F/C0C3: A2 FF     LDX #$FF
0F/C0C5: 9A        TXS 
0F/C0C6: 20 5C C7  JSR $C75C          ; get world map battle background
; world map main loop
0F/C0C9: 20 00 FE  JSR $FE00          ; wait for vblank
0F/C0CC: A9 02     LDA #$02
0F/C0CE: 8D 14 40  STA $4014
0F/C0D1: 20 F3 C2  JSR $C2F3          ; update water animation
0F/C0D4: 20 6F C3  JSR $C36F          ; update scrolling
0F/C0D7: A5 F0     LDA $F0
0F/C0D9: 18        CLC 
0F/C0DA: 69 01     ADC #$01
0F/C0DC: 85 F0     STA $F0
0F/C0DE: A5 F1     LDA $F1
0F/C0E0: 69 00     ADC #$00
0F/C0E2: 85 F1     STA $F1
0F/C0E4: 20 46 C7  JSR $C746          ; update sound
0F/C0E7: A5 46     LDA $46
0F/C0E9: C9 01     CMP #$01
0F/C0EB: D0 0E     BNE $C0FB
0F/C0ED: A5 36     LDA $36
0F/C0EF: 05 35     ORA $35
0F/C0F1: C9 08     CMP #$08
0F/C0F3: D0 06     BNE $C0FB
0F/C0F5: A5 44     LDA $44
0F/C0F7: 29 10     AND #$10
0F/C0F9: 85 43     STA $43
0F/C0FB: A5 34     LDA $34
0F/C0FD: D0 0A     BNE $C109
0F/C0FF: A5 46     LDA $46
0F/C101: 85 42     STA $42
0F/C103: 20 59 C1  JSR $C159          ; check triggers/menu
0F/C106: 20 66 C2  JSR $C266          ; check player input
0F/C109: 20 6E C4  JSR $C46E          ; clear oam data
0F/C10C: 20 09 E0  JSR $E009          ; update sprites
0F/C10F: AD 04 60  LDA $6004
0F/C112: 05 6C     ORA $6C
0F/C114: D0 10     BNE $C126
0F/C116: AD 13 60  LDA $6013
0F/C119: 0A        ASL 
0F/C11A: B0 0A     BCS $C126
0F/C11C: A9 03     LDA #$03
0F/C11E: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C121: A2 02     LDX #$02
0F/C123: 20 03 A0  JSR $A003          ; 03/A003
0F/C126: A5 42     LDA $42
0F/C128: 29 0C     AND #$0C
0F/C12A: F0 9D     BEQ $C0C9          ; branch if not ship or airship
; update airship noise
0F/C12C: C9 08     CMP #$08
0F/C12E: D0 0D     BNE $C13D
0F/C130: A9 38     LDA #$38
0F/C132: 8D 0C 40  STA $400C
0F/C135: A5 F0     LDA $F0
0F/C137: 0A        ASL 
0F/C138: 29 0F     AND #$0F
0F/C13A: 4C 4E C1  JMP $C14E
; update ship noise
0F/C13D: A5 F0     LDA $F0
0F/C13F: 10 02     BPL $C143
0F/C141: 49 FF     EOR #$FF
0F/C143: 4A        LSR 
0F/C144: 4A        LSR 
0F/C145: 4A        LSR 
0F/C146: 4A        LSR 
0F/C147: 09 30     ORA #$30
0F/C149: 8D 0C 40  STA $400C
0F/C14C: A9 0A     LDA #$0A
0F/C14E: 8D 0E 40  STA $400E
0F/C151: A9 00     LDA #$00
0F/C153: 8D 0F 40  STA $400F
0F/C156: 4C C9 C0  JMP $C0C9

; [ check triggers/menu (world map) ]

0F/C159: A5 44     LDA $44
0F/C15B: 30 6A     BMI $C1C7          ; branch if an entrance
0F/C15D: 29 20     AND #$20
0F/C15F: D0 50     BNE $C1B1          ; branch if a battle ???
0F/C161: A5 23     LDA $23
0F/C163: F0 1C     BEQ $C181          ; branch if start button is not pressed
; main menu
0F/C165: A9 00     LDA #$00
0F/C167: 85 23     STA $23
0F/C169: A9 30     LDA #$30
0F/C16B: 8D 0C 40  STA $400C
0F/C16E: 20 A4 DD  JSR $DDA4          ; fade in/out
0F/C171: A9 0E     LDA #$0E
0F/C173: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C176: 20 C4 AC  JSR $ACC4          ; 0E/ACC4 (main menu)
0F/C179: A9 00     LDA #$00
0F/C17B: 8D 15 40  STA $4015
0F/C17E: 4C BC C8  JMP $C8BC          ; reload world map
; row menu or minimap
0F/C181: A5 22     LDA $22
0F/C183: F0 2B     BEQ $C1B0          ; return if select button is not pressed
0F/C185: A9 30     LDA #$30
0F/C187: 8D 0C 40  STA $400C
0F/C18A: 20 A4 DD  JSR $DDA4          ; fade in/out
0F/C18D: A5 20     LDA $20
0F/C18F: 29 40     AND #$40
0F/C191: F0 12     BEQ $C1A5          ; branch if select button is not pressed
0F/C193: AD 1A 60  LDA $601A
0F/C196: 29 02     AND #$02
0F/C198: F0 0B     BEQ $C1A5          ; branch if no ring
0F/C19A: A9 09     LDA #$09
0F/C19C: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C19F: 20 00 BA  JSR $BA00          ; 09/BA00 (minimap)
0F/C1A2: 4C BC C8  JMP $C8BC          ; reload world map
0F/C1A5: A9 0E     LDA #$0E
0F/C1A7: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C1AA: 20 E2 F0  JSR $F0E2          ; row menu
0F/C1AD: 4C BC C8  JMP $C8BC          ; reload world map
0F/C1B0: 60        RTS 
; $20: battle
0F/C1B1: 20 6A DC  JSR $DC6A          ; do battle flash and sound effect
0F/C1B4: A9 00     LDA #$00
0F/C1B6: 8D 01 20  STA $2001
0F/C1B9: 8D 15 40  STA $4015
0F/C1BC: 20 5C C7  JSR $C75C          ; get world map battle background
0F/C1BF: A5 6A     LDA $6A
0F/C1C1: 20 00 FA  JSR $FA00          ; execute battle
0F/C1C4: 4C BC C8  JMP $C8BC          ; reload world map
; $80: entrance
0F/C1C7: A9 30     LDA #$30
0F/C1C9: 8D 0C 40  STA $400C
0F/C1CC: 20 CB D7  JSR $D7CB          ; screen wipe out
0F/C1CF: A9 00     LDA #$00
0F/C1D1: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C1D4: A5 45     LDA $45
0F/C1D6: AA        TAX 
0F/C1D7: BD 00 B4  LDA $B400,X        ; x position
0F/C1DA: 38        SEC 
0F/C1DB: E9 07     SBC #$07
0F/C1DD: 29 3F     AND #$3F
0F/C1DF: 85 29     STA $29
0F/C1E1: BD 40 B4  LDA $B440,X        ; y position
0F/C1E4: 38        SEC 
0F/C1E5: E9 07     SBC #$07
0F/C1E7: 29 3F     AND #$3F
0F/C1E9: 85 2A     STA $2A
0F/C1EB: BD 80 B4  LDA $B480,X        ; map id
0F/C1EE: 85 48     STA $48
0F/C1F0: 20 41 CA  JSR $CA41          ; map main
0F/C1F3: 4C B8 C0  JMP $C0B8          ; world map main

; [ check player input (world map) ]

; starts at 0F/C266

; get off chocobo
0F/C1F6: A9 80     LDA #$80
0F/C1F8: 8D 08 60  STA $6008
0F/C1FB: A9 70     LDA #$70
0F/C1FD: 8D 09 60  STA $6009
0F/C200: A9 6F     LDA #$6F
0F/C202: 8D 0A 60  STA $600A
0F/C205: A9 44     LDA #$44           ; play song $04
0F/C207: 85 E0     STA $E0
0F/C209: 60        RTS 
; ferry movement
0F/C20A: A9 08     LDA #$08           ; set vehicle to airship
0F/C20C: 85 46     STA $46
0F/C20E: 85 42     STA $42
0F/C210: 20 82 DF  JSR $DF82
0F/C213: AD 04 60  LDA $6004
0F/C216: 29 02     AND #$02
0F/C218: F0 04     BEQ $C21E          ; return if ferry is not waiting for pickup
0F/C21A: A9 04     LDA #$04           ; do event $04 (update ferry movement)
0F/C21C: 85 6C     STA $6C
0F/C21E: 60        RTS 
; on foot, pressed A
0F/C21F: AD 08 60  LDA $6008
0F/C222: C9 02     CMP #$02
0F/C224: F0 D0     BEQ $C1F6          ; get off chocobo
0F/C226: AD 04 60  LDA $6004
0F/C229: C9 02     CMP #$02
0F/C22B: 90 14     BCC $C241          ; branch if not controlling airship
0F/C22D: A5 27     LDA $27
0F/C22F: 18        CLC 
0F/C230: 69 07     ADC #$07
0F/C232: CD 05 60  CMP $6005          ; compare with airship position
0F/C235: D0 0A     BNE $C241
0F/C237: A5 28     LDA $28
0F/C239: 18        CLC 
0F/C23A: 69 07     ADC #$07
0F/C23C: CD 06 60  CMP $6006
0F/C23F: F0 C9     BEQ $C20A          ; ferry movement
0F/C241: AD 08 60  LDA $6008
0F/C244: C9 01     CMP #$01
0F/C246: D0 1D     BNE $C265
0F/C248: A5 27     LDA $27
0F/C24A: 18        CLC 
0F/C24B: 69 07     ADC #$07
0F/C24D: CD 09 60  CMP $6009
0F/C250: D0 13     BNE $C265
0F/C252: A5 28     LDA $28
0F/C254: 18        CLC 
0F/C255: 69 07     ADC #$07
0F/C257: CD 0A 60  CMP $600A
0F/C25A: D0 09     BNE $C265
; get on chocobo ???
0F/C25C: A9 02     LDA #$02
0F/C25E: 8D 08 60  STA $6008
0F/C261: A9 43     LDA #$43           ; play song $03
0F/C263: 85 E0     STA $E0
0F/C265: 60        RTS 
; subroutine starts here
0F/C266: A5 47     LDA $47
0F/C268: F0 06     BEQ $C270
0F/C26A: 38        SEC 
0F/C26B: E9 01     SBC #$01
0F/C26D: 85 47     STA $47
0F/C26F: 60        RTS 
0F/C270: 20 5C DB  JSR $DB5C          ; execute event script / update joypad input
0F/C273: A5 20     LDA $20
0F/C275: 29 0F     AND #$0F
0F/C277: D0 17     BNE $C290          ; branch if any direction buttons are pressed
0F/C279: A9 00     LDA #$00
0F/C27B: 85 4E     STA $4E
0F/C27D: A5 24     LDA $24
0F/C27F: F0 0E     BEQ $C28F          ; return if A button is not pressed
0F/C281: A9 00     LDA #$00
0F/C283: 85 24     STA $24
0F/C285: A5 42     LDA $42
0F/C287: C9 08     CMP #$08
0F/C289: F0 3E     BEQ $C2C9          ; branch if in airship
0F/C28B: C9 01     CMP #$01
0F/C28D: F0 90     BEQ $C21F
0F/C28F: 60        RTS 
0F/C290: A6 42     LDX $42
0F/C292: E0 08     CPX #$08
0F/C294: F0 2A     BEQ $C2C0          ; airship can move anywhere
0F/C296: E0 04     CPX #$04
0F/C298: F0 32     BEQ $C2CC
0F/C29A: E0 02     CPX #$02
0F/C29C: F0 44     BEQ $C2E2
; no vehicle
0F/C29E: 20 B4 C4  JSR $C4B4          ; check destination tile
0F/C2A1: B0 07     BCS $C2AA          ; branch if not passable
0F/C2A3: 20 0E C7  JSR $C70E
0F/C2A6: B0 33     BCS $C2DB
0F/C2A8: 90 16     BCC $C2C0
0F/C2AA: AD 08 60  LDA $6008
0F/C2AD: C9 02     CMP #$02
0F/C2AF: F0 2A     BEQ $C2DB
0F/C2B1: 20 54 C6  JSR $C654          ; check if passable in canoe/snowcraft
0F/C2B4: 90 0A     BCC $C2C0
0F/C2B6: 20 8B C6  JSR $C68B
0F/C2B9: 90 05     BCC $C2C0
0F/C2BB: 20 C7 C6  JSR $C6C7
0F/C2BE: B0 1B     BCS $C2DB
; allow movement
0F/C2C0: A5 20     LDA $20
0F/C2C2: 29 0F     AND #$0F
0F/C2C4: 85 33     STA $33            ; set movement direction
0F/C2C6: 4C 09 D2  JMP $D209          ; init player movement
0F/C2C9: 4C 85 C7  JMP $C785          ; land airship
; ship
0F/C2CC: 20 B4 C4  JSR $C4B4          ; check destination tile
0F/C2CF: 90 EF     BCC $C2C0
0F/C2D1: 20 54 C6  JSR $C654          ; check if passable in canoe/snowcraft
0F/C2D4: 90 EA     BCC $C2C0
0F/C2D6: 20 40 C6  JSR $C640          ; check if passable on foot
0F/C2D9: 90 E5     BCC $C2C0
; don't allow movement
0F/C2DB: A5 43     LDA $43
0F/C2DD: 85 44     STA $44
0F/C2DF: 85 4E     STA $4E
0F/C2E1: 60        RTS 
; canoe/snowcraft
0F/C2E2: 20 B4 C4  JSR $C4B4          ; check destination tile
0F/C2E5: 90 D9     BCC $C2C0          ; branch if passable
0F/C2E7: 20 40 C6  JSR $C640          ; check if passable on foot
0F/C2EA: 90 D4     BCC $C2C0
0F/C2EC: 20 8B C6  JSR $C68B
0F/C2EF: 90 CF     BCC $C2C0
0F/C2F1: B0 E8     BCS $C2DB

; [ update water animation ]

0F/C2F3: A5 6D     LDA $6D
0F/C2F5: 18        CLC 
0F/C2F6: 69 03     ADC #$03
0F/C2F8: 85 6D     STA $6D
0F/C2FA: 29 0F     AND #$0F
0F/C2FC: 0A        ASL 
0F/C2FD: AA        TAX 
0F/C2FE: AD 02 20  LDA $2002
0F/C301: A9 03     LDA #$03
0F/C303: 8D 06 20  STA $2006
0F/C306: BD 4F C3  LDA $C34F,X
0F/C309: 8D 06 20  STA $2006
0F/C30C: AD 07 20  LDA $2007
0F/C30F: AD 07 20  LDA $2007
0F/C312: 85 80     STA $80
0F/C314: A9 03     LDA #$03
0F/C316: 8D 06 20  STA $2006
0F/C319: BD 50 C3  LDA $C350,X
0F/C31C: 8D 06 20  STA $2006
0F/C31F: AD 07 20  LDA $2007
0F/C322: AD 07 20  LDA $2007
0F/C325: 85 81     STA $81
0F/C327: A5 80     LDA $80
0F/C329: 0A        ASL 
0F/C32A: 26 81     ROL $81
0F/C32C: 26 80     ROL $80
0F/C32E: A9 03     LDA #$03
0F/C330: 8D 06 20  STA $2006
0F/C333: BD 4F C3  LDA $C34F,X
0F/C336: 8D 06 20  STA $2006
0F/C339: A5 80     LDA $80
0F/C33B: 8D 07 20  STA $2007
0F/C33E: A9 03     LDA #$03
0F/C340: 8D 06 20  STA $2006
0F/C343: BD 50 C3  LDA $C350,X
0F/C346: 8D 06 20  STA $2006
0F/C349: A5 81     LDA $81
0F/C34B: 8D 07 20  STA $2007
0F/C34E: 60        RTS 

; low byte of ppu address for water animation (16 * 2 bytes)
0F/C34F: 50 60 51 61 52 62 53 63 54 64 55 65 56 66 57 67
0F/C35F: 90 A0 91 A1 92 A2 93 A3 94 A4 95 A5 96 A6 97 A7

; [ update scrolling (world map) ]

0F/C36F: A5 34     LDA $34
0F/C371: F0 0D     BEQ $C380          ; branch if no buttons are pressed
0F/C373: 20 FE C3  JSR $C3FE          ; update player movement
0F/C376: A5 42     LDA $42
0F/C378: C9 01     CMP #$01
0F/C37A: D0 03     BNE $C37F
0F/C37C: 4C E7 C8  JMP $C8E7          ; do venom step damage
0F/C37F: 60        RTS 

; [ update ppu registers (world map) ]

0F/C380: A9 1E     LDA #$1E
0F/C382: 8D 01 20  STA $2001
0F/C385: A5 FD     LDA $FD
0F/C387: 85 FF     STA $FF
0F/C389: 8D 00 20  STA $2000
0F/C38C: AD 02 20  LDA $2002
0F/C38F: A5 27     LDA $27
0F/C391: 0A        ASL 
0F/C392: 0A        ASL 
0F/C393: 0A        ASL 
0F/C394: 0A        ASL 
0F/C395: 05 35     ORA $35
0F/C397: 8D 05 20  STA $2005
0F/C39A: A5 2F     LDA $2F
0F/C39C: 0A        ASL 
0F/C39D: 0A        ASL 
0F/C39E: 0A        ASL 
0F/C39F: 0A        ASL 
0F/C3A0: 05 36     ORA $36
0F/C3A2: 8D 05 20  STA $2005
0F/C3A5: 60        RTS 

; [ update player movement (world map) ]

; subroutine starts at 0F/C3FE

; right
0F/C3A6: A5 32     LDA $32
0F/C3A8: F0 03     BEQ $C3AD
0F/C3AA: 20 1B D2  JSR $D21B          ; update map background
0F/C3AD: 20 80 C3  JSR $C380          ; update ppu registers
0F/C3B0: A5 35     LDA $35
0F/C3B2: 18        CLC 
0F/C3B3: 65 34     ADC $34
0F/C3B5: 29 0F     AND #$0F
0F/C3B7: F0 03     BEQ $C3BC
0F/C3B9: 85 35     STA $35
0F/C3BB: 60        RTS 
0F/C3BC: 85 34     STA $34            ; stop movement
0F/C3BE: 85 35     STA $35            ; clear horizontal subtile position
0F/C3C0: A5 27     LDA $27
0F/C3C2: 18        CLC 
0F/C3C3: 69 01     ADC #$01
0F/C3C5: 85 27     STA $27
0F/C3C7: 29 10     AND #$10
0F/C3C9: 46 FD     LSR $FD
0F/C3CB: C9 10     CMP #$10
0F/C3CD: 26 FD     ROL $FD
0F/C3CF: 60        RTS 
; left
0F/C3D0: A5 32     LDA $32
0F/C3D2: F0 03     BEQ $C3D7
0F/C3D4: 20 1B D2  JSR $D21B          ; update map background
0F/C3D7: 20 80 C3  JSR $C380          ; update ppu registers
0F/C3DA: A5 35     LDA $35
0F/C3DC: D0 11     BNE $C3EF
0F/C3DE: A5 27     LDA $27
0F/C3E0: 38        SEC 
0F/C3E1: E9 01     SBC #$01
0F/C3E3: 85 27     STA $27
0F/C3E5: 29 10     AND #$10
0F/C3E7: 46 FD     LSR $FD
0F/C3E9: C9 10     CMP #$10
0F/C3EB: 26 FD     ROL $FD
0F/C3ED: A5 35     LDA $35
0F/C3EF: 38        SEC 
0F/C3F0: E5 34     SBC $34
0F/C3F2: 29 0F     AND #$0F
0F/C3F4: F0 03     BEQ $C3F9
0F/C3F6: 85 35     STA $35
0F/C3F8: 60        RTS 
0F/C3F9: 85 34     STA $34            ; stop movement
0F/C3FB: 85 35     STA $35            ; clear horizontal subtile position
0F/C3FD: 60        RTS 
; subroutine starts here
0F/C3FE: A5 33     LDA $33            ; player facing direction
0F/C400: 4A        LSR 
0F/C401: B0 A3     BCS $C3A6          ; branch if facing right
0F/C403: 4A        LSR 
0F/C404: B0 CA     BCS $C3D0          ; branch if facing left
0F/C406: 4A        LSR 
0F/C407: B0 03     BCS $C40C          ; branch if facing down
0F/C409: 4C 3C C4  JMP $C43C
; down
0F/C40C: A5 32     LDA $32
0F/C40E: F0 09     BEQ $C419
0F/C410: A5 36     LDA $36
0F/C412: C9 08     CMP #$08
0F/C414: 90 03     BCC $C419
0F/C416: 20 1B D2  JSR $D21B          ; update map background
0F/C419: 20 80 C3  JSR $C380          ; update ppu registers
0F/C41C: A5 36     LDA $36
0F/C41E: 18        CLC 
0F/C41F: 65 34     ADC $34
0F/C421: 29 0F     AND #$0F
0F/C423: F0 03     BEQ $C428
0F/C425: 85 36     STA $36
0F/C427: 60        RTS 
0F/C428: 85 34     STA $34            ; stop movement
0F/C42A: 85 36     STA $36            ; clear vertical subtile position
0F/C42C: E6 28     INC $28
0F/C42E: A5 2F     LDA $2F
0F/C430: 18        CLC 
0F/C431: 69 01     ADC #$01
0F/C433: C9 0F     CMP #$0F
0F/C435: 90 02     BCC $C439
0F/C437: E9 0F     SBC #$0F
0F/C439: 85 2F     STA $2F
0F/C43B: 60        RTS 
; up
0F/C43C: A5 32     LDA $32
0F/C43E: F0 09     BEQ $C449
0F/C440: A5 36     LDA $36
0F/C442: C9 08     CMP #$08
0F/C444: D0 03     BNE $C449
0F/C446: 20 1B D2  JSR $D21B          ; update map background
0F/C449: 20 80 C3  JSR $C380          ; update ppu registers
0F/C44C: A5 36     LDA $36
0F/C44E: D0 0F     BNE $C45F
0F/C450: C6 28     DEC $28
0F/C452: A5 2F     LDA $2F
0F/C454: 38        SEC 
0F/C455: E9 01     SBC #$01
0F/C457: B0 02     BCS $C45B
0F/C459: 69 0F     ADC #$0F
0F/C45B: 85 2F     STA $2F
0F/C45D: A5 36     LDA $36
0F/C45F: 38        SEC 
0F/C460: E5 34     SBC $34
0F/C462: 29 0F     AND #$0F
0F/C464: F0 03     BEQ $C469
0F/C466: 85 36     STA $36
0F/C468: 60        RTS 
0F/C469: 85 34     STA $34            ; stop movement
0F/C46B: 85 36     STA $36            ; clear vertical subtile position
0F/C46D: 60        RTS 

; [ clear oam data ]

0F/C46E: A2 3F     LDX #$3F
0F/C470: A9 F0     LDA #$F0
0F/C472: 9D 00 02  STA $0200,X
0F/C475: 9D 40 02  STA $0240,X
0F/C478: 9D 80 02  STA $0280,X
0F/C47B: 9D C0 02  STA $02C0,X
0F/C47E: CA        DEX 
0F/C47F: 10 F1     BPL $C472
0F/C481: A9 00     LDA #$00
0F/C483: 85 26     STA $26
0F/C485: 60        RTS 

; [  ]

0F/C486: A2 EF     LDX #$EF
0F/C488: A9 00     LDA #$00
0F/C48A: 95 00     STA $00,X          ; clear zero page ($00-$EF)
0F/C48C: CA        DEX 
0F/C48D: D0 FB     BNE $C48A
0F/C48F: A9 1B     LDA #$1B           ; seed npc movement rng
0F/C491: 05 F4     ORA $F4
0F/C493: 85 F4     STA $F4
0F/C495: A2 1F     LDX #$1F
0F/C497: A9 0F     LDA #$0F
0F/C499: 9D C0 03  STA $03C0,X        ; set all palettes to black
0F/C49C: CA        DEX 
0F/C49D: 10 FA     BPL $C499
0F/C49F: 60        RTS 

; [  ]

0F/C4A0: A9 30     LDA #$30
0F/C4A2: 8D 00 40  STA $4000
0F/C4A5: 8D 04 40  STA $4004
0F/C4A8: 8D 08 40  STA $4008
0F/C4AB: 8D 0C 40  STA $400C
0F/C4AE: A9 00     LDA #$00
0F/C4B0: 8D 15 40  STA $4015
0F/C4B3: 60        RTS 

; [ check destination tile (world map) ]

; A: ----udlr direction
; set carry if not passable

0F/C4B4: 4A        LSR 
0F/C4B5: B0 14     BCS $C4CB
0F/C4B7: 4A        LSR 
0F/C4B8: B0 18     BCS $C4D2
0F/C4BA: 4A        LSR 
0F/C4BB: B0 07     BCS $C4C4
; up
0F/C4BD: A2 07     LDX #$07
0F/C4BF: A0 06     LDY #$06
0F/C4C1: 4C D6 C4  JMP $C4D6
; down
0F/C4C4: A2 07     LDX #$07
0F/C4C6: A0 08     LDY #$08
0F/C4C8: 4C D6 C4  JMP $C4D6
; right
0F/C4CB: A2 08     LDX #$08
0F/C4CD: A0 07     LDY #$07
0F/C4CF: 4C D6 C4  JMP $C4D6
; left
0F/C4D2: A2 06     LDX #$06
0F/C4D4: A0 07     LDY #$07
0F/C4D6: 8A        TXA 
0F/C4D7: 18        CLC 
0F/C4D8: 65 27     ADC $27
0F/C4DA: 85 80     STA $80
0F/C4DC: 85 82     STA $82
0F/C4DE: 98        TYA 
0F/C4DF: 18        CLC 
0F/C4E0: 65 28     ADC $28
0F/C4E2: 85 83     STA $83
0F/C4E4: 29 0F     AND #$0F
0F/C4E6: 09 70     ORA #$70
0F/C4E8: 85 81     STA $81
0F/C4EA: A0 00     LDY #$00
0F/C4EC: B1 80     LDA ($80),Y
0F/C4EE: 0A        ASL 
0F/C4EF: AA        TAX 
0F/C4F0: BD 00 04  LDA $0400,X        ; tile properties 1
0F/C4F3: 85 44     STA $44
0F/C4F5: BD 01 04  LDA $0401,X
0F/C4F8: 85 45     STA $45
0F/C4FA: A5 44     LDA $44
0F/C4FC: 25 42     AND $42
0F/C4FE: F0 02     BEQ $C502          ; branch if passable in current vehicle
0F/C500: 38        SEC 
0F/C501: 60        RTS 
0F/C502: 24 44     BIT $44
0F/C504: 50 03     BVC $C509
0F/C506: 4C 95 C9  JMP $C995
0F/C509: 30 38     BMI $C543
0F/C50B: A5 6C     LDA $6C
0F/C50D: D0 34     BNE $C543
0F/C50F: A6 42     LDX $42
0F/C511: E0 08     CPX #$08
0F/C513: F0 2E     BEQ $C543          ; branch if on airship
0F/C515: AD B9 62  LDA $62B9
0F/C518: E0 04     CPX #$04
0F/C51A: F0 1E     BEQ $C53A
0F/C51C: E0 02     CPX #$02
0F/C51E: D0 0D     BNE $C52D
0F/C520: AD 19 60  LDA $6019
0F/C523: C9 40     CMP #$40
0F/C525: F0 1C     BEQ $C543
0F/C527: AD B8 62  LDA $62B8
0F/C52A: 4C 3A C5  JMP $C53A
0F/C52D: AD B7 62  LDA $62B7
0F/C530: AE 08 60  LDX $6008
0F/C533: E0 02     CPX #$02
0F/C535: F0 03     BEQ $C53A
0F/C537: AD B6 62  LDA $62B6
0F/C53A: 85 80     STA $80
0F/C53C: 20 AD C5  JSR $C5AD          ; get random number
0F/C53F: C5 80     CMP $80
0F/C541: 90 02     BCC $C545
0F/C543: 18        CLC 
0F/C544: 60        RTS 
0F/C545: A5 42     LDA $42
0F/C547: C9 04     CMP #$04
0F/C549: D0 04     BNE $C54F          ; branch if on ship
0F/C54B: A9 01     LDA #$01
0F/C54D: D0 18     BNE $C567
0F/C54F: A5 27     LDA $27
0F/C551: 18        CLC 
0F/C552: 69 07     ADC #$07
0F/C554: 2A        ROL 
0F/C555: 2A        ROL 
0F/C556: 2A        ROL 
0F/C557: 2A        ROL 
0F/C558: 29 07     AND #$07
0F/C55A: 85 80     STA $80
0F/C55C: A5 28     LDA $28
0F/C55E: 18        CLC 
0F/C55F: 69 07     ADC #$07
0F/C561: 4A        LSR 
0F/C562: 4A        LSR 
0F/C563: 29 38     AND #$38
0F/C565: 05 80     ORA $80
0F/C567: 85 80     STA $80
0F/C569: AD 12 60  LDA $6012
0F/C56C: 29 40     AND #$40
0F/C56E: 05 80     ORA $80
0F/C570: AA        TAX 
0F/C571: A9 0B     LDA #$0B
0F/C573: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C576: BD 00 82  LDA $8200,X        ; 0B/8200 (world map battle groups)
; fallthrough

; [ choose from battle group ]

0F/C579: A0 00     LDY #$00
0F/C57B: 84 81     STY $81
0F/C57D: 0A        ASL 
0F/C57E: 26 81     ROL $81
0F/C580: 0A        ASL 
0F/C581: 26 81     ROL $81
0F/C583: 0A        ASL 
0F/C584: 26 81     ROL $81
0F/C586: 18        CLC 
0F/C587: 69 80     ADC #$80           ; 0B/8280 (random battle groups)
0F/C589: 85 80     STA $80
0F/C58B: A5 81     LDA $81
0F/C58D: 69 82     ADC #$82
0F/C58F: 85 81     STA $81
0F/C591: A9 0B     LDA #$0B
0F/C593: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C596: E6 F7     INC $F7
0F/C598: A6 F7     LDX $F7
0F/C59A: BD 00 F9  LDA $F900,X        ; rng table
0F/C59D: 29 3F     AND #$3F
0F/C59F: AA        TAX 
0F/C5A0: BC C8 C5  LDY $C5C8,X        ; battle probabilities
0F/C5A3: B1 80     LDA ($80),Y
0F/C5A5: 85 6A     STA $6A            ; set battle
0F/C5A7: A9 20     LDA #$20           ; trigger battle
0F/C5A9: 85 44     STA $44
0F/C5AB: 18        CLC 
0F/C5AC: 60        RTS 

; [ get random number ]

; increment or decrement $F5 based on the sign of $F6. every 256 iterations,
; add 160 to $F6, leading to a repeating pattern +,-,+,-,-,+,-,+ where "+"
; indicates traversing the rng table in the positive direction and "-"
; indicates traversing the rng table in the negative direction

0F/C5AD: 24 F6     BIT $F6
0F/C5AF: 30 06     BMI $C5B7
0F/C5B1: E6 F5     INC $F5
0F/C5B3: D0 0D     BNE $C5C2
0F/C5B5: F0 04     BEQ $C5BB
0F/C5B7: C6 F5     DEC $F5
0F/C5B9: D0 07     BNE $C5C2
0F/C5BB: A5 F6     LDA $F6
0F/C5BD: 18        CLC 
0F/C5BE: 69 A0     ADC #$A0
0F/C5C0: 85 F6     STA $F6
0F/C5C2: A6 F5     LDX $F5
0F/C5C4: BD 00 F9  LDA $F900,X        ; rng table
0F/C5C7: 60        RTS 

; battle probabilities
; 0: 12/256
; 1: 12/256
; 2: 12/256
; 3: 12/256
; 4: 6/256
; 5: 6/256
; 6: 3/256
; 7: 1/256
0F/C5C8: 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
0F/C5D8: 01 01 01 01 01 01 01 01 02 02 02 02 02 02 02 02
0F/C5E8: 02 02 02 02 03 03 03 03 03 03 03 03 03 03 03 03
0F/C5F8: 04 04 04 04 04 04 05 05 05 05 05 05 06 06 06 07

; [ disembark ship ]

0F/C608: AD 03 60  LDA $6003
0F/C60B: C9 10     CMP #$10
0F/C60D: D0 16     BNE $C625
0F/C60F: A5 27     LDA $27
0F/C611: 18        CLC 
0F/C612: 69 07     ADC #$07
0F/C614: 8D 01 60  STA $6001
0F/C617: A5 28     LDA $28
0F/C619: 18        CLC 
0F/C61A: 69 07     ADC #$07
0F/C61C: 8D 02 60  STA $6002
0F/C61F: A9 30     LDA #$30
0F/C621: 8D 0C 40  STA $400C
0F/C624: 60        RTS 
0F/C625: A5 27     LDA $27
0F/C627: 18        CLC 
0F/C628: 69 07     ADC #$07
0F/C62A: 8D 0D 60  STA $600D
0F/C62D: A5 28     LDA $28
0F/C62F: 18        CLC 
0F/C630: 69 07     ADC #$07
0F/C632: 8D 0E 60  STA $600E
0F/C635: AD 0C 60  LDA $600C
0F/C638: 49 03     EOR #$03
0F/C63A: 8D 0C 60  STA $600C
0F/C63D: 4C 1F C6  JMP $C61F

; [ check if passable on foot ]

0F/C640: A5 44     LDA $44
0F/C642: 29 01     AND #$01
0F/C644: D0 43     BNE $C689          ; branch if not passable on foot
0F/C646: A5 42     LDA $42
0F/C648: A2 01     LDX #$01           ; change to no vehicle
0F/C64A: 86 46     STX $46
0F/C64C: 86 42     STX $42
0F/C64E: C9 04     CMP #$04
0F/C650: F0 B6     BEQ $C608          ; branch if previous vehicle was ship
0F/C652: 18        CLC 
0F/C653: 60        RTS 

; [ check if passable in canoe/snowcraft ]

0F/C654: A5 44     LDA $44
0F/C656: 29 02     AND #$02
0F/C658: D0 2F     BNE $C689          ; branch if not a river/snow tile
0F/C65A: E0 4C     CPX #$4C
0F/C65C: D0 0B     BNE $C669          ; branch if not a snow tile (tile $26)
; snow tile
0F/C65E: AD 1A 60  LDA $601A
0F/C661: 29 20     AND #$20
0F/C663: F0 24     BEQ $C689          ; branch if no snowcraft
0F/C665: A9 58     LDA #$58
0F/C667: D0 09     BNE $C672
; river tile
0F/C669: AD 1A 60  LDA $601A
0F/C66C: 29 04     AND #$04
0F/C66E: F0 19     BEQ $C689          ; branch if no canoe
0F/C670: A9 40     LDA #$40
0F/C672: 8D 19 60  STA $6019
0F/C675: A9 04     LDA #$04
0F/C677: 85 47     STA $47
0F/C679: A5 42     LDA $42            ; previous vehicle
0F/C67B: A2 01     LDX #$01
0F/C67D: 86 42     STX $42
0F/C67F: A2 02     LDX #$02
0F/C681: 86 46     STX $46
0F/C683: C9 04     CMP #$04
0F/C685: F0 C9     BEQ $C650          ; branch if previous vehicle was ship
0F/C687: 18        CLC 
0F/C688: 60        RTS 
0F/C689: 38        SEC 
0F/C68A: 60        RTS 

; [ try to board ship ??? ]

0F/C68B: AD 00 60  LDA $6000
0F/C68E: F0 F9     BEQ $C689
0F/C690: AD 01 60  LDA $6001
0F/C693: C5 82     CMP $82
0F/C695: D0 F2     BNE $C689
0F/C697: AD 02 60  LDA $6002
0F/C69A: C5 83     CMP $83
0F/C69C: D0 EB     BNE $C689
0F/C69E: A9 10     LDA #$10
0F/C6A0: 8D 03 60  STA $6003
0F/C6A3: A9 00     LDA #$00
0F/C6A5: 8D 0F 60  STA $600F
0F/C6A8: AD 00 60  LDA $6000
0F/C6AB: C9 02     CMP #$02
0F/C6AD: B0 0A     BCS $C6B9
0F/C6AF: A9 02     LDA #$02
0F/C6B1: 8D 00 60  STA $6000
0F/C6B4: A9 00     LDA #$00           ; event $00
0F/C6B6: 20 F4 C6  JSR $C6F4          ; init event
0F/C6B9: A9 01     LDA #$01
0F/C6BB: 85 42     STA $42
0F/C6BD: A9 04     LDA #$04
0F/C6BF: 85 46     STA $46
0F/C6C1: A9 04     LDA #$04
0F/C6C3: 85 47     STA $47
0F/C6C5: 18        CLC 
0F/C6C6: 60        RTS 

; [ try to board ferry ??? ]

0F/C6C7: AD 0C 60  LDA $600C          ; branch if fare not paid
0F/C6CA: C9 02     CMP #$02
0F/C6CC: 90 BB     BCC $C689
0F/C6CE: AD 0D 60  LDA $600D          ; compare with ferry position
0F/C6D1: C5 82     CMP $82
0F/C6D3: D0 B4     BNE $C689
0F/C6D5: AD 0E 60  LDA $600E
0F/C6D8: C5 83     CMP $83
0F/C6DA: D0 AD     BNE $C689
0F/C6DC: A9 C0     LDA #$C0
0F/C6DE: 8D 03 60  STA $6003
0F/C6E1: A9 00     LDA #$00
0F/C6E3: 8D 0F 60  STA $600F
0F/C6E6: AD 0C 60  LDA $600C          ; get ferry destination
0F/C6E9: 29 01     AND #$01
0F/C6EB: 18        CLC 
0F/C6EC: 69 01     ADC #$01           ; event $01 or $02
0F/C6EE: 20 F4 C6  JSR $C6F4          ; init event
0F/C6F1: 4C B9 C6  JMP $C6B9

; [ init event ]

; A: event id

0F/C6F4: 0A        ASL 
0F/C6F5: AA        TAX 
0F/C6F6: A9 0D     LDA #$0D
0F/C6F8: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C6FB: BD C0 BF  LDA $BFC0,X        ; event script pointer
0F/C6FE: 85 72     STA $72
0F/C700: BD C1 BF  LDA $BFC1,X
0F/C703: 85 73     STA $73
0F/C705: A9 01     LDA #$01           ; event script
0F/C707: 85 6C     STA $6C
0F/C709: A9 00     LDA #$00
0F/C70B: 85 17     STA $17
0F/C70D: 60        RTS 

; [  ]

0F/C70E: AD 14 60  LDA $6014
0F/C711: F0 20     BEQ $C733          ; branch if dreadnought isn't visible
0F/C713: A5 82     LDA $82
0F/C715: CD 15 60  CMP $6015
0F/C718: F0 08     BEQ $C722
0F/C71A: 18        CLC 
0F/C71B: 69 01     ADC #$01
0F/C71D: CD 15 60  CMP $6015
0F/C720: D0 11     BNE $C733
0F/C722: A5 83     LDA $83
0F/C724: CD 16 60  CMP $6016
0F/C727: F0 08     BEQ $C731
0F/C729: 18        CLC 
0F/C72A: 69 01     ADC #$01
0F/C72C: CD 16 60  CMP $6016
0F/C72F: D0 02     BNE $C733
0F/C731: 38        SEC 
0F/C732: 60        RTS 
0F/C733: A5 42     LDA $42
0F/C735: C9 01     CMP #$01
0F/C737: D0 0B     BNE $C744
0F/C739: AD 08 60  LDA $6008
0F/C73C: C9 02     CMP #$02
0F/C73E: D0 04     BNE $C744
0F/C740: A5 44     LDA $44
0F/C742: 30 ED     BMI $C731
0F/C744: 18        CLC 
0F/C745: 60        RTS 

; [ update sound ]

0F/C746: A9 0D     LDA #$0D
0F/C748: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C74B: 4C 00 98  JMP $9800          ; 0D/9800 (update music)
; unused
0F/C74E: 60        RTS 

; [ update sound ]

0F/C74F: A9 0D     LDA #$0D
0F/C751: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C754: 20 00 98  JSR $9800          ; 0D/9800 (update music)
0F/C757: A5 57     LDA $57
0F/C759: 4C 03 FE  JMP $FE03          ; switch prg bank

; [ get world map battle background ]

0F/C75C: A5 27     LDA $27
0F/C75E: 18        CLC 
0F/C75F: 69 07     ADC #$07
0F/C761: 85 80     STA $80
0F/C763: A5 28     LDA $28
0F/C765: 18        CLC 
0F/C766: 69 07     ADC #$07
0F/C768: 29 0F     AND #$0F
0F/C76A: 09 70     ORA #$70
0F/C76C: 85 81     STA $81
0F/C76E: A0 00     LDY #$00
0F/C770: B1 80     LDA ($80),Y        ; tile
0F/C772: A8        TAY 
0F/C773: 0A        ASL 
0F/C774: AA        TAX 
0F/C775: BD 00 04  LDA $0400,X
0F/C778: 29 10     AND #$10
0F/C77A: 85 43     STA $43
0F/C77C: A9 00     LDA #$00
0F/C77E: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C781: BE 00 95  LDX $9500,Y
0F/C784: 60        RTS 

; [ land airship ]

0F/C785: A9 00     LDA #$00           ; clear A button
0F/C787: 85 24     STA $24
0F/C789: 20 9C DF  JSR $DF9C
0F/C78C: AD 04 60  LDA $6004
0F/C78F: 29 02     AND #$02
0F/C791: F0 17     BEQ $C7AA
0F/C793: A9 00     LDA #$00           ; no event
0F/C795: 85 6C     STA $6C
0F/C797: 20 27 C8  JSR $C827
0F/C79A: A9 70     LDA #$70
0F/C79C: 8D 05 60  STA $6005
0F/C79F: A9 6F     LDA #$6F
0F/C7A1: 8D 06 60  STA $6006
0F/C7A4: A9 81     LDA #$81
0F/C7A6: 8D 04 60  STA $6004
0F/C7A9: 60        RTS 
0F/C7AA: A5 27     LDA $27
0F/C7AC: 18        CLC 
0F/C7AD: 69 07     ADC #$07
0F/C7AF: 85 82     STA $82
0F/C7B1: 85 80     STA $80
0F/C7B3: A5 28     LDA $28
0F/C7B5: 18        CLC 
0F/C7B6: 69 07     ADC #$07
0F/C7B8: 85 83     STA $83
0F/C7BA: 29 0F     AND #$0F
0F/C7BC: 09 70     ORA #$70
0F/C7BE: 85 81     STA $81
0F/C7C0: A0 00     LDY #$00
0F/C7C2: B1 80     LDA ($80),Y
0F/C7C4: 0A        ASL 
0F/C7C5: AA        TAX 
0F/C7C6: BD 00 04  LDA $0400,X
0F/C7C9: 48        PHA 
0F/C7CA: 29 40     AND #$40
0F/C7CC: F0 2B     BEQ $C7F9
0F/C7CE: BD 01 04  LDA $0401,X
0F/C7D1: C9 02     CMP #$02
0F/C7D3: D0 24     BNE $C7F9
0F/C7D5: AD 1B 60  LDA $601B
0F/C7D8: 29 40     AND #$40
0F/C7DA: F0 1D     BEQ $C7F9
0F/C7DC: AD 36 62  LDA $6236
0F/C7DF: 8D 05 60  STA $6005
0F/C7E2: AD 37 62  LDA $6237
0F/C7E5: 8D 06 60  STA $6006
0F/C7E8: A9 01     LDA #$01
0F/C7EA: 85 42     STA $42
0F/C7EC: 85 46     STA $46
0F/C7EE: A9 80     LDA #$80
0F/C7F0: 85 44     STA $44
0F/C7F2: AD BE 62  LDA $62BE
0F/C7F5: 85 45     STA $45
0F/C7F7: 68        PLA 
0F/C7F8: 60        RTS 
0F/C7F9: 68        PLA 
0F/C7FA: 29 08     AND #$08
0F/C7FC: F0 04     BEQ $C802
0F/C7FE: 4C 82 DF  JMP $DF82
0F/C801: 60        RTS 
0F/C802: AD 08 60  LDA $6008
0F/C805: C9 01     CMP #$01
0F/C807: D0 0E     BNE $C817
0F/C809: A5 82     LDA $82
0F/C80B: CD 09 60  CMP $6009
0F/C80E: D0 07     BNE $C817
0F/C810: A5 83     LDA $83
0F/C812: CD 0A 60  CMP $600A
0F/C815: F0 E7     BEQ $C7FE
0F/C817: A5 27     LDA $27
0F/C819: 18        CLC 
0F/C81A: 69 07     ADC #$07
0F/C81C: 8D 05 60  STA $6005
0F/C81F: A5 28     LDA $28
0F/C821: 18        CLC 
0F/C822: 69 07     ADC #$07
0F/C824: 8D 06 60  STA $6006
0F/C827: A9 01     LDA #$01
0F/C829: 85 46     STA $46
0F/C82B: 85 42     STA $42
0F/C82D: A9 00     LDA #$00
0F/C82F: 85 43     STA $43
0F/C831: 60        RTS 

; [ load world map ]

0F/C832: A5 FF     LDA $FF
0F/C834: 8D 00 20  STA $2000
0F/C837: A9 00     LDA #$00
0F/C839: 8D 01 20  STA $2001
0F/C83C: 85 43     STA $43
0F/C83E: 85 4E     STA $4E
0F/C840: 8D 07 60  STA $6007
0F/C843: 85 2F     STA $2F
0F/C845: 85 44     STA $44
0F/C847: 85 45     STA $45
0F/C849: 85 0D     STA $0D
0F/C84B: 85 50     STA $50
0F/C84D: 85 33     STA $33
0F/C84F: 85 24     STA $24
0F/C851: 85 25     STA $25
0F/C853: 85 23     STA $23
0F/C855: 85 22     STA $22
0F/C857: 85 2D     STA $2D
0F/C859: 20 A5 E4  JSR $E4A5
0F/C85C: A9 00     LDA #$00
0F/C85E: 20 03 FE  JSR $FE03          ; switch prg bank
0F/C861: 20 03 9C  JSR $9C03          ; 00/9C03 (init world map)
0F/C864: 20 06 9C  JSR $9C06          ; 00/9C06 (load map palette)
0F/C867: 20 A3 D9  JSR $D9A3
0F/C86A: 20 D3 D1  JSR $D1D3
0F/C86D: A5 27     LDA $27
0F/C86F: 29 10     AND #$10
0F/C871: C9 10     CMP #$10
0F/C873: 2A        ROL 
0F/C874: 29 01     AND #$01
0F/C876: 09 88     ORA #$88
0F/C878: 85 FD     STA $FD
0F/C87A: 85 FF     STA $FF
0F/C87C: 20 00 FE  JSR $FE00          ; wait for vblank
0F/C87F: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0F/C882: 20 80 C3  JSR $C380          ; update ppu registers
0F/C885: A9 00     LDA #$00
0F/C887: 8D 01 20  STA $2001
0F/C88A: A9 44     LDA #$44
0F/C88C: A6 42     LDX $42
0F/C88E: E0 01     CPX #$01
0F/C890: D0 09     BNE $C89B
0F/C892: AE 08 60  LDX $6008
0F/C895: E0 02     CPX #$02
0F/C897: D0 02     BNE $C89B
0F/C899: A9 43     LDA #$43           ; play song $03
0F/C89B: 85 E0     STA $E0
0F/C89D: AD 08 60  LDA $6008
0F/C8A0: 29 7F     AND #$7F
0F/C8A2: 8D 08 60  STA $6008
0F/C8A5: AD 04 60  LDA $6004
0F/C8A8: 10 11     BPL $C8BB
0F/C8AA: A9 01     LDA #$01
0F/C8AC: 8D 04 60  STA $6004
0F/C8AF: AD 3C 62  LDA $623C
0F/C8B2: 8D 05 60  STA $6005
0F/C8B5: AD 3D 62  LDA $623D
0F/C8B8: 8D 06 60  STA $6006
0F/C8BB: 60        RTS 

; [ reload world map ]

0F/C8BC: 20 32 C8  JSR $C832          ; load world map
0F/C8BF: A9 01     LDA #$01
0F/C8C1: 20 A4 DD  JSR $DDA4          ; fade in/out
0F/C8C4: 4C C3 C0  JMP $C0C3          ; world map main

; [ do floor damage ]

0F/C8C7: A5 F0     LDA $F0
0F/C8C9: 29 01     AND #$01           ; toggle grayscale every frame
0F/C8CB: 09 1E     ORA #$1E
0F/C8CD: 8D 01 20  STA $2001
0F/C8D0: A9 0F     LDA #$0F           ; play sound effect
0F/C8D2: 8D 0C 40  STA $400C
0F/C8D5: A9 0D     LDA #$0D
0F/C8D7: 8D 0E 40  STA $400E
0F/C8DA: A9 00     LDA #$00
0F/C8DC: 8D 0F 40  STA $400F
0F/C8DF: A5 34     LDA $34
0F/C8E1: D0 03     BNE $C8E6          ; branch if moving
0F/C8E3: 4C 6E C9  JMP $C96E          ; decrement party hp
0F/C8E6: 60        RTS 

; [ do venom step damage ]

0F/C8E7: AD 01 61  LDA $6101          ; character 1 status
0F/C8EA: 0A        ASL 
0F/C8EB: B0 07     BCS $C8F4          ; skip if dead
0F/C8ED: 0A        ASL 
0F/C8EE: B0 04     BCS $C8F4          ; skip if stone
0F/C8F0: 29 10     AND #$10
0F/C8F2: D0 2D     BNE $C921          ; branch if has venom status
0F/C8F4: AD 41 61  LDA $6141
0F/C8F7: 0A        ASL 
0F/C8F8: B0 07     BCS $C901
0F/C8FA: 0A        ASL 
0F/C8FB: B0 04     BCS $C901
0F/C8FD: 29 10     AND #$10
0F/C8FF: D0 20     BNE $C921
0F/C901: AD 81 61  LDA $6181
0F/C904: 0A        ASL 
0F/C905: B0 07     BCS $C90E
0F/C907: 0A        ASL 
0F/C908: B0 04     BCS $C90E
0F/C90A: 29 10     AND #$10
0F/C90C: D0 13     BNE $C921
0F/C90E: AD F5 62  LDA $62F5
0F/C911: 30 0D     BMI $C920
0F/C913: AD C1 61  LDA $61C1
0F/C916: 0A        ASL 
0F/C917: B0 07     BCS $C920
0F/C919: 0A        ASL 
0F/C91A: B0 04     BCS $C920
0F/C91C: 29 10     AND #$10
0F/C91E: D0 01     BNE $C921
0F/C920: 60        RTS 
0F/C921: A9 3A     LDA #$3A           ; play sound effect
0F/C923: 8D 04 40  STA $4004
0F/C926: A9 81     LDA #$81
0F/C928: 8D 05 40  STA $4005
0F/C92B: A9 60     LDA #$60
0F/C92D: 8D 06 40  STA $4006
0F/C930: 8D 07 40  STA $4007
0F/C933: A9 06     LDA #$06
0F/C935: 85 E5     STA $E5
0F/C937: A5 34     LDA $34
0F/C939: F0 01     BEQ $C93C          ; branch if not moving
0F/C93B: 60        RTS 
0F/C93C: A2 00     LDX #$00
0F/C93E: BD 01 61  LDA $6101,X
0F/C941: 0A        ASL 
0F/C942: 0A        ASL 
0F/C943: B0 21     BCS $C966          ; skip if toad
0F/C945: 29 10     AND #$10
0F/C947: F0 1D     BEQ $C966
0F/C949: BD 09 61  LDA $6109,X
0F/C94C: D0 07     BNE $C955
0F/C94E: BD 08 61  LDA $6108,X
0F/C951: C9 02     CMP #$02           ; skip if less than 2 hp
0F/C953: 90 11     BCC $C966
0F/C955: BD 08 61  LDA $6108,X
0F/C958: 38        SEC 
0F/C959: E9 01     SBC #$01           ; subtract 1 hp
0F/C95B: 9D 08 61  STA $6108,X
0F/C95E: BD 09 61  LDA $6109,X
0F/C961: E9 00     SBC #$00
0F/C963: 9D 09 61  STA $6109,X
0F/C966: 8A        TXA                ; next character
0F/C967: 18        CLC 
0F/C968: 69 40     ADC #$40
0F/C96A: AA        TAX 
0F/C96B: D0 D1     BNE $C93E
0F/C96D: 60        RTS 

; [ decrement party hp ]

0F/C96E: A2 00     LDX #$00
0F/C970: BD 09 61  LDA $6109,X
0F/C973: D0 07     BNE $C97C
0F/C975: BD 08 61  LDA $6108,X
0F/C978: C9 02     CMP #$02
0F/C97A: 90 11     BCC $C98D
0F/C97C: BD 08 61  LDA $6108,X
0F/C97F: 38        SEC 
0F/C980: E9 01     SBC #$01           ; subtract 1 hp
0F/C982: 9D 08 61  STA $6108,X
0F/C985: BD 09 61  LDA $6109,X
0F/C988: E9 00     SBC #$00
0F/C98A: 9D 09 61  STA $6109,X
0F/C98D: 8A        TXA 
0F/C98E: 18        CLC 
0F/C98F: 69 40     ADC #$40
0F/C991: AA        TAX 
0F/C992: D0 DC     BNE $C970
0F/C994: 60        RTS 

; [  ]

0F/C995: A5 6C     LDA $6C
0F/C997: D0 35     BNE $C9CE          ; return if an event is running
0F/C999: A5 45     LDA $45
0F/C99B: D0 22     BNE $C9BF
; 0: 
0F/C99D: AD 1B 60  LDA $601B
0F/C9A0: 29 20     AND #$20
0F/C9A2: F0 2A     BEQ $C9CE          ; return if no crystal rod
0F/C9A4: AD 43 60  LDA $6043
0F/C9A7: 29 02     AND #$02
0F/C9A9: F0 23     BEQ $C9CE
0F/C9AB: 20 08 F3  JSR $F308          ; check if any main characters are alive
0F/C9AE: 90 08     BCC $C9B8
0F/C9B0: AD 01 61  LDA $6101          ; clear dead, stone, and toad status
0F/C9B3: 29 1F     AND #$1F
0F/C9B5: 8D 01 61  STA $6101
0F/C9B8: A9 16     LDA #$16
0F/C9BA: 20 F4 C6  JSR $C6F4          ; init event
0F/C9BD: 18        CLC 
0F/C9BE: 60        RTS 
; 1: 
0F/C9BF: C9 01     CMP #$01
0F/C9C1: D0 0D     BNE $C9D0
0F/C9C3: AD 1B 60  LDA $601B
0F/C9C6: 29 20     AND #$20
0F/C9C8: F0 04     BEQ $C9CE          ; branch if no crystal rod
0F/C9CA: A9 03     LDA #$03
0F/C9CC: 85 6C     STA $6C
0F/C9CE: 18        CLC 
0F/C9CF: 60        RTS 
; 3: 
0F/C9D0: C9 03     CMP #$03
0F/C9D2: D0 14     BNE $C9E8
0F/C9D4: AD 12 60  LDA $6012
0F/C9D7: 29 04     AND #$04
0F/C9D9: D0 F3     BNE $C9CE
0F/C9DB: AD 1B 60  LDA $601B
0F/C9DE: 29 40     AND #$40
0F/C9E0: F0 EC     BEQ $C9CE          ; return if no wyvern
0F/C9E2: A9 02     LDA #$02
0F/C9E4: 85 6C     STA $6C
0F/C9E6: 18        CLC 
0F/C9E7: 60        RTS 
; 4: 
0F/C9E8: C9 04     CMP #$04
0F/C9EA: D0 E2     BNE $C9CE
0F/C9EC: AD 1B 60  LDA $601B
0F/C9EF: 29 01     AND #$01
0F/C9F1: F0 DB     BEQ $C9CE          ; return if no sunfire
0F/C9F3: AD 13 60  LDA $6013
0F/C9F6: 29 10     AND #$10
0F/C9F8: F0 D4     BEQ $C9CE
0F/C9FA: AD 47 60  LDA $6047
0F/C9FD: 29 02     AND #$02
0F/C9FF: F0 CD     BEQ $C9CE
0F/CA01: AD 13 60  LDA $6013
0F/CA04: 29 EF     AND #$EF
0F/CA06: 09 80     ORA #$80
0F/CA08: 8D 13 60  STA $6013
0F/CA0B: A9 00     LDA #$00
0F/CA0D: 20 03 FE  JSR $FE03          ; switch prg bank
0F/CA10: AD F2 80  LDA $80F2
0F/CA13: 8D F2 04  STA $04F2
0F/CA16: AD F3 80  LDA $80F3
0F/CA19: 8D F3 04  STA $04F3
0F/CA1C: AD 79 81  LDA $8179
0F/CA1F: 8D 79 05  STA $0579
0F/CA22: AD F9 81  LDA $81F9
0F/CA25: 8D F9 05  STA $05F9
0F/CA28: AD 79 82  LDA $8279
0F/CA2B: 8D 79 06  STA $0679
0F/CA2E: AD F9 82  LDA $82F9
0F/CA31: 8D F9 06  STA $06F9
0F/CA34: AD 79 83  LDA $8379
0F/CA37: 8D 79 07  STA $0779
0F/CA3A: A9 06     LDA #$06
0F/CA3C: 85 6C     STA $6C
0F/CA3E: 18        CLC 
0F/CA3F: 60        RTS 

; unused
0F/CA40: 60        RTS 

; --------------------------------------------------------------------------

; [ map main ]

0F/CA41: 20 6F D0  JSR $D06F          ; load map
; start of frame loop
0F/CA44: 20 00 FE  JSR $FE00          ; wait for vblank
0F/CA47: A9 02     LDA #$02
0F/CA49: 8D 14 40  STA $4014          ; copy oam data to ppu
0F/CA4C: 20 D0 CD  JSR $CDD0          ; update scrolling
0F/CA4F: A5 F0     LDA $F0            ; increment frame counter
0F/CA51: 18        CLC 
0F/CA52: 69 01     ADC #$01
0F/CA54: 85 F0     STA $F0
0F/CA56: A5 F1     LDA $F1
0F/CA58: 69 00     ADC #$00
0F/CA5A: 85 F1     STA $F1
0F/CA5C: 20 46 C7  JSR $C746          ; update sound
0F/CA5F: A5 36     LDA $36
0F/CA61: 05 35     ORA $35
0F/CA63: C9 08     CMP #$08
0F/CA65: D0 06     BNE $CA6D
0F/CA67: A5 44     LDA $44
0F/CA69: 29 06     AND #$06
0F/CA6B: 85 43     STA $43
0F/CA6D: A5 34     LDA $34
0F/CA6F: D0 0C     BNE $CA7D          ; branch if player is moving
0F/CA71: A5 44     LDA $44
0F/CA73: 29 E0     AND #$E0
0F/CA75: F0 03     BEQ $CA7A          ; branch if no trigger
0F/CA77: 4C 8D CA  JMP $CA8D          ; execute trigger event
0F/CA7A: 20 20 CB  JSR $CB20          ; check player input
0F/CA7D: A5 76     LDA $76
0F/CA7F: F0 03     BEQ $CA84          ; branch if no event dialogue
0F/CA81: 20 AA E8  JSR $E8AA          ; display event dialogue
0F/CA84: 20 6E C4  JSR $C46E          ; clear oam data
0F/CA87: 20 0C E3  JSR $E30C          ; update sprites
0F/CA8A: 4C 44 CA  JMP $CA44

; [ execute trigger event ]

0F/CA8D: C9 40     CMP #$40
0F/CA8F: B0 25     BCS $CAB6
; $20: battle
0F/CA91: A9 00     LDA #$00
0F/CA93: 85 44     STA $44
0F/CA95: 20 6A DC  JSR $DC6A          ; do battle flash and sound effect
0F/CA98: A9 00     LDA #$00
0F/CA9A: 8D 01 20  STA $2001
0F/CA9D: 8D 15 40  STA $4015
0F/CAA0: A9 00     LDA #$00
0F/CAA2: 20 03 FE  JSR $FE03          ; switch prg bank
0F/CAA5: A6 48     LDX $48
0F/CAA7: BD 00 94  LDA $9400,X        ; battle background
0F/CAAA: AA        TAX 
0F/CAAB: A5 6A     LDA $6A
0F/CAAD: 20 00 FA  JSR $FA00          ; execute battle
0F/CAB0: 20 7B D0  JSR $D07B          ; reload map
0F/CAB3: 4C 44 CA  JMP $CA44
; $40: exit (to previous map)
0F/CAB6: D0 04     BNE $CABC
0F/CAB8: 20 EE D8  JSR $D8EE          ; screen wipe out
0F/CABB: 60        RTS 
; $80: entrance
0F/CABC: C9 80     CMP #$80
0F/CABE: D0 3F     BNE $CAFF
0F/CAC0: BA        TSX 
0F/CAC1: E0 20     CPX #$20
0F/CAC3: 90 B5     BCC $CA7A
0F/CAC5: A5 29     LDA $29
0F/CAC7: 48        PHA 
0F/CAC8: A5 2A     LDA $2A
0F/CACA: 48        PHA 
0F/CACB: A5 48     LDA $48
0F/CACD: 48        PHA 
0F/CACE: 20 EE D8  JSR $D8EE          ; screen wipe out
0F/CAD1: A9 00     LDA #$00
0F/CAD3: 20 03 FE  JSR $FE03          ; switch prg bank
0F/CAD6: A6 45     LDX $45
0F/CAD8: BD 00 B0  LDA $B000,X        ; 00/B000 (map initial x positions)
0F/CADB: 29 1F     AND #$1F
0F/CADD: 38        SEC 
0F/CADE: E9 07     SBC #$07
0F/CAE0: 29 3F     AND #$3F
0F/CAE2: 85 29     STA $29            ; set x position
0F/CAE4: BD 00 B1  LDA $B100,X        ; 00/B100 (map initial y positions)
0F/CAE7: 38        SEC 
0F/CAE8: E9 07     SBC #$07
0F/CAEA: 29 3F     AND #$3F
0F/CAEC: 85 2A     STA $2A            ; set y position
0F/CAEE: 86 48     STX $48            ; set map id
0F/CAF0: 20 41 CA  JSR $CA41          ; map main
0F/CAF3: 68        PLA 
0F/CAF4: 85 48     STA $48
0F/CAF6: 68        PLA 
0F/CAF7: 85 2A     STA $2A
0F/CAF9: 68        PLA 
0F/CAFA: 85 29     STA $29
0F/CAFC: 4C 41 CA  JMP $CA41          ; map main
; $C0: exit (to world map)
0F/CAFF: C9 C0     CMP #$C0
0F/CB01: D0 1D     BNE $CB20          ; other values branch to subroutine ???
0F/CB03: 20 EE D8  JSR $D8EE          ; screen wipe out
0F/CB06: A9 00     LDA #$00
0F/CB08: 20 03 FE  JSR $FE03          ; switch prg bank
0F/CB0B: A6 45     LDX $45
0F/CB0D: BD C0 B4  LDA $B4C0,X
0F/CB10: 38        SEC 
0F/CB11: E9 07     SBC #$07
0F/CB13: 85 27     STA $27
0F/CB15: BD E0 B4  LDA $B4E0,X
0F/CB18: 38        SEC 
0F/CB19: E9 07     SBC #$07
0F/CB1B: 85 28     STA $28
0F/CB1D: 4C B8 C0  JMP $C0B8          ; world map main

; [ check player input ]

0F/CB20: A5 24     LDA $24
0F/CB22: F0 5F     BEQ $CB83
; A button
0F/CB24: A9 00     LDA #$00
0F/CB26: 85 24     STA $24
0F/CB28: 20 00 FE  JSR $FE00          ; wait for vblank
0F/CB2B: 20 46 C7  JSR $C746          ; update sound
0F/CB2E: A5 33     LDA $33            ; facing direction
0F/CB30: 20 21 CD  JSR $CD21          ; get tile in facing direction
0F/CB33: 20 DE CC  JSR $CCDE          ; check npcs
0F/CB36: 86 67     STX $67
0F/CB38: 08        PHP 
0F/CB39: A2 08     LDX #$08
0F/CB3B: A9 03     LDA #$03
0F/CB3D: 20 03 FE  JSR $FE03          ; switch prg bank
0F/CB40: 20 03 A0  JSR $A003          ; 03/A003
0F/CB43: 28        PLP 
0F/CB44: A6 67     LDX $67
0F/CB46: 90 03     BCC $CB4B          ; branch if no npc
0F/CB48: 4C C7 CB  JMP $CBC7          ; execute npc event
0F/CB4B: 20 85 CD  JSR $CD85          ; check treasures and locked doors
0F/CB4E: 85 92     STA $92
0F/CB50: A5 44     LDA $44
0F/CB52: 29 20     AND #$20
0F/CB54: 05 43     ORA $43
0F/CB56: 85 44     STA $44
0F/CB58: A9 00     LDA #$00
0F/CB5A: 85 94     STA $94
0F/CB5C: A9 84     LDA #$84           ; text offset $0200
0F/CB5E: 85 95     STA $95
0F/CB60: A9 0A     LDA #$0A           ; bank $0A
0F/CB62: 85 93     STA $93
; npc dialogue jumps here
0F/CB64: 20 D8 E8  JSR $E8D8          ; display map dialogue
0F/CB67: 20 00 FE  JSR $FE00          ; wait for vblank
0F/CB6A: A9 02     LDA #$02
0F/CB6C: 8D 14 40  STA $4014
0F/CB6F: 20 F5 CD  JSR $CDF5          ; update ppu registers
0F/CB72: A9 1E     LDA #$1E
0F/CB74: 8D 01 20  STA $2001
0F/CB77: 20 46 C7  JSR $C746          ; update sound
0F/CB7A: A9 00     LDA #$00
0F/CB7C: 85 24     STA $24
0F/CB7E: 85 23     STA $23
0F/CB80: 85 22     STA $22
0F/CB82: 60        RTS 
; start button
0F/CB83: A5 23     LDA $23
0F/CB85: F0 14     BEQ $CB9B
0F/CB87: A9 00     LDA #$00
0F/CB89: 85 23     STA $23
0F/CB8B: A9 02     LDA #$02
0F/CB8D: 20 A4 DD  JSR $DDA4          ; fade in/out
0F/CB90: A9 0E     LDA #$0E
0F/CB92: 20 03 FE  JSR $FE03          ; switch prg bank
0F/CB95: 20 C4 AC  JSR $ACC4          ; 0E/ACC4 (main menu)
0F/CB98: 4C 7B D0  JMP $D07B          ; reload map
; select button
0F/CB9B: A5 22     LDA $22
0F/CB9D: F0 14     BEQ $CBB3
0F/CB9F: A9 00     LDA #$00
0F/CBA1: 85 22     STA $22
0F/CBA3: A9 02     LDA #$02
0F/CBA5: 20 A4 DD  JSR $DDA4          ; fade in/out
0F/CBA8: A9 0E     LDA #$0E
0F/CBAA: 20 03 FE  JSR $FE03          ; switch prg bank
0F/CBAD: 20 E2 F0  JSR $F0E2          ; row menu
0F/CBB0: 4C 7B D0  JMP $D07B          ; reload map
; direction button
0F/CBB3: 20 5C DB  JSR $DB5C          ; update joypad input
0F/CBB6: A5 20     LDA $20
0F/CBB8: 29 0F     AND #$0F
0F/CBBA: D0 01     BNE $CBBD
0F/CBBC: 60        RTS 
0F/CBBD: 85 33     STA $33            ; set player facing direction
0F/CBBF: 20 FC CB  JSR $CBFC          ; check tile passability
0F/CBC2: B0 F8     BCS $CBBC          ; return if impassable
0F/CBC4: 4C 09 D2  JMP $D209          ; init player movement

; [ execute npc event ]

0F/CBC7: A5 43     LDA $43
0F/CBC9: 85 44     STA $44
0F/CBCB: A9 0E     LDA #$0E
0F/CBCD: 20 03 FE  JSR $FE03          ; switch prg bank
0F/CBD0: 20 94 97  JSR $9794          ; 0E/9794 (check npc script)
0F/CBD3: 85 92     STA $92            ; set dialogue id
0F/CBD5: A5 A0     LDA $A0
0F/CBD7: C9 60     CMP #$60
0F/CBD9: 90 04     BCC $CBDF
0F/CBDB: C9 C0     CMP #$C0
0F/CBDD: 90 0F     BCC $CBEE          ; npc $60-$BF are text only
0F/CBDF: A5 44     LDA $44
0F/CBE1: 29 E0     AND #$E0
0F/CBE3: 05 6C     ORA $6C
0F/CBE5: F0 0A     BEQ $CBF1
0F/CBE7: A5 6C     LDA $6C
0F/CBE9: F0 03     BEQ $CBEE          ; branch if no event
0F/CBEB: 20 F4 C6  JSR $C6F4          ; init event
0F/CBEE: 4C 64 CB  JMP $CB64          ; display map dialogue
0F/CBF1: 20 45 91  JSR $9145          ; 0E/9145 (npc dialogue)
0F/CBF4: A5 6C     LDA $6C
0F/CBF6: F0 03     BEQ $CBFB          ; return if no event
0F/CBF8: 4C F4 C6  JMP $C6F4          ; init event
0F/CBFB: 60        RTS 

; [ check tile passability ]

; return carry clear if passable

0F/CBFC: 20 21 CD  JSR $CD21          ; get tile in facing direction
0F/CBFF: 20 5B CC  JSR $CC5B
0F/CC02: B0 4D     BCS $CC51
0F/CC04: 20 54 CD  JSR $CD54          ; get tile properties
0F/CC07: A5 44     LDA $44
0F/CC09: C9 40     CMP #$40
0F/CC0B: 90 02     BCC $CC0F
0F/CC0D: 18        CLC 
0F/CC0E: 60        RTS 
0F/CC0F: C9 10     CMP #$10
0F/CC11: 90 0E     BCC $CC21
0F/CC13: 29 30     AND #$30
0F/CC15: C9 20     CMP #$20
0F/CC17: 90 38     BCC $CC51
0F/CC19: F0 03     BEQ $CC1E
0F/CC1B: 4C 87 CF  JMP $CF87
0F/CC1E: 4C 87 CF  JMP $CF87
0F/CC21: 29 09     AND #$09
0F/CC23: C9 01     CMP #$01
0F/CC25: F0 2A     BEQ $CC51
0F/CC27: C9 08     CMP #$08
0F/CC29: F0 05     BEQ $CC30
0F/CC2B: 4C 57 CF  JMP $CF57          ; check random battle
0F/CC2E: 18        CLC 
0F/CC2F: 60        RTS 
; trigger tile
0F/CC30: A5 6C     LDA $6C
0F/CC32: D0 FA     BNE $CC2E
0F/CC34: A5 45     LDA $45
0F/CC36: C9 0F     CMP #$0F
0F/CC38: 90 03     BCC $CC3D
0F/CC3A: 4C 50 CF  JMP $CF50
0F/CC3D: 0A        ASL 
0F/CC3E: AA        TAX 
0F/CC3F: BD ED CE  LDA $CEED,X        ; trigger type jump table
0F/CC42: 85 80     STA $80
0F/CC44: BD EE CE  LDA $CEEE,X
0F/CC47: 85 81     STA $81
0F/CC49: A9 0E     LDA #$0E
0F/CC4B: 20 03 FE  JSR $FE03          ; switch prg bank
0F/CC4E: 6C 80 00  JMP ($0080)
0F/CC51: A9 00     LDA #$00
0F/CC53: 85 45     STA $45
0F/CC55: A5 43     LDA $43
0F/CC57: 85 44     STA $44
0F/CC59: 38        SEC 
0F/CC5A: 60        RTS 

; [ check if player is touching an npc ]

; $84: x position
; $85: y position
; set carry if player is touching an npc

0F/CC5B: A2 00     LDX #$00
0F/CC5D: BD 00 75  LDA $7500,X
0F/CC60: F0 18     BEQ $CC7A
0F/CC62: BD 02 75  LDA $7502,X
0F/CC65: C5 84     CMP $84
0F/CC67: D0 11     BNE $CC7A
0F/CC69: BD 03 75  LDA $7503,X
0F/CC6C: C5 85     CMP $85
0F/CC6E: D0 0A     BNE $CC7A
0F/CC70: BD 0B 75  LDA $750B,X
0F/CC73: 29 03     AND #$03
0F/CC75: 9D 0B 75  STA $750B,X
0F/CC78: 38        SEC 
0F/CC79: 60        RTS 
0F/CC7A: 8A        TXA 
0F/CC7B: 18        CLC 
0F/CC7C: 69 10     ADC #$10
0F/CC7E: AA        TAX 
0F/CC7F: C9 C0     CMP #$C0
0F/CC81: 90 DA     BCC $CC5D
0F/CC83: A2 00     LDX #$00
0F/CC85: BD 00 75  LDA $7500,X
0F/CC88: F0 49     BEQ $CCD3
0F/CC8A: BD 08 75  LDA $7508,X
0F/CC8D: 30 1A     BMI $CCA9
0F/CC8F: BD 09 75  LDA $7509,X
0F/CC92: 10 2A     BPL $CCBE
0F/CC94: BD 04 75  LDA $7504,X
0F/CC97: C5 84     CMP $84
0F/CC99: D0 38     BNE $CCD3
0F/CC9B: BD 05 75  LDA $7505,X
0F/CC9E: 18        CLC 
0F/CC9F: 69 01     ADC #$01
0F/CCA1: 29 3F     AND #$3F
0F/CCA3: C5 85     CMP $85
0F/CCA5: D0 2C     BNE $CCD3
0F/CCA7: F0 23     BEQ $CCCC
0F/CCA9: BD 04 75  LDA $7504,X
0F/CCAC: 18        CLC 
0F/CCAD: 69 01     ADC #$01
0F/CCAF: 29 3F     AND #$3F
0F/CCB1: C5 84     CMP $84
0F/CCB3: D0 1E     BNE $CCD3
0F/CCB5: BD 05 75  LDA $7505,X
0F/CCB8: C5 85     CMP $85
0F/CCBA: D0 17     BNE $CCD3
0F/CCBC: F0 0E     BEQ $CCCC
0F/CCBE: BD 04 75  LDA $7504,X
0F/CCC1: C5 84     CMP $84
0F/CCC3: D0 0E     BNE $CCD3
0F/CCC5: BD 05 75  LDA $7505,X
0F/CCC8: C5 85     CMP $85
0F/CCCA: D0 07     BNE $CCD3
0F/CCCC: A9 01     LDA #$01
0F/CCCE: 9D 0D 75  STA $750D,X
0F/CCD1: 18        CLC 
0F/CCD2: 60        RTS 
0F/CCD3: 8A        TXA 
0F/CCD4: 18        CLC 
0F/CCD5: 69 10     ADC #$10
0F/CCD7: AA        TAX 
0F/CCD8: C9 C0     CMP #$C0
0F/CCDA: 90 A9     BCC $CC85
0F/CCDC: 18        CLC 
0F/CCDD: 60        RTS 

; [ check npcs ]

; return carry set if there is an npc

0F/CCDE: A2 00     LDX #$00
0F/CCE0: BD 00 75  LDA $7500,X
0F/CCE3: F0 31     BEQ $CD16
0F/CCE5: BD 06 75  LDA $7506,X
0F/CCE8: C9 08     CMP #$08
0F/CCEA: BD 04 75  LDA $7504,X
0F/CCED: 69 00     ADC #$00
0F/CCEF: 29 3F     AND #$3F
0F/CCF1: C5 84     CMP $84
0F/CCF3: D0 21     BNE $CD16
0F/CCF5: BD 07 75  LDA $7507,X
0F/CCF8: C9 08     CMP #$08
0F/CCFA: BD 05 75  LDA $7505,X
0F/CCFD: 69 00     ADC #$00
0F/CCFF: 29 3F     AND #$3F
0F/CD01: C5 85     CMP $85
0F/CD03: D0 11     BNE $CD16
0F/CD05: BD 01 75  LDA $7501,X
0F/CD08: 29 20     AND #$20
0F/CD0A: D0 08     BNE $CD14
0F/CD0C: BD 0D 75  LDA $750D,X
0F/CD0F: 09 80     ORA #$80
0F/CD11: 9D 0D 75  STA $750D,X
0F/CD14: 38        SEC 
0F/CD15: 60        RTS 
0F/CD16: 8A        TXA 
0F/CD17: 18        CLC 
0F/CD18: 69 10     ADC #$10
0F/CD1A: AA        TAX 
0F/CD1B: C9 C0     CMP #$C0
0F/CD1D: 90 C1     BCC $CCE0
0F/CD1F: 18        CLC 
0F/CD20: 60        RTS 

; [ get tile in facing direction ]

0F/CD21: 4A        LSR 
0F/CD22: B0 14     BCS $CD38
0F/CD24: 4A        LSR 
0F/CD25: B0 18     BCS $CD3F
0F/CD27: 4A        LSR 
0F/CD28: B0 07     BCS $CD31
0F/CD2A: A2 07     LDX #$07
0F/CD2C: A0 06     LDY #$06
0F/CD2E: 4C 43 CD  JMP $CD43
0F/CD31: A2 07     LDX #$07
0F/CD33: A0 08     LDY #$08
0F/CD35: 4C 43 CD  JMP $CD43
0F/CD38: A2 08     LDX #$08
0F/CD3A: A0 07     LDY #$07
0F/CD3C: 4C 43 CD  JMP $CD43
0F/CD3F: A2 06     LDX #$06
0F/CD41: A0 07     LDY #$07
0F/CD43: 8A        TXA 
0F/CD44: 18        CLC 
0F/CD45: 65 29     ADC $29
0F/CD47: 29 3F     AND #$3F
0F/CD49: 85 84     STA $84
0F/CD4B: 98        TYA 
0F/CD4C: 18        CLC 
0F/CD4D: 65 2A     ADC $2A
0F/CD4F: 29 3F     AND #$3F
0F/CD51: 85 85     STA $85
0F/CD53: 60        RTS 

; [ get tile properties ]

0F/CD54: A0 70     LDY #$70
0F/CD56: A5 84     LDA $84
0F/CD58: 05 85     ORA $85
0F/CD5A: 29 20     AND #$20
0F/CD5C: D0 1C     BNE $CD7A
0F/CD5E: A5 85     LDA $85
0F/CD60: 29 1F     AND #$1F
0F/CD62: 4A        LSR 
0F/CD63: 4A        LSR 
0F/CD64: 4A        LSR 
0F/CD65: 09 70     ORA #$70
0F/CD67: 85 81     STA $81
0F/CD69: A5 85     LDA $85
0F/CD6B: 0A        ASL 
0F/CD6C: 0A        ASL 
0F/CD6D: 0A        ASL 
0F/CD6E: 0A        ASL 
0F/CD6F: 0A        ASL 
0F/CD70: 05 84     ORA $84
0F/CD72: 85 80     STA $80
0F/CD74: A0 00     LDY #$00
0F/CD76: B1 80     LDA ($80),Y
0F/CD78: 0A        ASL 
0F/CD79: A8        TAY 
0F/CD7A: B9 00 04  LDA $0400,Y
0F/CD7D: 85 44     STA $44
0F/CD7F: B9 01 04  LDA $0401,Y
0F/CD82: 85 45     STA $45
0F/CD84: 60        RTS 

; [ check treasures and locked doors ]

; return text id in A

0F/CD85: 20 54 CD  JSR $CD54          ; get tile properties
0F/CD88: A5 44     LDA $44
0F/CD8A: 29 30     AND #$30
0F/CD8C: F0 0F     BEQ $CD9D
0F/CD8E: C9 10     CMP #$10
0F/CD90: F0 10     BEQ $CDA2
0F/CD92: C9 30     CMP #$30
0F/CD94: D0 07     BNE $CD9D
; $30
0F/CD96: A9 00     LDA #$00
0F/CD98: 85 44     STA $44
0F/CD9A: A9 04     LDA #$04           ; $0204: "You need a key."
0F/CD9C: 60        RTS 
; $00, $20
0F/CD9D: A9 00     LDA #$00
0F/CD9F: 85 44     STA $44
0F/CDA1: 60        RTS 
; $10
0F/CDA2: A5 80     LDA $80
0F/CDA4: 48        PHA 
0F/CDA5: A5 81     LDA $81
0F/CDA7: 48        PHA 
0F/CDA8: 20 A5 CF  JSR $CFA5          ; open treasure chest
0F/CDAB: 20 48 EF  JSR $EF48          ; give treasure
0F/CDAE: C9 03     CMP #$03
0F/CDB0: D0 0D     BNE $CDBF          ; branch if inventory is not full
0F/CDB2: A9 00     LDA #$00
0F/CDB4: 85 0D     STA $0D            ; don't draw open treasure chest
0F/CDB6: 85 44     STA $44
0F/CDB8: 85 45     STA $45
0F/CDBA: 68        PLA 
0F/CDBB: 68        PLA 
0F/CDBC: A9 03     LDA #$03           ; $0203: "You're carrying too much!"
0F/CDBE: 60        RTS 
0F/CDBF: 85 82     STA $82
0F/CDC1: 68        PLA 
0F/CDC2: 85 81     STA $81
0F/CDC4: 68        PLA 
0F/CDC5: 85 80     STA $80
0F/CDC7: A0 00     LDY #$00
0F/CDC9: A9 7F     LDA #$7F
0F/CDCB: 91 80     STA ($80),Y
0F/CDCD: A5 82     LDA $82
0F/CDCF: 60        RTS 

; [ update scrolling (normal map) ]

0F/CDD0: A9 1E     LDA #$1E
0F/CDD2: 8D 01 20  STA $2001
0F/CDD5: 20 2B D0  JSR $D02B          ; draw open door/treasure chest
0F/CDD8: AD 02 20  LDA $2002          ; latch ppu
0F/CDDB: A5 34     LDA $34
0F/CDDD: F0 16     BEQ $CDF5          ; branch if player is not moving
0F/CDDF: 20 6F CE  JSR $CE6F          ; update player movement
0F/CDE2: 20 E7 C8  JSR $C8E7          ; do venom step damage
0F/CDE5: A5 44     LDA $44
0F/CDE7: 29 08     AND #$08
0F/CDE9: C9 08     CMP #$08
0F/CDEB: D0 07     BNE $CDF4          ; branch if not a damage tile
0F/CDED: A5 45     LDA $45
0F/CDEF: D0 03     BNE $CDF4
0F/CDF1: 20 C7 C8  JSR $C8C7          ; do floor damage
0F/CDF4: 60        RTS 

; [ update ppu registers (normal map) ]

0F/CDF5: A5 FD     LDA $FD
0F/CDF7: 85 FF     STA $FF
0F/CDF9: 8D 00 20  STA $2000
0F/CDFC: A5 29     LDA $29
0F/CDFE: 0A        ASL 
0F/CDFF: 0A        ASL 
0F/CE00: 0A        ASL 
0F/CE01: 0A        ASL 
0F/CE02: 05 35     ORA $35
0F/CE04: 8D 05 20  STA $2005
0F/CE07: A5 2F     LDA $2F
0F/CE09: 0A        ASL 
0F/CE0A: 0A        ASL 
0F/CE0B: 0A        ASL 
0F/CE0C: 0A        ASL 
0F/CE0D: 05 36     ORA $36
0F/CE0F: 8D 05 20  STA $2005
0F/CE12: 60        RTS 

; [ update player movement (normal map) ]

; subroutine starts at 0F/CE6F

0F/CE13: A5 32     LDA $32
0F/CE15: F0 03     BEQ $CE1A
0F/CE17: 20 1B D2  JSR $D21B          ; update map background
0F/CE1A: 20 F5 CD  JSR $CDF5          ; update ppu registers
0F/CE1D: A5 35     LDA $35
0F/CE1F: 18        CLC 
0F/CE20: 65 34     ADC $34
0F/CE22: 29 0F     AND #$0F
0F/CE24: F0 03     BEQ $CE29
0F/CE26: 85 35     STA $35
0F/CE28: 60        RTS 
0F/CE29: 85 34     STA $34            ; clear movement speed
0F/CE2B: 85 35     STA $35
0F/CE2D: A5 29     LDA $29
0F/CE2F: 18        CLC 
0F/CE30: 69 01     ADC #$01
0F/CE32: 29 3F     AND #$3F
0F/CE34: 85 29     STA $29
0F/CE36: 29 10     AND #$10
0F/CE38: 46 FD     LSR $FD
0F/CE3A: C9 10     CMP #$10
0F/CE3C: 26 FD     ROL $FD
0F/CE3E: 60        RTS 
0F/CE3F: A5 32     LDA $32
0F/CE41: F0 03     BEQ $CE46
0F/CE43: 20 1B D2  JSR $D21B          ; update map background
0F/CE46: 20 F5 CD  JSR $CDF5          ; update ppu registers
0F/CE49: A5 35     LDA $35
0F/CE4B: D0 13     BNE $CE60
0F/CE4D: A5 29     LDA $29
0F/CE4F: 38        SEC 
0F/CE50: E9 01     SBC #$01
0F/CE52: 29 3F     AND #$3F
0F/CE54: 85 29     STA $29
0F/CE56: 29 10     AND #$10
0F/CE58: 46 FD     LSR $FD
0F/CE5A: C9 10     CMP #$10
0F/CE5C: 26 FD     ROL $FD
0F/CE5E: A5 35     LDA $35
0F/CE60: 38        SEC 
0F/CE61: E5 34     SBC $34
0F/CE63: 29 0F     AND #$0F
0F/CE65: F0 03     BEQ $CE6A
0F/CE67: 85 35     STA $35
0F/CE69: 60        RTS 
0F/CE6A: 85 34     STA $34            ; clear movement speed
0F/CE6C: 85 35     STA $35
0F/CE6E: 60        RTS 
; subroutine starts here
0F/CE6F: A5 33     LDA $33
0F/CE71: 4A        LSR 
0F/CE72: B0 9F     BCS $CE13
0F/CE74: 4A        LSR 
0F/CE75: B0 C8     BCS $CE3F
0F/CE77: 4A        LSR 
0F/CE78: B0 03     BCS $CE7D
0F/CE7A: 4C B4 CE  JMP $CEB4
0F/CE7D: A5 32     LDA $32
0F/CE7F: F0 09     BEQ $CE8A
0F/CE81: A5 36     LDA $36
0F/CE83: C9 08     CMP #$08
0F/CE85: D0 03     BNE $CE8A
0F/CE87: 20 1B D2  JSR $D21B          ; update map background
0F/CE8A: 20 F5 CD  JSR $CDF5          ; update ppu registers
0F/CE8D: A5 36     LDA $36
0F/CE8F: 18        CLC 
0F/CE90: 65 34     ADC $34
0F/CE92: 29 0F     AND #$0F
0F/CE94: F0 03     BEQ $CE99
0F/CE96: 85 36     STA $36
0F/CE98: 60        RTS 
0F/CE99: 85 34     STA $34            ; clear movement speed
0F/CE9B: 85 36     STA $36
0F/CE9D: A5 2A     LDA $2A
0F/CE9F: 18        CLC 
0F/CEA0: 69 01     ADC #$01
0F/CEA2: 29 3F     AND #$3F
0F/CEA4: 85 2A     STA $2A
0F/CEA6: A5 2F     LDA $2F
0F/CEA8: 18        CLC 
0F/CEA9: 69 01     ADC #$01
0F/CEAB: C9 0F     CMP #$0F
0F/CEAD: 90 02     BCC $CEB1
0F/CEAF: E9 0F     SBC #$0F
0F/CEB1: 85 2F     STA $2F
0F/CEB3: 60        RTS 
0F/CEB4: A5 32     LDA $32
0F/CEB6: F0 09     BEQ $CEC1
0F/CEB8: A5 36     LDA $36
0F/CEBA: C9 08     CMP #$08
0F/CEBC: D0 03     BNE $CEC1
0F/CEBE: 20 1B D2  JSR $D21B          ; update map background
0F/CEC1: 20 F5 CD  JSR $CDF5          ; update ppu registers
0F/CEC4: A5 36     LDA $36
0F/CEC6: D0 16     BNE $CEDE
0F/CEC8: A5 2A     LDA $2A
0F/CECA: 38        SEC 
0F/CECB: E9 01     SBC #$01
0F/CECD: 29 3F     AND #$3F
0F/CECF: 85 2A     STA $2A
0F/CED1: A5 2F     LDA $2F
0F/CED3: 38        SEC 
0F/CED4: E9 01     SBC #$01
0F/CED6: B0 02     BCS $CEDA
0F/CED8: 69 0F     ADC #$0F
0F/CEDA: 85 2F     STA $2F
0F/CEDC: A5 36     LDA $36
0F/CEDE: 38        SEC 
0F/CEDF: E5 34     SBC $34
0F/CEE1: 29 0F     AND #$0F
0F/CEE3: F0 03     BEQ $CEE8
0F/CEE5: 85 36     STA $36
0F/CEE7: 60        RTS 
0F/CEE8: 85 34     STA $34            ; clear movement speed
0F/CEEA: 85 36     STA $36
0F/CEEC: 60        RTS 

; trigger type jump table
0F/CEED: CF0D CF0D CF0D CF0F CF18 CF36 CF47 CF50
0F/CEFD: CF50 CF50 CF50 CF50 CF50 CF50 CF50 CF50

; 0, 1, 2: no trigger (passable)
0F/CF0D: 18        CLC 
0F/CF0E: 60        RTS 
; 3: 
0F/CF0F: A0 01     LDY #$01
0F/CF11: 20 9E 98  JSR $989E          ; check event switch
0F/CF14: D0 F7     BNE $CF0D
0F/CF16: F0 38     BEQ $CF50
; 4: 
0F/CF18: AD 1A 60  LDA $601A
0F/CF1B: 29 40     AND #$40
0F/CF1D: F0 EE     BEQ $CF0D
0F/CF1F: A0 37     LDY #$37
0F/CF21: 20 9E 98  JSR $989E          ; check event switch
0F/CF24: D0 E7     BNE $CF0D
0F/CF26: 20 08 F3  JSR $F308          ; check if any main characters are alive
0F/CF29: 90 25     BCC $CF50
0F/CF2B: AD 01 61  LDA $6101
0F/CF2E: 29 1F     AND #$1F
0F/CF30: 8D 01 61  STA $6101
0F/CF33: 4C 50 CF  JMP $CF50
; 5: 
0F/CF36: A0 03     LDY #$03
0F/CF38: 20 9E 98  JSR $989E          ; check event switch
0F/CF3B: F0 D0     BEQ $CF0D
0F/CF3D: A0 20     LDY #$20
0F/CF3F: 20 9E 98  JSR $989E          ; check event switch
0F/CF42: F0 C9     BEQ $CF0D
0F/CF44: 4C 26 CF  JMP $CF26
; 6: 
0F/CF47: A0 28     LDY #$28
0F/CF49: 20 9E 98  JSR $989E          ; check event switch
0F/CF4C: F0 BF     BEQ $CF0D
0F/CF4E: D0 00     BNE $CF50
; 7-F: event
0F/CF50: A5 45     LDA $45
0F/CF52: 20 F4 C6  JSR $C6F4          ; init event
0F/CF55: 18        CLC 
0F/CF56: 60        RTS 

; [ check random battle ]

0F/CF57: A5 6C     LDA $6C
0F/CF59: D0 2A     BNE $CF85          ; return if an event is running
0F/CF5B: AD 12 60  LDA $6012
0F/CF5E: 4A        LSR 
0F/CF5F: 90 0A     BCC $CF6B
0F/CF61: A5 48     LDA $48
0F/CF63: C9 40     CMP #$40
0F/CF65: 90 04     BCC $CF6B
0F/CF67: C9 50     CMP #$50
0F/CF69: 90 1A     BCC $CF85
0F/CF6B: 20 AD C5  JSR $C5AD          ; get random number
0F/CF6E: C5 F8     CMP $F8
0F/CF70: B0 13     BCS $CF85
0F/CF72: A9 0B     LDA #$0B
0F/CF74: 20 03 FE  JSR $FE03          ; switch prg bank
0F/CF77: A6 48     LDX $48
0F/CF79: BD 00 81  LDA $8100,X        ; 0B/8100 
0F/CF7C: 20 79 C5  JSR $C579          ; choose from battle group
0F/CF7F: A5 43     LDA $43
0F/CF81: 09 20     ORA #$20
0F/CF83: 85 44     STA $44
0F/CF85: 18        CLC 
0F/CF86: 60        RTS 

; [ open door ]

0F/CF87: A9 01     LDA #$01
0F/CF89: 85 0D     STA $0D
0F/CF8B: A9 05     LDA #$05
0F/CF8D: 18        CLC 
0F/CF8E: 65 2F     ADC $2F
0F/CF90: C9 0F     CMP #$0F
0F/CF92: 90 02     BCC $CF96
0F/CF94: E9 0F     SBC #$0F
0F/CF96: 85 0F     STA $0F
0F/CF98: A5 84     LDA $84
0F/CF9A: 85 0E     STA $0E
0F/CF9C: 20 5F D0  JSR $D05F          ; open door sound effect
0F/CF9F: A9 80     LDA #$80
0F/CFA1: 85 44     STA $44
0F/CFA3: 18        CLC 
0F/CFA4: 60        RTS 

; [ open treasure chest ]

0F/CFA5: A9 09     LDA #$09           ; open treasure chest tile
0F/CFA7: 85 0D     STA $0D
0F/CFA9: A2 07     LDX #$07
0F/CFAB: A5 33     LDA $33            ; offset in facing direction
0F/CFAD: 29 0C     AND #$0C
0F/CFAF: F0 08     BEQ $CFB9
0F/CFB1: A2 08     LDX #$08
0F/CFB3: C9 04     CMP #$04
0F/CFB5: F0 02     BEQ $CFB9
0F/CFB7: A2 06     LDX #$06
0F/CFB9: 8A        TXA 
0F/CFBA: 18        CLC 
0F/CFBB: 65 2F     ADC $2F
0F/CFBD: C9 0F     CMP #$0F
0F/CFBF: 90 02     BCC $CFC3
0F/CFC1: E9 0F     SBC #$0F
0F/CFC3: 85 0F     STA $0F            ; open treasure chest position
0F/CFC5: A5 84     LDA $84
0F/CFC7: 85 0E     STA $0E
0F/CFC9: 60        RTS 

; [ update bg for open door/treasure chest ]

0F/CFCA: A6 0F     LDX $0F
0F/CFCC: A5 0E     LDA $0E
0F/CFCE: 0A        ASL 
0F/CFCF: C9 20     CMP #$20
0F/CFD1: B0 0B     BCS $CFDE
0F/CFD3: 1D 21 D3  ORA $D321,X
0F/CFD6: 85 80     STA $80
0F/CFD8: BD 31 D3  LDA $D331,X
0F/CFDB: 4C EB CF  JMP $CFEB
0F/CFDE: 29 1F     AND #$1F
0F/CFE0: 1D 21 D3  ORA $D321,X
0F/CFE3: 85 80     STA $80
0F/CFE5: BD 31 D3  LDA $D331,X
0F/CFE8: 18        CLC 
0F/CFE9: 69 04     ADC #$04
0F/CFEB: 85 81     STA $81
0F/CFED: 8D 06 20  STA $2006
0F/CFF0: A5 80     LDA $80
0F/CFF2: 8D 06 20  STA $2006
0F/CFF5: A6 0D     LDX $0D
0F/CFF7: CA        DEX 
0F/CFF8: BD 1E D0  LDA $D01E,X
0F/CFFB: 8D 07 20  STA $2007
0F/CFFE: BD 1F D0  LDA $D01F,X
0F/D001: 8D 07 20  STA $2007
0F/D004: A5 81     LDA $81
0F/D006: 8D 06 20  STA $2006
0F/D009: A5 80     LDA $80
0F/D00B: 18        CLC 
0F/D00C: 69 20     ADC #$20
0F/D00E: 8D 06 20  STA $2006
0F/D011: BD 20 D0  LDA $D020,X
0F/D014: 8D 07 20  STA $2007
0F/D017: BD 21 D0  LDA $D021,X
0F/D01A: 8D 07 20  STA $2007
0F/D01D: 60        RTS 

0F/D01E: 0A 0B 0C 0D
0F/D022: 0E 0F 10 11
0F/D026: 24 25 22 23

; [ draw open door/treasure chest ]

; subroutine starts at 0F/D02B

0F/D02A: 60        RTS 
; starts here
0F/D02B: A5 0D     LDA $0D
0F/D02D: F0 FB     BEQ $D02A
0F/D02F: A5 34     LDA $34
0F/D031: F0 0A     BEQ $D03D          ; branch if not moving
0F/D033: A5 33     LDA $33
0F/D035: 29 03     AND #$03
0F/D037: F0 04     BEQ $D03D
0F/D039: A5 32     LDA $32
0F/D03B: D0 ED     BNE $D02A
0F/D03D: 20 CA CF  JSR $CFCA          ; update bg for open door/treasure chest
0F/D040: A5 0D     LDA $0D
0F/D042: C9 01     CMP #$01
0F/D044: D0 14     BNE $D05A
0F/D046: A5 0F     LDA $0F
0F/D048: 18        CLC 
0F/D049: 69 01     ADC #$01
0F/D04B: C9 0F     CMP #$0F
0F/D04D: 90 02     BCC $D051
0F/D04F: E9 0F     SBC #$0F
0F/D051: 85 0F     STA $0F
0F/D053: A9 05     LDA #$05
0F/D055: 85 0D     STA $0D
0F/D057: 20 CA CF  JSR $CFCA          ; update bg for open door/treasure chest
0F/D05A: A9 00     LDA #$00
0F/D05C: 85 0D     STA $0D
0F/D05E: 60        RTS 

; [ open door sound effect ]

0F/D05F: A9 0C     LDA #$0C
0F/D061: 8D 0C 40  STA $400C
0F/D064: A9 0E     LDA #$0E
0F/D066: 8D 0E 40  STA $400E
0F/D069: A9 30     LDA #$30
0F/D06B: 8D 0F 40  STA $400F
0F/D06E: 60        RTS 

; [ load map ]

0F/D06F: 20 83 D0  JSR $D083          ; load map
0F/D072: 20 9A D0  JSR $D09A          ; init map
0F/D075: 20 3C D1  JSR $D13C          ; no effect
0F/D078: 4C C9 D8  JMP $D8C9          ; screen wipe in

; [ reload map ]

; after battle or menu

0F/D07B: 20 9A D0  JSR $D09A          ; init map
0F/D07E: A9 03     LDA #$03
0F/D080: 4C A4 DD  JMP $DDA4          ; fade in/out

; [ load map ]

0F/D083: A9 01     LDA #$01
0F/D085: 85 2D     STA $2D
0F/D087: A9 00     LDA #$00
0F/D089: 8D 01 20  STA $2001
0F/D08C: 20 41 D3  JSR $D341          ; load map data
0F/D08F: A2 07     LDX #$07           ; load npcs
0F/D091: A9 03     LDA #$03
0F/D093: 20 03 FE  JSR $FE03          ; switch prg bank
0F/D096: 20 03 A0  JSR $A003          ; 03/A003 (object command)
0F/D099: 60        RTS 

; [ init map ]

0F/D09A: A9 00     LDA #$00
0F/D09C: 85 37     STA $37
0F/D09E: 8D 01 20  STA $2001
0F/D0A1: 8D 0C 40  STA $400C
0F/D0A4: 85 22     STA $22
0F/D0A6: 85 23     STA $23
0F/D0A8: 85 24     STA $24
0F/D0AA: 85 25     STA $25
0F/D0AC: 20 97 E4  JSR $E497
0F/D0AF: A9 00     LDA #$00
0F/D0B1: 20 03 FE  JSR $FE03          ; switch prg bank
0F/D0B4: 20 06 9C  JSR $9C06          ; 00/9C06 (load map palette)
0F/D0B7: A5 48     LDA $48
0F/D0B9: 4A        LSR 
0F/D0BA: 4A        LSR 
0F/D0BB: 4A        LSR 
0F/D0BC: 4A        LSR 
0F/D0BD: 09 A0     ORA #$A0           ; 00/A000 (map properties)
0F/D0BF: 85 81     STA $81
0F/D0C1: A5 48     LDA $48
0F/D0C3: 0A        ASL 
0F/D0C4: 0A        ASL 
0F/D0C5: 0A        ASL 
0F/D0C6: 0A        ASL 
0F/D0C7: 85 80     STA $80
0F/D0C9: A0 0F     LDY #$0F
0F/D0CB: B1 80     LDA ($80),Y        ; get byte 15 only
0F/D0CD: 09 40     ORA #$40
0F/D0CF: 85 E0     STA $E0            ; play song
0F/D0D1: 20 D3 D1  JSR $D1D3          ; draw sub-map
0F/D0D4: A5 29     LDA $29
0F/D0D6: 29 10     AND #$10
0F/D0D8: C9 10     CMP #$10
0F/D0DA: 2A        ROL 
0F/D0DB: 29 01     AND #$01
0F/D0DD: 09 88     ORA #$88
0F/D0DF: 85 FD     STA $FD
0F/D0E1: 85 FF     STA $FF
0F/D0E3: 20 00 FE  JSR $FE00          ; wait for vblank
0F/D0E6: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0F/D0E9: 20 F5 CD  JSR $CDF5          ; update ppu registers
0F/D0EC: A9 00     LDA #$00
0F/D0EE: 8D 01 20  STA $2001
0F/D0F1: A9 04     LDA #$04            ; facing down
0F/D0F3: 85 33     STA $33
0F/D0F5: A5 29     LDA $29
0F/D0F7: 18        CLC 
0F/D0F8: 69 07     ADC #$07
0F/D0FA: 29 3F     AND #$3F
0F/D0FC: 85 68     STA $68
0F/D0FE: 85 84     STA $84
0F/D100: A5 2A     LDA $2A
0F/D102: 18        CLC 
0F/D103: 69 07     ADC #$07
0F/D105: 29 3F     AND #$3F
0F/D107: 85 85     STA $85
0F/D109: 85 69     STA $69
0F/D10B: 20 54 CD  JSR $CD54          ; get tile properties
0F/D10E: A5 44     LDA $44
0F/D110: 29 06     AND #$06
0F/D112: 85 43     STA $43
0F/D114: A5 44     LDA $44
0F/D116: 29 08     AND #$08
0F/D118: F0 03     BEQ $D11D
0F/D11A: 20 30 CC  JSR $CC30
0F/D11D: A9 00     LDA #$00
0F/D11F: 85 44     STA $44
0F/D121: 85 45     STA $45
0F/D123: A9 0B     LDA #$0B
0F/D125: 20 03 FE  JSR $FE03          ; switch prg bank
0F/D128: A6 48     LDX $48            ; map id
0F/D12A: BD 00 80  LDA $8000,X        ; 0B/8000 (map random battle rates)
0F/D12D: 85 F8     STA $F8            ; set random battle rate
0F/D12F: A9 00     LDA #$00
0F/D131: 20 03 FE  JSR $FE03          ; switch prg bank
0F/D134: BD 00 94  LDA $9400,X        ; 00/9400
0F/D137: 29 80     AND #$80
0F/D139: 85 19     STA $19
0F/D13B: 60        RTS 

; [ no effect ]

0F/D13C: 60        RTS 

; --------------------------------------------------------------------------

; [  ]

0F/D13D: A5 37     LDA $37
0F/D13F: D0 22     BNE $D163          ; return if in menu
0F/D141: A5 38     LDA $38
0F/D143: 4A        LSR 
0F/D144: 85 31     STA $31
0F/D146: A5 3B     LDA $3B
0F/D148: 4A        LSR 
0F/D149: 85 30     STA $30
0F/D14B: A5 3C     LDA $3C
0F/D14D: 4A        LSR 
0F/D14E: 85 86     STA $86
0F/D150: A9 01     LDA #$01
0F/D152: 85 2D     STA $2D
0F/D154: 4C 4E D2  JMP $D24E

; [  ]

0F/D157: A5 37     LDA $37
0F/D159: D0 08     BNE $D163          ; return if in menu
0F/D15B: A5 3C     LDA $3C
0F/D15D: 4A        LSR 
0F/D15E: AA        TAX 
0F/D15F: CA        DEX 
0F/D160: 4C 08 D3  JMP $D308
0F/D163: 60        RTS 

; [ close text window ]

; dialogue window
0F/D164: 20 37 E8  JSR $E837          ; show sprites behind text window
0F/D167: A9 05     LDA #$05
0F/D169: 85 66     STA $66
0F/D16B: A2 06     LDX #$06
0F/D16D: D0 09     BNE $D178
; keyword/item select window
0F/D16F: 20 3D E8  JSR $E83D          ; show sprites behind text window
0F/D172: A9 07     LDA #$07
0F/D174: 85 66     STA $66
0F/D176: A2 0E     LDX #$0E
0F/D178: A5 2F     LDA $2F
0F/D17A: 85 67     STA $67
0F/D17C: 8A        TXA 
0F/D17D: 18        CLC 
0F/D17E: 65 2F     ADC $2F
0F/D180: C9 0F     CMP #$0F
0F/D182: 90 02     BCC $D186
0F/D184: E9 0F     SBC #$0F
0F/D186: 85 2F     STA $2F
0F/D188: A5 69     LDA $69
0F/D18A: 48        PHA 
0F/D18B: A5 2A     LDA $2A
0F/D18D: 48        PHA 
0F/D18E: 8A        TXA 
0F/D18F: 18        CLC 
0F/D190: 65 2A     ADC $2A
0F/D192: 29 3F     AND #$3F
0F/D194: 85 2A     STA $2A
0F/D196: A5 33     LDA $33
0F/D198: 48        PHA 
0F/D199: A9 08     LDA #$08           ; move player up
0F/D19B: 85 33     STA $33
0F/D19D: 20 09 D2  JSR $D209          ; init player movement
0F/D1A0: 20 00 FE  JSR $FE00          ; wait for vblank
0F/D1A3: 20 1B D2  JSR $D21B          ; update map background
0F/D1A6: A5 2F     LDA $2F
0F/D1A8: 48        PHA 
0F/D1A9: A5 67     LDA $67
0F/D1AB: 85 2F     STA $2F
0F/D1AD: 20 F5 CD  JSR $CDF5          ; update ppu registers
0F/D1B0: 68        PLA 
0F/D1B1: 85 2F     STA $2F
0F/D1B3: 20 46 C7  JSR $C746          ; update sound
0F/D1B6: 20 26 D2  JSR $D226
0F/D1B9: C6 66     DEC $66
0F/D1BB: D0 E0     BNE $D19D
0F/D1BD: A5 67     LDA $67
0F/D1BF: 85 2F     STA $2F
0F/D1C1: 68        PLA 
0F/D1C2: 85 33     STA $33
0F/D1C4: 68        PLA 
0F/D1C5: 85 2A     STA $2A
0F/D1C7: 68        PLA 
0F/D1C8: 85 69     STA $69
0F/D1CA: A9 00     LDA #$00
0F/D1CC: 85 34     STA $34            ; clear movement speed
0F/D1CE: A5 57     LDA $57
0F/D1D0: 4C 03 FE  JMP $FE03          ; switch prg bank

; [ draw sub-map ]

0F/D1D3: A9 00     LDA #$00
0F/D1D5: 85 2F     STA $2F
0F/D1D7: A5 2D     LDA $2D
0F/D1D9: 4A        LSR 
0F/D1DA: B0 0A     BCS $D1E6
0F/D1DC: A5 28     LDA $28
0F/D1DE: 18        CLC 
0F/D1DF: 69 0F     ADC #$0F
0F/D1E1: 85 28     STA $28
0F/D1E3: 4C EF D1  JMP $D1EF
0F/D1E6: A5 2A     LDA $2A
0F/D1E8: 18        CLC 
0F/D1E9: 69 0F     ADC #$0F
0F/D1EB: 29 3F     AND #$3F
0F/D1ED: 85 2A     STA $2A
0F/D1EF: A9 08     LDA #$08           ; move player up
0F/D1F1: 85 33     STA $33
0F/D1F3: 20 09 D2  JSR $D209          ; init player movement
0F/D1F6: 20 1B D2  JSR $D21B          ; update map background
0F/D1F9: 20 26 D2  JSR $D226
0F/D1FC: A5 2F     LDA $2F
0F/D1FE: D0 F3     BNE $D1F3
0F/D200: A9 00     LDA #$00
0F/D202: 85 33     STA $33
0F/D204: 85 32     STA $32
0F/D206: 85 34     STA $34            ; clear movement speed
0F/D208: 60        RTS 

; [ init player movement ]

0F/D209: A5 2D     LDA $2D
0F/D20B: 4A        LSR 
0F/D20C: 90 06     BCC $D214          ; branch if on world map
0F/D20E: 20 AD D4  JSR $D4AD          ; init player movement (normal map)
0F/D211: 4C 17 D2  JMP $D217
0F/D214: 20 E2 D3  JSR $D3E2          ; init player movement (world map)
0F/D217: 20 4A D2  JSR $D24A
0F/D21A: 60        RTS 

; [ update map background ]

0F/D21B: 20 6A D6  JSR $D66A          ; update map background tilemap
0F/D21E: 20 FE D2  JSR $D2FE          ; update dialog window attributes
0F/D221: A9 00     LDA #$00
0F/D223: 85 32     STA $32
0F/D225: 60        RTS 

; [  ]

0F/D226: A5 2D     LDA $2D
0F/D228: 4A        LSR 
0F/D229: 90 0C     BCC $D237          ; branch if on world map
0F/D22B: A5 2A     LDA $2A
0F/D22D: 38        SEC 
0F/D22E: E9 01     SBC #$01
0F/D230: 29 3F     AND #$3F
0F/D232: 85 2A     STA $2A
0F/D234: 4C 3E D2  JMP $D23E
0F/D237: A5 28     LDA $28
0F/D239: 38        SEC 
0F/D23A: E9 01     SBC #$01
0F/D23C: 85 28     STA $28
0F/D23E: A5 2F     LDA $2F
0F/D240: 38        SEC 
0F/D241: E9 01     SBC #$01
0F/D243: B0 02     BCS $D247
0F/D245: 69 0F     ADC #$0F
0F/D247: 85 2F     STA $2F
0F/D249: 60        RTS 

; [ update text window tilemap for scrolling ??? ]

0F/D24A: A9 10     LDA #$10
0F/D24C: 85 86     STA $86
; fallthrough

; [  ]

0F/D24E: A5 31     LDA $31
0F/D250: 48        PHA 
0F/D251: A5 30     LDA $30
0F/D253: 48        PHA 
0F/D254: A0 00     LDY #$00
0F/D256: A5 30     LDA $30
0F/D258: A2 0F     LDX #$0F
0F/D25A: 4A        LSR 
0F/D25B: 90 02     BCC $D25F
0F/D25D: A2 F0     LDX #$F0
0F/D25F: 0A        ASL 
0F/D260: 0A        ASL 
0F/D261: 0A        ASL 
0F/D262: 85 80     STA $80
0F/D264: 86 81     STX $81
0F/D266: A5 31     LDA $31
0F/D268: A2 23     LDX #$23
0F/D26A: C9 10     CMP #$10
0F/D26C: 90 04     BCC $D272
0F/D26E: 29 0F     AND #$0F
0F/D270: A2 27     LDX #$27
0F/D272: 86 82     STX $82
0F/D274: A2 33     LDX #$33
0F/D276: 4A        LSR 
0F/D277: 90 02     BCC $D27B
0F/D279: A2 CC     LDX #$CC
0F/D27B: 05 80     ORA $80
0F/D27D: 85 80     STA $80
0F/D27F: 8A        TXA 
0F/D280: 25 81     AND $81
0F/D282: 85 81     STA $81
0F/D284: A5 82     LDA $82
0F/D286: 99 D0 07  STA $07D0,Y
0F/D289: A5 80     LDA $80
0F/D28B: 09 C0     ORA #$C0
0F/D28D: 99 E0 07  STA $07E0,Y
0F/D290: A5 81     LDA $81
0F/D292: 99 F0 07  STA $07F0,Y
0F/D295: A5 2D     LDA $2D
0F/D297: 29 02     AND #$02
0F/D299: D0 11     BNE $D2AC
0F/D29B: A5 31     LDA $31
0F/D29D: 18        CLC 
0F/D29E: 69 01     ADC #$01
0F/D2A0: 29 1F     AND #$1F
0F/D2A2: 85 31     STA $31
0F/D2A4: C8        INY 
0F/D2A5: C4 86     CPY $86
0F/D2A7: B0 18     BCS $D2C1
0F/D2A9: 4C 56 D2  JMP $D256
0F/D2AC: A5 30     LDA $30
0F/D2AE: 18        CLC 
0F/D2AF: 69 01     ADC #$01
0F/D2B1: C9 0F     CMP #$0F
0F/D2B3: 90 02     BCC $D2B7
0F/D2B5: E9 0F     SBC #$0F
0F/D2B7: 85 30     STA $30
0F/D2B9: C8        INY 
0F/D2BA: C0 0F     CPY #$0F
0F/D2BC: B0 03     BCS $D2C1
0F/D2BE: 4C 56 D2  JMP $D256
0F/D2C1: 68        PLA 
0F/D2C2: 85 30     STA $30
0F/D2C4: 68        PLA 
0F/D2C5: 85 31     STA $31
0F/D2C7: A6 86     LDX $86
0F/D2C9: CA        DEX 
0F/D2CA: A5 2D     LDA $2D
0F/D2CC: 29 02     AND #$02
0F/D2CE: F0 01     BEQ $D2D1
0F/D2D0: CA        DEX 
0F/D2D1: BD D0 07  LDA $07D0,X
0F/D2D4: 29 04     AND #$04
0F/D2D6: D0 08     BNE $D2E0
0F/D2D8: BD E0 07  LDA $07E0,X
0F/D2DB: 29 3F     AND #$3F
0F/D2DD: 4C E7 D2  JMP $D2E7
0F/D2E0: BD E0 07  LDA $07E0,X
0F/D2E3: 29 3F     AND #$3F
0F/D2E5: 09 40     ORA #$40
0F/D2E7: A8        TAY 
0F/D2E8: B9 00 03  LDA $0300,Y
0F/D2EB: 5D C0 07  EOR $07C0,X
0F/D2EE: 3D F0 07  AND $07F0,X
0F/D2F1: 59 00 03  EOR $0300,Y
0F/D2F4: 99 00 03  STA $0300,Y
0F/D2F7: 9D F0 07  STA $07F0,X
0F/D2FA: CA        DEX 
0F/D2FB: 10 D4     BPL $D2D1
0F/D2FD: 60        RTS 

; [ update dialog window attributes ]

0F/D2FE: A5 2D     LDA $2D
0F/D300: A2 0F     LDX #$0F
0F/D302: 29 02     AND #$02
0F/D304: F0 02     BEQ $D308          ; branch if moving vertically
0F/D306: A2 0E     LDX #$0E
0F/D308: AD 02 20  LDA $2002
0F/D30B: BD D0 07  LDA $07D0,X        ; ppu address
0F/D30E: 8D 06 20  STA $2006
0F/D311: BD E0 07  LDA $07E0,X
0F/D314: 8D 06 20  STA $2006
0F/D317: BD F0 07  LDA $07F0,X        ; text window attribute data
0F/D31A: 8D 07 20  STA $2007
0F/D31D: CA        DEX 
0F/D31E: 10 EB     BPL $D30B
0F/D320: 60        RTS 

0F/D321: 00 40 80 C0 00 40 80 C0 00 40 80 C0 00 40 80 C0
0F/D331: 20 20 20 20 21 21 21 21 22 22 22 22 23 23 23 23

; --------------------------------------------------------------------------

; [ load map data ]

0F/D341: A9 00     LDA #$00
0F/D343: 20 03 FE  JSR $FE03          ; switch prg bank
0F/D346: A6 48     LDX $48            ; map id
0F/D348: BD 00 B2  LDA $B200,X        ; 00/B200 (tilemap id for each map)
0F/D34B: 48        PHA 
0F/D34C: 0A        ASL 
0F/D34D: 2A        ROL 
0F/D34E: 29 01     AND #$01           ; bank 04 or 05
0F/D350: 09 04     ORA #$04
0F/D352: 20 03 FE  JSR $FE03          ; switch prg bank
0F/D355: 68        PLA 
0F/D356: 0A        ASL 
0F/D357: AA        TAX 
0F/D358: BD 00 80  LDA $8000,X        ; 04/8000 (pointers to map bg tilemaps)
0F/D35B: 85 80     STA $80
0F/D35D: BD 01 80  LDA $8001,X
0F/D360: 85 81     STA $81
0F/D362: A9 00     LDA #$00           ; $7400 (buffer for tilemap)
0F/D364: 85 82     STA $82
0F/D366: A9 74     LDA #$74
0F/D368: 85 83     STA $83
0F/D36A: 20 9F D3  JSR $D39F          ; decompress tilemap
0F/D36D: A9 00     LDA #$00
0F/D36F: 20 03 FE  JSR $FE03          ; switch prg bank
0F/D372: 4C 00 9C  JMP $9C00          ; 00/9C00 (init map)

; [ load world tilemap ]

0F/D375: A9 01     LDA #$01
0F/D377: 20 03 FE  JSR $FE03          ; switch prg bank
0F/D37A: A9 80     LDA #$80           ; 01/8000 (pointers to world tilemaps)
0F/D37C: 85 87     STA $87
0F/D37E: A9 00     LDA #$00
0F/D380: 85 86     STA $86
0F/D382: A5 2C     LDA $2C
0F/D384: AA        TAX 
0F/D385: 0A        ASL 
0F/D386: 90 02     BCC $D38A
0F/D388: E6 87     INC $87
0F/D38A: A8        TAY 
0F/D38B: B1 86     LDA ($86),Y
0F/D38D: 85 80     STA $80
0F/D38F: C8        INY 
0F/D390: B1 86     LDA ($86),Y
0F/D392: 85 81     STA $81
0F/D394: 8A        TXA 
0F/D395: 29 0F     AND #$0F
0F/D397: 09 70     ORA #$70           ; $7000
0F/D399: 85 83     STA $83
0F/D39B: A9 00     LDA #$00
0F/D39D: 85 82     STA $82
; fallthrough

; [ decompress tilemap ]

0F/D39F: A0 00     LDY #$00
0F/D3A1: B1 80     LDA ($80),Y
0F/D3A3: 10 2B     BPL $D3D0
0F/D3A5: C9 FF     CMP #$FF
0F/D3A7: F0 38     BEQ $D3E1          ; branch if terminator
; rle
0F/D3A9: 29 7F     AND #$7F
0F/D3AB: 85 84     STA $84            ; byte value
0F/D3AD: E6 80     INC $80
0F/D3AF: D0 02     BNE $D3B3
0F/D3B1: E6 81     INC $81
0F/D3B3: B1 80     LDA ($80),Y        ; run length
0F/D3B5: AA        TAX 
0F/D3B6: A5 84     LDA $84
0F/D3B8: 91 82     STA ($82),Y
0F/D3BA: C8        INY 
0F/D3BB: F0 0B     BEQ $D3C8
0F/D3BD: CA        DEX 
0F/D3BE: D0 F8     BNE $D3B8
0F/D3C0: 98        TYA 
0F/D3C1: 18        CLC 
0F/D3C2: 65 82     ADC $82
0F/D3C4: 85 82     STA $82
0F/D3C6: 90 02     BCC $D3CA
0F/D3C8: E6 83     INC $83
0F/D3CA: E6 80     INC $80
0F/D3CC: D0 D1     BNE $D39F
0F/D3CE: F0 0C     BEQ $D3DC
; uncompressed byte
0F/D3D0: 91 82     STA ($82),Y
0F/D3D2: E6 82     INC $82
0F/D3D4: D0 02     BNE $D3D8
0F/D3D6: E6 83     INC $83
0F/D3D8: E6 80     INC $80
0F/D3DA: D0 C3     BNE $D39F
0F/D3DC: E6 81     INC $81
0F/D3DE: 4C 9F D3  JMP $D39F
0F/D3E1: 60        RTS 

; [ init player movement (world map) ]

0F/D3E2: A5 33     LDA $33
0F/D3E4: 4A        LSR 
0F/D3E5: B0 0A     BCS $D3F1
0F/D3E7: 4A        LSR 
0F/D3E8: B0 2C     BCS $D416
0F/D3EA: 4A        LSR 
0F/D3EB: B0 31     BCS $D41E
0F/D3ED: 4A        LSR 
0F/D3EE: B0 43     BCS $D433
0F/D3F0: 60        RTS 
; right
0F/D3F1: A5 27     LDA $27
0F/D3F3: 18        CLC 
0F/D3F4: 69 10     ADC #$10
0F/D3F6: 85 2B     STA $2B
0F/D3F8: 29 1F     AND #$1F
0F/D3FA: 85 31     STA $31
0F/D3FC: A5 2F     LDA $2F
0F/D3FE: 85 30     STA $30
0F/D400: A5 28     LDA $28
0F/D402: 85 2C     STA $2C
0F/D404: A5 2D     LDA $2D
0F/D406: 09 02     ORA #$02
0F/D408: 85 2D     STA $2D
0F/D40A: 20 47 D5  JSR $D547          ; load tiles for scrolling
0F/D40D: A9 01     LDA #$01
0F/D40F: 85 32     STA $32            ; background needs update
0F/D411: 85 34     STA $34            ; set movement speed to 1
0F/D413: 4C 5D D4  JMP $D45D          ; update world map movement speed
; left
0F/D416: A5 27     LDA $27
0F/D418: 38        SEC 
0F/D419: E9 01     SBC #$01
0F/D41B: 4C F6 D3  JMP $D3F6
; down
0F/D41E: A5 28     LDA $28
0F/D420: 18        CLC 
0F/D421: 69 0F     ADC #$0F
0F/D423: 85 2C     STA $2C
0F/D425: A5 2F     LDA $2F
0F/D427: 18        CLC 
0F/D428: 69 0F     ADC #$0F
0F/D42A: C9 0F     CMP #$0F
0F/D42C: 90 16     BCC $D444
0F/D42E: 38        SEC 
0F/D42F: E9 0F     SBC #$0F
0F/D431: B0 11     BCS $D444
; up
0F/D433: A5 28     LDA $28
0F/D435: 38        SEC 
0F/D436: E9 01     SBC #$01
0F/D438: 85 2C     STA $2C
0F/D43A: A5 2F     LDA $2F
0F/D43C: 38        SEC 
0F/D43D: E9 01     SBC #$01
0F/D43F: B0 03     BCS $D444
0F/D441: 18        CLC 
0F/D442: 69 0F     ADC #$0F
0F/D444: 85 30     STA $30
0F/D446: A5 27     LDA $27
0F/D448: 85 2B     STA $2B
0F/D44A: 29 1F     AND #$1F
0F/D44C: 85 31     STA $31
0F/D44E: A5 2D     LDA $2D
0F/D450: 29 FD     AND #$FD
0F/D452: 85 2D     STA $2D
0F/D454: 20 75 D3  JSR $D375          ; load world tilemap
0F/D457: 20 47 D5  JSR $D547          ; load tiles for scrolling
0F/D45A: 4C 0D D4  JMP $D40D

; [ update world map movement speed ]

0F/D45D: A5 42     LDA $42
0F/D45F: C9 08     CMP #$08
0F/D461: F0 1A     BEQ $D47D
0F/D463: C9 04     CMP #$04
0F/D465: F0 12     BEQ $D479
0F/D467: C9 02     CMP #$02
0F/D469: F0 09     BEQ $D474
0F/D46B: AD 08 60  LDA $6008
0F/D46E: 29 02     AND #$02
0F/D470: F0 02     BEQ $D474
0F/D472: 85 34     STA $34            ; set movement speed
0F/D474: A9 00     LDA #$00
0F/D476: 85 4E     STA $4E
0F/D478: 60        RTS 
0F/D479: A9 02     LDA #$02
0F/D47B: D0 F5     BNE $D472
; airship
0F/D47D: AD 1A 60  LDA $601A
0F/D480: 4A        LSR 
0F/D481: 90 0C     BCC $D48F
0F/D483: A5 25     LDA $25            ; 2x speed if B button pressed
0F/D485: 29 01     AND #$01
0F/D487: 0A        ASL 
0F/D488: 0A        ASL 
0F/D489: 18        CLC 
0F/D48A: 69 04     ADC #$04
0F/D48C: AA        TAX 
0F/D48D: D0 13     BNE $D4A2
0F/D48F: A2 04     LDX #$04           ; movement speed 4
0F/D491: A5 25     LDA $25
0F/D493: 18        CLC 
0F/D494: 69 01     ADC #$01           ; enable 2x speed after pressing B 32 times
0F/D496: 29 1F     AND #$1F
0F/D498: D0 08     BNE $D4A2
0F/D49A: AD 1A 60  LDA $601A
0F/D49D: 09 01     ORA #$01
0F/D49F: 8D 1A 60  STA $601A
0F/D4A2: A5 4E     LDA $4E
0F/D4A4: D0 04     BNE $D4AA
0F/D4A6: E6 4E     INC $4E
0F/D4A8: A2 02     LDX #$02           ; movement speed 2
0F/D4AA: 86 34     STX $34            ; set movement speed
0F/D4AC: 60        RTS 

; [ init player movement (normal map) ]

0F/D4AD: A5 33     LDA $33            ; player facing direction
0F/D4AF: 4A        LSR 
0F/D4B0: B0 0A     BCS $D4BC
0F/D4B2: 4A        LSR 
0F/D4B3: B0 33     BCS $D4E8
0F/D4B5: 4A        LSR 
0F/D4B6: B0 41     BCS $D4F9
0F/D4B8: 4A        LSR 
0F/D4B9: B0 5C     BCS $D517
0F/D4BB: 60        RTS 
; right
0F/D4BC: A5 29     LDA $29
0F/D4BE: 18        CLC 
0F/D4BF: 69 08     ADC #$08
0F/D4C1: 29 3F     AND #$3F
0F/D4C3: 85 68     STA $68
0F/D4C5: 18        CLC 
0F/D4C6: 69 08     ADC #$08
0F/D4C8: 29 3F     AND #$3F
0F/D4CA: 85 2B     STA $2B
0F/D4CC: 29 1F     AND #$1F
0F/D4CE: 85 31     STA $31
0F/D4D0: A5 2F     LDA $2F
0F/D4D2: 85 30     STA $30
0F/D4D4: A5 2A     LDA $2A
0F/D4D6: 85 2C     STA $2C
0F/D4D8: A5 2D     LDA $2D
0F/D4DA: 09 02     ORA #$02
0F/D4DC: 85 2D     STA $2D
0F/D4DE: 20 BA D5  JSR $D5BA          ; load tiles for scrolling (normal map)
0F/D4E1: A9 01     LDA #$01
0F/D4E3: 85 32     STA $32            ; map background needs update
0F/D4E5: 85 34     STA $34            ; set movement speed to 1
0F/D4E7: 60        RTS 
; left
0F/D4E8: A5 29     LDA $29
0F/D4EA: 18        CLC 
0F/D4EB: 69 06     ADC #$06
0F/D4ED: 29 3F     AND #$3F
0F/D4EF: 85 68     STA $68
0F/D4F1: 38        SEC 
0F/D4F2: E9 07     SBC #$07
0F/D4F4: 29 3F     AND #$3F
0F/D4F6: 4C CA D4  JMP $D4CA
; down
0F/D4F9: A5 2A     LDA $2A
0F/D4FB: 18        CLC 
0F/D4FC: 69 08     ADC #$08
0F/D4FE: 29 3F     AND #$3F
0F/D500: 85 69     STA $69
0F/D502: 18        CLC 
0F/D503: 69 07     ADC #$07
0F/D505: 29 3F     AND #$3F
0F/D507: 85 2C     STA $2C
0F/D509: A5 2F     LDA $2F
0F/D50B: 18        CLC 
0F/D50C: 69 0F     ADC #$0F
0F/D50E: C9 0F     CMP #$0F
0F/D510: 90 1F     BCC $D531
0F/D512: 38        SEC 
0F/D513: E9 0F     SBC #$0F
0F/D515: B0 1A     BCS $D531
; up
0F/D517: A5 2A     LDA $2A
0F/D519: 18        CLC 
0F/D51A: 69 06     ADC #$06
0F/D51C: 29 3F     AND #$3F
0F/D51E: 85 69     STA $69
0F/D520: 38        SEC 
0F/D521: E9 07     SBC #$07
0F/D523: 29 3F     AND #$3F
0F/D525: 85 2C     STA $2C
0F/D527: A5 2F     LDA $2F
0F/D529: 38        SEC 
0F/D52A: E9 01     SBC #$01
0F/D52C: B0 03     BCS $D531
0F/D52E: 18        CLC 
0F/D52F: 69 0F     ADC #$0F
0F/D531: 85 30     STA $30
0F/D533: A5 29     LDA $29
0F/D535: 85 2B     STA $2B
0F/D537: 29 1F     AND #$1F
0F/D539: 85 31     STA $31
0F/D53B: A5 2D     LDA $2D
0F/D53D: 29 FD     AND #$FD
0F/D53F: 85 2D     STA $2D
0F/D541: 20 BA D5  JSR $D5BA          ; load tiles for scrolling (normal map)
0F/D544: 4C E1 D4  JMP $D4E1

; [ load tiles for scrolling (world map) ]

0F/D547: A2 00     LDX #$00
0F/D549: A5 2C     LDA $2C
0F/D54B: 29 0F     AND #$0F
0F/D54D: 09 70     ORA #$70
0F/D54F: 85 81     STA $81
0F/D551: A5 2B     LDA $2B
0F/D553: 85 80     STA $80
0F/D555: A5 2D     LDA $2D
0F/D557: 29 02     AND #$02
0F/D559: D0 2B     BNE $D586
; horizontal
0F/D55B: A0 00     LDY #$00
0F/D55D: B1 80     LDA ($80),Y
0F/D55F: A8        TAY 
0F/D560: B9 00 05  LDA $0500,Y
0F/D563: 9D 80 07  STA $0780,X
0F/D566: B9 80 05  LDA $0580,Y
0F/D569: 9D 90 07  STA $0790,X
0F/D56C: B9 00 06  LDA $0600,Y
0F/D56F: 9D A0 07  STA $07A0,X
0F/D572: B9 80 06  LDA $0680,Y
0F/D575: 9D B0 07  STA $07B0,X
0F/D578: B9 00 07  LDA $0700,Y
0F/D57B: 9D C0 07  STA $07C0,X
0F/D57E: E6 80     INC $80
0F/D580: E8        INX 
0F/D581: E0 10     CPX #$10
0F/D583: 90 D6     BCC $D55B
0F/D585: 60        RTS 
; vertical
0F/D586: A0 00     LDY #$00
0F/D588: B1 80     LDA ($80),Y
0F/D58A: A8        TAY 
0F/D58B: B9 00 05  LDA $0500,Y
0F/D58E: 9D 80 07  STA $0780,X
0F/D591: B9 80 05  LDA $0580,Y
0F/D594: 9D 90 07  STA $0790,X
0F/D597: B9 00 06  LDA $0600,Y
0F/D59A: 9D A0 07  STA $07A0,X
0F/D59D: B9 80 06  LDA $0680,Y
0F/D5A0: 9D B0 07  STA $07B0,X
0F/D5A3: B9 00 07  LDA $0700,Y
0F/D5A6: 9D C0 07  STA $07C0,X
0F/D5A9: A5 81     LDA $81
0F/D5AB: 18        CLC 
0F/D5AC: 69 01     ADC #$01
0F/D5AE: 29 0F     AND #$0F
0F/D5B0: 09 70     ORA #$70
0F/D5B2: 85 81     STA $81
0F/D5B4: E8        INX 
0F/D5B5: E0 10     CPX #$10
0F/D5B7: 90 CD     BCC $D586
0F/D5B9: 60        RTS 

; [ load tiles for scrolling (normal map) ]

0F/D5BA: A2 00     LDX #$00
0F/D5BC: A5 2C     LDA $2C
0F/D5BE: 29 1F     AND #$1F
0F/D5C0: 4A        LSR 
0F/D5C1: 4A        LSR 
0F/D5C2: 4A        LSR 
0F/D5C3: 09 70     ORA #$70
0F/D5C5: 85 81     STA $81
0F/D5C7: A5 2C     LDA $2C
0F/D5C9: 0A        ASL 
0F/D5CA: 0A        ASL 
0F/D5CB: 0A        ASL 
0F/D5CC: 0A        ASL 
0F/D5CD: 0A        ASL 
0F/D5CE: 85 82     STA $82
0F/D5D0: A5 2B     LDA $2B
0F/D5D2: 29 1F     AND #$1F
0F/D5D4: 05 82     ORA $82
0F/D5D6: 85 80     STA $80
0F/D5D8: A5 2D     LDA $2D
0F/D5DA: 29 02     AND #$02
0F/D5DC: D0 43     BNE $D621
; vertical
0F/D5DE: A0 00     LDY #$00
0F/D5E0: A5 2B     LDA $2B
0F/D5E2: 05 2C     ORA $2C
0F/D5E4: 29 20     AND #$20
0F/D5E6: F0 05     BEQ $D5ED
0F/D5E8: A0 38     LDY #$38           ; fill tile
0F/D5EA: 4C F0 D5  JMP $D5F0
0F/D5ED: B1 80     LDA ($80),Y        ; tile id
0F/D5EF: A8        TAY 
0F/D5F0: B9 00 05  LDA $0500,Y        ; copy tiles to tilemap buffer
0F/D5F3: 9D 80 07  STA $0780,X
0F/D5F6: B9 80 05  LDA $0580,Y
0F/D5F9: 9D 90 07  STA $0790,X
0F/D5FC: B9 00 06  LDA $0600,Y
0F/D5FF: 9D A0 07  STA $07A0,X
0F/D602: B9 80 06  LDA $0680,Y
0F/D605: 9D B0 07  STA $07B0,X
0F/D608: B9 00 07  LDA $0700,Y        ; attribute table
0F/D60B: 9D C0 07  STA $07C0,X
0F/D60E: A5 80     LDA $80
0F/D610: 18        CLC 
0F/D611: 69 01     ADC #$01
0F/D613: 29 1F     AND #$1F
0F/D615: 05 82     ORA $82
0F/D617: 85 80     STA $80
0F/D619: E6 2B     INC $2B
0F/D61B: E8        INX 
0F/D61C: E0 10     CPX #$10
0F/D61E: 90 BE     BCC $D5DE
0F/D620: 60        RTS 
; horizontal
0F/D621: A0 00     LDY #$00
0F/D623: A5 2C     LDA $2C
0F/D625: 05 2B     ORA $2B
0F/D627: 29 20     AND #$20
0F/D629: F0 05     BEQ $D630
0F/D62B: A0 38     LDY #$38
0F/D62D: 4C 33 D6  JMP $D633
0F/D630: B1 80     LDA ($80),Y
0F/D632: A8        TAY 
0F/D633: B9 00 05  LDA $0500,Y
0F/D636: 9D 80 07  STA $0780,X
0F/D639: B9 80 05  LDA $0580,Y
0F/D63C: 9D 90 07  STA $0790,X
0F/D63F: B9 00 06  LDA $0600,Y
0F/D642: 9D A0 07  STA $07A0,X
0F/D645: B9 80 06  LDA $0680,Y
0F/D648: 9D B0 07  STA $07B0,X
0F/D64B: B9 00 07  LDA $0700,Y
0F/D64E: 9D C0 07  STA $07C0,X
0F/D651: A5 80     LDA $80
0F/D653: 18        CLC 
0F/D654: 69 20     ADC #$20
0F/D656: 85 80     STA $80
0F/D658: A5 81     LDA $81
0F/D65A: 69 00     ADC #$00
0F/D65C: 29 03     AND #$03
0F/D65E: 09 70     ORA #$70
0F/D660: 85 81     STA $81
0F/D662: E8        INX 
0F/D663: E6 2C     INC $2C
0F/D665: E0 10     CPX #$10
0F/D667: 90 B8     BCC $D621
0F/D669: 60        RTS 

; [ update map background tilemap ]

0F/D66A: A6 30     LDX $30
0F/D66C: BD 21 D3  LDA $D321,X        ; ppu address
0F/D66F: 85 80     STA $80
0F/D671: BD 31 D3  LDA $D331,X
0F/D674: 85 81     STA $81
0F/D676: A5 31     LDA $31
0F/D678: C9 10     CMP #$10
0F/D67A: B0 09     BCS $D685
0F/D67C: AA        TAX 
0F/D67D: 0A        ASL 
0F/D67E: 05 80     ORA $80
0F/D680: 85 80     STA $80
0F/D682: 4C 94 D6  JMP $D694
0F/D685: 29 0F     AND #$0F
0F/D687: AA        TAX 
0F/D688: 0A        ASL 
0F/D689: 05 80     ORA $80
0F/D68B: 85 80     STA $80
0F/D68D: A5 81     LDA $81
0F/D68F: 18        CLC 
0F/D690: 69 04     ADC #$04
0F/D692: 85 81     STA $81
0F/D694: A5 2D     LDA $2D
0F/D696: 29 02     AND #$02
0F/D698: F0 03     BEQ $D69D          ; branch if moving vertically
0F/D69A: 4C 30 D7  JMP $D730
; vertical
0F/D69D: 8A        TXA 
0F/D69E: 49 0F     EOR #$0F
0F/D6A0: 18        CLC 
0F/D6A1: 69 01     ADC #$01
0F/D6A3: 85 82     STA $82
0F/D6A5: A0 00     LDY #$00
0F/D6A7: AD 02 20  LDA $2002
0F/D6AA: A5 81     LDA $81
0F/D6AC: 8D 06 20  STA $2006
0F/D6AF: A5 80     LDA $80
0F/D6B1: 8D 06 20  STA $2006
0F/D6B4: B9 80 07  LDA $0780,Y
0F/D6B7: 8D 07 20  STA $2007
0F/D6BA: B9 90 07  LDA $0790,Y
0F/D6BD: 8D 07 20  STA $2007
0F/D6C0: C8        INY 
0F/D6C1: C4 82     CPY $82
0F/D6C3: 90 EF     BCC $D6B4
0F/D6C5: C0 10     CPY #$10
0F/D6C7: B0 1F     BCS $D6E8
0F/D6C9: A5 81     LDA $81
0F/D6CB: 49 04     EOR #$04
0F/D6CD: 8D 06 20  STA $2006
0F/D6D0: A5 80     LDA $80
0F/D6D2: 29 E0     AND #$E0
0F/D6D4: 8D 06 20  STA $2006
0F/D6D7: B9 80 07  LDA $0780,Y
0F/D6DA: 8D 07 20  STA $2007
0F/D6DD: B9 90 07  LDA $0790,Y
0F/D6E0: 8D 07 20  STA $2007
0F/D6E3: C8        INY 
0F/D6E4: C0 10     CPY #$10
0F/D6E6: 90 EF     BCC $D6D7
0F/D6E8: A5 80     LDA $80
0F/D6EA: 18        CLC 
0F/D6EB: 69 20     ADC #$20
0F/D6ED: 85 80     STA $80
0F/D6EF: A5 81     LDA $81
0F/D6F1: 8D 06 20  STA $2006
0F/D6F4: A5 80     LDA $80
0F/D6F6: 8D 06 20  STA $2006
0F/D6F9: A0 00     LDY #$00
0F/D6FB: B9 A0 07  LDA $07A0,Y
0F/D6FE: 8D 07 20  STA $2007
0F/D701: B9 B0 07  LDA $07B0,Y
0F/D704: 8D 07 20  STA $2007
0F/D707: C8        INY 
0F/D708: C4 82     CPY $82
0F/D70A: 90 EF     BCC $D6FB
0F/D70C: C0 10     CPY #$10
0F/D70E: B0 1F     BCS $D72F
0F/D710: A5 81     LDA $81
0F/D712: 49 04     EOR #$04
0F/D714: 8D 06 20  STA $2006
0F/D717: A5 80     LDA $80
0F/D719: 29 E0     AND #$E0
0F/D71B: 8D 06 20  STA $2006
0F/D71E: B9 A0 07  LDA $07A0,Y
0F/D721: 8D 07 20  STA $2007
0F/D724: B9 B0 07  LDA $07B0,Y
0F/D727: 8D 07 20  STA $2007
0F/D72A: C8        INY 
0F/D72B: C0 10     CPY #$10
0F/D72D: 90 EF     BCC $D71E
0F/D72F: 60        RTS 
; horizontal
0F/D730: A9 0F     LDA #$0F
0F/D732: 38        SEC 
0F/D733: E5 30     SBC $30
0F/D735: 85 82     STA $82
0F/D737: A0 00     LDY #$00
0F/D739: AD 02 20  LDA $2002
0F/D73C: A5 81     LDA $81
0F/D73E: 8D 06 20  STA $2006
0F/D741: A5 80     LDA $80
0F/D743: 8D 06 20  STA $2006
0F/D746: A9 04     LDA #$04
0F/D748: 8D 00 20  STA $2000
0F/D74B: B9 80 07  LDA $0780,Y
0F/D74E: 8D 07 20  STA $2007
0F/D751: B9 A0 07  LDA $07A0,Y
0F/D754: 8D 07 20  STA $2007
0F/D757: C8        INY 
0F/D758: C4 82     CPY $82
0F/D75A: 90 EF     BCC $D74B
0F/D75C: C0 0F     CPY #$0F
0F/D75E: B0 1F     BCS $D77F
0F/D760: A5 81     LDA $81
0F/D762: 29 24     AND #$24
0F/D764: 8D 06 20  STA $2006
0F/D767: A5 80     LDA $80
0F/D769: 29 1F     AND #$1F
0F/D76B: 8D 06 20  STA $2006
0F/D76E: B9 80 07  LDA $0780,Y
0F/D771: 8D 07 20  STA $2007
0F/D774: B9 A0 07  LDA $07A0,Y
0F/D777: 8D 07 20  STA $2007
0F/D77A: C8        INY 
0F/D77B: C0 0F     CPY #$0F
0F/D77D: 90 EF     BCC $D76E
0F/D77F: A0 00     LDY #$00
0F/D781: A5 81     LDA $81
0F/D783: 8D 06 20  STA $2006
0F/D786: A5 80     LDA $80
0F/D788: 18        CLC 
0F/D789: 69 01     ADC #$01
0F/D78B: 8D 06 20  STA $2006
0F/D78E: B9 90 07  LDA $0790,Y
0F/D791: 8D 07 20  STA $2007
0F/D794: B9 B0 07  LDA $07B0,Y
0F/D797: 8D 07 20  STA $2007
0F/D79A: C8        INY 
0F/D79B: C4 82     CPY $82
0F/D79D: 90 EF     BCC $D78E
0F/D79F: C0 0F     CPY #$0F
0F/D7A1: B0 22     BCS $D7C5
0F/D7A3: A5 81     LDA $81
0F/D7A5: 29 24     AND #$24
0F/D7A7: 8D 06 20  STA $2006
0F/D7AA: A5 80     LDA $80
0F/D7AC: 18        CLC 
0F/D7AD: 69 01     ADC #$01
0F/D7AF: 29 1F     AND #$1F
0F/D7B1: 8D 06 20  STA $2006
0F/D7B4: B9 90 07  LDA $0790,Y
0F/D7B7: 8D 07 20  STA $2007
0F/D7BA: B9 B0 07  LDA $07B0,Y
0F/D7BD: 8D 07 20  STA $2007
0F/D7C0: C8        INY 
0F/D7C1: C0 0F     CPY #$0F
0F/D7C3: 90 EF     BCC $D7B4
0F/D7C5: A9 88     LDA #$88
0F/D7C7: 8D 00 20  STA $2000
0F/D7CA: 60        RTS 

; [ screen wipe out (world map) ]

0F/D7CB: 20 90 D9  JSR $D990          ; hide all sprites, wipe sound effect
0F/D7CE: A9 70     LDA #$70
0F/D7D0: 85 84     STA $84
0F/D7D2: A9 01     LDA #$01
0F/D7D4: 85 85     STA $85
0F/D7D6: 20 1E D8  JSR $D81E
0F/D7D9: A5 85     LDA $85
0F/D7DB: 18        CLC 
0F/D7DC: 69 06     ADC #$06
0F/D7DE: 85 85     STA $85
0F/D7E0: A5 84     LDA $84
0F/D7E2: 38        SEC 
0F/D7E3: E9 03     SBC #$03
0F/D7E5: 85 84     STA $84
0F/D7E7: C9 04     CMP #$04
0F/D7E9: B0 EB     BCS $D7D6
0F/D7EB: A9 00     LDA #$00
0F/D7ED: 4C 12 D8  JMP $D812

; [ screen wipe in (world map) ]

0F/D7F0: 20 90 D9  JSR $D990          ; hide all sprites, wipe sound effect
0F/D7F3: A9 01     LDA #$01
0F/D7F5: 85 84     STA $84
0F/D7F7: A9 DF     LDA #$DF
0F/D7F9: 85 85     STA $85
0F/D7FB: 20 1E D8  JSR $D81E
0F/D7FE: A5 85     LDA $85
0F/D800: 38        SEC 
0F/D801: E9 06     SBC #$06
0F/D803: 85 85     STA $85
0F/D805: A5 84     LDA $84
0F/D807: 18        CLC 
0F/D808: 69 03     ADC #$03
0F/D80A: 85 84     STA $84
0F/D80C: C9 70     CMP #$70
0F/D80E: 90 EB     BCC $D7FB
0F/D810: A9 0A     LDA #$0A
0F/D812: 8D 01 20  STA $2001
0F/D815: A9 30     LDA #$30
0F/D817: 8D 00 40  STA $4000
0F/D81A: 8D 01 40  STA $4001
0F/D81D: 60        RTS 

; [ update screen wipe (world map) ]

0F/D81E: 20 00 FE  JSR $FE00          ; wait for vblank
0F/D821: A9 0A     LDA #$0A           ; show background
0F/D823: 8D 01 20  STA $2001
0F/D826: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0F/D829: 20 89 D8  JSR $D889          ; update ppu scroll for screen wipe
0F/D82C: 20 BA D8  JSR $D8BA          ; wait for vblank to end
0F/D82F: A6 84     LDX $84
0F/D831: 20 62 D9  JSR $D962          ; wait one scanline
0F/D834: CA        DEX 
0F/D835: D0 FA     BNE $D831
0F/D837: A9 00     LDA #$00           ; turn off all layers
0F/D839: 8D 01 20  STA $2001
0F/D83C: A6 85     LDX $85
0F/D83E: 20 62 D9  JSR $D962          ; wait one scanline
0F/D841: CA        DEX 
0F/D842: D0 FA     BNE $D83E
0F/D844: AD 02 20  LDA $2002          ; latch ppu
0F/D847: A6 2F     LDX $2F            ; top scroll position
0F/D849: BD 7A D8  LDA $D87A,X        ; change ppu address on the fly
0F/D84C: 8D 06 20  STA $2006
0F/D84F: BD 6A D8  LDA $D86A,X
0F/D852: 8D 06 20  STA $2006
0F/D855: 20 89 D8  JSR $D889          ; update ppu scroll for screen wipe
0F/D858: A9 0A     LDA #$0A           ; show background
0F/D85A: 8D 01 20  STA $2001
0F/D85D: A5 85     LDA $85
0F/D85F: 0A        ASL 
0F/D860: 8D 02 40  STA $4002          ; update sound effect
0F/D863: 2A        ROL 
0F/D864: 29 01     AND #$01
0F/D866: 8D 03 40  STA $4003
0F/D869: 60        RTS 

; ppu address for bottom half of screen wipe
0F/D86A: E0 20 60 A0 E0 20 60 A0 20 60 A0 E0 20 60 A0 E0
0F/D87A: 21 22 22 22 22 23 23 23 20 20 20 20 21 21 21

; [ update ppu scroll for screen wipe ]

0F/D889: A9 70     LDA #$70
0F/D88B: 38        SEC
0F/D88C: E5 84     SBC $84
0F/D88E: 29 7F     AND #$7F
0F/D890: 85 80     STA $80
0F/D892: A5 FD     LDA $FD
0F/D894: 85 FF     STA $FF
0F/D896: 8D 00 20  STA $2000
0F/D899: AD 02 20  LDA $2002
0F/D89C: A5 27     LDA $27
0F/D89E: 0A        ASL 
0F/D89F: 0A        ASL 
0F/D8A0: 0A        ASL 
0F/D8A1: 0A        ASL 
0F/D8A2: 8D 05 20  STA $2005
0F/D8A5: A5 2F     LDA $2F
0F/D8A7: 0A        ASL 
0F/D8A8: 0A        ASL 
0F/D8A9: 0A        ASL 
0F/D8AA: 0A        ASL 
0F/D8AB: 18        CLC 
0F/D8AC: 65 80     ADC $80
0F/D8AE: B0 04     BCS $D8B4
0F/D8B0: C9 F0     CMP #$F0
0F/D8B2: 90 02     BCC $D8B6
0F/D8B4: 69 0F     ADC #$0F
0F/D8B6: 8D 05 20  STA $2005
0F/D8B9: 60        RTS 

; [ wait for vblank to end ]

; 2608 cycles total ~ 23 scanlines

0F/D8BA: A2 90     LDX #$90
0F/D8BC: A0 03     LDY #$03
0F/D8BE: 88        DEY 
0F/D8BF: D0 FD     BNE $D8BE
0F/D8C1: CA        DEX 
0F/D8C2: D0 F8     BNE $D8BC
0F/D8C4: EA        NOP 
0F/D8C5: EA        NOP 
0F/D8C6: EA        NOP 
0F/D8C7: EA        NOP 
0F/D8C8: 60        RTS 

; [ screen wipe in (normal map) ]

0F/D8C9: 20 77 D9  JSR $D977          ; hide all sprites
0F/D8CC: A9 85     LDA #$85
0F/D8CE: 85 84     STA $84
0F/D8D0: A9 01     LDA #$01
0F/D8D2: 85 85     STA $85
0F/D8D4: 20 35 D9  JSR $D935
0F/D8D7: A5 84     LDA $84
0F/D8D9: 38        SEC 
0F/D8DA: E9 03     SBC #$03
0F/D8DC: 85 84     STA $84
0F/D8DE: A5 85     LDA $85
0F/D8E0: 18        CLC 
0F/D8E1: 69 06     ADC #$06
0F/D8E3: 85 85     STA $85
0F/D8E5: C9 C8     CMP #$C8
0F/D8E7: 90 EB     BCC $D8D4
0F/D8E9: A9 1E     LDA #$1E
0F/D8EB: 4C 10 D9  JMP $D910

; [ screen wipe out (normal map) ]

0F/D8EE: 20 77 D9  JSR $D977          ; hide all sprites
0F/D8F1: A9 21     LDA #$21
0F/D8F3: 85 84     STA $84
0F/D8F5: A9 C5     LDA #$C5
0F/D8F7: 85 85     STA $85
0F/D8F9: 20 35 D9  JSR $D935
0F/D8FC: A5 84     LDA $84
0F/D8FE: 18        CLC 
0F/D8FF: 69 03     ADC #$03
0F/D901: 85 84     STA $84
0F/D903: A5 85     LDA $85
0F/D905: 38        SEC 
0F/D906: E9 06     SBC #$06
0F/D908: 85 85     STA $85
0F/D90A: C9 06     CMP #$06
0F/D90C: B0 EB     BCS $D8F9
0F/D90E: A9 00     LDA #$00
0F/D910: 8D 01 20  STA $2001
0F/D913: A9 30     LDA #$30
0F/D915: 8D 00 40  STA $4000
0F/D918: 8D 04 40  STA $4004
0F/D91B: 8D 08 40  STA $4008
0F/D91E: 8D 0C 40  STA $400C
0F/D921: 60        RTS 

; [ update ppu (screen wipe) ]

0F/D922: A9 02     LDA #$02           ; copy oam data to ppu
0F/D924: 8D 14 40  STA $4014
0F/D927: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0F/D92A: A5 2D     LDA $2D
0F/D92C: 4A        LSR 
0F/D92D: B0 03     BCS $D932          ; branch if on a normal map
0F/D92F: 4C 85 C3  JMP $C385
0F/D932: 4C F5 CD  JMP $CDF5          ; update ppu registers

; [ update screen wipe (normal map) ]

0F/D935: 20 00 FE  JSR $FE00          ; wait for vblank
0F/D938: 20 22 D9  JSR $D922          ; update ppu
0F/D93B: A2 0A     LDX #$0A           ; wait a few cycles
0F/D93D: CA        DEX 
0F/D93E: D0 FD     BNE $D93D
0F/D940: A9 10     LDA #$10
0F/D942: 8D 01 20  STA $2001
0F/D945: A6 84     LDX $84
0F/D947: 20 62 D9  JSR $D962          ; wait one scanline
0F/D94A: CA        DEX 
0F/D94B: D0 FA     BNE $D947
0F/D94D: A9 1E     LDA #$1E
0F/D94F: 8D 01 20  STA $2001
0F/D952: A6 85     LDX $85
0F/D954: 20 62 D9  JSR $D962          ; wait one scanline
0F/D957: CA        DEX 
0F/D958: D0 FA     BNE $D954
0F/D95A: A9 10     LDA #$10
0F/D95C: 8D 01 20  STA $2001
0F/D95F: 4C 46 C7  JMP $C746          ; update sound

; [ wait one scanline ]

0F/D962: A0 10     LDY #$10           ; wait a few cycles
0F/D964: 88        DEY 
0F/D965: D0 FD     BNE $D964
0F/D967: A5 82     LDA $82
0F/D969: C6 82     DEC $82
0F/D96B: D0 05     BNE $D972
0F/D96D: A9 03     LDA #$03
0F/D96F: 85 82     STA $82
0F/D971: 60        RTS 
0F/D972: A9 00     LDA #$00
0F/D974: A5 82     LDA $82
0F/D976: 60        RTS 

; [ hide all sprites ]

0F/D977: 20 7D D9  JSR $D97D          ; hide all sprites
0F/D97A: 4C 46 C7  JMP $C746          ; update sound

; [ hide all sprites ]

0F/D97D: A9 F0     LDA #$F0
0F/D97F: A2 00     LDX #$00
0F/D981: 9D 00 02  STA $0200,X        ; reset sprite data
0F/D984: E8        INX 
0F/D985: D0 FA     BNE $D981
0F/D987: 20 00 FE  JSR $FE00          ; wait for vblank
0F/D98A: A9 02     LDA #$02
0F/D98C: 8D 14 40  STA $4014          ; copy oam data to ppu
0F/D98F: 60        RTS 

; [ hide all sprites, wipe sound effect ]

0F/D990: 20 7D D9  JSR $D97D          ; hide all sprites
0F/D993: A9 01     LDA #$01
0F/D995: 8D 15 40  STA $4015          ; enable square 1 only
0F/D998: A9 38     LDA #$38
0F/D99A: 8D 00 40  STA $4000
0F/D99D: A9 8B     LDA #$8B
0F/D99F: 8D 01 40  STA $4001          ; use sweep unit
0F/D9A2: 60        RTS 

; --------------------------------------------------------------------------

; [  ]

0F/D9A3: AD 12 60  LDA $6012
0F/D9A6: 29 02     AND #$02
0F/D9A8: F0 0A     BEQ $D9B4
0F/D9AA: A2 EA     LDX #$EA
0F/D9AC: 20 52 DA  JSR $DA52
0F/D9AF: A2 EC     LDX #$EC
0F/D9B1: 20 52 DA  JSR $DA52
0F/D9B4: AD 12 60  LDA $6012
0F/D9B7: 29 04     AND #$04
0F/D9B9: F0 05     BEQ $D9C0
0F/D9BB: A2 64     LDX #$64
0F/D9BD: 20 5C DA  JSR $DA5C
0F/D9C0: AD 12 60  LDA $6012
0F/D9C3: 29 10     AND #$10
0F/D9C5: F0 05     BEQ $D9CC
0F/D9C7: A2 7A     LDX #$7A
0F/D9C9: 20 5C DA  JSR $DA5C
0F/D9CC: AD 12 60  LDA $6012
0F/D9CF: 29 20     AND #$20
0F/D9D1: F0 05     BEQ $D9D8
0F/D9D3: A2 72     LDX #$72
0F/D9D5: 20 5C DA  JSR $DA5C
0F/D9D8: AD 12 60  LDA $6012
0F/D9DB: 29 40     AND #$40
0F/D9DD: F0 05     BEQ $D9E4
0F/D9DF: A2 7C     LDX #$7C
0F/D9E1: 20 58 DA  JSR $DA58
0F/D9E4: AD 12 60  LDA $6012
0F/D9E7: 29 80     AND #$80
0F/D9E9: F0 05     BEQ $D9F0
0F/D9EB: A2 7D     LDX #$7D
0F/D9ED: 20 58 DA  JSR $DA58
0F/D9F0: AD 13 60  LDA $6013
0F/D9F3: 29 01     AND #$01
0F/D9F5: F0 05     BEQ $D9FC
0F/D9F7: A2 7E     LDX #$7E
0F/D9F9: 20 58 DA  JSR $DA58
0F/D9FC: AD 13 60  LDA $6013
0F/D9FF: 29 02     AND #$02
0F/DA01: F0 05     BEQ $DA08
0F/DA03: A2 7F     LDX #$7F
0F/DA05: 20 58 DA  JSR $DA58
0F/DA08: AD 13 60  LDA $6013
0F/DA0B: 29 10     AND #$10
0F/DA0D: F0 05     BEQ $DA14
0F/DA0F: A2 79     LDX #$79
0F/DA11: 20 5C DA  JSR $DA5C
0F/DA14: AD 13 60  LDA $6013
0F/DA17: 29 20     AND #$20
0F/DA19: F0 05     BEQ $DA20
0F/DA1B: A2 F6     LDX #$F6
0F/DA1D: 20 52 DA  JSR $DA52
0F/DA20: AD 13 60  LDA $6013
0F/DA23: 29 04     AND #$04
0F/DA25: F0 2A     BEQ $DA51
0F/DA27: A2 3B     LDX #$3B
0F/DA29: A0 51     LDY #$51
0F/DA2B: 20 5E DA  JSR $DA5E
0F/DA2E: A2 3C     LDX #$3C
0F/DA30: A0 52     LDY #$52
0F/DA32: 20 5E DA  JSR $DA5E
0F/DA35: A2 3D     LDX #$3D
0F/DA37: A0 53     LDY #$53
0F/DA39: 20 5E DA  JSR $DA5E
0F/DA3C: A2 3E     LDX #$3E
0F/DA3E: A0 54     LDY #$54
0F/DA40: 20 5E DA  JSR $DA5E
0F/DA43: A2 77     LDX #$77
0F/DA45: A0 65     LDY #$65
0F/DA47: 20 5E DA  JSR $DA5E
0F/DA4A: A2 78     LDX #$78
0F/DA4C: A0 66     LDY #$66
0F/DA4E: 4C 5E DA  JMP $DA5E
0F/DA51: 60        RTS 

; [  ]

0F/DA52: A9 0F     LDA #$0F
0F/DA54: 9D 00 04  STA $0400,X
0F/DA57: 60        RTS 

; [  ]

0F/DA58: A0 69     LDY #$69
0F/DA5A: D0 02     BNE $DA5E

; [  ]

0F/DA5C: A0 34     LDY #$34
0F/DA5E: B9 00 05  LDA $0500,Y
0F/DA61: 9D 00 05  STA $0500,X
0F/DA64: B9 80 05  LDA $0580,Y
0F/DA67: 9D 80 05  STA $0580,X
0F/DA6A: B9 00 06  LDA $0600,Y
0F/DA6D: 9D 00 06  STA $0600,X
0F/DA70: B9 80 06  LDA $0680,Y
0F/DA73: 9D 80 06  STA $0680,X
0F/DA76: B9 00 07  LDA $0700,Y
0F/DA79: 9D 00 07  STA $0700,X
0F/DA7C: 98        TYA 
0F/DA7D: 0A        ASL 
0F/DA7E: A8        TAY 
0F/DA7F: 8A        TXA 
0F/DA80: 0A        ASL 
0F/DA81: AA        TAX 
0F/DA82: B9 00 04  LDA $0400,Y
0F/DA85: 9D 00 04  STA $0400,X
0F/DA88: B9 01 04  LDA $0401,Y
0F/DA8B: 9D 01 04  STA $0401,X
0F/DA8E: 60        RTS 

; --------------------------------------------------------------------------

; [  ]

0F/DA8F: A5 42     LDA $42
0F/DA91: 8D 18 60  STA $6018
0F/DA94: A5 27     LDA $27
0F/DA96: 8D 10 60  STA $6010
0F/DA99: A5 28     LDA $28
0F/DA9B: 8D 11 60  STA $6011
0F/DA9E: A9 00     LDA #$00
0F/DAA0: 8D FF 62  STA $62FF
0F/DAA3: A9 5A     LDA #$5A
0F/DAA5: 8D FE 62  STA $62FE
0F/DAA8: A9 00     LDA #$00
0F/DAAA: A2 00     LDX #$00
0F/DAAC: 18        CLC 
0F/DAAD: 7D 00 60  ADC $6000,X
0F/DAB0: 18        CLC 
0F/DAB1: 7D 00 61  ADC $6100,X
0F/DAB4: 18        CLC 
0F/DAB5: 7D 00 62  ADC $6200,X
0F/DAB8: E8        INX 
0F/DAB9: D0 F1     BNE $DAAC
0F/DABB: 49 FF     EOR #$FF
0F/DABD: 8D FF 62  STA $62FF
0F/DAC0: 60        RTS 

; [  ]

0F/DAC1: 85 80     STA $80
0F/DAC3: 0A        ASL 
0F/DAC4: 65 80     ADC $80
0F/DAC6: 69 63     ADC #$63
0F/DAC8: 85 81     STA $81
0F/DACA: A9 00     LDA #$00
0F/DACC: 85 80     STA $80
0F/DACE: A2 03     LDX #$03
0F/DAD0: A0 00     LDY #$00
0F/DAD2: A9 00     LDA #$00
0F/DAD4: 18        CLC 
0F/DAD5: 71 80     ADC ($80),Y
0F/DAD7: C8        INY 
0F/DAD8: D0 FA     BNE $DAD4
0F/DADA: E6 81     INC $81
0F/DADC: CA        DEX 
0F/DADD: D0 F5     BNE $DAD4
0F/DADF: 18        CLC 
0F/DAE0: 69 01     ADC #$01
0F/DAE2: C9 01     CMP #$01
0F/DAE4: B0 0A     BCS $DAF0
0F/DAE6: A0 FE     LDY #$FE
0F/DAE8: C6 81     DEC $81
0F/DAEA: B1 80     LDA ($80),Y
0F/DAEC: 49 5A     EOR #$5A
0F/DAEE: C9 01     CMP #$01
0F/DAF0: 60        RTS 

; --------------------------------------------------------------------------

; [ load menu text ??? ]

0F/DAF1: 48        PHA 
0F/DAF2: A9 0A     LDA #$0A
0F/DAF4: 20 03 FE  JSR $FE03          ; switch prg bank
0F/DAF7: 68        PLA 
0F/DAF8: 0A        ASL 
0F/DAF9: A8        TAY 
0F/DAFA: B9 00 84  LDA $8400,Y        ; get text pointer
0F/DAFD: 85 80     STA $80
0F/DAFF: B9 01 84  LDA $8401,Y
0F/DB02: 85 81     STA $81
0F/DB04: A0 00     LDY #$00
0F/DB06: B1 80     LDA ($80),Y
0F/DB08: C9 30     CMP #$30
0F/DB0A: B0 15     BCS $DB21
0F/DB0C: C9 10     CMP #$10
0F/DB0E: 90 11     BCC $DB21
0F/DB10: D0 02     BNE $DB14
0F/DB12: A5 9E     LDA $9E
0F/DB14: 99 00 7B  STA $7B00,Y
0F/DB17: C8        INY 
0F/DB18: B1 80     LDA ($80),Y
0F/DB1A: 99 00 7B  STA $7B00,Y
0F/DB1D: C8        INY 
0F/DB1E: 4C 06 DB  JMP $DB06
0F/DB21: 99 00 7B  STA $7B00,Y
0F/DB24: C8        INY 
0F/DB25: C9 00     CMP #$00
0F/DB27: D0 DD     BNE $DB06
0F/DB29: A9 0E     LDA #$0E
0F/DB2B: 4C 03 FE  JMP $FE03          ; switch prg bank

; [ cursor sound effect (confirm) ]

0F/DB2E: A9 7D     LDA #$7D
0F/DB30: 8D 04 40  STA $4004
0F/DB33: A9 BA     LDA #$BA
0F/DB35: 8D 05 40  STA $4005
0F/DB38: A9 40     LDA #$40
0F/DB3A: 8D 06 40  STA $4006
0F/DB3D: A9 10     LDA #$10
0F/DB3F: 8D 07 40  STA $4007
0F/DB42: 85 E5     STA $E5
0F/DB44: 60        RTS 

; [ cursor sound effect (move) ]

0F/DB45: A9 7C     LDA #$7C
0F/DB47: 8D 04 40  STA $4004
0F/DB4A: A9 BA     LDA #$BA
0F/DB4C: 8D 05 40  STA $4005
0F/DB4F: A9 20     LDA #$20
0F/DB51: 8D 06 40  STA $4006
0F/DB54: 8D 07 40  STA $4007
0F/DB57: A9 0C     LDA #$0C
0F/DB59: 85 E5     STA $E5
0F/DB5B: 60        RTS 

; [ execute event script / update joypad input ]

0F/DB5C: A5 6C     LDA $6C
0F/DB5E: F0 42     BEQ $DBA2          ; update joypad input
0F/DB60: C9 01     CMP #$01
0F/DB62: D0 31     BNE $DB95
0F/DB64: A5 17     LDA $17            ; check event repeat counter
0F/DB66: D0 2D     BNE $DB95
0F/DB68: A9 0D     LDA #$0D
0F/DB6A: 20 03 FE  JSR $FE03          ; switch prg bank
0F/DB6D: A0 00     LDY #$00
0F/DB6F: B1 72     LDA ($72),Y        ; event command
0F/DB71: C9 F9     CMP #$F9
0F/DB73: D0 19     BNE $DB8E          ; branch if not repeat
0F/DB75: C8        INY 
0F/DB76: B1 72     LDA ($72),Y        ; set event repeat counter
0F/DB78: 85 17     STA $17
0F/DB7A: C6 17     DEC $17
0F/DB7C: A5 72     LDA $72            ; increment event script pointer
0F/DB7E: 18        CLC 
0F/DB7F: 69 02     ADC #$02
0F/DB81: 85 72     STA $72
0F/DB83: A5 73     LDA $73
0F/DB85: 69 00     ADC #$00
0F/DB87: 85 73     STA $73
0F/DB89: A9 0E     LDA #$0E
0F/DB8B: 4C 03 FE  JMP $FE03          ; switch prg bank
0F/DB8E: 85 70     STA $70
0F/DB90: C8        INY 
0F/DB91: B1 72     LDA ($72),Y
0F/DB93: 85 71     STA $71
0F/DB95: A9 03     LDA #$03
0F/DB97: 20 03 FE  JSR $FE03          ; switch prg bank
0F/DB9A: 20 00 A0  JSR $A000          ; 03/A000 (execute event command)
0F/DB9D: A9 0E     LDA #$0E
0F/DB9F: 4C 03 FE  JMP $FE03          ; switch prg bank

; [ update joypad input ]

0F/DBA2: 20 A9 DB  JSR $DBA9          ; read joypad registers
0F/DBA5: 20 C2 DB  JSR $DBC2          ; update button data
0F/DBA8: 60        RTS 

; [ read joypad registers ]

0F/DBA9: A9 01     LDA #$01
0F/DBAB: 8D 16 40  STA $4016
0F/DBAE: A9 00     LDA #$00
0F/DBB0: 8D 16 40  STA $4016
0F/DBB3: A2 08     LDX #$08
0F/DBB5: AD 16 40  LDA $4016
0F/DBB8: 29 03     AND #$03           ; support expansion controllers
0F/DBBA: C9 01     CMP #$01
0F/DBBC: 26 20     ROL $20
0F/DBBE: CA        DEX 
0F/DBBF: D0 F4     BNE $DBB5
0F/DBC1: 60        RTS 

; [ update button data ]

0F/DBC2: A5 20     LDA $20
0F/DBC4: 29 03     AND #$03
0F/DBC6: F0 02     BEQ $DBCA
0F/DBC8: A2 03     LDX #$03
0F/DBCA: 86 81     STX $81
0F/DBCC: A5 20     LDA $20
0F/DBCE: 29 0C     AND #$0C
0F/DBD0: F0 05     BEQ $DBD7
0F/DBD2: 8A        TXA 
0F/DBD3: 09 0C     ORA #$0C
0F/DBD5: 85 81     STA $81
0F/DBD7: A5 20     LDA $20
0F/DBD9: 45 21     EOR $21
0F/DBDB: 25 81     AND $81
0F/DBDD: 45 21     EOR $21
0F/DBDF: 85 21     STA $21
0F/DBE1: 45 20     EOR $20
0F/DBE3: AA        TAX 
0F/DBE4: 29 10     AND #$10
0F/DBE6: F0 0E     BEQ $DBF6
0F/DBE8: A5 20     LDA $20
0F/DBEA: 29 10     AND #$10
0F/DBEC: F0 02     BEQ $DBF0
0F/DBEE: E6 23     INC $23
0F/DBF0: A5 21     LDA $21
0F/DBF2: 49 10     EOR #$10
0F/DBF4: 85 21     STA $21
0F/DBF6: 8A        TXA 
0F/DBF7: 29 20     AND #$20
0F/DBF9: F0 0E     BEQ $DC09
0F/DBFB: A5 20     LDA $20
0F/DBFD: 29 20     AND #$20
0F/DBFF: F0 02     BEQ $DC03
0F/DC01: E6 22     INC $22
0F/DC03: A5 21     LDA $21
0F/DC05: 49 20     EOR #$20
0F/DC07: 85 21     STA $21
0F/DC09: 8A        TXA 
0F/DC0A: 29 40     AND #$40
0F/DC0C: F0 0E     BEQ $DC1C
0F/DC0E: A5 20     LDA $20
0F/DC10: 29 40     AND #$40
0F/DC12: F0 02     BEQ $DC16
0F/DC14: E6 25     INC $25
0F/DC16: A5 21     LDA $21
0F/DC18: 49 40     EOR #$40
0F/DC1A: 85 21     STA $21
0F/DC1C: 8A        TXA 
0F/DC1D: 29 80     AND #$80
0F/DC1F: F0 0E     BEQ $DC2F
0F/DC21: A5 20     LDA $20
0F/DC23: 29 80     AND #$80
0F/DC25: F0 02     BEQ $DC29
0F/DC27: E6 24     INC $24
0F/DC29: A5 21     LDA $21
0F/DC2B: 49 80     EOR #$80
0F/DC2D: 85 21     STA $21
0F/DC2F: 60        RTS 

; [ copy color palettes to ppu ]

0F/DC30: AD 02 20  LDA $2002
0F/DC33: A9 3F     LDA #$3F
0F/DC35: 8D 06 20  STA $2006
0F/DC38: A9 00     LDA #$00
0F/DC3A: 8D 06 20  STA $2006
0F/DC3D: A2 00     LDX #$00
0F/DC3F: BD C0 03  LDA $03C0,X
0F/DC42: 8D 07 20  STA $2007
0F/DC45: E8        INX 
0F/DC46: E0 20     CPX #$20
0F/DC48: 90 F5     BCC $DC3F
0F/DC4A: AD 02 20  LDA $2002
0F/DC4D: A9 3F     LDA #$3F
0F/DC4F: 8D 06 20  STA $2006
0F/DC52: A9 00     LDA #$00
0F/DC54: 8D 06 20  STA $2006
0F/DC57: 8D 06 20  STA $2006
0F/DC5A: 8D 06 20  STA $2006
0F/DC5D: 60        RTS 

; [ hide all sprites ]

0F/DC5E: 20 6E C4  JSR $C46E          ; clear oam data
0F/DC61: 20 00 FE  JSR $FE00          ; wait for vblank
0F/DC64: A9 02     LDA #$02           ; copy oam data to ppu
0F/DC66: 8D 14 40  STA $4014
0F/DC69: 60        RTS 

; [ do battle flash and sound effect ]

0F/DC6A: A9 08     LDA #$08
0F/DC6C: 8D 15 40  STA $4015
0F/DC6F: A9 00     LDA #$00
0F/DC71: 85 8C     STA $8C
; start of frame loop
0F/DC73: 20 00 FE  JSR $FE00          ; wait for vblank
0F/DC76: A5 2D     LDA $2D
0F/DC78: 4A        LSR 
0F/DC79: 90 06     BCC $DC81          ; branch if on world map
0F/DC7B: 20 F5 CD  JSR $CDF5          ; update ppu registers
0F/DC7E: 4C 84 DC  JMP $DC84
0F/DC81: 20 80 C3  JSR $C380          ; update ppu registers
0F/DC84: A5 8C     LDA $8C
0F/DC86: 0A        ASL 
0F/DC87: 0A        ASL 
0F/DC88: 0A        ASL 
0F/DC89: 29 E0     AND #$E0
0F/DC8B: 09 0A     ORA #$0A
0F/DC8D: 8D 01 20  STA $2001
0F/DC90: A9 0F     LDA #$0F
0F/DC92: 8D 0C 40  STA $400C
0F/DC95: A5 8C     LDA $8C
0F/DC97: 4A        LSR 
0F/DC98: 09 03     ORA #$03
0F/DC9A: 8D 0E 40  STA $400E
0F/DC9D: A9 00     LDA #$00
0F/DC9F: 8D 0F 40  STA $400F
0F/DCA2: E6 8C     INC $8C
0F/DCA4: A5 8C     LDA $8C
0F/DCA6: C9 41     CMP #$41           ; loop for 65 frames
0F/DCA8: 90 C9     BCC $DC73
0F/DCAA: A9 00     LDA #$00
0F/DCAC: 8D 01 20  STA $2001
0F/DCAF: 8D 15 40  STA $4015
0F/DCB2: 4C 5E DC  JMP $DC5E          ; hide all sprites

; [ copy color palettes to ppu ]

0F/DCB5: AD 02 20  LDA $2002          ; latch ppu
0F/DCB8: A2 00     LDX #$00
0F/DCBA: A9 3F     LDA #$3F
0F/DCBC: 8D 06 20  STA $2006          ; ppu address: $3F00 (color palettes)
0F/DCBF: A9 00     LDA #$00
0F/DCC1: 8D 06 20  STA $2006
0F/DCC4: BD F0 03  LDA $03F0,X        ; copy color palettes to ppu
0F/DCC7: 8D 07 20  STA $2007
0F/DCCA: E8        INX 
0F/DCCB: E0 10     CPX #$10
0F/DCCD: 90 F5     BCC $DCC4
0F/DCCF: AD 02 20  LDA $2002          ; latch ppu
0F/DCD2: A9 3F     LDA #$3F
0F/DCD4: 8D 06 20  STA $2006
0F/DCD7: A9 00     LDA #$00
0F/DCD9: 8D 06 20  STA $2006
0F/DCDC: 8D 06 20  STA $2006
0F/DCDF: 8D 06 20  STA $2006
0F/DCE2: 60        RTS 

; [ filter map bg palette ]

; carry: set = blue filter, clear = red filter

0F/DCE3: A9 05     LDA #$05           ; red filter
0F/DCE5: 85 61     STA $61
0F/DCE7: 90 03     BCC $DCEC
0F/DCE9: 4C 27 DD  JMP $DD27
0F/DCEC: A2 0F     LDX #$0F
0F/DCEE: BD C0 03  LDA $03C0,X
0F/DCF1: 9D F0 03  STA $03F0,X
0F/DCF4: CA        DEX 
0F/DCF5: E0 0C     CPX #$0C
0F/DCF7: 90 F5     BCC $DCEE
0F/DCF9: BD C0 03  LDA $03C0,X
0F/DCFC: 29 1F     AND #$1F
0F/DCFE: 9D F0 03  STA $03F0,X
0F/DD01: CA        DEX 
0F/DD02: 10 F5     BPL $DCF9
0F/DD04: A9 01     LDA #$01
0F/DD06: 48        PHA 
0F/DD07: 29 03     AND #$03
0F/DD09: D0 07     BNE $DD12
0F/DD0B: 20 7B DD  JSR $DD7B          ; update palette filter
0F/DD0E: C0 00     CPY #$00
0F/DD10: F0 13     BEQ $DD25
0F/DD12: 20 00 FE  JSR $FE00          ; wait for vblank
0F/DD15: 20 B5 DC  JSR $DCB5          ; copy color palettes to ppu
0F/DD18: 20 F5 CD  JSR $CDF5          ; update ppu registers
0F/DD1B: 20 46 C7  JSR $C746          ; update sound
0F/DD1E: 68        PLA 
0F/DD1F: 18        CLC 
0F/DD20: 69 01     ADC #$01
0F/DD22: 4C 06 DD  JMP $DD06
0F/DD25: 68        PLA 
0F/DD26: 60        RTS 
0F/DD27: A9 02     LDA #$02           ; blue filter
0F/DD29: 85 61     STA $61
0F/DD2B: 20 EC DC  JSR $DCEC
0F/DD2E: 20 A9 DB  JSR $DBA9          ; read joypad registers
0F/DD31: A5 20     LDA $20
0F/DD33: 85 82     STA $82
0F/DD35: 20 00 FE  JSR $FE00          ; wait for vblank
0F/DD38: 20 46 C7  JSR $C746          ; update sound
0F/DD3B: 20 A9 DB  JSR $DBA9          ; read joypad registers
0F/DD3E: A5 20     LDA $20
0F/DD40: C5 82     CMP $82
0F/DD42: F0 F1     BEQ $DD35
0F/DD44: 20 00 FE  JSR $FE00          ; wait for vblank
0F/DD47: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0F/DD4A: 20 F5 CD  JSR $CDF5          ; update ppu registers
0F/DD4D: A5 57     LDA $57
0F/DD4F: 4C 03 FE  JMP $FE03          ; switch prg bank

; [  ]

; unused ???

0F/DD52: BD 73 DD  LDA $DD73,X
0F/DD55: 8D 00 02  STA $0200
0F/DD58: BD 74 DD  LDA $DD74,X
0F/DD5B: 8D 04 02  STA $0204
0F/DD5E: BD 75 DD  LDA $DD75,X
0F/DD61: 8D 08 02  STA $0208
0F/DD64: BD 76 DD  LDA $DD76,X
0F/DD67: 8D 0C 02  STA $020C
0F/DD6A: 20 00 FE  JSR $FE00          ; wait for vblank
0F/DD6D: A9 02     LDA #$02
0F/DD6F: 8D 14 40  STA $4014
0F/DD72: 60        RTS 

0F/DD73: F8 F8 F8 F8
0F/DD77: 6C 74 6C 74

; [ update palette filter ]

0F/DD7B: A0 00     LDY #$00
0F/DD7D: A2 0D     LDX #$0D
0F/DD7F: BD F0 03  LDA $03F0,X
0F/DD82: C9 0F     CMP #$0F
0F/DD84: F0 1A     BEQ $DDA0          ; skip if black
0F/DD86: 48        PHA 
0F/DD87: 29 10     AND #$10
0F/DD89: 85 80     STA $80
0F/DD8B: 68        PLA 
0F/DD8C: 29 0F     AND #$0F
0F/DD8E: C5 61     CMP $61
0F/DD90: F0 0E     BEQ $DDA0
0F/DD92: B0 04     BCS $DD98
0F/DD94: 69 01     ADC #$01
0F/DD96: D0 02     BNE $DD9A
0F/DD98: E9 01     SBC #$01
0F/DD9A: 05 80     ORA $80
0F/DD9C: 9D F0 03  STA $03F0,X
0F/DD9F: C8        INY 
0F/DDA0: CA        DEX 
0F/DDA1: 10 DC     BPL $DD7F
0F/DDA3: 60        RTS 

; [ fade in/out ]

; A: -----?ab
;      a: 0 = world map, 1 = normal map
;      b: 0 = fade out, 1 = fade in

0F/DDA4: 85 8C     STA $8C
0F/DDA6: 20 5E DC  JSR $DC5E          ; hide all sprites
0F/DDA9: 20 0E DE  JSR $DE0E
0F/DDAC: A9 01     LDA #$01
0F/DDAE: 48        PHA 
0F/DDAF: 29 03     AND #$03
0F/DDB1: D0 07     BNE $DDBA
0F/DDB3: 20 31 DE  JSR $DE31          ; update colors for fade
0F/DDB6: C0 00     CPY #$00
0F/DDB8: F0 13     BEQ $DDCD
0F/DDBA: 20 00 FE  JSR $FE00          ; wait for vblank
0F/DDBD: 20 B5 DC  JSR $DCB5          ; copy color palettes to ppu
0F/DDC0: 20 DD DD  JSR $DDDD
0F/DDC3: 20 46 C7  JSR $C746          ; update sound
0F/DDC6: 68        PLA 
0F/DDC7: 18        CLC 
0F/DDC8: 69 01     ADC #$01
0F/DDCA: 4C AE DD  JMP $DDAE
0F/DDCD: 68        PLA 
0F/DDCE: A5 8C     LDA $8C
0F/DDD0: 4A        LSR 
0F/DDD1: B0 05     BCS $DDD8
0F/DDD3: A9 00     LDA #$00
0F/DDD5: 8D 01 20  STA $2001
0F/DDD8: A9 0E     LDA #$0E
0F/DDDA: 4C 03 FE  JMP $FE03          ; switch prg bank

; [  ]

0F/DDDD: A5 8C     LDA $8C
0F/DDDF: 29 04     AND #$04
0F/DDE1: F0 13     BEQ $DDF6
0F/DDE3: A5 FF     LDA $FF
0F/DDE5: 8D 00 20  STA $2000
0F/DDE8: A9 0A     LDA #$0A
0F/DDEA: 8D 01 20  STA $2001
0F/DDED: A9 00     LDA #$00
0F/DDEF: 8D 05 20  STA $2005
0F/DDF2: 8D 05 20  STA $2005
0F/DDF5: 60        RTS 
0F/DDF6: A5 8C     LDA $8C
0F/DDF8: 29 02     AND #$02
0F/DDFA: D0 09     BNE $DE05
0F/DDFC: 20 80 C3  JSR $C380          ; update ppu registers
0F/DDFF: A9 0A     LDA #$0A
0F/DE01: 8D 01 20  STA $2001
0F/DE04: 60        RTS 
0F/DE05: 20 F5 CD  JSR $CDF5          ; update ppu registers
0F/DE08: A9 0A     LDA #$0A
0F/DE0A: 8D 01 20  STA $2001
0F/DE0D: 60        RTS 

; [  ]

0F/DE0E: A2 00     LDX #$00
0F/DE10: A5 8C     LDA $8C
0F/DE12: 4A        LSR 
0F/DE13: 90 10     BCC $DE25          ; branch if fading out
0F/DE15: 20 25 DE  JSR $DE25
0F/DE18: CA        DEX 
0F/DE19: BD F0 03  LDA $03F0,X        ; if fading in, start with darkest colors
0F/DE1C: 29 0F     AND #$0F
0F/DE1E: 9D F0 03  STA $03F0,X
0F/DE21: CA        DEX 
0F/DE22: 10 F5     BPL $DE19
0F/DE24: 60        RTS 
0F/DE25: BD C0 03  LDA $03C0,X        ; copy palette to buffer
0F/DE28: 9D F0 03  STA $03F0,X
0F/DE2B: E8        INX 
0F/DE2C: E0 10     CPX #$10
0F/DE2E: 90 F5     BCC $DE25
0F/DE30: 60        RTS 

; [ update colors for fade ]

0F/DE31: A0 00     LDY #$00
0F/DE33: A2 00     LDX #$00
0F/DE35: A5 8C     LDA $8C
0F/DE37: 4A        LSR 
0F/DE38: B0 18     BCS $DE52
0F/DE3A: BD F0 03  LDA $03F0,X        ; decrease brightness
0F/DE3D: C9 0F     CMP #$0F
0F/DE3F: F0 0B     BEQ $DE4C
0F/DE41: 38        SEC 
0F/DE42: E9 10     SBC #$10
0F/DE44: B0 02     BCS $DE48
0F/DE46: A9 0F     LDA #$0F
0F/DE48: 9D F0 03  STA $03F0,X
0F/DE4B: C8        INY 
0F/DE4C: E8        INX 
0F/DE4D: E0 10     CPX #$10
0F/DE4F: D0 E9     BNE $DE3A
0F/DE51: 60        RTS 
0F/DE52: BD F0 03  LDA $03F0,X        ; increase brightness
0F/DE55: DD C0 03  CMP $03C0,X
0F/DE58: F0 07     BEQ $DE61
0F/DE5A: 18        CLC 
0F/DE5B: 69 10     ADC #$10
0F/DE5D: 9D F0 03  STA $03F0,X
0F/DE60: C8        INY 
0F/DE61: E8        INX 
0F/DE62: E0 10     CPX #$10
0F/DE64: 90 EC     BCC $DE52
0F/DE66: 60        RTS 

; [ play error sound effect ]

0F/DE67: A9 01     LDA #$01
0F/DE69: 85 E5     STA $E5
0F/DE6B: A9 30     LDA #$30
0F/DE6D: 8D 00 40  STA $4000
0F/DE70: 8D 08 40  STA $4008
0F/DE73: 8D 0C 40  STA $400C
0F/DE76: A0 0F     LDY #$0F
0F/DE78: 20 89 DE  JSR $DE89          ; update ??? sound effect
0F/DE7B: 88        DEY 
0F/DE7C: 10 FA     BPL $DE78
0F/DE7E: A9 30     LDA #$30
0F/DE80: 8D 04 40  STA $4004
0F/DE83: A9 00     LDA #$00
0F/DE85: 8D 06 40  STA $4006
0F/DE88: 60        RTS 

; [ update error sound effect ]

0F/DE89: 20 00 FE  JSR $FE00          ; wait for vblank
0F/DE8C: A9 7C     LDA #$7C
0F/DE8E: 8D 04 40  STA $4004
0F/DE91: A9 89     LDA #$89
0F/DE93: 8D 05 40  STA $4005
0F/DE96: A9 80     LDA #$80
0F/DE98: 8D 06 40  STA $4006
0F/DE9B: A9 00     LDA #$00
0F/DE9D: 8D 07 40  STA $4007
0F/DEA0: 60        RTS 

; --------------------------------------------------------------------------

; [ draw cursor sprite ]

0F/DEA1: A9 E3     LDA #$E3
0F/DEA3: 85 81     STA $81
0F/DEA5: A9 B7     LDA #$B7
0F/DEA7: 85 80     STA $80
0F/DEA9: A9 FC     LDA #$FC
0F/DEAB: 85 82     STA $82
0F/DEAD: 4C 02 E1  JMP $E102

; [ update dreadnought sprites ]

0F/DEB0: 20 38 E2  JSR $E238          ; check if dreadnought is onscreen
0F/DEB3: B0 03     BCS $DEB8
0F/DEB5: 4C E0 DE  JMP $DEE0
0F/DEB8: 60        RTS 
0F/DEB9: AD 15 60  LDA $6015
0F/DEBC: 85 40     STA $40
0F/DEBE: AD 16 60  LDA $6016
0F/DEC1: 85 41     STA $41
0F/DEC3: AD 17 60  LDA $6017
0F/DEC6: 85 61     STA $61
0F/DEC8: A5 F0     LDA $F0
0F/DECA: 29 04     AND #$04
0F/DECC: D0 06     BNE $DED4
0F/DECE: 20 E0 DE  JSR $DEE0
0F/DED1: 4C D7 DE  JMP $DED7
0F/DED4: 20 EB DE  JSR $DEEB
0F/DED7: A5 F0     LDA $F0
0F/DED9: 4A        LSR 
0F/DEDA: 90 03     BCC $DEDF
0F/DEDC: 4C F6 DE  JMP $DEF6          ; draw dreadnought shadow
0F/DEDF: 60        RTS 

; [  ]

0F/DEE0: A9 E2     LDA #$E2           ; 0F/E279
0F/DEE2: 85 55     STA $55
0F/DEE4: A9 79     LDA #$79
0F/DEE6: 85 54     STA $54
0F/DEE8: 4C 1E DF  JMP $DF1E

; [  ]

0F/DEEB: A9 E2     LDA #$E2           ; 0F/E2BA
0F/DEED: 85 55     STA $55
0F/DEEF: A9 BA     LDA #$BA
0F/DEF1: 85 54     STA $54
0F/DEF3: 4C 1E DF  JMP $DF1E

; [ draw dreadnought shadow ]

0F/DEF6: A9 E2     LDA #$E2           ; 0F/E2FB
0F/DEF8: 85 55     STA $55
0F/DEFA: A9 FB     LDA #$FB
0F/DEFC: 85 54     STA $54
0F/DEFE: 4C 1E DF  JMP $DF1E

; [  ]

0F/DF01: 86 26     STX $26
0F/DF03: A5 40     LDA $40
0F/DF05: 38        SEC 
0F/DF06: E9 18     SBC #$18
0F/DF08: 85 40     STA $40
0F/DF0A: A5 61     LDA $61
0F/DF0C: E9 00     SBC #$00
0F/DF0E: 85 61     STA $61
0F/DF10: A5 41     LDA $41
0F/DF12: 18        CLC 
0F/DF13: 69 20     ADC #$20
0F/DF15: C9 70     CMP #$70
0F/DF17: 90 02     BCC $DF1B
0F/DF19: A9 6F     LDA #$6F
0F/DF1B: 85 41     STA $41
0F/DF1D: 60        RTS 

; [ draw dreadnought sprites ]

0F/DF1E: A6 26     LDX $26
0F/DF20: A0 00     LDY #$00
0F/DF22: B1 54     LDA ($54),Y
0F/DF24: F0 19     BEQ $DF3F
0F/DF26: C9 FF     CMP #$FF
0F/DF28: F0 D7     BEQ $DF01
0F/DF2A: 18        CLC 
0F/DF2B: 65 41     ADC $41
0F/DF2D: 85 41     STA $41
0F/DF2F: A5 40     LDA $40
0F/DF31: 38        SEC 
0F/DF32: E9 18     SBC #$18
0F/DF34: 85 40     STA $40
0F/DF36: A5 61     LDA $61
0F/DF38: E9 00     SBC #$00
0F/DF3A: 85 61     STA $61
0F/DF3C: 4C 4E DF  JMP $DF4E
0F/DF3F: A0 03     LDY #$03
0F/DF41: B1 54     LDA ($54),Y
0F/DF43: 18        CLC 
0F/DF44: 65 40     ADC $40
0F/DF46: 85 40     STA $40
0F/DF48: A5 61     LDA $61
0F/DF4A: 69 00     ADC #$00
0F/DF4C: 85 61     STA $61
0F/DF4E: A5 61     LDA $61
0F/DF50: D0 22     BNE $DF74
0F/DF52: A5 41     LDA $41
0F/DF54: C9 F0     CMP #$F0
0F/DF56: B0 1C     BCS $DF74
0F/DF58: A5 41     LDA $41
0F/DF5A: 9D 00 02  STA $0200,X
0F/DF5D: A5 40     LDA $40
0F/DF5F: 9D 03 02  STA $0203,X
0F/DF62: A0 01     LDY #$01
0F/DF64: B1 54     LDA ($54),Y
0F/DF66: 9D 01 02  STA $0201,X
0F/DF69: C8        INY 
0F/DF6A: B1 54     LDA ($54),Y
0F/DF6C: 9D 02 02  STA $0202,X
0F/DF6F: 8A        TXA 
0F/DF70: 18        CLC 
0F/DF71: 69 04     ADC #$04
0F/DF73: AA        TAX 
0F/DF74: A5 54     LDA $54
0F/DF76: 18        CLC 
0F/DF77: 69 04     ADC #$04
0F/DF79: 85 54     STA $54
0F/DF7B: 90 A3     BCC $DF20
0F/DF7D: E6 55     INC $55
0F/DF7F: 4C 20 DF  JMP $DF20

; [  ]

0F/DF82: A9 6F     LDA #$6F
0F/DF84: 85 8A     STA $8A
0F/DF86: 20 BB DF  JSR $DFBB
0F/DF89: A5 F0     LDA $F0
0F/DF8B: 29 01     AND #$01
0F/DF8D: D0 F7     BNE $DF86
0F/DF8F: C6 8A     DEC $8A
0F/DF91: A5 8A     LDA $8A
0F/DF93: C9 4F     CMP #$4F
0F/DF95: B0 EF     BCS $DF86
0F/DF97: A9 02     LDA #$02
0F/DF99: 85 33     STA $33
0F/DF9B: 60        RTS 

; [  ]

0F/DF9C: A9 4F     LDA #$4F
0F/DF9E: 85 8A     STA $8A
0F/DFA0: 20 BB DF  JSR $DFBB
0F/DFA3: A5 F0     LDA $F0
0F/DFA5: 29 01     AND #$01
0F/DFA7: D0 F7     BNE $DFA0
0F/DFA9: E6 8A     INC $8A
0F/DFAB: A5 8A     LDA $8A
0F/DFAD: C9 70     CMP #$70
0F/DFAF: 90 EF     BCC $DFA0
0F/DFB1: A9 01     LDA #$01
0F/DFB3: 85 33     STA $33
0F/DFB5: A9 00     LDA #$00
0F/DFB7: 8D 0C 40  STA $400C
0F/DFBA: 60        RTS 

; [  ]

0F/DFBB: 20 00 FE  JSR $FE00          ; wait for vblank
0F/DFBE: A9 02     LDA #$02
0F/DFC0: 8D 14 40  STA $4014
0F/DFC3: A5 F0     LDA $F0
0F/DFC5: 18        CLC 
0F/DFC6: 69 01     ADC #$01
0F/DFC8: 85 F0     STA $F0
0F/DFCA: 20 80 C3  JSR $C380          ; update ppu registers
0F/DFCD: 20 6E C4  JSR $C46E          ; clear oam data
0F/DFD0: 20 46 C7  JSR $C746          ; update sound
0F/DFD3: A9 70     LDA #$70
0F/DFD5: 85 40     STA $40
0F/DFD7: A5 8A     LDA $8A
0F/DFD9: 85 41     STA $41
0F/DFDB: A5 F0     LDA $F0
0F/DFDD: 29 08     AND #$08
0F/DFDF: 09 10     ORA #$10
0F/DFE1: 85 80     STA $80
0F/DFE3: A9 28     LDA #$28
0F/DFE5: 20 CF E0  JSR $E0CF
0F/DFE8: 20 AA E0  JSR $E0AA
0F/DFEB: 20 7B E1  JSR $E17B
0F/DFEE: 20 94 E1  JSR $E194
0F/DFF1: 20 A8 E1  JSR $E1A8          ; update chocobo sprite
0F/DFF4: 20 FB E1  JSR $E1FB
0F/DFF7: A9 38     LDA #$38
0F/DFF9: 8D 0C 40  STA $400C
0F/DFFC: A5 F0     LDA $F0
0F/DFFE: 29 0F     AND #$0F
0F/E000: 8D 0E 40  STA $400E
0F/E003: A9 00     LDA #$00
0F/E005: 8D 0F 40  STA $400F
0F/E008: 60        RTS 

; [ update sprites (world map) ]

0F/E009: A4 42     LDY $42
0F/E00B: C0 08     CPY #$08
0F/E00D: F0 4C     BEQ $E05B
0F/E00F: C0 04     CPY #$04
0F/E011: F0 4E     BEQ $E061
0F/E013: C0 02     CPY #$02
0F/E015: F0 56     BEQ $E06D
; fallthrough

; [ update player sprite ]

0F/E017: 20 73 E0  JSR $E073          ; draw player sprite
0F/E01A: A5 43     LDA $43
0F/E01C: 29 12     AND #$12
0F/E01E: F0 10     BEQ $E030
0F/E020: AD 06 02  LDA $0206
0F/E023: 49 20     EOR #$20
0F/E025: 8D 06 02  STA $0206
0F/E028: AD 0E 02  LDA $020E
0F/E02B: 49 20     EOR #$20
0F/E02D: 9D 0E 02  STA $020E,X
0F/E030: A5 43     LDA $43
0F/E032: 29 04     AND #$04
0F/E034: F0 10     BEQ $E046
0F/E036: AD 02 02  LDA $0202
0F/E039: 49 20     EOR #$20
0F/E03B: 8D 02 02  STA $0202
0F/E03E: AD 0A 02  LDA $020A
0F/E041: 49 20     EOR #$20
0F/E043: 8D 0A 02  STA $020A
0F/E046: A5 2D     LDA $2D
0F/E048: 4A        LSR 
0F/E049: 90 01     BCC $E04C          ; branch if on the world map
0F/E04B: 60        RTS 
; no vehicle
0F/E04C: 20 E0 E1  JSR $E1E0
0F/E04F: 20 7B E1  JSR $E17B
0F/E052: 20 94 E1  JSR $E194
0F/E055: 20 A8 E1  JSR $E1A8          ; update chocobo sprite
0F/E058: 4C FB E1  JMP $E1FB
; airship
0F/E05B: 20 73 E0  JSR $E073          ; draw player sprite
0F/E05E: 4C 4F E0  JMP $E04F
; ship
0F/E061: 20 73 E0  JSR $E073          ; draw player sprite
0F/E064: 20 E0 E1  JSR $E1E0
0F/E067: 20 55 E0  JSR $E055
0F/E06A: 4C 74 E1  JMP $E174
; canoe/snowcraft
0F/E06D: 20 73 E0  JSR $E073          ; draw player sprite
0F/E070: 4C 4C E0  JMP $E04C

; [ draw player sprite ]

; Y: vehicle

0F/E073: A9 70     LDA #$70           ; x position always $70
0F/E075: 85 40     STA $40
0F/E077: B9 6B E1  LDA $E16B,Y        ; y position for vehicle
0F/E07A: C0 08     CPY #$08
0F/E07C: D0 08     BNE $E086          ; branch if not in airship
0F/E07E: 85 41     STA $41
0F/E080: A5 F0     LDA $F0            ; frame counter
0F/E082: 0A        ASL 
0F/E083: 4C 8E E0  JMP $E08E
0F/E086: 85 41     STA $41
0F/E088: A5 35     LDA $35            ; horizontal subtile position
0F/E08A: D0 02     BNE $E08E
0F/E08C: A5 36     LDA $36            ; vertical subtile position
0F/E08E: 29 08     AND #$08
0F/E090: A6 33     LDX $33            ; facing direction
0F/E092: 1D 1F E3  ORA $E31F,X
0F/E095: 85 80     STA $80
0F/E097: C0 01     CPY #$01
0F/E099: F0 46     BEQ $E0E1
0F/E09B: C0 02     CPY #$02
0F/E09D: F0 2D     BEQ $E0CC
0F/E09F: C0 04     CPY #$04
0F/E0A1: F0 24     BEQ $E0C7
; airship
0F/E0A3: A9 28     LDA #$28           ; draw airship
0F/E0A5: 85 82     STA $82
0F/E0A7: 20 D1 E0  JSR $E0D1
0F/E0AA: A5 F0     LDA $F0
0F/E0AC: 4A        LSR 
0F/E0AD: 90 17     BCC $E0C6          ; return every other frame
0F/E0AF: A9 6F     LDA #$6F
0F/E0B1: 85 41     STA $41
0F/E0B3: A9 70     LDA #$70
0F/E0B5: 85 40     STA $40
0F/E0B7: A9 B4     LDA #$B4           ; draw airship shadow
0F/E0B9: 85 82     STA $82
0F/E0BB: A9 AF     LDA #$AF           ; 0F/E3AF
0F/E0BD: 85 80     STA $80
0F/E0BF: A9 E3     LDA #$E3
0F/E0C1: 85 81     STA $81
0F/E0C3: 4C 02 E1  JMP $E102
0F/E0C6: 60        RTS 
; ship
0F/E0C7: AD 03 60  LDA $6003
0F/E0CA: D0 03     BNE $E0CF
; canoe/snowcraft/chocobo
0F/E0CC: AD 19 60  LDA $6019
0F/E0CF: 85 82     STA $82
0F/E0D1: A5 80     LDA $80
0F/E0D3: 18        CLC 
0F/E0D4: 69 6F     ADC #$6F           ; 0F/E36F (vehicle sprite data)
0F/E0D6: 85 80     STA $80
0F/E0D8: A9 E3     LDA #$E3
0F/E0DA: 69 00     ADC #$00
0F/E0DC: 85 81     STA $81
0F/E0DE: 4C 02 E1  JMP $E102
; no vehicle
0F/E0E1: A5 2D     LDA $2D
0F/E0E3: 29 01     AND #$01
0F/E0E5: 4A        LSR 
0F/E0E6: B0 0B     BCS $E0F3          ; branch if on normal map
0F/E0E8: AD 08 60  LDA $6008
0F/E0EB: 29 02     AND #$02
0F/E0ED: F0 04     BEQ $E0F3
0F/E0EF: A9 70     LDA #$70
0F/E0F1: D0 DC     BNE $E0CF
0F/E0F3: 85 82     STA $82
0F/E0F5: A9 2F     LDA #$2F           ; 0F/E32F (map character sprite data)
0F/E0F7: 18        CLC 
0F/E0F8: 65 80     ADC $80
0F/E0FA: 85 80     STA $80
0F/E0FC: A9 E3     LDA #$E3
0F/E0FE: 69 00     ADC #$00
0F/E100: 85 81     STA $81
0F/E102: A0 00     LDY #$00
0F/E104: A6 26     LDX $26
0F/E106: A5 41     LDA $41
0F/E108: 9D 00 02  STA $0200,X        ; y position
0F/E10B: 9D 08 02  STA $0208,X
0F/E10E: 18        CLC 
0F/E10F: 69 08     ADC #$08
0F/E111: 9D 04 02  STA $0204,X
0F/E114: 9D 0C 02  STA $020C,X
0F/E117: A5 40     LDA $40
0F/E119: 9D 03 02  STA $0203,X        ; x position
0F/E11C: 9D 07 02  STA $0207,X
0F/E11F: 18        CLC 
0F/E120: 69 08     ADC #$08
0F/E122: 9D 0B 02  STA $020B,X
0F/E125: 9D 0F 02  STA $020F,X
0F/E128: B1 80     LDA ($80),Y        ; tile index
0F/E12A: C8        INY 
0F/E12B: 18        CLC 
0F/E12C: 65 82     ADC $82            ; add tile offset
0F/E12E: 9D 01 02  STA $0201,X
0F/E131: B1 80     LDA ($80),Y        ; flags
0F/E133: C8        INY 
0F/E134: 9D 02 02  STA $0202,X
0F/E137: B1 80     LDA ($80),Y
0F/E139: C8        INY 
0F/E13A: 18        CLC 
0F/E13B: 65 82     ADC $82
0F/E13D: 9D 05 02  STA $0205,X
0F/E140: B1 80     LDA ($80),Y
0F/E142: C8        INY 
0F/E143: 9D 06 02  STA $0206,X
0F/E146: B1 80     LDA ($80),Y
0F/E148: C8        INY 
0F/E149: 18        CLC 
0F/E14A: 65 82     ADC $82
0F/E14C: 9D 09 02  STA $0209,X
0F/E14F: B1 80     LDA ($80),Y
0F/E151: C8        INY 
0F/E152: 9D 0A 02  STA $020A,X
0F/E155: B1 80     LDA ($80),Y
0F/E157: C8        INY 
0F/E158: 18        CLC 
0F/E159: 65 82     ADC $82
0F/E15B: 9D 0D 02  STA $020D,X
0F/E15E: B1 80     LDA ($80),Y
0F/E160: 9D 0E 02  STA $020E,X
0F/E163: A5 26     LDA $26
0F/E165: 18        CLC 
0F/E166: 69 10     ADC #$10
0F/E168: 85 26     STA $26
0F/E16A: 60        RTS 

; player sprite y position for each vehicle
0F/E16B: 6C 6C 6F 6F 6F 6F 6F 6F 4F

0F/E174: AD 03 60  LDA $6003
0F/E177: C9 10     CMP #$10
0F/E179: F0 19     BEQ $E194
0F/E17B: AD 00 60  LDA $6000
0F/E17E: F0 47     BEQ $E1C7
0F/E180: AE 01 60  LDX $6001
0F/E183: AC 02 60  LDY $6002
0F/E186: 20 08 E2  JSR $E208          ; check if coordinates are onscreen
0F/E189: B0 3C     BCS $E1C7
0F/E18B: A9 00     LDA #$00
0F/E18D: 85 80     STA $80
0F/E18F: A9 10     LDA #$10
0F/E191: 4C CF E0  JMP $E0CF
0F/E194: AE 0D 60  LDX $600D
0F/E197: AC 0E 60  LDY $600E
0F/E19A: 20 08 E2  JSR $E208          ; check if coordinates are onscreen
0F/E19D: B0 28     BCS $E1C7
0F/E19F: A9 00     LDA #$00
0F/E1A1: 85 80     STA $80
0F/E1A3: A9 C0     LDA #$C0
0F/E1A5: 4C CF E0  JMP $E0CF

; [ update chocobo sprite ]

0F/E1A8: AD 08 60  LDA $6008
0F/E1AB: 30 23     BMI $E1D0          ; branch if chocobo is running away
0F/E1AD: F0 18     BEQ $E1C7          ; branch if chocobo is hidden
0F/E1AF: C9 02     CMP #$02
0F/E1B1: F0 14     BEQ $E1C7          ; return if player is riding chocobo ???
0F/E1B3: AE 09 60  LDX $6009          ; chocobo xy position
0F/E1B6: AC 0A 60  LDY $600A
0F/E1B9: 20 08 E2  JSR $E208          ; check if coordinates are onscreen
0F/E1BC: B0 09     BCS $E1C7          ; return if chocobo is offscreen
0F/E1BE: A9 00     LDA #$00
0F/E1C0: 85 80     STA $80
0F/E1C2: A9 70     LDA #$70
0F/E1C4: 4C CF E0  JMP $E0CF
0F/E1C7: 60        RTS 

; [ execute object command ]

0F/E1C8: A9 03     LDA #$03
0F/E1CA: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E1CD: 4C 03 A0  JMP $A003          ; 03/A003 (execute object command)

; [ draw chocobo running away ]

0F/E1D0: A2 01     LDX #$01           ; update chocobo position
0F/E1D2: 20 C8 E1  JSR $E1C8          ; execute object command
0F/E1D5: B0 03     BCS $E1DA          ; branch if chocobo ran offscreen
0F/E1D7: 4C D1 E0  JMP $E0D1
0F/E1DA: A9 00     LDA #$00           ; hide chocobo
0F/E1DC: 8D 08 60  STA $6008
0F/E1DF: 60        RTS 

; [  ]

0F/E1E0: AD 04 60  LDA $6004
0F/E1E3: 30 1E     BMI $E203
0F/E1E5: F0 E0     BEQ $E1C7
0F/E1E7: AE 05 60  LDX $6005          ; airship xy position
0F/E1EA: AC 06 60  LDY $6006
0F/E1ED: 20 08 E2  JSR $E208          ; check if coordinates are onscreen
0F/E1F0: B0 D5     BCS $E1C7
0F/E1F2: A9 10     LDA #$10
0F/E1F4: 85 80     STA $80
0F/E1F6: A9 28     LDA #$28
0F/E1F8: 4C CF E0  JMP $E0CF

; [ update dreadnought ]

0F/E1FB: AD 14 60  LDA $6014
0F/E1FE: F0 C7     BEQ $E1C7          ; return if dreadnought is not visible
0F/E200: 4C B0 DE  JMP $DEB0          ; update dreadnought sprites

; [  ]

0F/E203: A2 04     LDX #$04
0F/E205: 4C C8 E1  JMP $E1C8          ; execute object command

; [ check if coordinates are onscreen ]

0F/E208: 98        TYA 
0F/E209: 38        SEC 
0F/E20A: E5 28     SBC $28
0F/E20C: C9 10     CMP #$10
0F/E20E: B0 26     BCS $E236
0F/E210: 0A        ASL 
0F/E211: 0A        ASL 
0F/E212: 0A        ASL 
0F/E213: 0A        ASL 
0F/E214: 18        CLC                ; *** bug *** (should be SEC)
0F/E215: E5 36     SBC $36
0F/E217: C9 EC     CMP #$EC
0F/E219: B0 1B     BCS $E236
0F/E21B: 85 41     STA $41
0F/E21D: 8A        TXA 
0F/E21E: 38        SEC 
0F/E21F: E5 27     SBC $27
0F/E221: C9 10     CMP #$10
0F/E223: B0 11     BCS $E236
0F/E225: 0A        ASL 
0F/E226: 0A        ASL 
0F/E227: 0A        ASL 
0F/E228: 0A        ASL 
0F/E229: 38        SEC 
0F/E22A: E5 35     SBC $35
0F/E22C: 90 08     BCC $E236
0F/E22E: C9 F8     CMP #$F8
0F/E230: B0 04     BCS $E236
0F/E232: 85 40     STA $40
0F/E234: 18        CLC 
0F/E235: 60        RTS 
0F/E236: 38        SEC 
0F/E237: 60        RTS 

; [ check if dreadnought is onscreen ]

0F/E238: AD 16 60  LDA $6016
0F/E23B: 38        SEC 
0F/E23C: E5 28     SBC $28
0F/E23E: C9 10     CMP #$10
0F/E240: B0 F4     BCS $E236
0F/E242: 0A        ASL 
0F/E243: 0A        ASL 
0F/E244: 0A        ASL 
0F/E245: 0A        ASL 
0F/E246: 38        SEC 
0F/E247: E5 36     SBC $36
0F/E249: 90 EB     BCC $E236
0F/E24B: E9 10     SBC #$10
0F/E24D: 85 41     STA $41
0F/E24F: AD 15 60  LDA $6015
0F/E252: 38        SEC 
0F/E253: E5 27     SBC $27
0F/E255: C9 11     CMP #$11
0F/E257: B0 DD     BCS $E236
0F/E259: A2 00     LDX #$00
0F/E25B: C9 10     CMP #$10
0F/E25D: 90 02     BCC $E261
0F/E25F: A2 01     LDX #$01
0F/E261: 0A        ASL 
0F/E262: 0A        ASL 
0F/E263: 0A        ASL 
0F/E264: 0A        ASL 
0F/E265: 38        SEC 
0F/E266: E5 35     SBC $35
0F/E268: B0 04     BCS $E26E
0F/E26A: CA        DEX 
0F/E26B: 30 C9     BMI $E236
0F/E26D: 38        SEC 
0F/E26E: E9 10     SBC #$10
0F/E270: 85 40     STA $40
0F/E272: B0 01     BCS $E275
0F/E274: CA        DEX 
0F/E275: 86 61     STX $61
0F/E277: 18        CLC 
0F/E278: 60        RTS 

; dreadnought sprite data
0F/E279: 00 88 02 00
0F/E27D: 00 89 02 08
0F/E281: 00 8A 02 08
0F/E285: 00 8B 02 08
0F/E289: 08 8C 02 00
0F/E28D: 00 9D 02 08
0F/E291: 00 8E 02 08
0F/E295: 00 9F 02 08
0F/E299: 08 90 02 00
0F/E29D: 00 91 02 08
0F/E2A1: 00 92 02 08
0F/E2A5: 00 93 02 08
0F/E2A9: 08 94 02 00
0F/E2AD: 00 95 02 08
0F/E2B1: 00 96 02 08
0F/E2B5: 00 97 02 08
0F/E2B9: FF

0F/E2BA: 00 98 02 00
0F/E2BE: 00 99 02 08
0F/E2C2: 00 9A 02 08
0F/E2C6: 00 9B 02 08
0F/E2CA: 08 9C 02 00
0F/E2CE: 00 9D 02 08
0F/E2D2: 00 9E 02 08
0F/E2D6: 00 9F 02 08
0F/E2DA: 08 A0 02 00
0F/E2DE: 00 91 02 08
0F/E2E2: 00 92 02 08
0F/E2E6: 00 93 02 08
0F/E2EA: 08 A1 02 00
0F/E2EE: 00 95 02 08
0F/E2F2: 00 96 02 08
0F/E2F6: 00 97 02 08
0F/E2FA: FF

; dreadnaught shadow sprite data
0F/E2FB: 00 B8 02 00
0F/E2FF: 00 B9 02 08
0F/E303: 00 B9 02 08
0F/E307: 00 B8 42 08
0F/E30B: FF

; [ update sprites (normal map) ]

0F/E30C: A0 01     LDY #$01           ; no vehicle
0F/E30E: 20 17 E0  JSR $E017          ; update player sprite
0F/E311: A9 40     LDA #$40           ; start at sprite 16
0F/E313: 85 26     STA $26
0F/E315: A2 06     LDX #$06           ; update npcs
0F/E317: A9 03     LDA #$03
0F/E319: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E31C: 4C 03 A0  JMP $A003          ; 03/A003

; player sprite offset for each facing direction
0F/E31F: 00 00 10 00
0F/E323: 30 00 10 00
0F/E327: 20 00 10 00
0F/E32B: 30 00 10 00

; player sprite tile index and flags (no vehicle)
0F/E32F: 09 40 0B 41 08 40 0A 41  ; right
0F/E337: 0D 40 0F 41 0C 40 0E 41
0F/E33F: 08 00 0A 01 09 00 0B 01  ; left
0F/E347: 0C 00 0E 01 0D 00 0F 01
0F/E34F: 04 00 06 01 05 00 07 01  ; down
0F/E357: 04 00 07 41 05 00 06 41
0F/E35F: 00 00 02 01 01 00 03 01  ; up
0F/E367: 00 00 03 41 01 00 02 41

; player sprite tile index and flags (vehicle)
0F/E36F: 11 42 13 42 10 42 12 42  ; right
0F/E377: 15 42 17 42 14 42 16 42
0F/E37F: 10 02 12 02 11 02 13 02  ; left
0F/E387: 14 02 16 02 15 02 17 02
0F/E38F: 00 02 02 02 01 02 03 02  ; down
0F/E397: 04 02 06 02 05 02 07 02
0F/E39F: 08 02 0A 02 09 02 0B 02  ; up
0F/E3A7: 0C 02 0E 02 0D 02 0F 02

; airship shadow tile index and flags
0F/E3AF: 00 02 02 02 01 02 03 02
0F/E3B7: 00 03 02 03 01 03 03 03

; [  ]

; leftover from ff1

0F/E3BF: 60        RTS 
0F/E3C0: AA        TAX 
0F/E3C1: 4A        LSR 
0F/E3C2: 85 80     STA $80
0F/E3C4: BD 00 61  LDA $6100,X
0F/E3C7: A8        TAY 
0F/E3C8: B9 56 E4  LDA $E456,Y
0F/E3CB: 85 81     STA $81
0F/E3CD: BD 01 61  LDA $6101,X
0F/E3D0: F0 0E     BEQ $E3E0
0F/E3D2: 30 EB     BMI $E3BF
0F/E3D4: C9 03     CMP #$03
0F/E3D6: F0 06     BEQ $E3DE
0F/E3D8: A9 03     LDA #$03
0F/E3DA: 85 81     STA $81
0F/E3DC: D0 00     BNE $E3DE
0F/E3DE: A9 14     LDA #$14
0F/E3E0: 18        CLC 
0F/E3E1: 65 80     ADC $80
0F/E3E3: 85 80     STA $80
0F/E3E5: A6 26     LDX $26
0F/E3E7: A5 40     LDA $40
0F/E3E9: 9D 03 02  STA $0203,X
0F/E3EC: 9D 0B 02  STA $020B,X
0F/E3EF: 9D 13 02  STA $0213,X
0F/E3F2: 18        CLC 
0F/E3F3: 69 08     ADC #$08
0F/E3F5: 9D 07 02  STA $0207,X
0F/E3F8: 9D 0F 02  STA $020F,X
0F/E3FB: 9D 17 02  STA $0217,X
0F/E3FE: A5 41     LDA $41
0F/E400: 9D 00 02  STA $0200,X
0F/E403: 9D 04 02  STA $0204,X
0F/E406: 18        CLC 
0F/E407: 69 08     ADC #$08
0F/E409: 9D 08 02  STA $0208,X
0F/E40C: 9D 0C 02  STA $020C,X
0F/E40F: 18        CLC 
0F/E410: 69 08     ADC #$08
0F/E412: 9D 10 02  STA $0210,X
0F/E415: 9D 14 02  STA $0214,X
0F/E418: A5 80     LDA $80
0F/E41A: 9D 01 02  STA $0201,X
0F/E41D: 18        CLC 
0F/E41E: 69 01     ADC #$01
0F/E420: 9D 05 02  STA $0205,X
0F/E423: 18        CLC 
0F/E424: 69 01     ADC #$01
0F/E426: 9D 09 02  STA $0209,X
0F/E429: 18        CLC 
0F/E42A: 69 01     ADC #$01
0F/E42C: 9D 0D 02  STA $020D,X
0F/E42F: 18        CLC 
0F/E430: 69 01     ADC #$01
0F/E432: 9D 11 02  STA $0211,X
0F/E435: 18        CLC 
0F/E436: 69 01     ADC #$01
0F/E438: 9D 15 02  STA $0215,X
0F/E43B: A5 81     LDA $81
0F/E43D: 9D 02 02  STA $0202,X
0F/E440: 9D 06 02  STA $0206,X
0F/E443: 9D 0A 02  STA $020A,X
0F/E446: 9D 0E 02  STA $020E,X
0F/E449: 9D 12 02  STA $0212,X
0F/E44C: 9D 16 02  STA $0216,X
0F/E44F: 8A        TXA 
0F/E450: 18        CLC 
0F/E451: 69 18     ADC #$18
0F/E453: 85 26     STA $26
0F/E455: 60        RTS 

; ff1 character palette ids
0F/E456: 01 00 00 01 01 00
0F/E45C: 01 01 00 01 01 00

; --------------------------------------------------------------------------

; [ load ending graphics ]

0F/E462: A9 00     LDA #$00
0F/E464: 8D 01 20  STA $2001
0F/E467: A9 00     LDA #$00
0F/E469: 85 80     STA $80
0F/E46B: A9 B0     LDA #$B0           ; 09/B000 (ending graphics)
0F/E46D: 85 81     STA $81
0F/E46F: A2 04     LDX #$04           ; size: $0400 bytes
0F/E471: A9 09     LDA #$09
0F/E473: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E476: A9 00     LDA #$00           ; ppu $0000
0F/E478: 20 03 E5  JSR $E503          ; copy large data to ppu
0F/E47B: A9 80     LDA #$80           ; 09/8000 (portrait graphics)
0F/E47D: 85 81     STA $81
0F/E47F: A2 0A     LDX #$0A           ; size: $0A00 bytes
0F/E481: A9 10     LDA #$10           ; ppu $1000
0F/E483: 20 03 E5  JSR $E503          ; copy large data to ppu
0F/E486: A9 0E     LDA #$0E
0F/E488: 4C 03 FE  JMP $FE03          ; switch prg bank

; [ load menu graphics ]

; unused

0F/E48B: 20 E1 E6  JSR $E6E1          ; load menu bg graphics
0F/E48E: 4C FA E6  JMP $E6FA          ; load menu sprite graphics

; [ load menu graphics ]

0F/E491: 20 E1 E6  JSR $E6E1          ; load menu bg graphics
0F/E494: 4C FA E6  JMP $E6FA          ; load menu sprite graphics

; [ load normal map graphics ]

0F/E497: A9 02     LDA #$02
0F/E499: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E49C: 20 B3 E4  JSR $E4B3          ; load map character graphics
0F/E49F: 20 28 E5  JSR $E528          ; load map bg graphics
0F/E4A2: 4C 07 E6  JMP $E607          ; load npc graphics

; [ load world map graphics ]

0F/E4A5: A9 02     LDA #$02
0F/E4A7: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E4AA: 20 F7 E4  JSR $E4F7          ; load world map bg graphics
0F/E4AD: 20 B3 E4  JSR $E4B3          ; load map character graphics
0F/E4B0: 4C D8 E4  JMP $E4D8          ; load world map sprite graphics

; [ load map character graphics ]

0F/E4B3: A9 00     LDA #$00
0F/E4B5: 85 80     STA $80
0F/E4B7: A2 00     LDX #$00
0F/E4B9: BD 01 61  LDA $6101,X
0F/E4BC: 29 E0     AND #$E0
0F/E4BE: F0 07     BEQ $E4C7          ; branch if not dead, stone, or toad
0F/E4C0: 8A        TXA 
0F/E4C1: 18        CLC 
0F/E4C2: 69 40     ADC #$40
0F/E4C4: AA        TAX 
0F/E4C5: D0 F2     BNE $E4B9
0F/E4C7: BD 00 61  LDA $6100,X        ; get character id
0F/E4CA: 29 0F     AND #$0F
0F/E4CC: 18        CLC 
0F/E4CD: 69 9B     ADC #$9B           ; 02/9B00 (map character graphics)
0F/E4CF: 85 81     STA $81
0F/E4D1: A2 01     LDX #$01           ; size: $0100 bytes
0F/E4D3: A9 10     LDA #$10           ; ppu $1000
0F/E4D5: 4C 03 E5  JMP $E503          ; copy large data to ppu

; [ load world map sprite graphics ]

0F/E4D8: A9 90     LDA #$90           ; 02/9000
0F/E4DA: 85 81     STA $81
0F/E4DC: A2 0B     LDX #$0B           ; size: $0B00 bytes
0F/E4DE: A9 11     LDA #$11           ; ppu $1100
0F/E4E0: 20 03 E5  JSR $E503          ; copy large data to ppu
0F/E4E3: A9 80     LDA #$80
0F/E4E5: 85 80     STA $80
0F/E4E7: A9 95     LDA #$95           ; 00/9580 (ship graphics)
0F/E4E9: 85 81     STA $81
0F/E4EB: A9 00     LDA #$00
0F/E4ED: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E4F0: A9 1C     LDA #$1C           ; ppu $1C00
0F/E4F2: A2 02     LDX #$02           ; size: $0200 bytes
0F/E4F4: 4C 03 E5  JMP $E503          ; copy large data to ppu

; [ load world map bg graphics ]

0F/E4F7: A9 00     LDA #$00           ; 02/8000 (world map bg graphics)
0F/E4F9: 85 80     STA $80
0F/E4FB: A9 80     LDA #$80
0F/E4FD: 85 81     STA $81
0F/E4FF: A2 10     LDX #$10           ; size: $1000 bytes
0F/E501: A9 00     LDA #$00           ; ppu $0000
; fallthrough

; [ copy large data to ppu ]

; +$80: source pointer
;    X: size (in 256-byte blocks)
;    A: ppu address (top byte)

0F/E503: AC 02 20  LDY $2002
0F/E506: 8D 06 20  STA $2006
0F/E509: A9 00     LDA #$00
0F/E50B: 8D 06 20  STA $2006
; jump here to use current ppu address
0F/E50E: A0 00     LDY #$00
0F/E510: B1 80     LDA ($80),Y
0F/E512: 8D 07 20  STA $2007
0F/E515: C8        INY 
0F/E516: D0 F8     BNE $E510
0F/E518: E6 81     INC $81
0F/E51A: CA        DEX 
0F/E51B: D0 F3     BNE $E510
0F/E51D: 60        RTS 

; [ copy data to ppu ]

; +$80: source pointer
;    Y: source offset
;    X: size

0F/E51E: B1 80     LDA ($80),Y
0F/E520: 8D 07 20  STA $2007
0F/E523: C8        INY 
0F/E524: CA        DEX 
0F/E525: D0 F7     BNE $E51E
0F/E527: 60        RTS 

; [ load map bg graphics ]

; lllsssst tileset id format (00/B300)
;   l: large bg graphics
;   s: small bg graphics
;   t: tileset (0 = exterior, 1 = interior)

0F/E528: A9 00     LDA #$00
0F/E52A: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E52D: A6 48     LDX $48
0F/E52F: BD 00 B3  LDA $B300,X        ; tileset id
0F/E532: 85 67     STA $67
0F/E534: BD 00 B0  LDA $B000,X        ; 00/B000 (map fill tile)
0F/E537: 29 E0     AND #$E0
0F/E539: 18        CLC 
0F/E53A: 69 C0     ADC #$C0           ; 03/9EC0 (fill tile graphics)
0F/E53C: 85 80     STA $80
0F/E53E: A9 9E     LDA #$9E
0F/E540: 69 00     ADC #$00
0F/E542: 85 81     STA $81
0F/E544: A9 03     LDA #$03
0F/E546: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E549: 2C 02 20  BIT $2002
0F/E54C: A9 00     LDA #$00           ; ppu $0000
0F/E54E: 8D 06 20  STA $2006
0F/E551: 8D 06 20  STA $2006
0F/E554: A0 00     LDY #$00
0F/E556: A2 20     LDX #$20           ; size: $20 (2 tiles)
0F/E558: 20 1E E5  JSR $E51E          ; copy data to ppu
0F/E55B: A2 80     LDX #$80           ; 03/8000 (common exterior graphics)
0F/E55D: A5 67     LDA $67
0F/E55F: 4A        LSR 
0F/E560: A9 00     LDA #$00
0F/E562: 90 04     BCC $E568
0F/E564: A9 40     LDA #$40           ; 03/8240 (common interior graphics)
0F/E566: A2 82     LDX #$82
0F/E568: 85 80     STA $80
0F/E56A: 86 81     STX $81
0F/E56C: A2 02     LDX #$02           ; size: $0200 (32+4 tiles)
0F/E56E: 20 0E E5  JSR $E50E          ; copy large data to ppu
0F/E571: A2 40     LDX #$40           ; size: $40
0F/E573: 20 1E E5  JSR $E51E          ; copy data to ppu
0F/E576: A9 00     LDA #$00
0F/E578: 85 81     STA $81
0F/E57A: A5 67     LDA $67
0F/E57C: 4A        LSR 
0F/E57D: 29 0F     AND #$0F
0F/E57F: AA        TAX 
0F/E580: BD F8 E5  LDA $E5F8,X        ; pointers to small map bg graphics
0F/E583: 0A        ASL 
0F/E584: 26 81     ROL $81
0F/E586: 0A        ASL 
0F/E587: 26 81     ROL $81
0F/E589: 0A        ASL 
0F/E58A: 26 81     ROL $81
0F/E58C: 0A        ASL 
0F/E58D: 26 81     ROL $81
0F/E58F: 69 80     ADC #$80           ; 03/8480 (small map bg graphics)
0F/E591: 85 80     STA $80
0F/E593: A5 81     LDA $81
0F/E595: 69 84     ADC #$84
0F/E597: 85 81     STA $81
0F/E599: A0 00     LDY #$00
0F/E59B: A2 C0     LDX #$C0           ; size: $C0 (12 tiles)
0F/E59D: 20 1E E5  JSR $E51E          ; copy data to ppu
0F/E5A0: A9 00     LDA #$00
0F/E5A2: 85 81     STA $81
0F/E5A4: A5 67     LDA $67
0F/E5A6: 4A        LSR 
0F/E5A7: 4A        LSR 
0F/E5A8: 4A        LSR 
0F/E5A9: 4A        LSR 
0F/E5AA: 4A        LSR 
0F/E5AB: AA        TAX 
0F/E5AC: BD 02 E6  LDA $E602,X        ; pointers to large map bg graphics
0F/E5AF: 0A        ASL 
0F/E5B0: 26 81     ROL $81
0F/E5B2: 0A        ASL 
0F/E5B3: 26 81     ROL $81
0F/E5B5: 0A        ASL 
0F/E5B6: 26 81     ROL $81
0F/E5B8: 0A        ASL 
0F/E5B9: 26 81     ROL $81
0F/E5BB: 85 80     STA $80
0F/E5BD: A5 81     LDA $81
0F/E5BF: 18        CLC 
0F/E5C0: 69 8C     ADC #$8C           ; 03/8C00 (large map bg graphics)
0F/E5C2: 85 81     STA $81
0F/E5C4: A2 03     LDX #$03           ; size: $0300 (48+12 tiles)
0F/E5C6: 20 0E E5  JSR $E50E          ; copy large data to ppu
0F/E5C9: A2 C0     LDX #$C0           ; size: $C0
0F/E5CB: 20 1E E5  JSR $E51E          ; copy data to ppu
; fallthrough

; [ load window/text graphics ]

0F/E5CE: A9 09     LDA #$09
0F/E5D0: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E5D3: A9 00     LDA #$00
0F/E5D5: 85 80     STA $80
0F/E5D7: A9 8A     LDA #$8A           ; 09/8A00
0F/E5D9: 85 81     STA $81
0F/E5DB: 2C 02 20  BIT $2002
0F/E5DE: A9 06     LDA #$06           ; ppu $06E0
0F/E5E0: 8D 06 20  STA $2006
0F/E5E3: A9 E0     LDA #$E0
0F/E5E5: 8D 06 20  STA $2006
0F/E5E8: A0 00     LDY #$00
0F/E5EA: A2 20     LDX #$20
0F/E5EC: 20 1E E5  JSR $E51E          ; copy data to ppu
0F/E5EF: A9 20     LDA #$20
0F/E5F1: 85 80     STA $80
0F/E5F3: A2 09     LDX #$09
0F/E5F5: 4C 0E E5  JMP $E50E          ; copy large data to ppu

; pointers to small map bg graphics
0F/E5F8: 00 0C 18 24 30 3C 48 54 60 6C

; pointers to large map bg graphics
0F/E602: 00 3C 78 B4 F0

; [ load npc graphics ]

0F/E607: A9 00     LDA #$00
0F/E609: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E60C: AD 02 20  LDA $2002          ; latch ppu
0F/E60F: A9 11     LDA #$11           ; ppu $1100 (npc graphics)
0F/E611: 8D 06 20  STA $2006
0F/E614: A9 00     LDA #$00
0F/E616: 8D 06 20  STA $2006
0F/E619: A5 48     LDA $48
0F/E61B: 4A        LSR 
0F/E61C: 4A        LSR 
0F/E61D: 4A        LSR 
0F/E61E: 4A        LSR 
0F/E61F: 09 A0     ORA #$A0           ; 00/A000 (map properties)
0F/E621: 85 81     STA $81
0F/E623: A5 48     LDA $48
0F/E625: 0A        ASL 
0F/E626: 0A        ASL 
0F/E627: 0A        ASL 
0F/E628: 0A        ASL 
0F/E629: 85 80     STA $80
0F/E62B: A0 00     LDY #$00
0F/E62D: B1 80     LDA ($80),Y        ; map properties byte 0
0F/E62F: 29 7F     AND #$7F
0F/E631: C9 40     CMP #$40
0F/E633: 90 15     BCC $E64A
; single npc
0F/E635: 29 3F     AND #$3F
0F/E637: 85 84     STA $84            ; multiply by 3
0F/E639: 0A        ASL 
0F/E63A: 18        CLC 
0F/E63B: 65 84     ADC $84
0F/E63D: 85 84     STA $84
0F/E63F: A9 BE     LDA #$BE           ; 00/BE00 (single npc properties)
0F/E641: 85 85     STA $85
0F/E643: A9 01     LDA #$01           ; 1 npc
0F/E645: 85 61     STA $61
0F/E647: 4C 69 E6  JMP $E669
; multi-npc
0F/E64A: 0A        ASL                ; multiply by 36
0F/E64B: 0A        ASL 
0F/E64C: 85 84     STA $84
0F/E64E: A2 00     LDX #$00
0F/E650: 86 85     STX $85
0F/E652: 0A        ASL 
0F/E653: 26 85     ROL $85
0F/E655: 0A        ASL 
0F/E656: 26 85     ROL $85
0F/E658: 0A        ASL 
0F/E659: 26 85     ROL $85
0F/E65B: 65 84     ADC $84
0F/E65D: 85 84     STA $84
0F/E65F: A5 85     LDA $85
0F/E661: 69 B5     ADC #$B5           ; 00/B500 (multi-npc properties)
0F/E663: 85 85     STA $85
0F/E665: A9 0C     LDA #$0C           ; loop over 12 npcs
0F/E667: 85 61     STA $61
; start of npc loop
0F/E669: A9 00     LDA #$00
0F/E66B: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E66E: B1 84     LDA ($84),Y
0F/E670: AA        TAX 
0F/E671: BD 00 8D  LDA $8D00,X        ; graphics id for each npc
0F/E674: C9 20     CMP #$20
0F/E676: 90 14     BCC $E68C
; misc. sprite
0F/E678: E9 20     SBC #$20
0F/E67A: 0A        ASL 
0F/E67B: AA        TAX 
0F/E67C: BD C3 E6  LDA $E6C3,X        ; pointers to misc. map sprite graphics
0F/E67F: 85 80     STA $80
0F/E681: BD C4 E6  LDA $E6C4,X
0F/E684: 18        CLC 
0F/E685: 69 BB     ADC #$BB           ; 02/BB00 (misc. map sprite graphics)
0F/E687: 85 81     STA $81
0F/E689: 4C 95 E6  JMP $E695
; npc graphics
0F/E68C: 18        CLC 
0F/E68D: 69 9B     ADC #$9B           ; 02/9B00 (map character graphics)
0F/E68F: 85 81     STA $81
0F/E691: A9 00     LDA #$00
0F/E693: 85 80     STA $80
0F/E695: A9 02     LDA #$02
0F/E697: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E69A: 98        TYA 
0F/E69B: 48        PHA 
0F/E69C: A0 00     LDY #$00
0F/E69E: B1 80     LDA ($80),Y        ; copy 256 bytes to ppu
0F/E6A0: 8D 07 20  STA $2007
0F/E6A3: C8        INY 
0F/E6A4: D0 F8     BNE $E69E
0F/E6A6: 68        PLA                ; next npc
0F/E6A7: 18        CLC 
0F/E6A8: 69 03     ADC #$03
0F/E6AA: A8        TAY 
0F/E6AB: C6 61     DEC $61
0F/E6AD: D0 BA     BNE $E669
; fallthrough

; [ load misc. sprite graphics ]

; includes cursor

0F/E6AF: A9 00     LDA #$00
0F/E6B1: 85 80     STA $80
0F/E6B3: A9 BD     LDA #$BD           ; 02/BD00 (more misc. map sprite graphics)
0F/E6B5: 85 81     STA $81
0F/E6B7: A9 02     LDA #$02
0F/E6B9: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E6BC: A2 03     LDX #$03           ; size: $0300 bytes
0F/E6BE: A9 1D     LDA #$1D           ; ppu $1D00
0F/E6C0: 4C 03 E5  JMP $E503          ; copy large data to ppu

; pointers to misc. map sprite graphics
0F/E6C3: 0000 0080 0100 0180 0200 0240 0280 02C0
0F/E6D3: 0300 0340 0380 03C0 0400 0440 0480

; [ load menu bg graphics ]

0F/E6E1: 20 CE E5  JSR $E5CE          ; load window/text graphics
0F/E6E4: 2C 02 20  BIT $2002
0F/E6E7: A9 00     LDA #$00
0F/E6E9: 8D 06 20  STA $2006
0F/E6EC: 8D 06 20  STA $2006
0F/E6EF: A2 10     LDX #$10
0F/E6F1: 8D 07 20  STA $2007
0F/E6F4: CA        DEX 
0F/E6F5: D0 FA     BNE $E6F1
0F/E6F7: 4C 76 E7  JMP $E776          ; load menu bg palette

; [ load menu sprite graphics ]

0F/E6FA: A9 09     LDA #$09
0F/E6FC: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E6FF: AD 02 20  LDA $2002
0F/E702: A9 10     LDA #$10           ; ppu $1000
0F/E704: 8D 06 20  STA $2006
0F/E707: A9 00     LDA #$00
0F/E709: 8D 06 20  STA $2006
0F/E70C: 85 80     STA $80
0F/E70E: AD 00 61  LDA $6100          ; character 1
0F/E711: 20 45 E7  JSR $E745          ; load character portrait graphics
0F/E714: AD 40 61  LDA $6140          ; character 2
0F/E717: 20 45 E7  JSR $E745          ; load character portrait graphics
0F/E71A: AD 80 61  LDA $6180          ; character 3
0F/E71D: 20 45 E7  JSR $E745          ; load character portrait graphics
0F/E720: AD C0 61  LDA $61C0          ; character 4
0F/E723: 20 45 E7  JSR $E745          ; load character portrait graphics
0F/E726: A9 0A     LDA #$0A           ; toad
0F/E728: 20 45 E7  JSR $E745          ; load character portrait graphics
0F/E72B: A9 09     LDA #$09           ; cross
0F/E72D: 20 45 E7  JSR $E745          ; load character portrait graphics
0F/E730: A2 10     LDX #$10
0F/E732: A9 FF     LDA #$FF
0F/E734: 8D 07 20  STA $2007
0F/E737: CA        DEX 
0F/E738: D0 FA     BNE $E734
0F/E73A: 20 AF E6  JSR $E6AF          ; load misc.sprite graphics
0F/E73D: 20 86 E7  JSR $E786          ; load menu sprite palettes
0F/E740: A9 0E     LDA #$0E
0F/E742: 4C 03 FE  JMP $FE03          ; switch prg bank

; [ load character portrait graphics ]

; A: character id

0F/E745: 29 0F     AND #$0F
0F/E747: AA        TAX 
0F/E748: A9 00     LDA #$00
0F/E74A: 85 81     STA $81
0F/E74C: BD 6A E7  LDA $E76A,X
0F/E74F: 0A        ASL 
0F/E750: 26 81     ROL $81
0F/E752: 0A        ASL 
0F/E753: 26 81     ROL $81
0F/E755: 0A        ASL 
0F/E756: 26 81     ROL $81
0F/E758: 0A        ASL 
0F/E759: 26 81     ROL $81
0F/E75B: 85 80     STA $80
0F/E75D: A5 81     LDA $81
0F/E75F: 09 80     ORA #$80
0F/E761: 85 81     STA $81
0F/E763: A2 C0     LDX #$C0
0F/E765: A0 00     LDY #$00
0F/E767: 4C 1E E5  JMP $E51E          ; copy data to ppu

; pointers to character portrait graphics
0F/E76A: 00 0C 18 24 30 3C 48 54 60 6C 78 84

; [ load menu bg palette ]

0F/E776: A9 00     LDA #$00
0F/E778: 8D CD 03  STA $03CD
0F/E77B: A9 02     LDA #$02
0F/E77D: 8D CE 03  STA $03CE
0F/E780: A9 30     LDA #$30
0F/E782: 8D CF 03  STA $03CF
0F/E785: 60        RTS 

; [ load menu sprite palettes ]

0F/E786: A9 00     LDA #$00
0F/E788: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E78B: A2 0F     LDX #$0F
0F/E78D: BD B2 83  LDA $83B2,X        ; 00/83B2 (menu sprite palettes)
0F/E790: 9D D0 03  STA $03D0,X
0F/E793: CA        DEX 
0F/E794: D0 F7     BNE $E78D
0F/E796: 60        RTS 

; --------------------------------------------------------------------------

; [ scroll menu down ]

; set carry if at bottom

0F/E797: A0 00     LDY #$00
0F/E799: A5 93     LDA $93
0F/E79B: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E79E: B1 3E     LDA ($3E),Y
0F/E7A0: D0 07     BNE $E7A9
0F/E7A2: A5 57     LDA $57
0F/E7A4: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E7A7: 38        SEC 
0F/E7A8: 60        RTS 
0F/E7A9: 20 D4 E7  JSR $E7D4
; fallthrough

; [ load next line of text (external) ]

0F/E7AC: 20 AC EA  JSR $EAAC          ; load next line of text
0F/E7AF: A5 57     LDA $57
0F/E7B1: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E7B4: 18        CLC 
0F/E7B5: 60        RTS 

; [ scroll menu up ]

; set carry if at top

0F/E7B6: A5 1C     LDA $1C
0F/E7B8: 38        SEC 
0F/E7B9: E9 02     SBC #$02
0F/E7BB: 85 1C     STA $1C
0F/E7BD: A5 1D     LDA $1D
0F/E7BF: E9 00     SBC #$00
0F/E7C1: 85 1D     STA $1D
0F/E7C3: A5 93     LDA $93
0F/E7C5: 20 03 FE  JSR $FE03          ; switch prg bank
0F/E7C8: A0 01     LDY #$01
0F/E7CA: B1 1C     LDA ($1C),Y
0F/E7CC: F0 D4     BEQ $E7A2
0F/E7CE: 20 FC E7  JSR $E7FC
0F/E7D1: 4C AC E7  JMP $E7AC

; [ find next line of text ]

0F/E7D4: A0 00     LDY #$00
0F/E7D6: B1 1C     LDA ($1C),Y
0F/E7D8: E6 1C     INC $1C
0F/E7DA: D0 02     BNE $E7DE
0F/E7DC: E6 1D     INC $1D
0F/E7DE: C9 01     CMP #$01
0F/E7E0: F0 11     BEQ $E7F3
0F/E7E2: C9 30     CMP #$30
0F/E7E4: B0 F0     BCS $E7D6
0F/E7E6: C9 10     CMP #$10
0F/E7E8: 90 EC     BCC $E7D6
0F/E7EA: E6 1C     INC $1C
0F/E7EC: D0 E8     BNE $E7D6
0F/E7EE: E6 1D     INC $1D
0F/E7F0: 4C D6 E7  JMP $E7D6
0F/E7F3: A5 1C     LDA $1C
0F/E7F5: 85 3E     STA $3E
0F/E7F7: A5 1D     LDA $1D
0F/E7F9: 85 3F     STA $3F
0F/E7FB: 60        RTS 

; [  ]

0F/E7FC: A5 1C     LDA $1C
0F/E7FE: 38        SEC 
0F/E7FF: E9 01     SBC #$01
0F/E801: 85 1C     STA $1C
0F/E803: A5 1D     LDA $1D
0F/E805: E9 00     SBC #$00
0F/E807: 85 1D     STA $1D
0F/E809: A0 00     LDY #$00
0F/E80B: B1 1C     LDA ($1C),Y
0F/E80D: C9 10     CMP #$10
0F/E80F: 90 0C     BCC $E81D
0F/E811: C9 30     CMP #$30
0F/E813: B0 08     BCS $E81D
0F/E815: A5 1C     LDA $1C
0F/E817: 38        SEC 
0F/E818: E9 02     SBC #$02
0F/E81A: 4C 01 E8  JMP $E801
0F/E81D: C8        INY 
0F/E81E: B1 1C     LDA ($1C),Y
0F/E820: F0 07     BEQ $E829
0F/E822: C9 01     CMP #$01
0F/E824: F0 03     BEQ $E829
0F/E826: 4C FC E7  JMP $E7FC
0F/E829: A5 1C     LDA $1C
0F/E82B: 18        CLC 
0F/E82C: 69 02     ADC #$02
0F/E82E: 85 3E     STA $3E
0F/E830: A5 1D     LDA $1D
0F/E832: 69 00     ADC #$00
0F/E834: 85 3F     STA $3F
0F/E836: 60        RTS 

; [ show/hide sprites behind text window ]

; show sprites (dialogue)
0F/E837: A2 04     LDX #$04
0F/E839: A9 01     LDA #$01
0F/E83B: D0 08     BNE $E845
; show sprites (keyword/item select)
0F/E83D: A2 05     LDX #$05
0F/E83F: A9 01     LDA #$01
0F/E841: D0 02     BNE $E845
; hide sprites
0F/E843: A9 00     LDA #$00
0F/E845: 85 84     STA $84
0F/E847: BD 92 E8  LDA $E892,X
0F/E84A: 85 80     STA $80
0F/E84C: BD 98 E8  LDA $E898,X
0F/E84F: 85 81     STA $81
0F/E851: BD 9E E8  LDA $E89E,X
0F/E854: 85 82     STA $82
0F/E856: BD A4 E8  LDA $E8A4,X
0F/E859: 85 83     STA $83
0F/E85B: A0 40     LDY #$40
0F/E85D: B9 03 02  LDA $0203,Y
0F/E860: C5 80     CMP $80
0F/E862: 90 26     BCC $E88A
0F/E864: C5 81     CMP $81
0F/E866: B0 22     BCS $E88A
0F/E868: B9 00 02  LDA $0200,Y
0F/E86B: C5 82     CMP $82
0F/E86D: 90 1B     BCC $E88A
0F/E86F: C5 83     CMP $83
0F/E871: B0 17     BCS $E88A
0F/E873: A5 84     LDA $84
0F/E875: D0 0B     BNE $E882
0F/E877: B9 02 02  LDA $0202,Y
0F/E87A: 09 20     ORA #$20
0F/E87C: 99 02 02  STA $0202,Y
0F/E87F: 4C 8A E8  JMP $E88A
0F/E882: B9 02 02  LDA $0202,Y
0F/E885: 29 DF     AND #$DF
0F/E887: 99 02 02  STA $0202,Y
0F/E88A: 98        TYA 
0F/E88B: 18        CLC 
0F/E88C: 69 04     ADC #$04
0F/E88E: A8        TAY 
0F/E88F: 90 CC     BCC $E85D
0F/E891: 60        RTS 

; text window regions for covering sprites
0F/E892: 0A 0A 3A 8A 0A 0A
0F/E898: EF 4F EF EF EF EF
0F/E89E: 0A 8A 8A 6A 0A 6A
0F/E8A4: 57 D7 D7 87 57 D7

; [ display event dialogue ]

0F/E8AA: A5 76     LDA $76
0F/E8AC: 85 92     STA $92
0F/E8AE: A9 0D     LDA #$0D           ; 0D/BF00 (pointers to event dialogue)
0F/E8B0: 85 93     STA $93
0F/E8B2: A9 00     LDA #$00
0F/E8B4: 85 94     STA $94
0F/E8B6: A9 BF     LDA #$BF
0F/E8B8: 85 95     STA $95
0F/E8BA: A9 00     LDA #$00
0F/E8BC: 85 96     STA $96
0F/E8BE: 85 76     STA $76
0F/E8C0: 85 24     STA $24
0F/E8C2: 85 25     STA $25
0F/E8C4: 20 1E E9  JSR $E91E          ; open window
0F/E8C7: 4C E5 E8  JMP $E8E5

; [ open npc dialogue window ]

0F/E8CA: A9 00     LDA #$00
0F/E8CC: 85 96     STA $96
0F/E8CE: 85 24     STA $24
0F/E8D0: 85 25     STA $25
0F/E8D2: 20 1E E9  JSR $E91E          ; open window
0F/E8D5: 4C 54 EA  JMP $EA54          ; load text (multi-page)

; [ display map dialogue ]

0F/E8D8: A9 00     LDA #$00
0F/E8DA: 85 96     STA $96
0F/E8DC: A9 00     LDA #$00
0F/E8DE: 85 24     STA $24
0F/E8E0: 85 25     STA $25
0F/E8E2: 20 1E E9  JSR $E91E          ; open window
0F/E8E5: 20 54 EA  JSR $EA54          ; load text (multi-page)
0F/E8E8: 20 F1 E8  JSR $E8F1          ; wait for keypress
0F/E8EB: 20 F1 E8  JSR $E8F1          ; wait for keypress
0F/E8EE: 4C 64 D1  JMP $D164          ; close text window (dialogue)

; [ wait for keypress ]

0F/E8F1: 20 A9 DB  JSR $DBA9          ; read joypad registers
0F/E8F4: A5 20     LDA $20
0F/E8F6: 85 86     STA $86
0F/E8F8: 20 A9 DB  JSR $DBA9          ; read joypad registers
0F/E8FB: A5 20     LDA $20
0F/E8FD: C5 86     CMP $86
0F/E8FF: D0 0B     BNE $E90C
0F/E901: 20 00 FE  JSR $FE00          ; wait for vblank
0F/E904: E6 F0     INC $F0
0F/E906: 20 46 C7  JSR $C746          ; update sound
0F/E909: 4C F8 E8  JMP $E8F8
0F/E90C: A5 93     LDA $93
0F/E90E: 4C 03 FE  JMP $FE03          ; switch prg bank

; [  ]

0F/E911: 20 00 FE  JSR $FE00          ; wait for vblank
0F/E914: E6 F0     INC $F0
0F/E916: 20 46 C7  JSR $C746          ; update sound
0F/E919: A5 93     LDA $93
0F/E91B: 4C 03 FE  JMP $FE03          ; switch prg bank

; [ open window ]

; $96: window size
;        0: dialogue
;        1: choice
;        2: keyword/item select
;        3: gil

0F/E91E: A6 96     LDX $96
0F/E920: 20 6E E9  JSR $E96E
0F/E923: A5 39     LDA $39
0F/E925: 85 3B     STA $3B
0F/E927: 20 31 F0  JSR $F031          ; reset text buffer
0F/E92A: A2 0F     LDX #$0F
0F/E92C: A9 FF     LDA #$FF
0F/E92E: 9D C0 07  STA $07C0,X
0F/E931: CA        DEX 
0F/E932: 10 FA     BPL $E92E
0F/E934: A5 3D     LDA $3D
0F/E936: 4A        LSR 
0F/E937: 48        PHA 
0F/E938: 20 E5 E9  JSR $E9E5          ; draw top of text window
0F/E93B: 20 BA E9  JSR $E9BA          ; copy text window to ppu
0F/E93E: 68        PLA 
0F/E93F: 38        SEC 
0F/E940: E9 02     SBC #$02
0F/E942: F0 0D     BEQ $E951
0F/E944: 48        PHA 
0F/E945: 20 0C EA  JSR $EA0C          ; draw middle of text window
0F/E948: 20 BA E9  JSR $E9BA          ; copy text window to ppu
0F/E94B: 68        PLA 
0F/E94C: 38        SEC 
0F/E94D: E9 01     SBC #$01
0F/E94F: D0 F3     BNE $E944
0F/E951: 20 2D EA  JSR $EA2D          ; draw bottom of text window
0F/E954: 20 BA E9  JSR $E9BA          ; copy text window to ppu
0F/E957: E6 38     INC $38
0F/E959: E6 39     INC $39
0F/E95B: A5 3C     LDA $3C
0F/E95D: 38        SEC 
0F/E95E: E9 02     SBC #$02
0F/E960: 85 3C     STA $3C
0F/E962: A5 3D     LDA $3D
0F/E964: 38        SEC 
0F/E965: E9 02     SBC #$02
0F/E967: 85 3D     STA $3D
0F/E969: A5 57     LDA $57
0F/E96B: 4C 03 FE  JMP $FE03          ; switch prg bank

; [ get text window position ]

0F/E96E: A5 37     LDA $37
0F/E970: D0 37     BNE $E9A9
0F/E972: BD AA E9  LDA $E9AA,X
0F/E975: 38        SEC 
0F/E976: E9 01     SBC #$01
0F/E978: 85 97     STA $97
0F/E97A: BD AE E9  LDA $E9AE,X
0F/E97D: 18        CLC 
0F/E97E: 69 02     ADC #$02
0F/E980: 85 98     STA $98
0F/E982: A5 29     LDA $29
0F/E984: 0A        ASL 
0F/E985: 18        CLC 
0F/E986: 7D AA E9  ADC $E9AA,X
0F/E989: 29 3F     AND #$3F
0F/E98B: 85 38     STA $38
0F/E98D: A5 2F     LDA $2F
0F/E98F: 0A        ASL 
0F/E990: 18        CLC 
0F/E991: 7D AE E9  ADC $E9AE,X
0F/E994: C9 1E     CMP #$1E
0F/E996: 90 02     BCC $E99A
0F/E998: E9 1E     SBC #$1E
0F/E99A: 85 39     STA $39
0F/E99C: BD B2 E9  LDA $E9B2,X
0F/E99F: 85 3C     STA $3C
0F/E9A1: BD B6 E9  LDA $E9B6,X
0F/E9A4: 85 3D     STA $3D
0F/E9A6: 20 43 E8  JSR $E843          ; hide sprites behind text window
0F/E9A9: 60        RTS 

; text window positions
0F/E9AA: 02 02 08 12  ; left
0F/E9AE: 02 12 12 0E  ; top
0F/E9B2: 1C 08 16 0C  ; width
0F/E9B6: 0A 0A 0A 04  ; height

; [ copy text window to ppu ]

0F/E9BA: A5 3C     LDA $3C
0F/E9BC: 85 90     STA $90
0F/E9BE: 20 3D D1  JSR $D13D
0F/E9C1: 20 00 FE  JSR $FE00          ; wait for vblank
0F/E9C4: A9 02     LDA #$02
0F/E9C6: 8D 14 40  STA $4014          ; dma oam data to ppu
0F/E9C9: 20 69 F0  JSR $F069          ; copy text to ppu
0F/E9CC: 20 57 D1  JSR $D157
0F/E9CF: 20 D5 E9  JSR $E9D5          ; update scrolling (text window)
0F/E9D2: 4C 46 C7  JMP $C746          ; update sound

; [ update scrolling (text window) ]

0F/E9D5: A5 37     LDA $37
0F/E9D7: D0 03     BNE $E9DC          ; branch if in menu
0F/E9D9: 4C F5 CD  JMP $CDF5          ; update ppu registers
0F/E9DC: A9 00     LDA #$00           ; clear ppu scrolling registers
0F/E9DE: 8D 05 20  STA $2005
0F/E9E1: 8D 05 20  STA $2005
0F/E9E4: 60        RTS 

; [ draw top of text window ]

0F/E9E5: A2 01     LDX #$01
0F/E9E7: A9 F7     LDA #$F7           ; top left border
0F/E9E9: 8D 80 07  STA $0780
0F/E9EC: A9 FA     LDA #$FA           ; left border
0F/E9EE: 8D A0 07  STA $07A0
0F/E9F1: A9 F8     LDA #$F8           ; top border
0F/E9F3: 9D 80 07  STA $0780,X
0F/E9F6: A9 FF     LDA #$FF           ; blank
0F/E9F8: 9D A0 07  STA $07A0,X
0F/E9FB: E8        INX 
0F/E9FC: E4 3C     CPX $3C
0F/E9FE: 90 F1     BCC $E9F1
0F/EA00: CA        DEX 
0F/EA01: A9 F9     LDA #$F9           ; top right border
0F/EA03: 9D 80 07  STA $0780,X
0F/EA06: A9 FB     LDA #$FB           ; right border
0F/EA08: 9D A0 07  STA $07A0,X
0F/EA0B: 60        RTS 

; [ draw middle of text window ]

0F/EA0C: A2 01     LDX #$01
0F/EA0E: A9 FA     LDA #$FA           ; left border
0F/EA10: 8D 80 07  STA $0780
0F/EA13: 8D A0 07  STA $07A0
0F/EA16: A9 FF     LDA #$FF           ; blank
0F/EA18: 9D 80 07  STA $0780,X
0F/EA1B: 9D A0 07  STA $07A0,X
0F/EA1E: E8        INX 
0F/EA1F: E4 3C     CPX $3C
0F/EA21: 90 F5     BCC $EA18
0F/EA23: CA        DEX 
0F/EA24: A9 FB     LDA #$FB           ; right border
0F/EA26: 9D 80 07  STA $0780,X
0F/EA29: 9D A0 07  STA $07A0,X
0F/EA2C: 60        RTS 

; [ draw bottom of text window ]

0F/EA2D: A2 01     LDX #$01
0F/EA2F: A9 FA     LDA #$FA           ; left border
0F/EA31: 8D 80 07  STA $0780
0F/EA34: A9 FC     LDA #$FC           ; bottom left border
0F/EA36: 8D A0 07  STA $07A0
0F/EA39: A9 FF     LDA #$FF           ; blank
0F/EA3B: 9D 80 07  STA $0780,X
0F/EA3E: A9 FD     LDA #$FD           ; bottom border
0F/EA40: 9D A0 07  STA $07A0,X
0F/EA43: E8        INX 
0F/EA44: E4 3C     CPX $3C
0F/EA46: 90 F1     BCC $EA39
0F/EA48: CA        DEX 
0F/EA49: A9 FB     LDA #$FB           ; right border
0F/EA4B: 9D 80 07  STA $0780,X
0F/EA4E: A9 FE     LDA #$FE           ; bottom right border
0F/EA50: 9D A0 07  STA $07A0,X
0F/EA53: 60        RTS 

; [ load text (multi-page) ]

0F/EA54: 20 8C EA  JSR $EA8C          ; load text (single-page)
0F/EA57: 90 32     BCC $EA8B
0F/EA59: 20 F1 E8  JSR $E8F1          ; wait for keypress
0F/EA5C: 20 F1 E8  JSR $E8F1          ; wait for keypress
0F/EA5F: A5 3D     LDA $3D
0F/EA61: 48        PHA 
0F/EA62: A9 00     LDA #$00
0F/EA64: 85 F0     STA $F0
0F/EA66: 20 11 E9  JSR $E911
0F/EA69: A5 F0     LDA $F0
0F/EA6B: 29 03     AND #$03
0F/EA6D: D0 F7     BNE $EA66
0F/EA6F: 20 D4 E7  JSR $E7D4
0F/EA72: 20 AC EA  JSR $EAAC          ; load next line of text
0F/EA75: B0 0A     BCS $EA81
0F/EA77: 68        PLA 
0F/EA78: 38        SEC 
0F/EA79: E9 02     SBC #$02
0F/EA7B: F0 0E     BEQ $EA8B
0F/EA7D: B0 E2     BCS $EA61
0F/EA7F: 90 0A     BCC $EA8B
0F/EA81: 68        PLA 
0F/EA82: 38        SEC 
0F/EA83: E9 02     SBC #$02
0F/EA85: F0 D2     BEQ $EA59
0F/EA87: B0 D8     BCS $EA61
0F/EA89: 90 CE     BCC $EA59
0F/EA8B: 60        RTS 

; [ load text (single-page) ]

;  $92: text id
;  $93: bank
; +$94: pointer table address
; return carry clear if end of string is reached
; return carry set if window is full but end of end of string is not reached

0F/EA8C: A5 93     LDA $93
0F/EA8E: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EA91: A5 92     LDA $92
0F/EA93: 0A        ASL 
0F/EA94: 08        PHP 
0F/EA95: 18        CLC 
0F/EA96: 65 94     ADC $94
0F/EA98: 85 80     STA $80
0F/EA9A: 28        PLP 
0F/EA9B: A5 95     LDA $95
0F/EA9D: 69 00     ADC #$00
0F/EA9F: 85 81     STA $81
0F/EAA1: A0 00     LDY #$00
0F/EAA3: B1 80     LDA ($80),Y        ; get text pointer
0F/EAA5: 85 3E     STA $3E
0F/EAA7: C8        INY 
0F/EAA8: B1 80     LDA ($80),Y
0F/EAAA: 85 3F     STA $3F
; load next line of text
0F/EAAC: A5 93     LDA $93
0F/EAAE: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EAB1: A9 00     LDA #$00
0F/EAB3: 85 1E     STA $1E
0F/EAB5: A5 3E     LDA $3E
0F/EAB7: 85 1C     STA $1C
0F/EAB9: A5 3F     LDA $3F
0F/EABB: 85 1D     STA $1D
0F/EABD: 85 1D     STA $1D
0F/EABF: A5 38     LDA $38
0F/EAC1: 85 3A     STA $3A
0F/EAC3: A5 39     LDA $39
0F/EAC5: 85 3B     STA $3B
0F/EAC7: 20 31 F0  JSR $F031          ; reset text buffer
0F/EACA: A9 00     LDA #$00
0F/EACC: 85 90     STA $90
0F/EACE: 85 1F     STA $1F
0F/EAD0: 20 E6 EA  JSR $EAE6          ; decode text
0F/EAD3: B0 0A     BCS $EADF
0F/EAD5: 20 53 F0  JSR $F053
0F/EAD8: A5 57     LDA $57
0F/EADA: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EADD: 18        CLC 
0F/EADE: 60        RTS 
0F/EADF: A5 57     LDA $57
0F/EAE1: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EAE4: 38        SEC 
0F/EAE5: 60        RTS 

; [ decode text ]

; return carry clear if end of string is reached
; return carry set if window is full but end of end of string is not reached

0F/EAE6: A0 00     LDY #$00
0F/EAE8: B1 3E     LDA ($3E),Y
0F/EAEA: F0 F1     BEQ $EADD          ; branch if null terminator
0F/EAEC: E6 3E     INC $3E
0F/EAEE: D0 02     BNE $EAF2
0F/EAF0: E6 3F     INC $3F
0F/EAF2: C9 3B     CMP #$3B
0F/EAF4: 90 2A     BCC $EB20          ; branch if a control code
0F/EAF6: C9 6E     CMP #$6E
0F/EAF8: 90 0F     BCC $EB09          ; branch if character with dakuten
0F/EAFA: A4 90     LDY $90
0F/EAFC: 99 A0 07  STA $07A0,Y        ; character
0F/EAFF: A9 FF     LDA #$FF
0F/EB01: 99 80 07  STA $0780,Y        ; no dakuten
0F/EB04: E6 90     INC $90
0F/EB06: 4C E6 EA  JMP $EAE6          ; next character
; *** english translation ***
; 0F/EB09: AA        TAX
; 0F/EB0A: A4 90     LDY $A4
; 0F/EB0C: BD A7 EE  LDA $EEA7,Y      ; dte table
; 0F/EB0F: 99 A0 07  STA $07A0,Y
; 0F/EB12: BD DA EE  LDA $EEDA,Y
; 0F/EB15: 99 A1 07  STA $07A1,Y
; 0F/EB18: EA        NOP
; 0F/EB19: E6 90     INC $90
; 0F/EB1B: E6 90     INC $90
; 0F/EB1D: 4C E6 EA  JMP $EAE6
; ***************************
0F/EB09: 38        SEC 
0F/EB0A: E9 3B     SBC #$3B
0F/EB0C: AA        TAX 
0F/EB0D: A4 90     LDY $90
0F/EB0F: BD 15 EF  LDA $EF15,X
0F/EB12: 99 80 07  STA $0780,Y
0F/EB15: BD E2 EE  LDA $EEE2,X
0F/EB18: 99 A0 07  STA $07A0,Y
0F/EB1B: E6 90     INC $90
0F/EB1D: 4C E6 EA  JMP $EAE6
0F/EB20: C9 10     CMP #$10
0F/EB22: 90 03     BCC $EB27
0F/EB24: 4C 02 EC  JMP $EC02
; $01: newline
0F/EB27: C9 01     CMP #$01
0F/EB29: D0 12     BNE $EB3D
0F/EB2B: 20 53 F0  JSR $F053
0F/EB2E: E6 1F     INC $1F
0F/EB30: E6 1F     INC $1F
0F/EB32: A5 1F     LDA $1F
0F/EB34: C5 3D     CMP $3D
0F/EB36: 90 02     BCC $EB3A
0F/EB38: 38        SEC 
0F/EB39: 60        RTS 
0F/EB3A: 4C E6 EA  JMP $EAE6
; $02: item name (treasure)
0F/EB3D: C9 02     CMP #$02
0F/EB3F: D0 0F     BNE $EB50
0F/EB41: A9 00     LDA #$00
0F/EB43: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EB46: A6 45     LDX $45
0F/EB48: BD 00 8C  LDA $8C00,X        ; treasure contents
0F/EB4B: 85 84     STA $84
0F/EB4D: 4C 6C EC  JMP $EC6C
; $03: gil (treasure)
0F/EB50: C9 03     CMP #$03
0F/EB52: D0 15     BNE $EB69
0F/EB54: A9 0E     LDA #$0E
0F/EB56: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EB59: A6 45     LDX $45
0F/EB5B: 20 AD EF  JSR $EFAD
0F/EB5E: 20 F3 89  JSR $89F3          ; 0E/89F3
0F/EB61: A5 93     LDA $93
0F/EB63: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EB66: 4C E6 EA  JMP $EAE6
; $04: gil (shop)
0F/EB69: C9 04     CMP #$04
0F/EB6B: D0 1C     BNE $EB89
0F/EB6D: A5 61     LDA $61
0F/EB6F: 85 80     STA $80
0F/EB71: A5 62     LDA $62
0F/EB73: 85 81     STA $81
0F/EB75: A9 00     LDA #$00
0F/EB77: 85 82     STA $82
0F/EB79: A9 0E     LDA #$0E
0F/EB7B: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EB7E: 20 F3 89  JSR $89F3
0F/EB81: A5 93     LDA $93
0F/EB83: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EB86: 4C E6 EA  JMP $EAE6
; $05: 
0F/EB89: C9 05     CMP #$05
0F/EB8B: D0 10     BNE $EB9D
0F/EB8D: A9 0E     LDA #$0E
0F/EB8F: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EB92: 20 B5 89  JSR $89B5
0F/EB95: A5 93     LDA $93
0F/EB97: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EB9A: 4C E6 EA  JMP $EAE6
; $06: 
0F/EB9D: C9 06     CMP #$06
0F/EB9F: D0 19     BNE $EBBA
0F/EBA1: A9 0E     LDA #$0E
0F/EBA3: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EBA6: A6 9E     LDX $9E
0F/EBA8: A5 61     LDA $61
0F/EBAA: 18        CLC 
0F/EBAB: 69 01     ADC #$01
0F/EBAD: 85 80     STA $80
0F/EBAF: 20 C7 89  JSR $89C7
0F/EBB2: A5 93     LDA $93
0F/EBB4: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EBB7: 4C E6 EA  JMP $EAE6
; $07: 
0F/EBBA: C9 07     CMP #$07
0F/EBBC: D0 21     BNE $EBDF
0F/EBBE: AD 76 62  LDA $6276
0F/EBC1: 85 5A     STA $5A
0F/EBC3: AD 77 62  LDA $6277
0F/EBC6: 85 5B     STA $5B
0F/EBC8: AD 78 62  LDA $6278
0F/EBCB: 85 5C     STA $5C
0F/EBCD: AD 79 62  LDA $6279
0F/EBD0: 85 5D     STA $5D
0F/EBD2: AD 7A 62  LDA $627A
0F/EBD5: 85 5E     STA $5E
0F/EBD7: AD 7B 62  LDA $627B
0F/EBDA: 85 5F     STA $5F
0F/EBDC: 4C 77 ED  JMP $ED77
; $0F: 
0F/EBDF: C9 0F     CMP #$0F
0F/EBE1: D0 1C     BNE $EBFF
0F/EBE3: A6 90     LDX $90
0F/EBE5: A9 76     LDA #$76
0F/EBE7: 9D 82 07  STA $0782,X
0F/EBEA: A9 FF     LDA #$FF
0F/EBEC: 9D 83 07  STA $0783,X
0F/EBEF: A9 77     LDA #$77
0F/EBF1: 9D A2 07  STA $07A2,X
0F/EBF4: A9 FF     LDA #$FF
0F/EBF6: 9D A3 07  STA $07A3,X
0F/EBF9: 8A        TXA 
0F/EBFA: 18        CLC 
0F/EBFB: 69 04     ADC #$04
0F/EBFD: 85 90     STA $90
0F/EBFF: 4C E6 EA  JMP $EAE6
; control codes with a parameter ($10-$3A)
0F/EC02: 48        PHA 
0F/EC03: B1 3E     LDA ($3E),Y        ; get parameter
0F/EC05: 85 84     STA $84
0F/EC07: E6 3E     INC $3E
0F/EC09: D0 02     BNE $EC0D
0F/EC0B: E6 3F     INC $3F
0F/EC0D: 68        PLA 
0F/EC0E: C9 14     CMP #$14
0F/EC10: B0 03     BCS $EC15
0F/EC12: 4C D0 EC  JMP $ECD0
; $14: set text x offset (tab)
0F/EC15: D0 07     BNE $EC1E
0F/EC17: A5 84     LDA $84
0F/EC19: 85 90     STA $90            ; text x offset
0F/EC1B: 4C E6 EA  JMP $EAE6
; $15-17: cursor position
0F/EC1E: C9 18     CMP #$18
0F/EC20: B0 48     BCS $EC6A
0F/EC22: 38        SEC 
0F/EC23: E9 15     SBC #$15
0F/EC25: 18        CLC 
0F/EC26: 69 78     ADC #$78
0F/EC28: 85 81     STA $81
0F/EC2A: A9 00     LDA #$00
0F/EC2C: 85 80     STA $80
0F/EC2E: A5 84     LDA $84
0F/EC30: 85 90     STA $90
0F/EC32: B1 3E     LDA ($3E),Y
0F/EC34: 85 82     STA $82
0F/EC36: C8        INY 
0F/EC37: B1 3E     LDA ($3E),Y
0F/EC39: 85 83     STA $83
0F/EC3B: A0 F1     LDY #$F1
0F/EC3D: B1 80     LDA ($80),Y
0F/EC3F: A6 1E     LDX $1E
0F/EC41: D0 03     BNE $EC46
0F/EC43: E6 1E     INC $1E
0F/EC45: 8A        TXA 
0F/EC46: AA        TAX 
0F/EC47: 18        CLC 
0F/EC48: 69 04     ADC #$04
0F/EC4A: 91 80     STA ($80),Y
0F/EC4C: 8A        TXA 
0F/EC4D: A8        TAY 
0F/EC4E: A5 84     LDA $84
0F/EC50: 18        CLC 
0F/EC51: 65 97     ADC $97
0F/EC53: 91 80     STA ($80),Y
0F/EC55: A5 98     LDA $98
0F/EC57: 18        CLC 
0F/EC58: 65 1F     ADC $1F
0F/EC5A: C8        INY 
0F/EC5B: 91 80     STA ($80),Y
0F/EC5D: C8        INY 
0F/EC5E: A5 82     LDA $82
0F/EC60: 91 80     STA ($80),Y
0F/EC62: A5 83     LDA $83
0F/EC64: C8        INY 
0F/EC65: 91 80     STA ($80),Y
0F/EC67: 4C E6 EA  JMP $EAE6
; $18: keyword (by id)
0F/EC6A: D0 2C     BNE $EC98
0F/EC6C: 20 F9 ED  JSR $EDF9
0F/EC6F: A9 0A     LDA #$0A
0F/EC71: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EC74: A5 84     LDA $84
0F/EC76: 0A        ASL 
0F/EC77: AA        TAX 
0F/EC78: B0 0B     BCS $EC85
0F/EC7A: BD 00 82  LDA $8200,X
0F/EC7D: 85 3E     STA $3E
0F/EC7F: BD 01 82  LDA $8201,X
0F/EC82: 4C 8D EC  JMP $EC8D
0F/EC85: BD 00 83  LDA $8300,X
0F/EC88: 85 3E     STA $3E
0F/EC8A: BD 01 83  LDA $8301,X
0F/EC8D: 85 3F     STA $3F
0F/EC8F: 20 E6 EA  JSR $EAE6
0F/EC92: 20 02 EE  JSR $EE02
0F/EC95: 4C E6 EA  JMP $EAE6
; $19: 
0F/EC98: C9 19     CMP #$19
0F/EC9A: D0 15     BNE $ECB1
0F/EC9C: A6 84     LDX $84
0F/EC9E: A9 0E     LDA #$0E
0F/ECA0: 20 03 FE  JSR $FE03          ; switch prg bank
0F/ECA3: 20 AD EF  JSR $EFAD
0F/ECA6: 20 F3 89  JSR $89F3
0F/ECA9: A5 93     LDA $93
0F/ECAB: 20 03 FE  JSR $FE03          ; switch prg bank
0F/ECAE: 4C E6 EA  JMP $EAE6
; $1A: 
0F/ECB1: C9 1A     CMP #$1A
0F/ECB3: D0 0A     BNE $ECBF
0F/ECB5: A6 84     LDX $84
0F/ECB7: BD 60 60  LDA $6060,X
0F/ECBA: 85 84     STA $84
0F/ECBC: 4C 6C EC  JMP $EC6C
; $1B: keyword (by slot)
0F/ECBF: C9 1B     CMP #$1B
0F/ECC1: D0 0A     BNE $ECCD
0F/ECC3: A6 84     LDX $84
0F/ECC5: BD 80 60  LDA $6080,X
0F/ECC8: 85 84     STA $84
0F/ECCA: 4C 6C EC  JMP $EC6C
; $1C-$3A: 
0F/ECCD: 4C E6 EA  JMP $EAE6
; $10-$13: character string
0F/ECD0: 4A        LSR 
0F/ECD1: 6A        ROR 
0F/ECD2: 6A        ROR 
0F/ECD3: 29 C0     AND #$C0
0F/ECD5: 85 67     STA $67            ; pointer to character properties
0F/ECD7: A5 84     LDA $84            ; parameter
0F/ECD9: C9 20     CMP #$20
0F/ECDB: 90 12     BCC $ECEF
0F/ECDD: 48        PHA 
0F/ECDE: A9 0E     LDA #$0E
0F/ECE0: 20 03 FE  JSR $FE03          ; switch prg bank
0F/ECE3: 68        PLA 
0F/ECE4: 20 24 89  JSR $8924
0F/ECE7: A5 93     LDA $93
0F/ECE9: 20 03 FE  JSR $FE03          ; switch prg bank
0F/ECEC: 4C E6 EA  JMP $EAE6
; $00: 
0F/ECEF: C9 00     CMP #$00
0F/ECF1: D0 0D     BNE $ED00
0F/ECF3: A6 67     LDX $67
0F/ECF5: BD 00 61  LDA $6100,X
0F/ECF8: 0A        ASL 
0F/ECF9: A9 FE     LDA #$FE
0F/ECFB: 69 00     ADC #$00
0F/ECFD: 4C 29 ED  JMP $ED29
; $01
0F/ED00: C9 01     CMP #$01
0F/ED02: D0 4F     BNE $ED53
0F/ED04: A6 67     LDX $67
0F/ED06: A0 07     LDY #$07
0F/ED08: BD 01 61  LDA $6101,X
0F/ED0B: F0 19     BEQ $ED26
0F/ED0D: 0A        ASL 
0F/ED0E: B0 15     BCS $ED25
0F/ED10: 88        DEY 
0F/ED11: 0A        ASL 
0F/ED12: B0 11     BCS $ED25
0F/ED14: 88        DEY 
0F/ED15: 0A        ASL 
0F/ED16: B0 0D     BCS $ED25
0F/ED18: 88        DEY 
0F/ED19: 0A        ASL 
0F/ED1A: B0 09     BCS $ED25
0F/ED1C: 88        DEY 
0F/ED1D: 0A        ASL 
0F/ED1E: B0 05     BCS $ED25
0F/ED20: 88        DEY 
0F/ED21: 0A        ASL 
0F/ED22: B0 01     BCS $ED25
0F/ED24: 88        DEY 
0F/ED25: 98        TYA 
0F/ED26: 18        CLC 
0F/ED27: 69 F6     ADC #$F6
0F/ED29: 0A        ASL 
0F/ED2A: AA        TAX 
0F/ED2B: 20 F9 ED  JSR $EDF9
0F/ED2E: A9 0A     LDA #$0A
0F/ED30: 20 03 FE  JSR $FE03          ; switch prg bank
0F/ED33: B0 0B     BCS $ED40
0F/ED35: BD 00 84  LDA $8400,X
0F/ED38: 85 3E     STA $3E
0F/ED3A: BD 01 84  LDA $8401,X
0F/ED3D: 4C 48 ED  JMP $ED48
0F/ED40: BD 00 85  LDA $8500,X
0F/ED43: 85 3E     STA $3E
0F/ED45: BD 01 85  LDA $8501,X
0F/ED48: 85 3F     STA $3F
0F/ED4A: 20 E6 EA  JSR $EAE6
0F/ED4D: 20 02 EE  JSR $EE02
0F/ED50: 4C E6 EA  JMP $EAE6
; $02: 
0F/ED53: C9 02     CMP #$02
0F/ED55: D0 37     BNE $ED8E
0F/ED57: A6 67     LDX $67
0F/ED59: BD 02 61  LDA $6102,X
0F/ED5C: 85 5A     STA $5A
0F/ED5E: BD 03 61  LDA $6103,X
0F/ED61: 85 5B     STA $5B
0F/ED63: BD 04 61  LDA $6104,X
0F/ED66: 85 5C     STA $5C
0F/ED68: BD 05 61  LDA $6105,X
0F/ED6B: 85 5D     STA $5D
0F/ED6D: BD 06 61  LDA $6106,X
0F/ED70: 85 5E     STA $5E
0F/ED72: BD 07 61  LDA $6107,X
0F/ED75: 85 5F     STA $5F
0F/ED77: 20 F9 ED  JSR $EDF9
0F/ED7A: A9 5A     LDA #$5A
0F/ED7C: 85 3E     STA $3E
0F/ED7E: A9 00     LDA #$00
0F/ED80: 85 3F     STA $3F
0F/ED82: 20 0F EE  JSR $EE0F
0F/ED85: 20 E6 EA  JSR $EAE6
0F/ED88: 20 02 EE  JSR $EE02
0F/ED8B: 4C E6 EA  JMP $EAE6
; $03-??
0F/ED8E: A2 00     LDX #$00
0F/ED90: 86 03     STX $03
0F/ED92: 38        SEC 
0F/ED93: E9 03     SBC #$03
0F/ED95: C9 07     CMP #$07
0F/ED97: B0 04     BCS $ED9D
0F/ED99: 69 19     ADC #$19
0F/ED9B: D0 12     BNE $EDAF
0F/ED9D: E9 07     SBC #$07
0F/ED9F: 18        CLC 
0F/EDA0: 69 30     ADC #$30
0F/EDA2: 48        PHA 
0F/EDA3: A6 67     LDX $67
0F/EDA5: BD 01 61  LDA $6101,X
0F/EDA8: 29 10     AND #$10
0F/EDAA: 0A        ASL 
0F/EDAB: 0A        ASL 
0F/EDAC: 85 03     STA $03
0F/EDAE: 68        PLA 
0F/EDAF: 65 67     ADC $67
0F/EDB1: AA        TAX 
0F/EDB2: 20 F9 ED  JSR $EDF9
0F/EDB5: A9 0A     LDA #$0A
0F/EDB7: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EDBA: BD 00 61  LDA $6100,X
0F/EDBD: D0 32     BNE $EDF1
0F/EDBF: 8A        TXA 
0F/EDC0: 29 3F     AND #$3F
0F/EDC2: AA        TAX 
0F/EDC3: A9 00     LDA #$00
0F/EDC5: E0 1C     CPX #$1C
0F/EDC7: 90 06     BCC $EDCF
0F/EDC9: E0 1E     CPX #$1E
0F/EDCB: B0 02     BCS $EDCF
0F/EDCD: A9 30     LDA #$30
0F/EDCF: 0A        ASL 
0F/EDD0: AA        TAX 
0F/EDD1: B0 0B     BCS $EDDE
0F/EDD3: BD 00 82  LDA $8200,X
0F/EDD6: 85 3E     STA $3E
0F/EDD8: BD 01 82  LDA $8201,X
0F/EDDB: 4C E6 ED  JMP $EDE6
0F/EDDE: BD 00 83  LDA $8300,X
0F/EDE1: 85 3E     STA $3E
0F/EDE3: BD 01 83  LDA $8301,X
0F/EDE6: 85 3F     STA $3F
0F/EDE8: 20 E6 EA  JSR $EAE6
0F/EDEB: 20 02 EE  JSR $EE02
0F/EDEE: 4C E6 EA  JMP $EAE6
0F/EDF1: 24 03     BIT $03
0F/EDF3: 50 DA     BVC $EDCF
0F/EDF5: A9 0F     LDA #$0F
0F/EDF7: D0 D6     BNE $EDCF
0F/EDF9: A5 3E     LDA $3E
0F/EDFB: 85 99     STA $99
0F/EDFD: A5 3F     LDA $3F
0F/EDFF: 85 9A     STA $9A
0F/EE01: 60        RTS 

; [  ]

0F/EE02: A5 99     LDA $99
0F/EE04: 85 3E     STA $3E
0F/EE06: A5 9A     LDA $9A
0F/EE08: 85 3F     STA $3F
0F/EE0A: A5 93     LDA $93
0F/EE0C: 4C 03 FE  JMP $FE03          ; switch prg bank

; [  ]

0F/EE0F: A2 05     LDX #$05
0F/EE11: B5 5A     LDA $5A,X
0F/EE13: C9 FF     CMP #$FF
0F/EE15: D0 07     BNE $EE1E
0F/EE17: A9 00     LDA #$00
0F/EE19: 95 5A     STA $5A,X
0F/EE1B: CA        DEX 
0F/EE1C: 10 F3     BPL $EE11
0F/EE1E: 60        RTS 

; [  ]

0F/EE1F: AD 02 20  LDA $2002
0F/EE22: A6 3A     LDX $3A
0F/EE24: A4 3B     LDY $3B
0F/EE26: E0 20     CPX #$20
0F/EE28: B0 0E     BCS $EE38
0F/EE2A: B9 C2 EE  LDA $EEC2,Y
0F/EE2D: 8D 06 20  STA $2006
0F/EE30: 8A        TXA 
0F/EE31: 19 A2 EE  ORA $EEA2,Y
0F/EE34: 8D 06 20  STA $2006
0F/EE37: 60        RTS 
0F/EE38: B9 C2 EE  LDA $EEC2,Y
0F/EE3B: 09 04     ORA #$04
0F/EE3D: 8D 06 20  STA $2006
0F/EE40: 8A        TXA 
0F/EE41: 29 1F     AND #$1F
0F/EE43: 19 A2 EE  ORA $EEA2,Y
0F/EE46: 8D 06 20  STA $2006
0F/EE49: 60        RTS 

; [  ]

0F/EE4A: A6 3B     LDX $3B
0F/EE4C: CA        DEX 
0F/EE4D: 10 02     BPL $EE51
0F/EE4F: A6 3B     LDX $3B
0F/EE51: A5 3A     LDA $3A
0F/EE53: 29 1F     AND #$1F
0F/EE55: 1D A2 EE  ORA $EEA2,X
0F/EE58: 85 54     STA $54
0F/EE5A: BD C2 EE  LDA $EEC2,X
0F/EE5D: 85 55     STA $55
0F/EE5F: 60        RTS 

; [  ]

0F/EE60: A9 08     LDA #$08
0F/EE62: D0 02     BNE $EE66

; [ close menu ??? ]

0F/EE64: A9 1C     LDA #$1C
0F/EE66: 85 3D     STA $3D
0F/EE68: A9 1B     LDA #$1B
0F/EE6A: 85 39     STA $39
0F/EE6C: 85 3B     STA $3B
0F/EE6E: A9 01     LDA #$01
0F/EE70: 85 38     STA $38
0F/EE72: A9 1E     LDA #$1E
0F/EE74: 85 3C     STA $3C
0F/EE76: A5 3D     LDA $3D
0F/EE78: 4A        LSR 
0F/EE79: 48        PHA 
0F/EE7A: A5 3C     LDA $3C
0F/EE7C: 85 90     STA $90
0F/EE7E: 85 91     STA $91
0F/EE80: A0 1D     LDY #$1D
0F/EE82: A9 00     LDA #$00
0F/EE84: 99 80 07  STA $0780,Y
0F/EE87: 99 A0 07  STA $07A0,Y
0F/EE8A: 88        DEY 
0F/EE8B: 10 F7     BPL $EE84
0F/EE8D: 20 53 F0  JSR $F053
0F/EE90: A5 3B     LDA $3B
0F/EE92: 38        SEC 
0F/EE93: E9 04     SBC #$04
0F/EE95: 85 3B     STA $3B
0F/EE97: 68        PLA 
0F/EE98: 38        SEC 
0F/EE99: E9 01     SBC #$01
0F/EE9B: D0 DC     BNE $EE79
0F/EE9D: A5 57     LDA $57
0F/EE9F: 4C 03 FE  JMP $FE03          ; switch prg bank

; name table ppu address (lo byte)
0F/EEA2: 00 20 40 60 80 A0 C0 E0
0F/EEAA: 00 20 40 60 80 A0 C0 E0
0F/EEB2: 00 20 40 60 80 A0 C0 E0
0F/EEBA: 00 20 40 60 80 A0 00 20  ; loop around to $2000

; name table ppu address (hi byte)
0F/EEC2: 20 20 20 20 20 20 20 20
0F/EECA: 21 21 21 21 21 21 21 21
0F/EED2: 22 22 22 22 22 22 22 22
0F/EEDA: 23 23 23 23 23 23 20 20

; kana w/ dakuten ($3B-$6D)
0F/EEE2:                                  00 8F 90 91 92 
0F/EEE7: 93 94 95 96 97 98 99 9A 9B 9C 9D A3 A4 A5 A6 A7
0F/EEF7: CF D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB DC DD E3
0F/EF07: E4 E5 E6 E7 A3 A4 A5 A6 A7 E3 E4 E5 E6 E7

; dakuten ($3B-$6D)
0F/EF15:                                  00 C0 C0 C0 C0
0F/EF1A: C0 C0 C0 C0 C0 C0 C0 C0 C0 C0 C0 C0 C0 C0 C0 C0
0F/EF2A: C0 C0 C0 C0 C0 C0 C0 C0 C0 C0 C0 C0 C0 C0 C0 C0
0F/EF3A: C0 C0 C0 C0 C1 C1 C1 C1 C1 C1 C1 C1 C1 C1

; [ give treasure ]

; return text id in A

0F/EF48: A9 0E     LDA #$0E
0F/EF4A: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EF4D: A5 49     LDA $49
0F/EF4F: D0 4A     BNE $EF9B          ; branch if chests contains gil
0F/EF51: A9 00     LDA #$00
0F/EF53: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EF56: A4 45     LDY $45
0F/EF58: B9 00 8C  LDA $8C00,Y        ; treasure contents
0F/EF5B: 85 80     STA $80
0F/EF5D: A9 0E     LDA #$0E
0F/EF5F: 20 03 FE  JSR $FE03          ; switch prg bank
0F/EF62: A5 80     LDA $80
0F/EF64: 20 73 98  JSR $9873          ; add item to inventory
0F/EF67: B0 2F     BCS $EF98          ; branch if inventory is full
0F/EF69: A5 45     LDA $45
0F/EF6B: C9 E0     CMP #$E0
0F/EF6D: 90 0E     BCC $EF7D          ; branch if no battle
; battle
0F/EF6F: 29 1F     AND #$1F
0F/EF71: 85 6A     STA $6A            ; battle id
0F/EF73: A9 20     LDA #$20
0F/EF75: 85 44     STA $44
0F/EF77: 20 10 F0  JSR $F010          ; toggle treasure switch
0F/EF7A: A9 4C     LDA #$4C           ; $024C: "Received \x02! A monster appeared!"
0F/EF7C: 60        RTS 
; item
0F/EF7D: A5 80     LDA $80
0F/EF7F: C9 0F     CMP #$0F
0F/EF81: 90 0B     BCC $EF8E          ; branch if a key item
0F/EF83: C9 60     CMP #$60
0F/EF85: F0 07     BEQ $EF8E
0F/EF87: A9 48     LDA #$48           ; play song $08
0F/EF89: 85 E0     STA $E0
0F/EF8B: 4C 92 EF  JMP $EF92
0F/EF8E: A9 47     LDA #$47           ; play song $07
0F/EF90: 85 E0     STA $E0
0F/EF92: 20 10 F0  JSR $F010          ; toggle treasure switch
0F/EF95: A9 01     LDA #$01           ; $0201: "Received \x02!"
0F/EF97: 60        RTS 
; inventory full
0F/EF98: A9 03     LDA #$03           ; $0203: "You're carrying too much!"
0F/EF9A: 60        RTS 
; gil
0F/EF9B: A6 45     LDX $45
0F/EF9D: 20 AD EF  JSR $EFAD
0F/EFA0: 20 CF EF  JSR $EFCF          ; give gil
0F/EFA3: 20 10 F0  JSR $F010          ; toggle treasure switch
0F/EFA6: A9 48     LDA #$48           ; play song $08
0F/EFA8: 85 E0     STA $E0
0F/EFAA: A9 02     LDA #$02           ; $0202: "Received \x03 Gil!"
0F/EFAC: 60        RTS 

; [ get gil amount ]

;     A: "item" id ($C0-$DF are gil amounts for treasure chests)
; ++$80: gil amount

0F/EFAD: 8A        TXA 
0F/EFAE: 0A        ASL 
0F/EFAF: AA        TAX 
0F/EFB0: B0 0B     BCS $EFBD
0F/EFB2: BD 00 80  LDA $8000,X        ; 0E/8000 (item prices)
0F/EFB5: 85 80     STA $80
0F/EFB7: BD 01 80  LDA $8001,X
0F/EFBA: 4C C5 EF  JMP $EFC5
0F/EFBD: BD 00 81  LDA $8100,X
0F/EFC0: 85 80     STA $80
0F/EFC2: BD 01 81  LDA $8101,X
0F/EFC5: 85 81     STA $81
0F/EFC7: A9 00     LDA #$00
0F/EFC9: 85 82     STA $82
0F/EFCB: 8A        TXA 
0F/EFCC: 4A        LSR 
0F/EFCD: AA        TAX 
0F/EFCE: 60        RTS 

; [ give gil ]

0F/EFCF: AD 1C 60  LDA $601C
0F/EFD2: 18        CLC 
0F/EFD3: 65 80     ADC $80
0F/EFD5: 8D 1C 60  STA $601C
0F/EFD8: AD 1D 60  LDA $601D
0F/EFDB: 65 81     ADC $81
0F/EFDD: 8D 1D 60  STA $601D
0F/EFE0: AD 1E 60  LDA $601E
0F/EFE3: 69 00     ADC #$00
0F/EFE5: 8D 1E 60  STA $601E
0F/EFE8: C9 98     CMP #$98
0F/EFEA: B0 14     BCS $F000
0F/EFEC: 90 21     BCC $F00F
0F/EFEE: AD 1D 60  LDA $601D
0F/EFF1: C9 96     CMP #$96
0F/EFF3: 90 1A     BCC $F00F
0F/EFF5: F0 02     BEQ $EFF9
0F/EFF7: B0 07     BCS $F000
0F/EFF9: AD 1C 60  LDA $601C
0F/EFFC: C9 80     CMP #$80
0F/EFFE: 90 0F     BCC $F00F
0F/F000: A9 7F     LDA #$7F           ; max 9999999
0F/F002: 8D 1C 60  STA $601C
0F/F005: A9 96     LDA #$96
0F/F007: 8D 1D 60  STA $601D
0F/F00A: A9 98     LDA #$98
0F/F00C: 8D 1E 60  STA $601E
0F/F00F: 60        RTS 

; [ toggle treasure switch ]

0F/F010: A5 45     LDA $45
0F/F012: 29 07     AND #$07
0F/F014: AA        TAX 
0F/F015: BD 29 F0  LDA $F029,X        ; bitmasks
0F/F018: 85 80     STA $80
0F/F01A: A5 45     LDA $45
0F/F01C: 4A        LSR 
0F/F01D: 4A        LSR 
0F/F01E: 4A        LSR 
0F/F01F: AA        TAX 
0F/F020: A5 80     LDA $80
0F/F022: 5D 20 60  EOR $6020,X
0F/F025: 9D 20 60  STA $6020,X
0F/F028: 60        RTS 

; bitmasks
0F/F029: 01 02 04 08 10 20 40 80

; [ reset text buffer ]

0F/F031: A5 3C     LDA $3C
0F/F033: 85 91     STA $91
0F/F035: A5 38     LDA $38
0F/F037: 29 1F     AND #$1F
0F/F039: 49 1F     EOR #$1F
0F/F03B: 18        CLC 
0F/F03C: 69 01     ADC #$01
0F/F03E: C5 3C     CMP $3C
0F/F040: B0 02     BCS $F044
0F/F042: 85 91     STA $91
0F/F044: A0 1D     LDY #$1D
0F/F046: A9 FF     LDA #$FF
0F/F048: 99 80 07  STA $0780,Y
0F/F04B: 99 A0 07  STA $07A0,Y
0F/F04E: 88        DEY 
0F/F04F: 10 F7     BPL $F048
0F/F051: 18        CLC 
0F/F052: 60        RTS 

; [ draw one line of text ]

; also used to close menu windows ???

0F/F053: 20 00 FE  JSR $FE00          ; wait for vblank
0F/F056: E6 F0     INC $F0
0F/F058: 20 69 F0  JSR $F069          ; copy text to ppu
0F/F05B: 20 D5 E9  JSR $E9D5          ; update scrolling (text window)
0F/F05E: 20 46 C7  JSR $C746          ; update sound
0F/F061: A5 93     LDA $93
0F/F063: 20 03 FE  JSR $FE03          ; switch prg bank
0F/F066: 4C 44 F0  JMP $F044

; [ copy text to ppu ]

0F/F069: A5 38     LDA $38
0F/F06B: 85 3A     STA $3A
0F/F06D: 20 1F EE  JSR $EE1F
0F/F070: A2 00     LDX #$00
0F/F072: BD 80 07  LDA $0780,X
0F/F075: 8D 07 20  STA $2007
0F/F078: E8        INX 
0F/F079: E4 91     CPX $91
0F/F07B: 90 F5     BCC $F072
0F/F07D: E4 3C     CPX $3C
0F/F07F: B0 18     BCS $F099
0F/F081: A5 3A     LDA $3A
0F/F083: 29 20     AND #$20
0F/F085: 49 20     EOR #$20
0F/F087: 85 3A     STA $3A
0F/F089: 20 1F EE  JSR $EE1F
0F/F08C: A6 91     LDX $91
0F/F08E: BD 80 07  LDA $0780,X
0F/F091: 8D 07 20  STA $2007
0F/F094: E8        INX 
0F/F095: E4 3C     CPX $3C
0F/F097: 90 F5     BCC $F08E
0F/F099: A5 38     LDA $38
0F/F09B: 85 3A     STA $3A
0F/F09D: A5 3B     LDA $3B
0F/F09F: 18        CLC 
0F/F0A0: 69 01     ADC #$01
0F/F0A2: 85 3B     STA $3B
0F/F0A4: 20 1F EE  JSR $EE1F
0F/F0A7: A2 00     LDX #$00
0F/F0A9: BD A0 07  LDA $07A0,X
0F/F0AC: 8D 07 20  STA $2007
0F/F0AF: E8        INX 
0F/F0B0: E4 91     CPX $91
0F/F0B2: 90 F5     BCC $F0A9
0F/F0B4: E4 3C     CPX $3C
0F/F0B6: B0 18     BCS $F0D0
0F/F0B8: A5 3A     LDA $3A
0F/F0BA: 29 20     AND #$20
0F/F0BC: 49 20     EOR #$20
0F/F0BE: 85 3A     STA $3A
0F/F0C0: 20 1F EE  JSR $EE1F
0F/F0C3: A6 91     LDX $91
0F/F0C5: BD A0 07  LDA $07A0,X
0F/F0C8: 8D 07 20  STA $2007
0F/F0CB: E8        INX 
0F/F0CC: E4 3C     CPX $3C
0F/F0CE: 90 F5     BCC $F0C5
0F/F0D0: A9 00     LDA #$00
0F/F0D2: 85 90     STA $90
0F/F0D4: A5 3B     LDA $3B
0F/F0D6: 18        CLC 
0F/F0D7: 69 01     ADC #$01
0F/F0D9: C9 1E     CMP #$1E
0F/F0DB: 90 02     BCC $F0DF
0F/F0DD: E9 1E     SBC #$1E
0F/F0DF: 85 3B     STA $3B
0F/F0E1: 60        RTS 

; --------------------------------------------------------------------------

; [ row menu ]

0F/F0E2: A9 00     LDA #$00
0F/F0E4: 8D 01 20  STA $2001
0F/F0E7: A9 88     LDA #$88
0F/F0E9: 85 FF     STA $FF
0F/F0EB: 20 91 E4  JSR $E491          ; load menu graphics
0F/F0EE: 20 21 F3  JSR $F321          ; clear ppu name table
0F/F0F1: A9 0F     LDA #$0F
0F/F0F3: 8D CE 03  STA $03CE
0F/F0F6: A9 07     LDA #$07
0F/F0F8: 85 38     STA $38
0F/F0FA: A9 05     LDA #$05
0F/F0FC: 85 39     STA $39
0F/F0FE: A9 12     LDA #$12
0F/F100: 85 3C     STA $3C
0F/F102: A9 12     LDA #$12
0F/F104: 85 3D     STA $3D
0F/F106: A9 01     LDA #$01
0F/F108: 85 37     STA $37
0F/F10A: 20 6E C4  JSR $C46E          ; clear oam data
0F/F10D: 20 00 FE  JSR $FE00          ; wait for vblank
0F/F110: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0F/F113: A9 02     LDA #$02
0F/F115: 8D 14 40  STA $4014
0F/F118: A5 FF     LDA $FF
0F/F11A: 8D 00 20  STA $2000
0F/F11D: A9 00     LDA #$00
0F/F11F: 8D 05 20  STA $2005
0F/F122: 8D 05 20  STA $2005
0F/F125: A9 0E     LDA #$0E
0F/F127: 85 57     STA $57
0F/F129: A9 1E     LDA #$1E
0F/F12B: 8D 01 20  STA $2001
0F/F12E: 20 1E E9  JSR $E91E          ; open window
0F/F131: 20 46 F2  JSR $F246          ; draw row menu text
0F/F134: 20 A2 DB  JSR $DBA2          ; update joypad input
0F/F137: A5 20     LDA $20
0F/F139: 29 0C     AND #$0C
0F/F13B: 85 66     STA $66            ; set initial buttons pressed (up/down)
0F/F13D: A9 00     LDA #$00
0F/F13F: 85 24     STA $24
0F/F141: 85 25     STA $25
0F/F143: A9 00     LDA #$00
0F/F145: 85 65     STA $65
0F/F147: A9 80     LDA #$80           ; portrait x positions (start in front row)
0F/F149: 85 62     STA $62
0F/F14B: 85 63     STA $63
0F/F14D: 85 64     STA $64
0F/F14F: 85 61     STA $61
0F/F151: A9 03     LDA #$03
0F/F153: 85 67     STA $67            ; number of characters
0F/F155: AD F5 62  LDA $62F5
0F/F158: 30 02     BMI $F15C          ; branch if no guest character
0F/F15A: E6 67     INC $67
; start of frame loop
0F/F15C: 20 00 FE  JSR $FE00          ; wait for vblank
0F/F15F: A9 02     LDA #$02
0F/F161: 8D 14 40  STA $4014
0F/F164: A5 FF     LDA $FF
0F/F166: 8D 00 20  STA $2000
0F/F169: A9 1E     LDA #$1E
0F/F16B: 8D 01 20  STA $2001
0F/F16E: A9 00     LDA #$00
0F/F170: 8D 05 20  STA $2005
0F/F173: 8D 05 20  STA $2005
0F/F176: E6 F0     INC $F0
0F/F178: A9 0E     LDA #$0E
0F/F17A: 85 57     STA $57
0F/F17C: 20 4F C7  JSR $C74F          ; update sound
0F/F17F: 20 6E C4  JSR $C46E          ; clear oam data
0F/F182: 20 12 F2  JSR $F212          ; draw portraits
0F/F185: 20 00 F2  JSR $F200          ; draw row menu cursor
0F/F188: 20 A1 F1  JSR $F1A1          ; get player input (row menu)
0F/F18B: 20 99 F2  JSR $F299          ; update character portrait positions
0F/F18E: 20 C8 F2  JSR $F2C8          ; validate character rows
0F/F191: 4C 5C F1  JMP $F15C

; [ get player input (row menu) ]

; subroutine starts at 0F/F1A1

0F/F194: 68        PLA                ; pop return address
0F/F195: 68        PLA 
0F/F196: A9 00     LDA #$00
0F/F198: 8D 01 20  STA $2001
0F/F19B: 8D 15 40  STA $4015
0F/F19E: 85 25     STA $25
0F/F1A0: 60        RTS 
; starts here
0F/F1A1: 20 A2 DB  JSR $DBA2          ; update joypad input
0F/F1A4: A5 25     LDA $25
0F/F1A6: D0 EC     BNE $F194          ; branch if B button is pressed
0F/F1A8: A5 24     LDA $24
0F/F1AA: D0 2F     BNE $F1DB          ; branch if A button is pressed
0F/F1AC: A5 20     LDA $20
0F/F1AE: 29 0C     AND #$0C           ; check if up/down pressed
0F/F1B0: C5 66     CMP $66
0F/F1B2: F0 EC     BEQ $F1A0          ; branch if no change from last frame
0F/F1B4: 85 66     STA $66            ; save as previous value
0F/F1B6: 29 0C     AND #$0C
0F/F1B8: F0 E6     BEQ $F1A0          ; return if up/down buttons not pressed
0F/F1BA: C9 08     CMP #$08
0F/F1BC: F0 0D     BEQ $F1CB          ; branch if up button is pressed
; move down
0F/F1BE: A5 65     LDA $65
0F/F1C0: 18        CLC 
0F/F1C1: 69 01     ADC #$01
0F/F1C3: C5 67     CMP $67
0F/F1C5: 90 0D     BCC $F1D4
0F/F1C7: E5 67     SBC $67            ; loop around to first character
0F/F1C9: B0 09     BCS $F1D4
; move up
0F/F1CB: A5 65     LDA $65
0F/F1CD: 38        SEC 
0F/F1CE: E9 01     SBC #$01
0F/F1D0: B0 02     BCS $F1D4
0F/F1D2: 65 67     ADC $67
0F/F1D4: 29 03     AND #$03
0F/F1D6: 85 65     STA $65
0F/F1D8: 4C 45 DB  JMP $DB45          ; cursor sound effect (move)
; A button
0F/F1DB: 20 2E DB  JSR $DB2E          ; cursor sound effect (confirm)
0F/F1DE: A9 00     LDA #$00
0F/F1E0: 85 24     STA $24
0F/F1E2: A5 65     LDA $65
0F/F1E4: 4A        LSR 
0F/F1E5: 6A        ROR 
0F/F1E6: 6A        ROR 
0F/F1E7: AA        TAX 
0F/F1E8: BD 01 61  LDA $6101,X
0F/F1EB: 29 C0     AND #$C0
0F/F1ED: D0 0E     BNE $F1FD
0F/F1EF: A4 65     LDY $65
0F/F1F1: BE C4 F2  LDX $F2C4,Y
0F/F1F4: BD 00 62  LDA $6200,X        ; toggle character
0F/F1F7: 49 01     EOR #$01
0F/F1F9: 9D 00 62  STA $6200,X
0F/F1FC: 60        RTS 
0F/F1FD: 4C 67 DE  JMP $DE67          ; play error sound effect

; [ draw row menu cursor ]

0F/F200: A6 65     LDX $65            ; cursor position
0F/F202: A9 40     LDA #$40
0F/F204: 85 40     STA $40
0F/F206: BD 0E F2  LDA $F20E,X
0F/F209: 85 41     STA $41
0F/F20B: 4C A1 DE  JMP $DEA1          ; draw cursor sprite

; row menu cursor y positions
0F/F20E: 47 67 87 A7

; [ draw portraits (row menu) ]

0F/F212: A9 2F     LDA #$2F
0F/F214: 85 41     STA $41
0F/F216: A5 61     LDA $61
0F/F218: 85 40     STA $40
0F/F21A: A2 00     LDX #$00
0F/F21C: 20 52 88  JSR $8852          ; draw portrait
0F/F21F: A9 4F     LDA #$4F
0F/F221: 85 41     STA $41
0F/F223: A5 62     LDA $62
0F/F225: 85 40     STA $40
0F/F227: A2 40     LDX #$40
0F/F229: 20 52 88  JSR $8852          ; draw portrait
0F/F22C: A9 6F     LDA #$6F
0F/F22E: 85 41     STA $41
0F/F230: A5 63     LDA $63
0F/F232: 85 40     STA $40
0F/F234: A2 80     LDX #$80
0F/F236: 20 52 88  JSR $8852          ; draw portrait
0F/F239: A9 8F     LDA #$8F
0F/F23B: 85 41     STA $41
0F/F23D: A5 64     LDA $64
0F/F23F: 85 40     STA $40
0F/F241: A2 C0     LDX #$C0
0F/F243: 4C 52 88  JMP $8852          ; draw portrait

; [ draw row menu text ]

0F/F246: AD F5 62  LDA $62F5
0F/F249: 30 11     BMI $F25C
0F/F24B: A9 80     LDA #$80           ; 0F/F280
0F/F24D: 85 3E     STA $3E
0F/F24F: A9 F2     LDA #$F2
0F/F251: 85 3F     STA $3F
0F/F253: A9 0E     LDA #$0E
0F/F255: 85 57     STA $57
0F/F257: 85 93     STA $93
0F/F259: 4C AC EA  JMP $EAAC          ; load next line of text
0F/F25C: A9 6D     LDA #$6D           ; 0F/F26D
0F/F25E: 85 3E     STA $3E
0F/F260: A9 F2     LDA #$F2
0F/F262: 85 3F     STA $3F
0F/F264: A9 0E     LDA #$0E
0F/F266: 85 57     STA $57
0F/F268: 85 93     STA $93
0F/F26A: 4C AC EA  JMP $EAAC          ; load next line of text

; row menu text (3 characters)
0F/F26D: 01 FF FF 10 02 01
0F/F273: 01 FF FF 11 02 01
0F/F279: 01 FF FF 12 02 00
0F/F27F: 00

; row menu text (4 characters)
0F/F280: 01 FF FF 10 02 01
0F/F286: 01 FF FF 11 02 01
0F/F28C: 01 FF FF 12 02 01
0F/F292: 01 FF FF 13 02 00
0F/F298: 00

; [ update character portrait positions ]

0F/F299: A0 03     LDY #$03
0F/F29B: BE C4 F2  LDX $F2C4,Y
0F/F29E: BD 00 62  LDA $6200,X
0F/F2A1: 4A        LSR 
0F/F2A2: 90 10     BCC $F2B4          ; branch if back row
0F/F2A4: B9 61 00  LDA $0061,Y
0F/F2A7: C9 81     CMP #$81
0F/F2A9: 90 05     BCC $F2B0
0F/F2AB: A9 80     LDA #$80
0F/F2AD: 99 61 00  STA $0061,Y
0F/F2B0: 88        DEY 
0F/F2B1: 10 E8     BPL $F29B
0F/F2B3: 60        RTS 
0F/F2B4: B9 61 00  LDA $0061,Y
0F/F2B7: C9 A7     CMP #$A7
0F/F2B9: B0 F5     BCS $F2B0
0F/F2BB: A9 A8     LDA #$A8
0F/F2BD: 99 61 00  STA $0061,Y
0F/F2C0: 4C B0 F2  JMP $F2B0
; unused
0F/F2C3: 60        RTS 

; pointers to character row
0F/F2C4: 35 75 B5 F5

; [ validate character rows ]

; if all characters are in the back row, move one to the front row

0F/F2C8: AD F5 62  LDA $62F5
0F/F2CB: 10 02     BPL $F2CF
0F/F2CD: A9 00     LDA #$00
0F/F2CF: 0D B5 62  ORA $62B5
0F/F2D2: 0D 75 62  ORA $6275
0F/F2D5: 0D 35 62  ORA $6235
0F/F2D8: 4A        LSR 
0F/F2D9: B0 0C     BCS $F2E7          ; return if any characters are in front row
0F/F2DB: AD 01 61  LDA $6101
0F/F2DE: 29 C0     AND #$C0
0F/F2E0: D0 06     BNE $F2E8
0F/F2E2: A9 01     LDA #$01
0F/F2E4: 8D 35 62  STA $6235
0F/F2E7: 60        RTS 
0F/F2E8: AD 41 61  LDA $6141
0F/F2EB: 29 C0     AND #$C0
0F/F2ED: D0 06     BNE $F2F5
0F/F2EF: A9 01     LDA #$01
0F/F2F1: 8D 75 62  STA $6275
0F/F2F4: 60        RTS 
0F/F2F5: AD 81 61  LDA $6181
0F/F2F8: 29 C0     AND #$C0
0F/F2FA: D0 06     BNE $F302
0F/F2FC: A9 01     LDA #$01
0F/F2FE: 8D B5 62  STA $62B5
0F/F301: 60        RTS 
0F/F302: A9 01     LDA #$01
0F/F304: 8D F5 62  STA $62F5
0F/F307: 60        RTS 

; [ check if any main characters are alive ]

; set carry if all main characters are either dead, stone, or toad

0F/F308: AD 01 61  LDA $6101
0F/F30B: 29 E0     AND #$E0
0F/F30D: F0 10     BEQ $F31F          ; branch if not dead, stone, or toad
0F/F30F: AD 41 61  LDA $6141
0F/F312: 29 E0     AND #$E0
0F/F314: F0 09     BEQ $F31F
0F/F316: AD 81 61  LDA $6181
0F/F319: 29 E0     AND #$E0
0F/F31B: F0 02     BEQ $F31F
0F/F31D: 38        SEC 
0F/F31E: 60        RTS 
0F/F31F: 18        CLC 
0F/F320: 60        RTS 

; [ clear ppu name table ]

0F/F321: AD 02 20  LDA $2002          ; latch ppu
0F/F324: A9 20     LDA #$20           ; ppu $2000
0F/F326: 8D 06 20  STA $2006
0F/F329: A9 00     LDA #$00
0F/F32B: 8D 06 20  STA $2006
0F/F32E: A0 00     LDY #$00
0F/F330: 98        TYA 
0F/F331: A2 03     LDX #$03
0F/F333: 8D 07 20  STA $2007          ; clear ppu name table ($2000-$23BF)
0F/F336: C8        INY 
0F/F337: D0 FA     BNE $F333
0F/F339: CA        DEX 
0F/F33A: D0 F7     BNE $F333
0F/F33C: 8D 07 20  STA $2007
0F/F33F: C8        INY 
0F/F340: C0 C0     CPY #$C0
0F/F342: 90 F8     BCC $F33C
0F/F344: A9 FF     LDA #$FF
0F/F346: 8D 07 20  STA $2007          ; set ppu attributes to $FF (attributes)
0F/F349: C8        INY 
0F/F34A: D0 FA     BNE $F346
0F/F34C: 60        RTS 

; --------------------------------------------------------------------------

; [ event command $E7: end credits ]

0F/F34D: A9 00     LDA #$00
0F/F34F: 85 61     STA $61
0F/F351: 85 62     STA $62
0F/F353: A5 FD     LDA $FD
0F/F355: 09 04     ORA #$04
0F/F357: 85 FF     STA $FF
0F/F359: 8D 00 20  STA $2000
0F/F35C: 20 D1 F3  JSR $F3D1
0F/F35F: A9 10     LDA #$10
0F/F361: 85 62     STA $62
0F/F363: 20 D1 F3  JSR $F3D1
0F/F366: A9 00     LDA #$00
0F/F368: 8D 01 20  STA $2001
0F/F36B: A9 88     LDA #$88
0F/F36D: 85 FF     STA $FF
0F/F36F: 8D 00 20  STA $2000
0F/F372: 20 CE E5  JSR $E5CE          ; load window/text graphics
0F/F375: 20 21 F3  JSR $F321          ; clear ppu name table
0F/F378: 20 27 F4  JSR $F427
0F/F37B: A9 0F     LDA #$0F
0F/F37D: 8D CD 03  STA $03CD
0F/F380: 8D CE 03  STA $03CE
0F/F383: 8D C0 03  STA $03C0
0F/F386: 8D D0 03  STA $03D0
0F/F389: A9 30     LDA #$30
0F/F38B: 8D CF 03  STA $03CF
0F/F38E: 20 08 F4  JSR $F408
0F/F391: A9 0E     LDA #$0E
0F/F393: 20 03 FE  JSR $FE03          ; switch prg bank
0F/F396: 20 AF BA  JSR $BAAF          ; 0E/BAAF
0F/F399: 20 B0 F3  JSR $F3B0
0F/F39C: 20 62 E4  JSR $E462          ; load ending graphics
0F/F39F: 20 27 F4  JSR $F427
0F/F3A2: 20 A7 BC  JSR $BCA7          ; 0E/BCA7
0F/F3A5: 20 08 F4  JSR $F408
0F/F3A8: A9 0E     LDA #$0E
0F/F3AA: 20 03 FE  JSR $FE03          ; switch prg bank
0F/F3AD: 4C DE B9  JMP $B9DE          ; 0E/B9DE (end credits)

; [  ]

0F/F3B0: 20 BC F3  JSR $F3BC
0F/F3B3: 20 BC F3  JSR $F3BC
0F/F3B6: 20 BC F3  JSR $F3BC
0F/F3B9: 20 BC F3  JSR $F3BC
0F/F3BC: A9 E8     LDA #$E8
0F/F3BE: 48        PHA 
0F/F3BF: 20 00 FE  JSR $FE00          ; wait for vblank
0F/F3C2: A9 02     LDA #$02
0F/F3C4: 8D 14 40  STA $4014
0F/F3C7: 20 46 C7  JSR $C746          ; update sound
0F/F3CA: 68        PLA 
0F/F3CB: 38        SEC 
0F/F3CC: E9 01     SBC #$01
0F/F3CE: D0 EE     BNE $F3BE
0F/F3D0: 60        RTS 

; [  ]

0F/F3D1: 20 EB F3  JSR $F3EB
0F/F3D4: A5 61     LDA $61
0F/F3D6: 18        CLC 
0F/F3D7: 69 08     ADC #$08
0F/F3D9: 85 61     STA $61
0F/F3DB: C9 20     CMP #$20
0F/F3DD: 90 F2     BCC $F3D1
0F/F3DF: 29 1F     AND #$1F
0F/F3E1: 18        CLC 
0F/F3E2: 69 01     ADC #$01
0F/F3E4: 85 61     STA $61
0F/F3E6: 29 07     AND #$07
0F/F3E8: D0 E7     BNE $F3D1
0F/F3EA: 60        RTS 

; [  ]

0F/F3EB: 20 00 FE  JSR $FE00          ; wait for vblank
0F/F3EE: A5 62     LDA $62
0F/F3F0: 8D 06 20  STA $2006
0F/F3F3: A5 61     LDA $61
0F/F3F5: 8D 06 20  STA $2006
0F/F3F8: A9 00     LDA #$00
0F/F3FA: A2 80     LDX #$80
0F/F3FC: 8D 07 20  STA $2007
0F/F3FF: CA        DEX 
0F/F400: D0 FA     BNE $F3FC
0F/F402: 20 53 F4  JSR $F453
0F/F405: 4C 46 C7  JMP $C746          ; update sound

; [  ]

0F/F408: 20 6E C4  JSR $C46E          ; clear oam data
0F/F40B: 20 00 FE  JSR $FE00          ; wait for vblank
0F/F40E: A9 1E     LDA #$1E
0F/F410: 8D 01 20  STA $2001
0F/F413: A9 02     LDA #$02
0F/F415: 8D 14 40  STA $4014
0F/F418: 20 30 DC  JSR $DC30          ; copy color palettes to ppu
0F/F41B: 2C 02 20  BIT $2002
0F/F41E: A9 00     LDA #$00
0F/F420: 8D 05 20  STA $2005
0F/F423: 8D 05 20  STA $2005
0F/F426: 60        RTS 

; [  ]

0F/F427: A2 1F     LDX #$1F
0F/F429: BD 33 F4  LDA $F433,X
0F/F42C: 9D C0 03  STA $03C0,X
0F/F42F: CA        DEX 
0F/F430: 10 F7     BPL $F429
0F/F432: 60        RTS 

0F/F433: 12 30 0F 0F
0F/F437: 12 0F 0F 0F
0F/F43B: 12 0F 18 28
0F/F43F: 12 0F 02 31
0F/F443: 12 23 16 30
0F/F447: 0F 17 27 30
0F/F44D: 0F 12 17 37
0F/F44F: 0F 0F 02 31

; [  ]

0F/F453: 2C 02 20  BIT $2002
0F/F456: A5 FF     LDA #$FF
0F/F458: 8D 00 20  STA $2000
0F/F45B: A6 27     LDX $27
0F/F45D: A5 2D     LDA $2D
0F/F45F: 4A        LSR 
0F/F460: 90 02     BCC $F464
0F/F462: A6 29     LDX $29
0F/F464: 8A        TXA 
0F/F465: 0A        ASL 
0F/F466: 0A        ASL 
0F/F467: 0A        ASL 
0F/F468: 0A        ASL 
0F/F469: 8D 05 20  STA $2005
0F/F46C: A5 2F     LDA $2F
0F/F46E: 0A        ASL 
0F/F46F: 0A        ASL 
0F/F470: 0A        ASL 
0F/F471: 0A        ASL 
0F/F472: 8D 05 20  STA $2005
0F/F475: 60        RTS 

; --------------------------------------------------------------------------

; [ splash screen ]

0F/F476: A9 88     LDA #$88
0F/F478: 85 FF     STA $FF
0F/F47A: 8D 00 20  STA $2000
0F/F47D: A9 00     LDA #$00
0F/F47F: 8D 01 20  STA $2001
0F/F482: 8D 15 40  STA $4015
0F/F485: 2C 02 20  BIT $2002
0F/F488: A0 00     LDY #$00
0F/F48A: A2 04     LDX #$04
0F/F48C: A9 20     LDA #$20
0F/F48E: 8D 06 20  STA $2006
0F/F491: A9 00     LDA #$00
0F/F493: 8D 06 20  STA $2006
0F/F496: 8D 07 20  STA $2007
0F/F499: C8        INY 
0F/F49A: D0 FA     BNE $F496
0F/F49C: CA        DEX 
0F/F49D: D0 F7     BNE $F496
0F/F49F: A2 0F     LDX #$0F
0F/F4A1: 9D 50 03  STA $0350,X
0F/F4A4: CA        DEX 
0F/F4A5: 10 FA     BPL $F4A1
0F/F4A7: A9 00     LDA #$00
0F/F4A9: 8D 06 20  STA $2006
0F/F4AC: 8D 06 20  STA $2006
0F/F4AF: A2 09     LDX #$09
0F/F4B1: 8D 07 20  STA $2007
0F/F4B4: C8        INY 
0F/F4B5: D0 FA     BNE $F4B1
0F/F4B7: CA        DEX 
0F/F4B8: D0 F7     BNE $F4B1
0F/F4BA: 20 00 FE  JSR $FE00          ; wait for vblank
0F/F4BD: 2C 02 20  BIT $2002
0F/F4C0: A9 3F     LDA #$3F
0F/F4C2: 8D 06 20  STA $2006
0F/F4C5: A9 00     LDA #$00
0F/F4C7: 8D 06 20  STA $2006
0F/F4CA: A9 0F     LDA #$0F
0F/F4CC: 8D 07 20  STA $2007
0F/F4CF: A9 30     LDA #$30
0F/F4D1: 8D 07 20  STA $2007
0F/F4D4: A2 1E     LDX #$1E
0F/F4D6: A9 02     LDA #$02
0F/F4D8: 8D 07 20  STA $2007
0F/F4DB: CA        DEX 
0F/F4DC: D0 FA     BNE $F4D8
0F/F4DE: A9 3F     LDA #$3F
0F/F4E0: 8D 06 20  STA $2006
0F/F4E3: A9 00     LDA #$00
0F/F4E5: 8D 06 20  STA $2006
0F/F4E8: 8D 06 20  STA $2006
0F/F4EB: 8D 06 20  STA $2006
0F/F4EE: A9 00     LDA #$00
0F/F4F0: 8D 05 20  STA $2005
0F/F4F3: 8D 05 20  STA $2005
0F/F4F6: A9 0A     LDA #$0A
0F/F4F8: 8D 01 20  STA $2001
0F/F4FB: A9 92     LDA #$92           ; 0F/F692
0F/F4FD: 85 3E     STA $3E
0F/F4FF: A9 F6     LDA #$F6
0F/F501: 85 3F     STA $3F
0F/F503: A9 02     LDA #$02
0F/F505: 85 61     STA $61
0F/F507: A9 21     LDA #$21
0F/F509: 85 62     STA $62
0F/F50B: A9 01     LDA #$01
0F/F50D: 85 64     STA $64
0F/F50F: A0 00     LDY #$00
0F/F511: B1 3E     LDA ($3E),Y
0F/F513: C9 FF     CMP #$FF
0F/F515: F0 1D     BEQ $F534
0F/F517: C9 FE     CMP #$FE
0F/F519: D0 06     BNE $F521
0F/F51B: 20 62 F5  JSR $F562
0F/F51E: 4C 24 F5  JMP $F524
0F/F521: 20 9F F5  JSR $F59F
0F/F524: A5 3E     LDA $3E
0F/F526: 18        CLC 
0F/F527: 69 01     ADC #$01
0F/F529: 85 3E     STA $3E
0F/F52B: A5 3F     LDA $3F
0F/F52D: 69 00     ADC #$00
0F/F52F: 85 3F     STA $3F
0F/F531: 4C 0F F5  JMP $F50F
0F/F534: A9 00     LDA #$00
0F/F536: 85 F1     STA $F1
0F/F538: 20 A9 DB  JSR $DBA9          ; read joypad registers
0F/F53B: A5 20     LDA $20
0F/F53D: 85 80     STA $80
0F/F53F: 20 00 FE  JSR $FE00          ; wait for vblank
0F/F542: 20 A9 DB  JSR $DBA9          ; read joypad registers
0F/F545: A5 F0     LDA $F0
0F/F547: 18        CLC 
0F/F548: 69 01     ADC #$01
0F/F54A: 85 F0     STA $F0
0F/F54C: A5 F1     LDA $F1
0F/F54E: 69 00     ADC #$00
0F/F550: 85 F1     STA $F1
0F/F552: C9 03     CMP #$03
0F/F554: B0 06     BCS $F55C
0F/F556: A5 20     LDA $20
0F/F558: C5 80     CMP $80
0F/F55A: F0 E3     BEQ $F53F
0F/F55C: A9 00     LDA #$00
0F/F55E: 8D 01 20  STA $2001
0F/F561: 60        RTS 

; [  ]

0F/F562: 20 00 FE  JSR $FE00          ; wait for vblank
0F/F565: A5 62     LDA $62
0F/F567: 8D 06 20  STA $2006
0F/F56A: A5 61     LDA $61
0F/F56C: 8D 06 20  STA $2006
0F/F56F: A5 61     LDA $61
0F/F571: 85 80     STA $80
0F/F573: A2 00     LDX #$00
0F/F575: 8E 07 20  STX $2007
0F/F578: E6 80     INC $80
0F/F57A: A5 80     LDA $80
0F/F57C: 29 1F     AND #$1F
0F/F57E: D0 F5     BNE $F575
0F/F580: 20 89 F6  JSR $F689
0F/F583: A2 0F     LDX #$0F
0F/F585: A9 00     LDA #$00
0F/F587: 9D 50 03  STA $0350,X
0F/F58A: CA        DEX 
0F/F58B: 10 FA     BPL $F587
0F/F58D: A5 61     LDA $61
0F/F58F: 29 E0     AND #$E0
0F/F591: 18        CLC 
0F/F592: 69 40     ADC #$40
0F/F594: 09 02     ORA #$02
0F/F596: 85 61     STA $61
0F/F598: A5 62     LDA $62
0F/F59A: 69 00     ADC #$00
0F/F59C: 85 62     STA $62
0F/F59E: 60        RTS 

; [  ]

0F/F59F: A0 00     LDY #$00
0F/F5A1: B1 3E     LDA ($3E),Y
0F/F5A3: A2 00     LDX #$00
0F/F5A5: 86 81     STX $81
0F/F5A7: 0A        ASL 
0F/F5A8: 26 81     ROL $81
0F/F5AA: 0A        ASL 
0F/F5AB: 26 81     ROL $81
0F/F5AD: 0A        ASL 
0F/F5AE: 26 81     ROL $81
0F/F5B0: 0A        ASL 
0F/F5B1: 26 81     ROL $81
0F/F5B3: 18        CLC 
0F/F5B4: 69 00     ADC #$00
0F/F5B6: 85 80     STA $80
0F/F5B8: A5 81     LDA $81
0F/F5BA: 69 B0     ADC #$B0
0F/F5BC: 85 81     STA $81
0F/F5BE: A9 09     LDA #$09
0F/F5C0: 20 03 FE  JSR $FE03          ; switch prg bank
0F/F5C3: A0 0F     LDY #$0F
0F/F5C5: B1 80     LDA ($80),Y
0F/F5C7: 99 40 03  STA $0340,Y
0F/F5CA: 88        DEY 
0F/F5CB: 10 F8     BPL $F5C5
0F/F5CD: A5 61     LDA $61
0F/F5CF: 85 80     STA $80
0F/F5D1: 20 00 FE  JSR $FE00          ; wait for vblank
0F/F5D4: 2C 02 20  BIT $2002
0F/F5D7: A5 62     LDA $62
0F/F5D9: 8D 06 20  STA $2006
0F/F5DC: A5 61     LDA $61
0F/F5DE: 8D 06 20  STA $2006
0F/F5E1: A2 80     LDX #$80
0F/F5E3: 8E 07 20  STX $2007
0F/F5E6: E6 80     INC $80
0F/F5E8: A5 80     LDA $80
0F/F5EA: 29 1F     AND #$1F
0F/F5EC: D0 F5     BNE $F5E3
0F/F5EE: 20 89 F6  JSR $F689
0F/F5F1: A9 04     LDA #$04
0F/F5F3: 85 65     STA $65
0F/F5F5: A2 05     LDX #$05
0F/F5F7: BD 58 03  LDA $0358,X
0F/F5FA: 9D 5A 03  STA $035A,X
0F/F5FD: BD 50 03  LDA $0350,X
0F/F600: 9D 52 03  STA $0352,X
0F/F603: CA        DEX 
0F/F604: 10 F1     BPL $F5F7
0F/F606: AD 4E 03  LDA $034E
0F/F609: 8D 58 03  STA $0358
0F/F60C: AD 46 03  LDA $0346
0F/F60F: 8D 50 03  STA $0350
0F/F612: AD 4F 03  LDA $034F
0F/F615: 8D 59 03  STA $0359
0F/F618: AD 47 03  LDA $0347
0F/F61B: 8D 51 03  STA $0351
0F/F61E: A2 05     LDX #$05
0F/F620: BD 48 03  LDA $0348,X
0F/F623: 9D 4A 03  STA $034A,X
0F/F626: BD 40 03  LDA $0340,X
0F/F629: 9D 42 03  STA $0342,X
0F/F62C: CA        DEX 
0F/F62D: 10 F1     BPL $F620
0F/F62F: 20 00 FE  JSR $FE00          ; wait for vblank
0F/F632: A9 08     LDA #$08
0F/F634: 8D 06 20  STA $2006
0F/F637: A9 00     LDA #$00
0F/F639: 8D 06 20  STA $2006
0F/F63C: A2 00     LDX #$00
0F/F63E: BD 50 03  LDA $0350,X
0F/F641: 8D 07 20  STA $2007
0F/F644: E8        INX 
0F/F645: E0 10     CPX #$10
0F/F647: 90 F5     BCC $F63E
0F/F649: 20 89 F6  JSR $F689
0F/F64C: C6 65     DEC $65
0F/F64E: D0 A5     BNE $F5F5
0F/F650: 20 00 FE  JSR $FE00          ; wait for vblank
0F/F653: A5 64     LDA $64
0F/F655: 4A        LSR 
0F/F656: 4A        LSR 
0F/F657: 4A        LSR 
0F/F658: 4A        LSR 
0F/F659: 8D 06 20  STA $2006
0F/F65C: A5 64     LDA $64
0F/F65E: 0A        ASL 
0F/F65F: 0A        ASL 
0F/F660: 0A        ASL 
0F/F661: 0A        ASL 
0F/F662: 8D 06 20  STA $2006
0F/F665: A2 00     LDX #$00
0F/F667: BD 50 03  LDA $0350,X
0F/F66A: 8D 07 20  STA $2007
0F/F66D: E8        INX 
0F/F66E: E0 10     CPX #$10
0F/F670: 90 F5     BCC $F667
0F/F672: A5 62     LDA $62
0F/F674: 8D 06 20  STA $2006
0F/F677: A5 61     LDA $61
0F/F679: 8D 06 20  STA $2006
0F/F67C: A5 64     LDA $64
0F/F67E: 8D 07 20  STA $2007
0F/F681: 20 89 F6  JSR $F689
0F/F684: E6 64     INC $64
0F/F686: E6 61     INC $61
0F/F688: 60        RTS 

; [  ]

0F/F689: A9 00     LDA #$00
0F/F68B: 8D 05 20  STA $2005
0F/F68E: 8D 05 20  STA $2005
0F/F691: 60        RTS 


; "      FINAL FANTASY II "
0F/F692: 00 00 00 00 00 00 06 09 0E 01 0C 00 06 01 0E 14
0F/F6A2: 01 13 19 00 09 09 00 FE FE FE FE FE

; "       (c)1988 SQUARE "
0F/F6AE: 00 00 00 00 00 00 00 1D 1E 1F 20 21 22 22 00 13
0F/F6BE: 11 15 01 12 05 00 FE FE

; "     PROGRAMED BY NASIR " [sic]
0F/F6C6: 00 00 00 00 00 10 12 0F 07 12 01 0D 05 04 00 02
0F/F6D6: 19 00 0E 01 13 09 12 00 FE

; "CHARACTER BY YOSHITAKA AMANO "
0F/F6DF: 03 08 01 12 01 03 14 05 12 00 02 19 00 19 0F 13
0F/F6EF: 08 09 14 01 0B 01 00 01 0D 01 0E 0F 00 FE

; "  SCENARIO BY KENJI TERADA "
0F/F6FD: 00 00 13 03 05 0E 01 12 09 0F 00 02 19 00 0B 05
0F/F70D: 0E 0A 09 00 14 05 12 01 04 01 00 FE FF

; stale data
0F/F71A:                               0A 09 00 14 05 12 
0F/F726: 01 04 01 00 FE FF 0B 01 00 01 0D 01 0E 0F 00 FE
0F/F730: FE 00 00 13 03 05 0E 01 12 09 0F 00 02 19 00 0B
0F/F740: 05 0E 0A 09 00 14 05 12 01 04 01 00 FE FF

; padding
0F/F74E:                                           00 00
0F/F750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F7A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F7B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F7C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F7D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F7E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F7F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

; --------------------------------------------------------------------------

; [ set ppu ctrl ]

; unused

0F/F800: 2C 02 20  BIT $2002
0F/F803: A5 FF     LDA $FF
0F/F805: 8D 00 20  STA $2000
0F/F808: 60        RTS 

; [  ]

; unused

0F/F809: C0 0A     CPY #$0A
0F/F80B: 0A        ASL 
0F/F80C: 85 04     STA $04
0F/F80E: A2 20     LDX #$20
0F/F810: A5 63     LDA $63
0F/F812: C9 FF     CMP #$FF
0F/F814: F0 2A     BEQ $F840
0F/F816: A2 20     LDX #$20
0F/F818: C9 AF     CMP #$AF
0F/F81A: F0 02     BEQ $F81E
0F/F81C: A2 10     LDX #$10
0F/F81E: 86 05     STX $05
0F/F820: A5 64     LDA $64
0F/F822: 4A        LSR 
0F/F823: 4A        LSR 
0F/F824: 18        CLC 
0F/F825: 65 05     ADC $05
0F/F827: AA        TAX 
0F/F828: 4C 40 F8  JMP $F840

; padding
0F/F82B:                                  00 00 00 00 00
0F/F830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

; [ set ppu scroll ]

; unused

0F/F840: 8A        TXA 
0F/F841: 18        CLC 
0F/F842: 65 04     ADC $04
0F/F844: 8D 05 20  STA $2005
0F/F847: 60        RTS 

; padding
0F/F848:                         00 00 00 00 00 00 00 00
0F/F850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F8A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F8B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F8C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F8D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F8E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/F8F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

; rng table
0F/F900: 1F A6 DE BA CC 12 7D 74 1B F3 B4 88 F8 52 F4 07
0F/F910: 90 AB B3 BD AA 55 28 BC 8A 6D 0E C4 83 A9 3B 76
0F/F920: 20 7C 09 92 FD 4A A8 F0 61 E3 F2 69 6C BB 38 C3
0F/F930: AE B7 43 84 78 23 7B 9B 2D DB 3E 91 CF 02 2A B6
0F/F940: 86 EE 9C 8E B8 6F 1A 57 05 E9 73 31 D2 D9 1D FB
0F/F950: 94 9D B1 0A 3A 11 5A 47 95 2C 44 E0 6A 8C 5B 7A
0F/F960: A7 5D 36 70 E5 C7 49 DC 68 97 D8 66 A3 0F B0 9F
0F/F970: 03 D6 77 16 13 30 25 3C 10 17 AD 98 6B 2F D7 A1
0F/F980: FF A4 EB 51 FE 27 8D 93 D5 3D F6 08 75 E1 A5 46
0F/F990: 63 F5 4D DA 32 AF 40 37 D3 C0 89 67 06 21 6E 81
0F/F9A0: B5 A0 4F 0C 2E E7 1C 58 85 E8 59 CE 35 CB 1E C6
0F/F9B0: 2B 9A E6 DD F1 EC 96 CA AC 00 50 C9 4C FC 14 7E
0F/F9C0: 56 80 D0 79 BF 29 87 48 24 19 C5 22 71 7F 72 0D
0F/F9D0: CD 8F BE 3F 9E 34 ED 53 54 04 62 A2 C2 41 5E 82
0F/F9E0: 4B 26 5C 42 65 99 4E 60 8B F7 0B 33 DF D1 64 C8
0F/F9F0: C1 01 EF F9 FA E4 5F 18 B9 B2 39 D4 15 E2 EA 45

; --------------------------------------------------------------------------

; [ execute battle ]

0F/FA00: 4C 9E FA  JMP $FA9E

; [ update character equipment ]

; called from equip menu

0F/FA03: 48        PHA 
0F/FA04: 20 1F FA  JSR $FA1F          ; save field zero page
0F/FA07: A9 0E     LDA #$0E
0F/FA09: 85 3E     STA $3E
0F/FA0B: 68        PLA 
0F/FA0C: 20 FB FA  JSR $FAFB          ; update character equipment
; fallthrough

; [ return from battle ]

0F/FA0F: A9 0E     LDA #$0E
0F/FA11: 20 1A FE  JSR $FE1A          ; switch prg bank
0F/FA14: A2 B0     LDX #$B0
0F/FA16: BD FF 7B  LDA $7BFF,X        ; restore field zero page
0F/FA19: 95 FF     STA $FF,X
0F/FA1B: CA        DEX 
0F/FA1C: D0 F8     BNE $FA16
0F/FA1E: 60        RTS 

; [ save field zero page ]

0F/FA1F: A2 B0     LDX #$B0
0F/FA21: B5 FF     LDA $FF,X
0F/FA23: 9D FF 7B  STA $7BFF,X
0F/FA26: CA        DEX 
0F/FA27: D0 F8     BNE $FA21
0F/FA29: 60        RTS 

; [ wait for vblank ]

0F/FA2A: A9 3C     LDA #$3C           ; JMP $FA3C
0F/FA2C: 8D 01 01  STA $0101
0F/FA2F: A9 FA     LDA #$FA
0F/FA31: 8D 02 01  STA $0102
0F/FA34: A9 4C     LDA #$4C
0F/FA36: 8D 00 01  STA $0100
0F/FA39: 4C 39 FA  JMP $FA39

; [ return from interrupt ]

0F/FA3C: A9 40     LDA #$40           ; RTI
0F/FA3E: 8D 00 01  STA $0100
0F/FA41: AD 02 20  LDA $2002
0F/FA44: 68        PLA 
0F/FA45: 68        PLA 
0F/FA46: 68        PLA 
0F/FA47: 60        RTS 

; [ update sound ]

0F/FA48: 20 6D FA  JSR $FA6D          ; switch to prg bank 05
0F/FA4B: 20 00 BA  JSR $BA00          ; 05/BA00 (update sound effect)
0F/FA4E: A9 0D     LDA #$0D
0F/FA50: 20 1A FE  JSR $FE1A          ; switch prg bank
0F/FA53: 20 00 98  JSR $9800          ; 0D/9800 (update music)
0F/FA56: 4C 84 FA  JMP $FA84          ; return (long)

; [ play sound effect ]

0F/FA59: 20 6D FA  JSR $FA6D          ; switch to prg bank 05
0F/FA5C: 8A        TXA 
0F/FA5D: 09 40     ORA #$40
0F/FA5F: 20 03 BA  JSR $BA03          ; 05/BA03 (play sound effect)
0F/FA62: 4C 84 FA  JMP $FA84          ; return (long)

; [ switch prg bank ]

0F/FA65: A9 00     LDA #$00
0F/FA67: F0 18     BEQ $FA81
0F/FA69: A9 00     LDA #$00
0F/FA6B: F0 12     BEQ $FA7F
0F/FA6D: A9 05     LDA #$05
0F/FA6F: D0 10     BNE $FA81
0F/FA71: A9 05     LDA #$05
0F/FA73: D0 0A     BNE $FA7F
0F/FA75: A9 09     LDA #$09
0F/FA77: D0 08     BNE $FA81
0F/FA79: A9 0B     LDA #$0B
0F/FA7B: D0 02     BNE $FA7F
0F/FA7D: A9 0C     LDA #$0C
0F/FA7F: 85 3E     STA $3E
0F/FA81: 4C 1A FE  JMP $FE1A          ; switch prg bank

; [ return (long) ]

0F/FA84: A5 3E     LDA $3E
0F/FA86: 10 F9     BPL $FA81          ; branch if return bank is valid
; fallthrough

; [ jump (long) ]

0F/FA88: 48        PHA 
0F/FA89: A5 3E     LDA $3E
0F/FA8B: 85 3F     STA $3F
0F/FA8D: 68        PLA 
0F/FA8E: 20 7F FA  JSR $FA7F
0F/FA91: A9 FA     LDA #$FA           ; push return address 0F/FA9A
0F/FA93: 48        PHA 
0F/FA94: A9 99     LDA #$99
0F/FA96: 48        PHA 
0F/FA97: 6C 40 00  JMP ($0040)
0F/FA9A: A5 3F     LDA $3F
0F/FA9C: 10 E1     BPL $FA7F
0F/FA9E: 8D 48 7B  STA $7B48          ; battle id
0F/FAA1: 8A        TXA 
0F/FAA2: 29 0F     AND #$0F
0F/FAA4: 8D 49 7B  STA $7B49          ; battle bg
0F/FAA7: 20 1F FA  JSR $FA1F          ; save field zero page
0F/FAAA: 86 E5     STX $E5
0F/FAAC: 8E 60 6F  STX $6F60
0F/FAAF: A9 40     LDA #$40           ; play song $00 (silence ???)
0F/FAB1: 85 E0     STA $E0
0F/FAB3: 20 79 FA  JSR $FA79          ; switch to prg bank 0B
0F/FAB6: 20 48 FA  JSR $FA48          ; update sound
0F/FAB9: 4C 39 96  JMP $9639          ; 0B/9639 (init battle)

; [ bank 0B functions ]

0F/FABC: A9 12     LDA #$12           ; 0B/9612
0F/FABE: D0 30     BNE $FAF0
0F/FAC0: A9 15     LDA #$15           ; 0B/9615 (choose targets)
0F/FAC2: D0 2C     BNE $FAF0
0F/FAC4: A9 18     LDA #$18           ; 0B/9618
0F/FAC6: D0 28     BNE $FAF0
0F/FAC8: A9 1B     LDA #$1B           ; 0B/961B (monster death)
0F/FACA: D0 24     BNE $FAF0
0F/FACC: A9 1E     LDA #$1E           ; 0B/961E (show attack animation)
0F/FACE: D0 20     BNE $FAF0
0F/FAD0: A9 21     LDA #$21           ; 0B/9621 (copy cursor graphics to ppu)
0F/FAD2: D0 1C     BNE $FAF0
0F/FAD4: A9 24     LDA #$24           ; 0B/9624 (load character graphics)
0F/FAD6: D0 18     BNE $FAF0
0F/FAD8: A9 27     LDA #$27           ; 0B/9627 (characters run off-screen)
0F/FADA: D0 14     BNE $FAF0
0F/FADC: A9 2A     LDA #$2A           ; 0B/962A (fade out palettes)
0F/FADE: D0 10     BNE $FAF0
0F/FAE0: A9 2D     LDA #$2D           ; 0B/962D (load status graphics)
0F/FAE2: D0 0C     BNE $FAF0
0F/FAE4: A9 30     LDA #$30           ; 0B/9630 (update status animation)
0F/FAE6: D0 08     BNE $FAF0
0F/FAE8: A9 33     LDA #$33           ; 0B/9633 (characters run away)
0F/FAEA: D0 04     BNE $FAF0
0F/FAEC: A9 36     LDA #$36           ; 0B/9636 (battle defeat)
0F/FAEE: D0 00     BNE $FAF0
0F/FAF0: 85 40     STA $40
0F/FAF2: A9 96     LDA #$96
0F/FAF4: 85 41     STA $41
0F/FAF6: A9 0B     LDA #$0B
0F/FAF8: 4C 88 FA  JMP $FA88

; [ update character equipment ]

0F/FAFB: 48        PHA 
0F/FAFC: 20 65 FA  JSR $FA65          ; switch to prg bank 00
0F/FAFF: 68        PLA 
0F/FB00: 20 80 98  JSR $9880          ; 00/9880 (update character equipment)
0F/FB03: 4C 84 FA  JMP $FA84          ; return (long)

; [ battle main ]

0F/FB06: 20 7D FA  JSR $FA7D          ; switch to prg bank 0C
0F/FB09: 4C 43 8F  JMP $8F43          ; 0C/8F43 (battle main)

; [ sort values ]

0F/FB0C: 48        PHA 
0F/FB0D: 20 7D FA  JSR $FA7D          ; switch to prg bank 0C
0F/FB10: 68        PLA 
0F/FB11: 20 46 8F  JSR $8F46          ; 0C/8F46 (sort values)
0F/FB14: 4C 79 FA  JMP $FA79          ; switch to prg bank 0B

; [ bank 0C functions ]

0F/FB17: A9 49     LDA #$49           ; 0C/8F49 (init battle stats)
0F/FB19: D0 16     BNE $FB31
0F/FB1B: A9 4C     LDA #$4C           ; 0C/8F4C (copy text to buffer)
0F/FB1D: D0 12     BNE $FB31
0F/FB1F: A9 4F     LDA #$4F           ; 0C/8F4F (open window)
0F/FB21: D0 0E     BNE $FB31
0F/FB23: A9 52     LDA #$52           ; 0C/8F52 (update character/monster pointers)
0F/FB25: D0 0A     BNE $FB31
0F/FB27: A9 55     LDA #$55           ; 0C/8F55 (convert hex to decimal)
0F/FB29: D0 06     BNE $FB31
0F/FB2B: A9 58     LDA #$58           ; 0C/8F58
0F/FB2D: D0 02     BNE $FB31
0F/FB2F: A9 5B     LDA #$5B           ; 0C/8F5B (set positions for 16x16 sprite)
0F/FB31: 85 40     STA $40
0F/FB33: A9 8F     LDA #$8F
0F/FB35: 85 41     STA $41
0F/FB37: A9 0C     LDA #$0C
0F/FB39: 4C 88 FA  JMP $FA88

; [ battle victory ]

0F/FB3C: 20 71 FA  JSR $FA71          ; switch to prg bank 05
0F/FB3F: 4C 00 9F  JMP $9F00          ; 05/9F00 (battle victory)

; [ bank 05 functions ]

0F/FB42: A9 03     LDA #$03           ; 05/9F03 (open message window)
0F/FB44: D0 02     BNE $FB48
0F/FB46: A9 06     LDA #$06           ; 05/9F06 (close message window)
0F/FB48: 85 40     STA $40
0F/FB4A: A9 9F     LDA #$9F
0F/FB4C: 85 41     STA $41
0F/FB4E: A9 05     LDA #$05
0F/FB50: 4C 88 FA  JMP $FA88

; [ copy battle bg graphics to buffer ]

0F/FB53: AD 49 7B  LDA $7B49          ; battle bg
0F/FB56: 4A        LSR 
0F/FB57: 20 7C FB  JSR $FB7C          ; switch to monster/battle bg graphics bank
0F/FB5A: A8        TAY 
0F/FB5B: AA        TAX 
0F/FB5C: 20 F3 FB  JSR $FBF3          ; copy data to buffer
0F/FB5F: 4C 84 FA  JMP $FA84          ; return (long)

; [ load monster graphics ]

0F/FB62: AD 4C 7B  LDA $7B4C
0F/FB65: 20 7C FB  JSR $FB7C          ; switch to monster/battle bg graphics bank
0F/FB68: A9 0E     LDA #$0E           ; size: $0E00 bytes
0F/FB6A: 85 04     STA $04
0F/FB6C: A2 00     LDX #$00
0F/FB6E: 20 6F FD  JSR $FD6F          ; copy data to ppu
0F/FB71: E6 01     INC $01
0F/FB73: E6 03     INC $03
0F/FB75: C6 04     DEC $04
0F/FB77: D0 F3     BNE $FB6C
0F/FB79: 4C 84 FA  JMP $FA84          ; return (long)

; [ switch to monster/battle bg graphics bank ]

0F/FB7C: 4A        LSR 
0F/FB7D: 4A        LSR 
0F/FB7E: 18        CLC 
0F/FB7F: 69 07     ADC #$07
0F/FB81: 4C 1A FE  JMP $FE1A          ; switch prg bank

; [ load text graphics ]

0F/FB84: 20 75 FA  JSR $FA75          ; switch to prg bank 09
0F/FB87: A9 06     LDA #$06           ; ppu $06E0-$0FFF
0F/FB89: 85 01     STA $01
0F/FB8B: A9 E0     LDA #$E0
0F/FB8D: 85 00     STA $00
0F/FB8F: A9 8A     LDA #$8A           ; 09/8A00 (text graphics)
0F/FB91: 85 03     STA $03
0F/FB93: A9 00     LDA #$00
0F/FB95: 85 02     STA $02
0F/FB97: A9 09     LDA #$09           ; size: $0920 bytes
0F/FB99: 85 04     STA $04
0F/FB9B: 20 6F FD  JSR $FD6F          ; copy data to ppu
0F/FB9E: E6 01     INC $01
0F/FBA0: E6 03     INC $03
0F/FBA2: C6 04     DEC $04
0F/FBA4: D0 F5     BNE $FB9B
0F/FBA6: A2 20     LDX #$20
0F/FBA8: 20 6F FD  JSR $FD6F          ; copy data to ppu
0F/FBAB: 4C 84 FA  JMP $FA84          ; return (long)

; [  ]


0F/FBAE: 20 75 FA  JSR $FA75          ; switch to prg bank 09
0F/FBB1: 20 2A FA  JSR $FA2A          ; wait for vblank
0F/FBB4: 20 6F FD  JSR $FD6F          ; copy data to ppu
0F/FBB7: 4C 84 FA  JMP $FA84          ; return (long)

; [ copy sprite graphics to buffer ]

0F/FBBA: 20 75 FA  JSR $FA75          ; switch to prg bank 09
0F/FBBD: 20 F3 FB  JSR $FBF3          ; copy data to buffer
0F/FBC0: 4C 84 FA  JMP $FA84          ; return (long)

; [  ]

0F/FBC3: 20 75 FA  JSR $FA75          ; switch to prg bank 09
0F/FBC6: A9 00     LDA #$00
0F/FBC8: 85 02     STA $02
0F/FBCA: A9 9A     LDA #$9A           ; 09/9A00
0F/FBCC: 85 03     STA $03
0F/FBCE: A9 05     LDA #$05           ; ppu $0500
0F/FBD0: 85 01     STA $01
0F/FBD2: A9 00     LDA #$00
0F/FBD4: 85 00     STA $00
0F/FBD6: AA        TAX                ; size: 256 bytes
0F/FBD7: 20 6F FD  JSR $FD6F          ; copy data to ppu
0F/FBDA: E6 01     INC $01            ; ppu $0600
0F/FBDC: E6 03     INC $03            ; 09/9B00
0F/FBDE: A2 C0     LDX #$C0           ; size: 192 bytes
0F/FBE0: 20 6F FD  JSR $FD6F          ; copy data to ppu
0F/FBE3: 4C 84 FA  JMP $FA84          ; return (long)

; [  ]

0F/FBE6: A9 0C     LDA #$0C
0F/FBE8: 20 1A FE  JSR $FE1A          ; switch prg bank
0F/FBEB: A2 00     LDX #$00
0F/FBED: 20 F3 FB  JSR $FBF3          ; copy data to buffer
0F/FBF0: 4C 65 FA  JMP $FA65          ; switch to prg bank 00

; [ copy data to buffer ]

; +$00: source address
;    X: destination buffer start offset
;    Y: destination buffer end offset

0F/FBF3: 84 02     STY $02
0F/FBF5: A0 00     LDY #$00
0F/FBF7: B1 00     LDA ($00),Y
0F/FBF9: 9D 00 76  STA $7600,X
0F/FBFC: C8        INY 
0F/FBFD: E8        INX 
0F/FBFE: C4 02     CPY $02
0F/FC00: D0 F5     BNE $FBF7
0F/FC02: 60        RTS 

; [ load battle palette ]

; X: palette id
; Y: color ram offset

0F/FC03: A9 00     LDA #$00
0F/FC05: 20 1A FE  JSR $FE1A          ; switch prg bank
0F/FC08: BD 00 97  LDA $9700,X
0F/FC0B: 99 A8 79  STA $79A8,Y
0F/FC0E: BD 80 97  LDA $9780,X
0F/FC11: 99 A9 79  STA $79A9,Y
0F/FC14: BD 00 98  LDA $9800,X
0F/FC17: 99 AA 79  STA $79AA,Y
0F/FC1A: 4C 84 FA  JMP $FA84          ; return (long)

; [ load battle palette ]

; unused ???

0F/FC1D: A9 00     LDA #$00
0F/FC1F: 20 1A FE  JSR $FE1A          ; switch prg bank
0F/FC22: BD 00 97  LDA $9700,X
0F/FC25: 85 00     STA $00
0F/FC27: BD 80 97  LDA $9780,X
0F/FC2A: 85 01     STA $01
0F/FC2C: BD 00 98  LDA $9800,X
0F/FC2F: 85 02     STA $02
0F/FC31: 4C 84 FA  JMP $FA84          ; return (long)

; [ update joypad input ]

0F/FC34: A5 35     LDA $35            ; save buttons pressed last frame
0F/FC36: 85 34     STA $34
0F/FC38: A9 01     LDA #$01
0F/FC3A: 8D 16 40  STA $4016
0F/FC3D: A9 00     LDA #$00
0F/FC3F: 8D 16 40  STA $4016
0F/FC42: A2 08     LDX #$08
0F/FC44: AD 16 40  LDA $4016
0F/FC47: 6A        ROR 
0F/FC48: B0 01     BCS $FC4B
0F/FC4A: 6A        ROR                ; support expansion controller
0F/FC4B: 66 35     ROR $35
0F/FC4D: CA        DEX 
0F/FC4E: D0 F4     BNE $FC44          ; next button
0F/FC50: A5 34     LDA $34
0F/FC52: 05 35     ORA $35
0F/FC54: D0 07     BNE $FC5D          ; branch if buttons pressed or released
; no buttons pressed
0F/FC56: 85 34     STA $34
0F/FC58: A9 08     LDA #$08           ; reset repeat counter
0F/FC5A: 85 36     STA $36
0F/FC5C: 60        RTS 
0F/FC5D: A5 34     LDA $34
0F/FC5F: 25 35     AND $35
0F/FC61: D0 09     BNE $FC6C          ; branch if new buttons pressed
; new buttons pressed
0F/FC63: A5 34     LDA $34            ; buttons pressed last frame
0F/FC65: 49 FF     EOR #$FF
0F/FC67: 25 35     AND $35
0F/FC69: 85 34     STA $34
0F/FC6B: 60        RTS 
; buttons held
0F/FC6C: C6 36     DEC $36            ; decrement repeat counter
0F/FC6E: D0 F3     BNE $FC63
0F/FC70: A9 04     LDA #$04           ; reset repeat counter
0F/FC72: 85 36     STA $36
0F/FC74: A5 35     LDA $35
0F/FC76: 85 34     STA $34
0F/FC78: 60        RTS 

; [ multiply ]

; +$02 <- A * X

0F/FC79: 85 00     STA $00
0F/FC7B: 86 01     STX $01
0F/FC7D: A2 08     LDX #$08
0F/FC7F: A9 00     LDA #$00
0F/FC81: 85 03     STA $03
0F/FC83: 85 02     STA $02
0F/FC85: 66 01     ROR $01
0F/FC87: 90 07     BCC $FC90
0F/FC89: 18        CLC 
0F/FC8A: A5 00     LDA $00
0F/FC8C: 65 03     ADC $03
0F/FC8E: 85 03     STA $03
0F/FC90: 66 03     ROR $03
0F/FC92: 66 02     ROR $02
0F/FC94: CA        DEX 
0F/FC95: D0 EE     BNE $FC85
0F/FC97: 60        RTS 

; [ multiply (16-bit) ]

; +++$04 <- +$00 * +$02

0F/FC98: A2 10     LDX #$10
0F/FC9A: A9 00     LDA #$00
0F/FC9C: 85 05     STA $05
0F/FC9E: 85 04     STA $04
0F/FCA0: 85 07     STA $07
0F/FCA2: 85 06     STA $06
0F/FCA4: 66 03     ROR $03
0F/FCA6: 66 02     ROR $02
0F/FCA8: 90 0D     BCC $FCB7
0F/FCAA: 18        CLC 
0F/FCAB: A5 00     LDA $00
0F/FCAD: 65 06     ADC $06
0F/FCAF: 85 06     STA $06
0F/FCB1: A5 01     LDA $01
0F/FCB3: 65 07     ADC $07
0F/FCB5: 85 07     STA $07
0F/FCB7: 66 07     ROR $07
0F/FCB9: 66 06     ROR $06
0F/FCBB: 66 05     ROR $05
0F/FCBD: 66 04     ROR $04
0F/FCBF: CA        DEX 
0F/FCC0: D0 E2     BNE $FCA4
0F/FCC2: 60        RTS 

; [ divide (16-bit) ]

; +$04 = +$00 / +$02
; +$06 = remainder

0F/FCC3: A9 00     LDA #$00
0F/FCC5: 85 05     STA $05
0F/FCC7: 85 04     STA $04
0F/FCC9: 85 07     STA $07
0F/FCCB: 85 06     STA $06
0F/FCCD: A5 00     LDA $00
0F/FCCF: 05 01     ORA $01
0F/FCD1: F0 33     BEQ $FD06          ; return if denominator is zero
0F/FCD3: A5 02     LDA $02
0F/FCD5: 05 03     ORA $03
0F/FCD7: F0 2D     BEQ $FD06          ; return if numerator is zero
0F/FCD9: A2 10     LDX #$10
0F/FCDB: 26 00     ROL $00
0F/FCDD: 26 01     ROL $01
0F/FCDF: 26 06     ROL $06
0F/FCE1: 26 07     ROL $07
0F/FCE3: 38        SEC 
0F/FCE4: A5 06     LDA $06
0F/FCE6: E5 02     SBC $02
0F/FCE8: 85 06     STA $06
0F/FCEA: A5 07     LDA $07
0F/FCEC: E5 03     SBC $03
0F/FCEE: 85 07     STA $07
0F/FCF0: B0 0D     BCS $FCFF
0F/FCF2: A5 06     LDA $06
0F/FCF4: 65 02     ADC $02
0F/FCF6: 85 06     STA $06
0F/FCF8: A5 07     LDA $07
0F/FCFA: 65 03     ADC $03
0F/FCFC: 85 07     STA $07
0F/FCFE: 18        CLC 
0F/FCFF: 26 04     ROL $04
0F/FD01: 26 05     ROL $05
0F/FD03: CA        DEX 
0F/FD04: D0 D5     BNE $FCDB
0F/FD06: 60        RTS 

; [ get low/high nybble ]

0F/FD07: 48        PHA 
0F/FD08: 29 0F     AND #$0F
0F/FD0A: AA        TAX 
0F/FD0B: 68        PLA 
0F/FD0C: 4A        LSR 
0F/FD0D: 4A        LSR 
0F/FD0E: 4A        LSR 
0F/FD0F: 4A        LSR 
0F/FD10: 60        RTS 

; [ random (X..A) ]

0F/FD11: 86 08     STX $08
0F/FD13: E0 FF     CPX #$FF
0F/FD15: D0 03     BNE $FD1A
0F/FD17: 8A        TXA 
0F/FD18: D0 2B     BNE $FD45
0F/FD1A: C9 00     CMP #$00
0F/FD1C: F0 27     BEQ $FD45
0F/FD1E: C5 08     CMP $08
0F/FD20: F0 23     BEQ $FD45
0F/FD22: 38        SEC 
0F/FD23: E5 08     SBC $08
0F/FD25: 85 00     STA $00
0F/FD27: A9 80     LDA #$80
0F/FD29: 85 02     STA $02
0F/FD2B: 0A        ASL 
0F/FD2C: 85 01     STA $01
0F/FD2E: A6 42     LDX $42
0F/FD30: BD 48 7A  LDA $7A48,X
0F/FD33: E6 42     INC $42
0F/FD35: 85 03     STA $03
0F/FD37: 20 98 FC  JSR $FC98          ; multiply (16-bit)
0F/FD3A: A6 06     LDX $06
0F/FD3C: A5 05     LDA $05
0F/FD3E: 10 01     BPL $FD41
0F/FD40: E8        INX 
0F/FD41: 8A        TXA 
0F/FD42: 18        CLC 
0F/FD43: 65 08     ADC $08
0F/FD45: 60        RTS 

; [ wait for first battlefield scanline ]

0F/FD46: 2C 02 20  BIT $2002
0F/FD49: 70 FB     BVS $FD46          ; wait for first battlefield scanline
0F/FD4B: A5 3B     LDA $3B
0F/FD4D: 8D 00 20  STA $2000
0F/FD50: A5 39     LDA $39
0F/FD52: 8D 05 20  STA $2005
0F/FD55: A5 37     LDA $37
0F/FD57: 8D 05 20  STA $2005
0F/FD5A: 60        RTS 

; [ wait for first menu scanline ]

0F/FD5B: 2C 02 20  BIT $2002
0F/FD5E: 50 FB     BVC $FD5B          ; wait for sprite 0 hit
0F/FD60: A5 3A     LDA $3A
0F/FD62: 29 EF     AND #$EF           ; bg pattern table at ppu $0000
0F/FD64: 8D 00 20  STA $2000
0F/FD67: A5 38     LDA $38
0F/FD69: 8D 05 20  STA $2005
0F/FD6C: 4C 48 FA  JMP $FA48          ; update sound

; [ copy data to ppu ]

;    X: size
; +$00: ppu address
; +$02: source address

0F/FD6F: 20 7E FD  JSR $FD7E          ; set ppu address
0F/FD72: A0 00     LDY #$00
0F/FD74: B1 02     LDA ($02),Y        ; source address
0F/FD76: 8D 07 20  STA $2007
0F/FD79: C8        INY 
0F/FD7A: CA        DEX 
0F/FD7B: D0 F7     BNE $FD74
0F/FD7D: 60        RTS 

; [ set ppu address ]

0F/FD7E: AD 02 20  LDA $2002          ; latch ppu
0F/FD81: A5 01     LDA $01
0F/FD83: 8D 06 20  STA $2006
0F/FD86: A5 00     LDA $00
0F/FD88: 8D 06 20  STA $2006
0F/FD8B: 60        RTS 

; [ load text ]

;    X: bank
; +$62: pointer table address
;  $64: index
;  $AA: buffer offset

0F/FD8C: 8A        TXA 
0F/FD8D: 20 1A FE  JSR $FE1A          ; switch prg bank
0F/FD90: A9 00     LDA #$00
0F/FD92: A8        TAY 
0F/FD93: 85 65     STA $65
0F/FD95: A5 64     LDA $64
0F/FD97: 0A        ASL 
0F/FD98: 26 65     ROL $65
0F/FD9A: 18        CLC 
0F/FD9B: 65 62     ADC $62            ; get pointer offset
0F/FD9D: 85 64     STA $64
0F/FD9F: A5 65     LDA $65
0F/FDA1: 65 63     ADC $63
0F/FDA3: 85 65     STA $65
0F/FDA5: B1 64     LDA ($64),Y        ; get pointer
0F/FDA7: 48        PHA 
0F/FDA8: C8        INY 
0F/FDA9: B1 64     LDA ($64),Y
0F/FDAB: 85 65     STA $65
0F/FDAD: 68        PLA 
0F/FDAE: 85 64     STA $64
0F/FDB0: 88        DEY 
0F/FDB1: AE AA 00  LDX $00AA
0F/FDB4: B1 64     LDA ($64),Y        ; copy to buffer
0F/FDB6: 9D 47 7D  STA $7D47,X
0F/FDB9: F0 06     BEQ $FDC1          ; branch if null-terminator
0F/FDBB: C8        INY 
0F/FDBC: E8        INX 
0F/FDBD: E0 11     CPX #$11           ; max 17 bytes
0F/FDBF: D0 F3     BNE $FDB4
0F/FDC1: 8E BF 7C  STX $7CBF
0F/FDC4: 4C 84 FA  JMP $FA84          ; return (long)

; [ get equipped weapon types ]

0F/FDC7: A9 0C     LDA #$0C
0F/FDC9: 20 1A FE  JSR $FE1A          ; switch prg bank
0F/FDCC: A5 D0     LDA $D0
0F/FDCE: 20 DF FD  JSR $FDDF          ; get weapon type
0F/FDD1: 85 1E     STA $1E
0F/FDD3: A5 D1     LDA $D1
0F/FDD5: 20 DF FD  JSR $FDDF          ; get weapon type
0F/FDD8: 85 1F     STA $1F
0F/FDDA: A9 0B     LDA #$0B
0F/FDDC: 4C 1A FE  JMP $FE1A          ; switch prg bank

; [ get weapon type ]

0F/FDDF: A2 09     LDX #$09
0F/FDE1: 20 79 FC  JSR $FC79          ; multiply
0F/FDE4: A5 02     LDA $02
0F/FDE6: 69 F6     ADC #$F6           ; 0C/80F6 (weapon properties)
0F/FDE8: 85 00     STA $00
0F/FDEA: A5 03     LDA $03
0F/FDEC: 69 80     ADC #$80
0F/FDEE: 85 01     STA $01
0F/FDF0: A0 00     LDY #$00
0F/FDF2: B1 00     LDA ($00),Y
0F/FDF4: 60        RTS 

; stale code (now at 0F/FDBD)
0F/FDF5: -- 11     CPX #$11
0F/FDF6: D0 F3     BNE $FDEB
0F/FDF8: 4C 34 FA  JMP $FA34

0F/FDFB: 00 00 00 00 00

; --------------------------------------------------------------------------

0F/FE00: 4C AD FE  JMP $FEAD          ; wait for vblank
0F/FE03: 4C 1A FE  JMP $FE1A          ; switch prg bank

; [ set mmc1 control ]

0F/FE06: 8D FF 9F  STA $9FFF
0F/FE09: 4A        LSR 
0F/FE0A: 8D FF 9F  STA $9FFF
0F/FE0D: 4A        LSR 
0F/FE0E: 8D FF 9F  STA $9FFF
0F/FE11: 4A        LSR 
0F/FE12: 8D FF 9F  STA $9FFF
0F/FE15: 4A        LSR 
0F/FE16: 8D FF 9F  STA $9FFF
0F/FE19: 60        RTS 

; [ switch prg bank ]

0F/FE1A: 8D F9 FF  STA $FFF9
0F/FE1D: 4A        LSR 
0F/FE1E: 8D F9 FF  STA $FFF9
0F/FE21: 4A        LSR 
0F/FE22: 8D F9 FF  STA $FFF9
0F/FE25: 4A        LSR 
0F/FE26: 8D F9 FF  STA $FFF9
0F/FE29: 4A        LSR 
0F/FE2A: 8D F9 FF  STA $FFF9
0F/FE2D: 60        RTS 

; [ reset ]

0F/FE2E: 78        SEI 
0F/FE2F: A9 00     LDA #$00
0F/FE31: 8D 00 20  STA $2000
0F/FE34: 85 FF     STA $FF
0F/FE36: 85 FE     STA $FE
0F/FE38: A9 06     LDA #$06
0F/FE3A: 8D 01 20  STA $2001
0F/FE3D: D8        CLD 
0F/FE3E: A2 02     LDX #$02           ; wait 2 frames
0F/FE40: 2C 02 20  BIT $2002
0F/FE43: 10 FB     BPL $FE40
0F/FE45: CA        DEX 
0F/FE46: D0 F8     BNE $FE40
0F/FE48: A9 80     LDA #$80
0F/FE4A: 8D FF 9F  STA $9FFF
0F/FE4D: 8D FF BF  STA $BFFF
0F/FE50: 8D FF DF  STA $DFFF
0F/FE53: 8D F9 FF  STA $FFF9
0F/FE56: A9 0E     LDA #$0E
0F/FE58: 20 06 FE  JSR $FE06          ; set mmc1 control
0F/FE5B: 8D FF BF  STA $BFFF
0F/FE5E: 8D FF BF  STA $BFFF
0F/FE61: 8D FF BF  STA $BFFF
0F/FE64: 8D FF BF  STA $BFFF
0F/FE67: 8D FF BF  STA $BFFF
0F/FE6A: 8D FF DF  STA $DFFF
0F/FE6D: 8D FF DF  STA $DFFF
0F/FE70: 8D FF DF  STA $DFFF
0F/FE73: 8D FF DF  STA $DFFF
0F/FE76: 8D FF DF  STA $DFFF
0F/FE79: A9 06     LDA #$06
0F/FE7B: 20 1A FE  JSR $FE1A          ; switch prg bank
0F/FE7E: 8D 16 40  STA $4016
0F/FE81: 8D 15 40  STA $4015
0F/FE84: 8D 10 40  STA $4010
0F/FE87: A9 C0     LDA #$C0
0F/FE89: 8D 17 40  STA $4017
0F/FE8C: CA        DEX 
0F/FE8D: 9A        TXS 
0F/FE8E: 8E 00 01  STX $0100
0F/FE91: 20 BF FE  JSR $FEBF          ; reset ppu
0F/FE94: A9 06     LDA #$06
0F/FE96: 20 1A FE  JSR $FE1A          ; switch prg bank
0F/FE99: A9 40     LDA #$40           ; RTI
0F/FE9B: 8D 00 01  STA $0100
0F/FE9E: 4C 00 C0  JMP $C000

; [ return from interrupt ]

0F/FEA1: AD 02 20  LDA $2002
0F/FEA4: A9 40     LDA #$40           ; RTI
0F/FEA6: 8D 00 01  STA $0100
0F/FEA9: 68        PLA 
0F/FEAA: 68        PLA 
0F/FEAB: 68        PLA 
0F/FEAC: 60        RTS 

; [ wait for vblank ]

0F/FEAD: A9 A1     LDA #$A1           ; JMP $FEA1
0F/FEAF: 8D 01 01  STA $0101
0F/FEB2: A9 FE     LDA #$FE
0F/FEB4: 8D 02 01  STA $0102
0F/FEB7: A9 4C     LDA #$4C
0F/FEB9: 8D 00 01  STA $0100
0F/FEBC: 4C BC FE  JMP $FEBC

; [ reset ppu ]

0F/FEBF: A9 00     LDA #$00
0F/FEC1: 8D 01 20  STA $2001
0F/FEC4: AD 02 20  LDA $2002
0F/FEC7: A9 3F     LDA #$3F
0F/FEC9: 8D 06 20  STA $2006
0F/FECC: A9 00     LDA #$00
0F/FECE: 8D 06 20  STA $2006
0F/FED1: A2 10     LDX #$10
0F/FED3: A9 0F     LDA #$0F
0F/FED5: 8D 07 20  STA $2007
0F/FED8: CA        DEX 
0F/FED9: D0 FA     BNE $FED5
0F/FEDB: A9 3F     LDA #$3F
0F/FEDD: 8D 06 20  STA $2006
0F/FEE0: A9 00     LDA #$00
0F/FEE2: 8D 06 20  STA $2006
0F/FEE5: 8D 06 20  STA $2006
0F/FEE8: 8D 06 20  STA $2006
0F/FEEB: 60        RTS 

; padding
0F/FEEC:                                     00 00 00 00
0F/FEF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/FF00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/FF10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/FF20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/FF30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/FF40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/FF50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/FF60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/FF70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/FF80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/FF90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0F/FFA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

; --------------------------------------------------------------------------

; [ init sram ]

0F/FFB0: A9 00     LDA #$00
0F/FFB2: 20 03 FE  JSR $FE03          ; switch prg bank
0F/FFB5: 20 09 9C  JSR $9C09          ; 00/9C09 (init sram)
0F/FFB8: A9 0E     LDA #$0E
0F/FFBA: 4C 03 FE  JMP $FE03          ; switch prg bank

0F/FFBD: 00 00 00

; --------------------------------------------------------------------------

; [ decompress world tilemap (minimap) ]

0F/FFC0: A9 01     LDA #$01
0F/FFC2: 20 03 FE  JSR $FE03          ; switch prg bank
0F/FFC5: 20 B0 BF  JSR $BFB0          ; 01/BFB0 (decompress world tilemap)
0F/FFC8: A9 09     LDA #$09
0F/FFCA: 4C 03 FE  JMP $FE03          ; switch prg bank

; padding
0F/FFCD:                                        00 00 00
0F/FFD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

; --------------------------------------------------------------------------

; " FINAL FANTASY 2"
0F/FFE0: 20 46 49 4E 41 4C 20 46 41 4E 54 41 53 59 20 32

; unknown
0F/FFF0: 5814
0F/FFF2: 0000
0F/FFF4: 0448  ; this value is the same in ff1, 0458 in ff1/2
0F/FFF6: 0E01  ; 0C01 in ff1, 0F01 in ff1/2
0F/FFF8: E2C3  ; not a brk vector, "C3" might be the developer code for square

0F/FFFA: 0100  ; nmi
0F/FFFC: FE2E  ; reset
0F/FFFE: FEBC  ; irq

; --------------------------------------------------------------------------
